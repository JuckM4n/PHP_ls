Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/IdentificationHeaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/IdentificationHeaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/IdentificationHeaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/IdentificationHeaderTest.php	(date 1495187412000)
@@ -0,0 +1,184 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Mime_Headers_IdentificationHeaderTest extends \PHPUnit\Framework\TestCase
+{
+    public function testTypeIsIdHeader()
+    {
+        $header = $this->getHeader('Message-ID');
+        $this->assertEquals(Swift_Mime_Header::TYPE_ID, $header->getFieldType());
+    }
+
+    public function testValueMatchesMsgIdSpec()
+    {
+        /* -- RFC 2822, 3.6.4.
+     message-id      =       "Message-ID:" msg-id CRLF
+
+     in-reply-to     =       "In-Reply-To:" 1*msg-id CRLF
+
+     references      =       "References:" 1*msg-id CRLF
+
+     msg-id          =       [CFWS] "<" id-left "@" id-right ">" [CFWS]
+
+     id-left         =       dot-atom-text / no-fold-quote / obs-id-left
+
+     id-right        =       dot-atom-text / no-fold-literal / obs-id-right
+
+     no-fold-quote   =       DQUOTE *(qtext / quoted-pair) DQUOTE
+
+     no-fold-literal =       "[" *(dtext / quoted-pair) "]"
+     */
+
+        $header = $this->getHeader('Message-ID');
+        $header->setId('id-left@id-right');
+        $this->assertEquals('<id-left@id-right>', $header->getFieldBody());
+    }
+
+    public function testIdCanBeRetrievedVerbatim()
+    {
+        $header = $this->getHeader('Message-ID');
+        $header->setId('id-left@id-right');
+        $this->assertEquals('id-left@id-right', $header->getId());
+    }
+
+    public function testMultipleIdsCanBeSet()
+    {
+        $header = $this->getHeader('References');
+        $header->setIds(array('a@b', 'x@y'));
+        $this->assertEquals(array('a@b', 'x@y'), $header->getIds());
+    }
+
+    public function testSettingMultipleIdsProducesAListValue()
+    {
+        /* -- RFC 2822, 3.6.4.
+     The "References:" and "In-Reply-To:" field each contain one or more
+     unique message identifiers, optionally separated by CFWS.
+
+     .. SNIP ..
+
+     in-reply-to     =       "In-Reply-To:" 1*msg-id CRLF
+
+     references      =       "References:" 1*msg-id CRLF
+     */
+
+        $header = $this->getHeader('References');
+        $header->setIds(array('a@b', 'x@y'));
+        $this->assertEquals('<a@b> <x@y>', $header->getFieldBody());
+    }
+
+    public function testIdLeftCanBeQuoted()
+    {
+        /* -- RFC 2822, 3.6.4.
+     id-left         =       dot-atom-text / no-fold-quote / obs-id-left
+     */
+
+        $header = $this->getHeader('References');
+        $header->setId('"ab"@c');
+        $this->assertEquals('"ab"@c', $header->getId());
+        $this->assertEquals('<"ab"@c>', $header->getFieldBody());
+    }
+
+    public function testIdLeftCanContainAnglesAsQuotedPairs()
+    {
+        /* -- RFC 2822, 3.6.4.
+     no-fold-quote   =       DQUOTE *(qtext / quoted-pair) DQUOTE
+     */
+
+        $header = $this->getHeader('References');
+        $header->setId('"a\\<\\>b"@c');
+        $this->assertEquals('"a\\<\\>b"@c', $header->getId());
+        $this->assertEquals('<"a\\<\\>b"@c>', $header->getFieldBody());
+    }
+
+    public function testIdLeftCanBeDotAtom()
+    {
+        $header = $this->getHeader('References');
+        $header->setId('a.b+&%$.c@d');
+        $this->assertEquals('a.b+&%$.c@d', $header->getId());
+        $this->assertEquals('<a.b+&%$.c@d>', $header->getFieldBody());
+    }
+
+    /**
+     * @expectedException \Exception
+     * @expectedMessageException "a b c" is not valid id-left
+     */
+    public function testInvalidIdLeftThrowsException()
+    {
+        $header = $this->getHeader('References');
+        $header->setId('a b c@d');
+    }
+
+    public function testIdRightCanBeDotAtom()
+    {
+        /* -- RFC 2822, 3.6.4.
+     id-right        =       dot-atom-text / no-fold-literal / obs-id-right
+     */
+
+        $header = $this->getHeader('References');
+        $header->setId('a@b.c+&%$.d');
+        $this->assertEquals('a@b.c+&%$.d', $header->getId());
+        $this->assertEquals('<a@b.c+&%$.d>', $header->getFieldBody());
+    }
+
+    public function testIdRightCanBeLiteral()
+    {
+        /* -- RFC 2822, 3.6.4.
+     no-fold-literal =       "[" *(dtext / quoted-pair) "]"
+     */
+
+        $header = $this->getHeader('References');
+        $header->setId('a@[1.2.3.4]');
+        $this->assertEquals('a@[1.2.3.4]', $header->getId());
+        $this->assertEquals('<a@[1.2.3.4]>', $header->getFieldBody());
+    }
+
+    /**
+     * @expectedException \Exception
+     * @expectedMessageException "b c d" is not valid id-right
+     */
+    public function testInvalidIdRightThrowsException()
+    {
+        $header = $this->getHeader('References');
+        $header->setId('a@b c d');
+    }
+
+    /**
+     * @expectedException \Exception
+     * @expectedMessageException "abc" is does not contain @
+     */
+    public function testMissingAtSignThrowsException()
+    {
+        /* -- RFC 2822, 3.6.4.
+     msg-id          =       [CFWS] "<" id-left "@" id-right ">" [CFWS]
+     */
+        $header = $this->getHeader('References');
+        $header->setId('abc');
+    }
+
+    public function testSetBodyModel()
+    {
+        $header = $this->getHeader('Message-ID');
+        $header->setFieldBodyModel('a@b');
+        $this->assertEquals(array('a@b'), $header->getIds());
+    }
+
+    public function testGetBodyModel()
+    {
+        $header = $this->getHeader('Message-ID');
+        $header->setId('a@b');
+        $this->assertEquals(array('a@b'), $header->getFieldBodyModel());
+    }
+
+    public function testStringValue()
+    {
+        $header = $this->getHeader('References');
+        $header->setIds(array('a@b', 'x@y'));
+        $this->assertEquals('References: <a@b> <x@y>'."\r\n", $header->toString());
+    }
+
+    private function getHeader($name)
+    {
+        return new Swift_Mime_Headers_IdentificationHeader($name, new EmailValidator());
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/MailboxHeaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/MailboxHeaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/MailboxHeaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/MailboxHeaderTest.php	(date 1495187412000)
@@ -0,0 +1,329 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Mime_Headers_MailboxHeaderTest extends \SwiftMailerTestCase
+{
+    /* -- RFC 2822, 3.6.2 for all tests.
+     */
+
+    private $charset = 'utf-8';
+
+    public function testTypeIsMailboxHeader()
+    {
+        $header = $this->getHeader('To', $this->getEncoder('Q', true));
+        $this->assertEquals(Swift_Mime_Header::TYPE_MAILBOX, $header->getFieldType());
+    }
+
+    public function testMailboxIsSetForAddress()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setAddresses('chris@swiftmailer.org');
+        $this->assertEquals(array('chris@swiftmailer.org'),
+            $header->getNameAddressStrings()
+            );
+    }
+
+    public function testMailboxIsRenderedForNameAddress()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array('chris@swiftmailer.org' => 'Chris Corbyn'));
+        $this->assertEquals(
+            array('Chris Corbyn <chris@swiftmailer.org>'), $header->getNameAddressStrings()
+            );
+    }
+
+    public function testAddressCanBeReturnedForAddress()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setAddresses('chris@swiftmailer.org');
+        $this->assertEquals(array('chris@swiftmailer.org'), $header->getAddresses());
+    }
+
+    public function testAddressCanBeReturnedForNameAddress()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array('chris@swiftmailer.org' => 'Chris Corbyn'));
+        $this->assertEquals(array('chris@swiftmailer.org'), $header->getAddresses());
+    }
+
+    public function testQuotesInNameAreQuoted()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn, "DHE"',
+            ));
+        $this->assertEquals(
+            array('"Chris Corbyn, \"DHE\"" <chris@swiftmailer.org>'),
+            $header->getNameAddressStrings()
+            );
+    }
+
+    public function testEscapeCharsInNameAreQuoted()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn, \\escaped\\',
+            ));
+        $this->assertEquals(
+            array('"Chris Corbyn, \\\\escaped\\\\" <chris@swiftmailer.org>'),
+            $header->getNameAddressStrings()
+            );
+    }
+
+    public function testGetMailboxesReturnsNameValuePairs()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn, DHE',
+            ));
+        $this->assertEquals(
+            array('chris@swiftmailer.org' => 'Chris Corbyn, DHE'), $header->getNameAddresses()
+            );
+    }
+
+    public function testMultipleAddressesCanBeSetAndFetched()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setAddresses(array(
+            'chris@swiftmailer.org', 'mark@swiftmailer.org',
+            ));
+        $this->assertEquals(
+            array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
+            $header->getAddresses()
+            );
+    }
+
+    public function testMultipleAddressesAsMailboxes()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setAddresses(array(
+            'chris@swiftmailer.org', 'mark@swiftmailer.org',
+            ));
+        $this->assertEquals(
+            array('chris@swiftmailer.org' => null, 'mark@swiftmailer.org' => null),
+            $header->getNameAddresses()
+            );
+    }
+
+    public function testMultipleAddressesAsMailboxStrings()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setAddresses(array(
+            'chris@swiftmailer.org', 'mark@swiftmailer.org',
+            ));
+        $this->assertEquals(
+            array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
+            $header->getNameAddressStrings()
+            );
+    }
+
+    public function testMultipleNamedMailboxesReturnsMultipleAddresses()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn',
+            ));
+        $this->assertEquals(
+            array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
+            $header->getAddresses()
+            );
+    }
+
+    public function testMultipleNamedMailboxesReturnsMultipleMailboxes()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn',
+            ));
+        $this->assertEquals(array(
+                'chris@swiftmailer.org' => 'Chris Corbyn',
+                'mark@swiftmailer.org' => 'Mark Corbyn',
+                ),
+            $header->getNameAddresses()
+            );
+    }
+
+    public function testMultipleMailboxesProducesMultipleMailboxStrings()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn',
+            ));
+        $this->assertEquals(array(
+                'Chris Corbyn <chris@swiftmailer.org>',
+                'Mark Corbyn <mark@swiftmailer.org>',
+                ),
+            $header->getNameAddressStrings()
+            );
+    }
+
+    public function testSetAddressesOverwritesAnyMailboxes()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn',
+            ));
+        $this->assertEquals(
+            array('chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn', ),
+            $header->getNameAddresses()
+            );
+        $this->assertEquals(
+            array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
+            $header->getAddresses()
+            );
+
+        $header->setAddresses(array('chris@swiftmailer.org', 'mark@swiftmailer.org'));
+
+        $this->assertEquals(
+            array('chris@swiftmailer.org' => null, 'mark@swiftmailer.org' => null),
+            $header->getNameAddresses()
+            );
+        $this->assertEquals(
+            array('chris@swiftmailer.org', 'mark@swiftmailer.org'),
+            $header->getAddresses()
+            );
+    }
+
+    public function testNameIsEncodedIfNonAscii()
+    {
+        $name = 'C'.pack('C', 0x8F).'rbyn';
+
+        $encoder = $this->getEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($name, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('C=8Frbyn');
+
+        $header = $this->getHeader('From', $encoder);
+        $header->setNameAddresses(array('chris@swiftmailer.org' => 'Chris '.$name));
+
+        $addresses = $header->getNameAddressStrings();
+        $this->assertEquals(
+            'Chris =?'.$this->charset.'?Q?C=8Frbyn?= <chris@swiftmailer.org>',
+            array_shift($addresses)
+            );
+    }
+
+    public function testEncodingLineLengthCalculations()
+    {
+        /* -- RFC 2047, 2.
+        An 'encoded-word' may not be more than 75 characters long, including
+        'charset', 'encoding', 'encoded-text', and delimiters.
+        */
+
+        $name = 'C'.pack('C', 0x8F).'rbyn';
+
+        $encoder = $this->getEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($name, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('C=8Frbyn');
+
+        $header = $this->getHeader('From', $encoder);
+        $header->setNameAddresses(array('chris@swiftmailer.org' => 'Chris '.$name));
+
+        $header->getNameAddressStrings();
+    }
+
+    public function testGetValueReturnsMailboxStringValue()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            ));
+        $this->assertEquals(
+            'Chris Corbyn <chris@swiftmailer.org>', $header->getFieldBody()
+            );
+    }
+
+    public function testGetValueReturnsMailboxStringValueForMultipleMailboxes()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn',
+            ));
+        $this->assertEquals(
+            'Chris Corbyn <chris@swiftmailer.org>, Mark Corbyn <mark@swiftmailer.org>',
+            $header->getFieldBody()
+            );
+    }
+
+    public function testRemoveAddressesWithSingleValue()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn',
+            ));
+        $header->removeAddresses('chris@swiftmailer.org');
+        $this->assertEquals(array('mark@swiftmailer.org'),
+            $header->getAddresses()
+            );
+    }
+
+    public function testRemoveAddressesWithList()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn',
+            ));
+        $header->removeAddresses(
+            array('chris@swiftmailer.org', 'mark@swiftmailer.org')
+            );
+        $this->assertEquals(array(), $header->getAddresses());
+    }
+
+    public function testSetBodyModel()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setFieldBodyModel('chris@swiftmailer.org');
+        $this->assertEquals(array('chris@swiftmailer.org' => null), $header->getNameAddresses());
+    }
+
+    public function testGetBodyModel()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setAddresses(array('chris@swiftmailer.org'));
+        $this->assertEquals(array('chris@swiftmailer.org' => null), $header->getFieldBodyModel());
+    }
+
+    public function testToString()
+    {
+        $header = $this->getHeader('From', $this->getEncoder('Q', true));
+        $header->setNameAddresses(array(
+            'chris@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org' => 'Mark Corbyn',
+            ));
+        $this->assertEquals(
+            'From: Chris Corbyn <chris@swiftmailer.org>, '.
+            'Mark Corbyn <mark@swiftmailer.org>'."\r\n",
+            $header->toString()
+            );
+    }
+
+    private function getHeader($name, $encoder)
+    {
+        $header = new Swift_Mime_Headers_MailboxHeader($name, $encoder, new EmailValidator());
+        $header->setCharset($this->charset);
+
+        return $header;
+    }
+
+    private function getEncoder($type, $stub = false)
+    {
+        $encoder = $this->getMockery('Swift_Mime_HeaderEncoder')->shouldIgnoreMissing();
+        $encoder->shouldReceive('getName')
+                ->zeroOrMoreTimes()
+                ->andReturn($type);
+
+        return $encoder;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/ParameterizedHeaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/ParameterizedHeaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/ParameterizedHeaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/ParameterizedHeaderTest.php	(date 1495187412000)
@@ -0,0 +1,396 @@
+<?php
+
+class Swift_Mime_Headers_ParameterizedHeaderTest extends \SwiftMailerTestCase
+{
+    private $charset = 'utf-8';
+    private $lang = 'en-us';
+
+    public function testTypeIsParameterizedHeader()
+    {
+        $header = $this->getHeader('Content-Type',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $this->assertEquals(Swift_Mime_Header::TYPE_PARAMETERIZED, $header->getFieldType());
+    }
+
+    public function testValueIsReturnedVerbatim()
+    {
+        $header = $this->getHeader('Content-Type',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $header->setValue('text/plain');
+        $this->assertEquals('text/plain', $header->getValue());
+    }
+
+    public function testParametersAreAppended()
+    {
+        /* -- RFC 2045, 5.1
+        parameter := attribute "=" value
+
+     attribute := token
+                                    ; Matching of attributes
+                                    ; is ALWAYS case-insensitive.
+
+     value := token / quoted-string
+
+     token := 1*<any (US-ASCII) CHAR except SPACE, CTLs,
+                 or tspecials>
+
+     tspecials :=  "(" / ")" / "<" / ">" / "@" /
+                   "," / ";" / ":" / "\" / <">
+                   "/" / "[" / "]" / "?" / "="
+                   ; Must be in quoted-string,
+                   ; to use within parameter values
+        */
+
+        $header = $this->getHeader('Content-Type',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $header->setValue('text/plain');
+        $header->setParameters(array('charset' => 'utf-8'));
+        $this->assertEquals('text/plain; charset=utf-8', $header->getFieldBody());
+    }
+
+    public function testSpaceInParamResultsInQuotedString()
+    {
+        $header = $this->getHeader('Content-Disposition',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $header->setValue('attachment');
+        $header->setParameters(array('filename' => 'my file.txt'));
+        $this->assertEquals('attachment; filename="my file.txt"',
+            $header->getFieldBody()
+            );
+    }
+
+    public function testLongParamsAreBrokenIntoMultipleAttributeStrings()
+    {
+        /* -- RFC 2231, 3.
+        The asterisk character ("*") followed
+        by a decimal count is employed to indicate that multiple parameters
+        are being used to encapsulate a single parameter value.  The count
+        starts at 0 and increments by 1 for each subsequent section of the
+        parameter value.  Decimal values are used and neither leading zeroes
+        nor gaps in the sequence are allowed.
+
+        The original parameter value is recovered by concatenating the
+        various sections of the parameter, in order.  For example, the
+        content-type field
+
+                Content-Type: message/external-body; access-type=URL;
+         URL*0="ftp://";
+         URL*1="cs.utk.edu/pub/moore/bulk-mailer/bulk-mailer.tar"
+
+        is semantically identical to
+
+                Content-Type: message/external-body; access-type=URL;
+                    URL="ftp://cs.utk.edu/pub/moore/bulk-mailer/bulk-mailer.tar"
+
+        Note that quotes around parameter values are part of the value
+        syntax; they are NOT part of the value itself.  Furthermore, it is
+        explicitly permitted to have a mixture of quoted and unquoted
+        continuation fields.
+        */
+
+        $value = str_repeat('a', 180);
+
+        $encoder = $this->getParameterEncoder();
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($value, \Mockery::any(), 63, \Mockery::any())
+                ->andReturn(str_repeat('a', 63)."\r\n".
+                    str_repeat('a', 63)."\r\n".str_repeat('a', 54));
+
+        $header = $this->getHeader('Content-Disposition',
+            $this->getHeaderEncoder('Q', true), $encoder
+            );
+        $header->setValue('attachment');
+        $header->setParameters(array('filename' => $value));
+        $header->setMaxLineLength(78);
+        $this->assertEquals(
+            'attachment; '.
+            'filename*0*=utf-8\'\''.str_repeat('a', 63).";\r\n ".
+            'filename*1*='.str_repeat('a', 63).";\r\n ".
+            'filename*2*='.str_repeat('a', 54),
+            $header->getFieldBody()
+            );
+    }
+
+    public function testEncodedParamDataIncludesCharsetAndLanguage()
+    {
+        /* -- RFC 2231, 4.
+        Asterisks ("*") are reused to provide the indicator that language and
+        character set information is present and encoding is being used. A
+        single quote ("'") is used to delimit the character set and language
+        information at the beginning of the parameter value. Percent signs
+        ("%") are used as the encoding flag, which agrees with RFC 2047.
+
+        Specifically, an asterisk at the end of a parameter name acts as an
+        indicator that character set and language information may appear at
+        the beginning of the parameter value. A single quote is used to
+        separate the character set, language, and actual value information in
+        the parameter value string, and an percent sign is used to flag
+        octets encoded in hexadecimal.  For example:
+
+                Content-Type: application/x-stuff;
+         title*=us-ascii'en-us'This%20is%20%2A%2A%2Afun%2A%2A%2A
+
+        Note that it is perfectly permissible to leave either the character
+        set or language field blank.  Note also that the single quote
+        delimiters MUST be present even when one of the field values is
+        omitted.
+        */
+
+        $value = str_repeat('a', 20).pack('C', 0x8F).str_repeat('a', 10);
+
+        $encoder = $this->getParameterEncoder();
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($value, 12, 62, \Mockery::any())
+                ->andReturn(str_repeat('a', 20).'%8F'.str_repeat('a', 10));
+
+        $header = $this->getHeader('Content-Disposition',
+            $this->getHeaderEncoder('Q', true), $encoder
+            );
+        $header->setValue('attachment');
+        $header->setParameters(array('filename' => $value));
+        $header->setMaxLineLength(78);
+        $header->setLanguage($this->lang);
+        $this->assertEquals(
+            'attachment; filename*='.$this->charset."'".$this->lang."'".
+            str_repeat('a', 20).'%8F'.str_repeat('a', 10),
+            $header->getFieldBody()
+            );
+    }
+
+    public function testMultipleEncodedParamLinesAreFormattedCorrectly()
+    {
+        /* -- RFC 2231, 4.1.
+        Character set and language information may be combined with the
+        parameter continuation mechanism. For example:
+
+        Content-Type: application/x-stuff
+     title*0*=us-ascii'en'This%20is%20even%20more%20
+     title*1*=%2A%2A%2Afun%2A%2A%2A%20
+     title*2="isn't it!"
+
+        Note that:
+
+     (1)   Language and character set information only appear at
+           the beginning of a given parameter value.
+
+     (2)   Continuations do not provide a facility for using more
+           than one character set or language in the same
+           parameter value.
+
+     (3)   A value presented using multiple continuations may
+           contain a mixture of encoded and unencoded segments.
+
+     (4)   The first segment of a continuation MUST be encoded if
+           language and character set information are given.
+
+     (5)   If the first segment of a continued parameter value is
+           encoded the language and character set field delimiters
+           MUST be present even when the fields are left blank.
+        */
+
+        $value = str_repeat('a', 20).pack('C', 0x8F).str_repeat('a', 60);
+
+        $encoder = $this->getParameterEncoder();
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($value, 12, 62, \Mockery::any())
+                ->andReturn(str_repeat('a', 20).'%8F'.str_repeat('a', 28)."\r\n".
+                    str_repeat('a', 32));
+
+        $header = $this->getHeader('Content-Disposition',
+            $this->getHeaderEncoder('Q', true), $encoder
+            );
+        $header->setValue('attachment');
+        $header->setParameters(array('filename' => $value));
+        $header->setMaxLineLength(78);
+        $header->setLanguage($this->lang);
+        $this->assertEquals(
+            'attachment; filename*0*='.$this->charset."'".$this->lang."'".
+            str_repeat('a', 20).'%8F'.str_repeat('a', 28).";\r\n ".
+            'filename*1*='.str_repeat('a', 32),
+            $header->getFieldBody()
+            );
+    }
+
+    public function testToString()
+    {
+        $header = $this->getHeader('Content-Type',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $header->setValue('text/html');
+        $header->setParameters(array('charset' => 'utf-8'));
+        $this->assertEquals('Content-Type: text/html; charset=utf-8'."\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testValueCanBeEncodedIfNonAscii()
+    {
+        $value = 'fo'.pack('C', 0x8F).'bar';
+
+        $encoder = $this->getHeaderEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($value, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('fo=8Fbar');
+
+        $header = $this->getHeader('X-Foo', $encoder, $this->getParameterEncoder(true));
+        $header->setValue($value);
+        $header->setParameters(array('lookslike' => 'foobar'));
+        $this->assertEquals('X-Foo: =?utf-8?Q?fo=8Fbar?=; lookslike=foobar'."\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testValueAndParamCanBeEncodedIfNonAscii()
+    {
+        $value = 'fo'.pack('C', 0x8F).'bar';
+
+        $encoder = $this->getHeaderEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($value, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('fo=8Fbar');
+
+        $paramEncoder = $this->getParameterEncoder();
+        $paramEncoder->shouldReceive('encodeString')
+                     ->once()
+                     ->with($value, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                     ->andReturn('fo%8Fbar');
+
+        $header = $this->getHeader('X-Foo', $encoder, $paramEncoder);
+        $header->setValue($value);
+        $header->setParameters(array('says' => $value));
+        $this->assertEquals("X-Foo: =?utf-8?Q?fo=8Fbar?=; says*=utf-8''fo%8Fbar\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testParamsAreEncodedWithEncodedWordsIfNoParamEncoderSet()
+    {
+        $value = 'fo'.pack('C', 0x8F).'bar';
+
+        $encoder = $this->getHeaderEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($value, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('fo=8Fbar');
+
+        $header = $this->getHeader('X-Foo', $encoder, null);
+        $header->setValue('bar');
+        $header->setParameters(array('says' => $value));
+        $this->assertEquals("X-Foo: bar; says=\"=?utf-8?Q?fo=8Fbar?=\"\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testLanguageInformationAppearsInEncodedWords()
+    {
+        /* -- RFC 2231, 5.
+        5.  Language specification in Encoded Words
+
+        RFC 2047 provides support for non-US-ASCII character sets in RFC 822
+        message header comments, phrases, and any unstructured text field.
+        This is done by defining an encoded word construct which can appear
+        in any of these places.  Given that these are fields intended for
+        display, it is sometimes necessary to associate language information
+        with encoded words as well as just the character set.  This
+        specification extends the definition of an encoded word to allow the
+        inclusion of such information.  This is simply done by suffixing the
+        character set specification with an asterisk followed by the language
+        tag.  For example:
+
+                    From: =?US-ASCII*EN?Q?Keith_Moore?= <moore@cs.utk.edu>
+        */
+
+        $value = 'fo'.pack('C', 0x8F).'bar';
+
+        $encoder = $this->getHeaderEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($value, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('fo=8Fbar');
+
+        $paramEncoder = $this->getParameterEncoder();
+        $paramEncoder->shouldReceive('encodeString')
+                     ->once()
+                     ->with($value, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                     ->andReturn('fo%8Fbar');
+
+        $header = $this->getHeader('X-Foo', $encoder, $paramEncoder);
+        $header->setLanguage('en');
+        $header->setValue($value);
+        $header->setParameters(array('says' => $value));
+        $this->assertEquals("X-Foo: =?utf-8*en?Q?fo=8Fbar?=; says*=utf-8'en'fo%8Fbar\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testSetBodyModel()
+    {
+        $header = $this->getHeader('Content-Type',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $header->setFieldBodyModel('text/html');
+        $this->assertEquals('text/html', $header->getValue());
+    }
+
+    public function testGetBodyModel()
+    {
+        $header = $this->getHeader('Content-Type',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $header->setValue('text/plain');
+        $this->assertEquals('text/plain', $header->getFieldBodyModel());
+    }
+
+    public function testSetParameter()
+    {
+        $header = $this->getHeader('Content-Type',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $header->setParameters(array('charset' => 'utf-8', 'delsp' => 'yes'));
+        $header->setParameter('delsp', 'no');
+        $this->assertEquals(array('charset' => 'utf-8', 'delsp' => 'no'),
+            $header->getParameters()
+            );
+    }
+
+    public function testGetParameter()
+    {
+        $header = $this->getHeader('Content-Type',
+            $this->getHeaderEncoder('Q', true), $this->getParameterEncoder(true)
+            );
+        $header->setParameters(array('charset' => 'utf-8', 'delsp' => 'yes'));
+        $this->assertEquals('utf-8', $header->getParameter('charset'));
+    }
+
+    private function getHeader($name, $encoder, $paramEncoder)
+    {
+        $header = new Swift_Mime_Headers_ParameterizedHeader($name, $encoder, $paramEncoder);
+        $header->setCharset($this->charset);
+
+        return $header;
+    }
+
+    private function getHeaderEncoder($type, $stub = false)
+    {
+        $encoder = $this->getMockery('Swift_Mime_HeaderEncoder')->shouldIgnoreMissing();
+        $encoder->shouldReceive('getName')
+                ->zeroOrMoreTimes()
+                ->andReturn($type);
+
+        return $encoder;
+    }
+
+    private function getParameterEncoder($stub = false)
+    {
+        return $this->getMockery('Swift_Encoder')->shouldIgnoreMissing();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/PathHeaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/PathHeaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/PathHeaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/PathHeaderTest.php	(date 1495187412000)
@@ -0,0 +1,78 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Mime_Headers_PathHeaderTest extends \PHPUnit\Framework\TestCase
+{
+    public function testTypeIsPathHeader()
+    {
+        $header = $this->getHeader('Return-Path');
+        $this->assertEquals(Swift_Mime_Header::TYPE_PATH, $header->getFieldType());
+    }
+
+    public function testSingleAddressCanBeSetAndFetched()
+    {
+        $header = $this->getHeader('Return-Path');
+        $header->setAddress('chris@swiftmailer.org');
+        $this->assertEquals('chris@swiftmailer.org', $header->getAddress());
+    }
+
+    /**
+     * @expectedException \Exception
+     */
+    public function testAddressMustComplyWithRfc2822()
+    {
+        $header = $this->getHeader('Return-Path');
+        $header->setAddress('chr is@swiftmailer.org');
+    }
+
+    public function testValueIsAngleAddrWithValidAddress()
+    {
+        /* -- RFC 2822, 3.6.7.
+
+            return          =       "Return-Path:" path CRLF
+
+            path            =       ([CFWS] "<" ([CFWS] / addr-spec) ">" [CFWS]) /
+                                                            obs-path
+     */
+
+        $header = $this->getHeader('Return-Path');
+        $header->setAddress('chris@swiftmailer.org');
+        $this->assertEquals('<chris@swiftmailer.org>', $header->getFieldBody());
+    }
+
+    public function testValueIsEmptyAngleBracketsIfEmptyAddressSet()
+    {
+        $header = $this->getHeader('Return-Path');
+        $header->setAddress('');
+        $this->assertEquals('<>', $header->getFieldBody());
+    }
+
+    public function testSetBodyModel()
+    {
+        $header = $this->getHeader('Return-Path');
+        $header->setFieldBodyModel('foo@bar.tld');
+        $this->assertEquals('foo@bar.tld', $header->getAddress());
+    }
+
+    public function testGetBodyModel()
+    {
+        $header = $this->getHeader('Return-Path');
+        $header->setAddress('foo@bar.tld');
+        $this->assertEquals('foo@bar.tld', $header->getFieldBodyModel());
+    }
+
+    public function testToString()
+    {
+        $header = $this->getHeader('Return-Path');
+        $header->setAddress('chris@swiftmailer.org');
+        $this->assertEquals('Return-Path: <chris@swiftmailer.org>'."\r\n",
+            $header->toString()
+            );
+    }
+
+    private function getHeader($name)
+    {
+        return new Swift_Mime_Headers_PathHeader($name, new EmailValidator());
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Authenticator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Authenticator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Authenticator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Authenticator.php	(date 1495187412000)
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An Authentication mechanism.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Transport_Esmtp_Authenticator
+{
+    /**
+     * Get the name of the AUTH mechanism this Authenticator handles.
+     *
+     * @return string
+     */
+    public function getAuthKeyword();
+
+    /**
+     * Try to authenticate the user with $username and $password.
+     *
+     * @param Swift_Transport_SmtpAgent $agent
+     * @param string                    $username
+     * @param string                    $password
+     *
+     * @return bool
+     */
+    public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/AuthHandler.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/AuthHandler.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/AuthHandler.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/AuthHandler.php	(date 1495187412000)
@@ -0,0 +1,263 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An ESMTP handler for AUTH support.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Transport_Esmtp_AuthHandler implements Swift_Transport_EsmtpHandler
+{
+    /**
+     * Authenticators available to process the request.
+     *
+     * @var Swift_Transport_Esmtp_Authenticator[]
+     */
+    private $authenticators = array();
+
+    /**
+     * The username for authentication.
+     *
+     * @var string
+     */
+    private $username;
+
+    /**
+     * The password for authentication.
+     *
+     * @var string
+     */
+    private $password;
+
+    /**
+     * The auth mode for authentication.
+     *
+     * @var string
+     */
+    private $auth_mode;
+
+    /**
+     * The ESMTP AUTH parameters available.
+     *
+     * @var string[]
+     */
+    private $esmtpParams = array();
+
+    /**
+     * Create a new AuthHandler with $authenticators for support.
+     *
+     * @param Swift_Transport_Esmtp_Authenticator[] $authenticators
+     */
+    public function __construct(array $authenticators)
+    {
+        $this->setAuthenticators($authenticators);
+    }
+
+    /**
+     * Set the Authenticators which can process a login request.
+     *
+     * @param Swift_Transport_Esmtp_Authenticator[] $authenticators
+     */
+    public function setAuthenticators(array $authenticators)
+    {
+        $this->authenticators = $authenticators;
+    }
+
+    /**
+     * Get the Authenticators which can process a login request.
+     *
+     * @return Swift_Transport_Esmtp_Authenticator[]
+     */
+    public function getAuthenticators()
+    {
+        return $this->authenticators;
+    }
+
+    /**
+     * Set the username to authenticate with.
+     *
+     * @param string $username
+     */
+    public function setUsername($username)
+    {
+        $this->username = $username;
+    }
+
+    /**
+     * Get the username to authenticate with.
+     *
+     * @return string
+     */
+    public function getUsername()
+    {
+        return $this->username;
+    }
+
+    /**
+     * Set the password to authenticate with.
+     *
+     * @param string $password
+     */
+    public function setPassword($password)
+    {
+        $this->password = $password;
+    }
+
+    /**
+     * Get the password to authenticate with.
+     *
+     * @return string
+     */
+    public function getPassword()
+    {
+        return $this->password;
+    }
+
+    /**
+     * Set the auth mode to use to authenticate.
+     *
+     * @param string $mode
+     */
+    public function setAuthMode($mode)
+    {
+        $this->auth_mode = $mode;
+    }
+
+    /**
+     * Get the auth mode to use to authenticate.
+     *
+     * @return string
+     */
+    public function getAuthMode()
+    {
+        return $this->auth_mode;
+    }
+
+    /**
+     * Get the name of the ESMTP extension this handles.
+     *
+     * @return bool
+     */
+    public function getHandledKeyword()
+    {
+        return 'AUTH';
+    }
+
+    /**
+     * Set the parameters which the EHLO greeting indicated.
+     *
+     * @param string[] $parameters
+     */
+    public function setKeywordParams(array $parameters)
+    {
+        $this->esmtpParams = $parameters;
+    }
+
+    /**
+     * Runs immediately after a EHLO has been issued.
+     *
+     * @param Swift_Transport_SmtpAgent $agent to read/write
+     */
+    public function afterEhlo(Swift_Transport_SmtpAgent $agent)
+    {
+        if ($this->username) {
+            $count = 0;
+            foreach ($this->getAuthenticatorsForAgent() as $authenticator) {
+                if (in_array(strtolower($authenticator->getAuthKeyword()),
+                    array_map('strtolower', $this->esmtpParams))) {
+                    ++$count;
+                    if ($authenticator->authenticate($agent, $this->username, $this->password)) {
+                        return;
+                    }
+                }
+            }
+            throw new Swift_TransportException(
+                'Failed to authenticate on SMTP server with username "'.
+                $this->username.'" using '.$count.' possible authenticators'
+                );
+        }
+    }
+
+    /**
+     * Not used.
+     */
+    public function getMailParams()
+    {
+        return array();
+    }
+
+    /**
+     * Not used.
+     */
+    public function getRcptParams()
+    {
+        return array();
+    }
+
+    /**
+     * Not used.
+     */
+    public function onCommand(Swift_Transport_SmtpAgent $agent, $command, $codes = array(), &$failedRecipients = null, &$stop = false)
+    {
+    }
+
+    /**
+     * Returns +1, -1 or 0 according to the rules for usort().
+     *
+     * This method is called to ensure extensions can be execute in an appropriate order.
+     *
+     * @param string $esmtpKeyword to compare with
+     *
+     * @return int
+     */
+    public function getPriorityOver($esmtpKeyword)
+    {
+        return 0;
+    }
+
+    /**
+     * Returns an array of method names which are exposed to the Esmtp class.
+     *
+     * @return string[]
+     */
+    public function exposeMixinMethods()
+    {
+        return array('setUsername', 'getUsername', 'setPassword', 'getPassword', 'setAuthMode', 'getAuthMode');
+    }
+
+    /**
+     * Not used.
+     */
+    public function resetState()
+    {
+    }
+
+    /**
+     * Returns the authenticator list for the given agent.
+     *
+     * @param Swift_Transport_SmtpAgent $agent
+     *
+     * @return array
+     */
+    protected function getAuthenticatorsForAgent()
+    {
+        if (!$mode = strtolower($this->auth_mode)) {
+            return $this->authenticators;
+        }
+
+        foreach ($this->authenticators as $authenticator) {
+            if (strtolower($authenticator->getAuthKeyword()) == $mode) {
+                return array($authenticator);
+            }
+        }
+
+        throw new Swift_TransportException('Auth mode '.$mode.' is invalid');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/DateHeaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/DateHeaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/DateHeaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/DateHeaderTest.php	(date 1495187412000)
@@ -0,0 +1,90 @@
+<?php
+
+class Swift_Mime_Headers_DateHeaderTest extends \PHPUnit\Framework\TestCase
+{
+    /* --
+    The following tests refer to RFC 2822, section 3.6.1 and 3.3.
+    */
+
+    public function testTypeIsDateHeader()
+    {
+        $header = $this->getHeader('Date');
+        $this->assertEquals(Swift_Mime_Header::TYPE_DATE, $header->getFieldType());
+    }
+
+    public function testGetDateTime()
+    {
+        $dateTime = new DateTimeImmutable();
+        $header = $this->getHeader('Date');
+        $header->setDateTime($dateTime);
+        $this->assertSame($dateTime, $header->getDateTime());
+    }
+
+    public function testDateTimeCanBeSetBySetter()
+    {
+        $dateTime = new DateTimeImmutable();
+        $header = $this->getHeader('Date');
+        $header->setDateTime($dateTime);
+        $this->assertSame($dateTime, $header->getDateTime());
+    }
+
+    public function testDateTimeIsConvertedToImmutable()
+    {
+        $dateTime = new DateTime();
+        $header = $this->getHeader('Date');
+        $header->setDateTime($dateTime);
+        $this->assertInstanceOf('DateTimeImmutable', $header->getDateTime());
+        $this->assertEquals($dateTime->getTimestamp(), $header->getDateTime()->getTimestamp());
+        $this->assertEquals($dateTime->getTimezone(), $header->getDateTime()->getTimezone());
+    }
+
+    public function testDateTimeIsImmutable()
+    {
+        $dateTime = new DateTime('2000-01-01 12:00:00 Europe/Berlin');
+        $header = $this->getHeader('Date');
+        $header->setDateTime($dateTime);
+
+        $dateTime->setDate(2002, 2, 2);
+        $this->assertEquals('Sat, 01 Jan 2000 12:00:00 +0100', $header->getDateTime()->format('r'));
+        $this->assertEquals('Sat, 01 Jan 2000 12:00:00 +0100', $header->getFieldBody());
+    }
+
+    public function testDateTimeIsConvertedToRfc2822Date()
+    {
+        $dateTime = new DateTimeImmutable('2000-01-01 12:00:00 Europe/Berlin');
+        $header = $this->getHeader('Date');
+        $header->setDateTime($dateTime);
+        $this->assertEquals('Sat, 01 Jan 2000 12:00:00 +0100', $header->getFieldBody());
+    }
+
+    public function testSetBodyModel()
+    {
+        $dateTime = new DateTimeImmutable();
+        $header = $this->getHeader('Date');
+        $header->setFieldBodyModel($dateTime);
+        $this->assertEquals($dateTime->format('r'), $header->getFieldBody());
+    }
+
+    public function testGetBodyModel()
+    {
+        $dateTime = new DateTimeImmutable();
+        $header = $this->getHeader('Date');
+        $header->setDateTime($dateTime);
+        $this->assertEquals($dateTime, $header->getFieldBodyModel());
+    }
+
+    public function testToString()
+    {
+        $dateTime = new DateTimeImmutable('2000-01-01 12:00:00 Europe/Berlin');
+        $header = $this->getHeader('Date');
+        $header->setDateTime($dateTime);
+        $this->assertEquals("Date: Sat, 01 Jan 2000 12:00:00 +0100\r\n",
+            $header->toString()
+            );
+    }
+
+    private function getHeader($name)
+    {
+        return new Swift_Mime_Headers_DateHeader($name);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/PlainContentEncoderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/PlainContentEncoderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/PlainContentEncoderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/PlainContentEncoderTest.php	(date 1495187412000)
@@ -0,0 +1,171 @@
+<?php
+
+class Swift_Mime_ContentEncoder_PlainContentEncoderTest extends \SwiftMailerTestCase
+{
+    public function testNameCanBeSpecifiedInConstructor()
+    {
+        $encoder = $this->getEncoder('7bit');
+        $this->assertEquals('7bit', $encoder->getName());
+
+        $encoder = $this->getEncoder('8bit');
+        $this->assertEquals('8bit', $encoder->getName());
+    }
+
+    public function testNoOctetsAreModifiedInString()
+    {
+        $encoder = $this->getEncoder('7bit');
+        foreach (range(0x00, 0xFF) as $octet) {
+            $byte = pack('C', $octet);
+            $this->assertIdenticalBinary($byte, $encoder->encodeString($byte));
+        }
+    }
+
+    public function testNoOctetsAreModifiedInByteStream()
+    {
+        $encoder = $this->getEncoder('7bit');
+        foreach (range(0x00, 0xFF) as $octet) {
+            $byte = pack('C', $octet);
+
+            $os = $this->createOutputByteStream();
+            $is = $this->createInputByteStream();
+            $collection = new Swift_StreamCollector();
+
+            $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+            $os->shouldReceive('read')
+               ->once()
+               ->andReturn($byte);
+            $os->shouldReceive('read')
+               ->zeroOrMoreTimes()
+               ->andReturn(false);
+
+            $encoder->encodeByteStream($os, $is);
+            $this->assertIdenticalBinary($byte, $collection->content);
+        }
+    }
+
+    public function testLineLengthCanBeSpecified()
+    {
+        $encoder = $this->getEncoder('7bit');
+
+        $chars = array();
+        for ($i = 0; $i < 50; ++$i) {
+            $chars[] = 'a';
+        }
+        $input = implode(' ', $chars); //99 chars long
+
+        $this->assertEquals(
+            'a a a a a a a a a a a a a a a a a a a a a a a a a '."\r\n".//50 *
+            'a a a a a a a a a a a a a a a a a a a a a a a a a',            //99
+            $encoder->encodeString($input, 0, 50),
+            '%s: Lines should be wrapped at 50 chars'
+            );
+    }
+
+    public function testLineLengthCanBeSpecifiedInByteStream()
+    {
+        $encoder = $this->getEncoder('7bit');
+
+        $os = $this->createOutputByteStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+
+        for ($i = 0; $i < 50; ++$i) {
+            $os->shouldReceive('read')
+               ->once()
+               ->andReturn('a ');
+        }
+
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $encoder->encodeByteStream($os, $is, 0, 50);
+        $this->assertEquals(
+            str_repeat('a ', 25)."\r\n".str_repeat('a ', 25),
+            $collection->content
+            );
+    }
+
+    public function testencodeStringGeneratesCorrectCrlf()
+    {
+        $encoder = $this->getEncoder('7bit', true);
+        $this->assertEquals("a\r\nb", $encoder->encodeString("a\rb"),
+            '%s: Line endings should be standardized'
+            );
+        $this->assertEquals("a\r\nb", $encoder->encodeString("a\nb"),
+            '%s: Line endings should be standardized'
+            );
+        $this->assertEquals("a\r\n\r\nb", $encoder->encodeString("a\n\rb"),
+            '%s: Line endings should be standardized'
+            );
+        $this->assertEquals("a\r\n\r\nb", $encoder->encodeString("a\r\rb"),
+            '%s: Line endings should be standardized'
+            );
+        $this->assertEquals("a\r\n\r\nb", $encoder->encodeString("a\n\nb"),
+            '%s: Line endings should be standardized'
+            );
+    }
+
+    public function crlfProvider()
+    {
+        return array(
+            array("\r", "a\r\nb"),
+            array("\n", "a\r\nb"),
+            array("\n\r", "a\r\n\r\nb"),
+            array("\n\n", "a\r\n\r\nb"),
+            array("\r\r", "a\r\n\r\nb"),
+        );
+    }
+
+    /**
+     * @dataProvider crlfProvider
+     */
+    public function testCanonicEncodeByteStreamGeneratesCorrectCrlf($test, $expected)
+    {
+        $encoder = $this->getEncoder('7bit', true);
+
+        $os = $this->createOutputByteStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('a');
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn($test);
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('b');
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $encoder->encodeByteStream($os, $is);
+        $this->assertEquals($expected, $collection->content);
+    }
+
+    private function getEncoder($name, $canonical = false)
+    {
+        return new Swift_Mime_ContentEncoder_PlainContentEncoder($name, $canonical);
+    }
+
+    private function createOutputByteStream($stub = false)
+    {
+        return $this->getMockery('Swift_OutputByteStream')->shouldIgnoreMissing();
+    }
+
+    private function createInputByteStream($stub = false)
+    {
+        return $this->getMockery('Swift_InputByteStream')->shouldIgnoreMissing();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/QpContentEncoderTest.php	(date 1495187412000)
@@ -0,0 +1,516 @@
+<?php
+
+class Swift_Mime_ContentEncoder_QpContentEncoderTest extends \SwiftMailerTestCase
+{
+    public function testNameIsQuotedPrintable()
+    {
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder(
+            $this->createCharacterStream(true)
+            );
+        $this->assertEquals('quoted-printable', $encoder->getName());
+    }
+
+    /* -- RFC 2045, 6.7 --
+    (1)   (General 8bit representation) Any octet, except a CR or
+                    LF that is part of a CRLF line break of the canonical
+                    (standard) form of the data being encoded, may be
+                    represented by an "=" followed by a two digit
+                    hexadecimal representation of the octet's value.  The
+                    digits of the hexadecimal alphabet, for this purpose,
+                    are "0123456789ABCDEF".  Uppercase letters must be
+                    used; lowercase letters are not allowed.  Thus, for
+                    example, the decimal value 12 (US-ASCII form feed) can
+                    be represented by "=0C", and the decimal value 61 (US-
+                    ASCII EQUAL SIGN) can be represented by "=3D".  This
+                    rule must be followed except when the following rules
+                    allow an alternative encoding.
+                    */
+
+    public function testPermittedCharactersAreNotEncoded()
+    {
+        /* -- RFC 2045, 6.7 --
+        (2)   (Literal representation) Octets with decimal values of
+                    33 through 60 inclusive, and 62 through 126, inclusive,
+                    MAY be represented as the US-ASCII characters which
+                    correspond to those octets (EXCLAMATION POINT through
+                    LESS THAN, and GREATER THAN through TILDE,
+                    respectively).
+                    */
+
+        foreach (array_merge(range(33, 60), range(62, 126)) as $ordinal) {
+            $char = chr($ordinal);
+
+            $os = $this->createOutputByteStream(true);
+            $charStream = $this->createCharacterStream();
+            $is = $this->createInputByteStream();
+            $collection = new Swift_StreamCollector();
+
+            $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+            $charStream->shouldReceive('flushContents')
+                       ->once();
+            $charStream->shouldReceive('importByteStream')
+                       ->once()
+                       ->with($os);
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array($ordinal));
+            $charStream->shouldReceive('readBytes')
+                       ->zeroOrMoreTimes()
+                       ->andReturn(false);
+
+            $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+            $encoder->encodeByteStream($os, $is);
+            $this->assertIdenticalBinary($char, $collection->content);
+        }
+    }
+
+    public function testLinearWhiteSpaceAtLineEndingIsEncoded()
+    {
+        /* -- RFC 2045, 6.7 --
+        (3)   (White Space) Octets with values of 9 and 32 MAY be
+                    represented as US-ASCII TAB (HT) and SPACE characters,
+                    respectively, but MUST NOT be so represented at the end
+                    of an encoded line.  Any TAB (HT) or SPACE characters
+                    on an encoded line MUST thus be followed on that line
+                    by a printable character.  In particular, an "=" at the
+                    end of an encoded line, indicating a soft line break
+                    (see rule #5) may follow one or more TAB (HT) or SPACE
+                    characters.  It follows that an octet with decimal
+                    value 9 or 32 appearing at the end of an encoded line
+                    must be represented according to Rule #1.  This rule is
+                    necessary because some MTAs (Message Transport Agents,
+                    programs which transport messages from one user to
+                    another, or perform a portion of such transfers) are
+                    known to pad lines of text with SPACEs, and others are
+                    known to remove "white space" characters from the end
+                    of a line.  Therefore, when decoding a Quoted-Printable
+                    body, any trailing white space on a line must be
+                    deleted, as it will necessarily have been added by
+                    intermediate transport agents.
+                    */
+
+        $HT = chr(0x09); //9
+        $SPACE = chr(0x20); //32
+
+        //HT
+        $os = $this->createOutputByteStream(true);
+        $charStream = $this->createCharacterStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+        $charStream->shouldReceive('flushContents')
+                   ->once();
+        $charStream->shouldReceive('importByteStream')
+                   ->once()
+                   ->with($os);
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('a')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x09));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x09));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('b')));
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+        $encoder->encodeByteStream($os, $is);
+
+        $this->assertEquals("a\t=09\r\nb", $collection->content);
+
+        //SPACE
+        $os = $this->createOutputByteStream(true);
+        $charStream = $this->createCharacterStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+        $charStream->shouldReceive('flushContents')
+                   ->once();
+        $charStream->shouldReceive('importByteStream')
+                   ->once()
+                   ->with($os);
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('a')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x20));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x20));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('b')));
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+        $encoder->encodeByteStream($os, $is);
+
+        $this->assertEquals("a =20\r\nb", $collection->content);
+    }
+
+    public function testCRLFIsLeftAlone()
+    {
+        /*
+        (4)   (Line Breaks) A line break in a text body, represented
+                    as a CRLF sequence in the text canonical form, must be
+                    represented by a (RFC 822) line break, which is also a
+                    CRLF sequence, in the Quoted-Printable encoding.  Since
+                    the canonical representation of media types other than
+                    text do not generally include the representation of
+                    line breaks as CRLF sequences, no hard line breaks
+                    (i.e. line breaks that are intended to be meaningful
+                    and to be displayed to the user) can occur in the
+                    quoted-printable encoding of such types.  Sequences
+                    like "=0D", "=0A", "=0A=0D" and "=0D=0A" will routinely
+                    appear in non-text data represented in quoted-
+                    printable, of course.
+
+                    Note that many implementations may elect to encode the
+                    local representation of various content types directly
+                    rather than converting to canonical form first,
+                    encoding, and then converting back to local
+                    representation.  In particular, this may apply to plain
+                    text material on systems that use newline conventions
+                    other than a CRLF terminator sequence.  Such an
+                    implementation optimization is permissible, but only
+                    when the combined canonicalization-encoding step is
+                    equivalent to performing the three steps separately.
+                    */
+
+        $os = $this->createOutputByteStream(true);
+        $charStream = $this->createCharacterStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+        $charStream->shouldReceive('flushContents')
+                   ->once();
+        $charStream->shouldReceive('importByteStream')
+                   ->once()
+                   ->with($os);
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('a')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('b')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('c')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+        $encoder->encodeByteStream($os, $is);
+        $this->assertEquals("a\r\nb\r\nc\r\n", $collection->content);
+    }
+
+    public function testLinesLongerThan76CharactersAreSoftBroken()
+    {
+        /*
+        (5)   (Soft Line Breaks) The Quoted-Printable encoding
+                    REQUIRES that encoded lines be no more than 76
+                    characters long.  If longer lines are to be encoded
+                    with the Quoted-Printable encoding, "soft" line breaks
+                    must be used.  An equal sign as the last character on a
+                    encoded line indicates such a non-significant ("soft")
+                    line break in the encoded text.
+                    */
+
+        $os = $this->createOutputByteStream(true);
+        $charStream = $this->createCharacterStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+        $charStream->shouldReceive('flushContents')
+                   ->once();
+        $charStream->shouldReceive('importByteStream')
+                   ->once()
+                   ->with($os);
+
+        for ($seq = 0; $seq <= 140; ++$seq) {
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array(ord('a')));
+        }
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+        $encoder->encodeByteStream($os, $is);
+        $this->assertEquals(str_repeat('a', 75)."=\r\n".str_repeat('a', 66), $collection->content);
+    }
+
+    public function testMaxLineLengthCanBeSpecified()
+    {
+        $os = $this->createOutputByteStream(true);
+        $charStream = $this->createCharacterStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+        $charStream->shouldReceive('flushContents')
+                   ->once();
+        $charStream->shouldReceive('importByteStream')
+                   ->once()
+                   ->with($os);
+
+        for ($seq = 0; $seq <= 100; ++$seq) {
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array(ord('a')));
+        }
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+        $encoder->encodeByteStream($os, $is, 0, 54);
+        $this->assertEquals(str_repeat('a', 53)."=\r\n".str_repeat('a', 48), $collection->content);
+    }
+
+    public function testBytesBelowPermittedRangeAreEncoded()
+    {
+        /*
+        According to Rule (1 & 2)
+        */
+
+        foreach (range(0, 32) as $ordinal) {
+            $char = chr($ordinal);
+
+            $os = $this->createOutputByteStream(true);
+            $charStream = $this->createCharacterStream();
+            $is = $this->createInputByteStream();
+            $collection = new Swift_StreamCollector();
+
+            $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+            $charStream->shouldReceive('flushContents')
+                       ->once();
+            $charStream->shouldReceive('importByteStream')
+                       ->once()
+                       ->with($os);
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array($ordinal));
+            $charStream->shouldReceive('readBytes')
+                       ->zeroOrMoreTimes()
+                       ->andReturn(false);
+
+            $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+            $encoder->encodeByteStream($os, $is);
+            $this->assertEquals(sprintf('=%02X', $ordinal), $collection->content);
+        }
+    }
+
+    public function testDecimalByte61IsEncoded()
+    {
+        /*
+        According to Rule (1 & 2)
+        */
+
+        $char = chr(61);
+
+        $os = $this->createOutputByteStream(true);
+        $charStream = $this->createCharacterStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+        $charStream->shouldReceive('flushContents')
+                       ->once();
+        $charStream->shouldReceive('importByteStream')
+                       ->once()
+                       ->with($os);
+        $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array(61));
+        $charStream->shouldReceive('readBytes')
+                       ->zeroOrMoreTimes()
+                       ->andReturn(false);
+
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+        $encoder->encodeByteStream($os, $is);
+        $this->assertEquals(sprintf('=%02X', 61), $collection->content);
+    }
+
+    public function testBytesAbovePermittedRangeAreEncoded()
+    {
+        /*
+        According to Rule (1 & 2)
+        */
+
+        foreach (range(127, 255) as $ordinal) {
+            $char = chr($ordinal);
+
+            $os = $this->createOutputByteStream(true);
+            $charStream = $this->createCharacterStream();
+            $is = $this->createInputByteStream();
+            $collection = new Swift_StreamCollector();
+
+            $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+            $charStream->shouldReceive('flushContents')
+                       ->once();
+            $charStream->shouldReceive('importByteStream')
+                       ->once()
+                       ->with($os);
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array($ordinal));
+            $charStream->shouldReceive('readBytes')
+                       ->zeroOrMoreTimes()
+                       ->andReturn(false);
+
+            $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+            $encoder->encodeByteStream($os, $is);
+            $this->assertEquals(sprintf('=%02X', $ordinal), $collection->content);
+        }
+    }
+
+    public function testFirstLineLengthCanBeDifferent()
+    {
+        $os = $this->createOutputByteStream(true);
+        $charStream = $this->createCharacterStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importByteStream')
+                    ->once()
+                    ->with($os);
+
+        for ($seq = 0; $seq <= 140; ++$seq) {
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array(ord('a')));
+        }
+        $charStream->shouldReceive('readBytes')
+                    ->zeroOrMoreTimes()
+                    ->andReturn(false);
+
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+        $encoder->encodeByteStream($os, $is, 22);
+        $this->assertEquals(
+            str_repeat('a', 53)."=\r\n".str_repeat('a', 75)."=\r\n".str_repeat('a', 13),
+            $collection->content
+            );
+    }
+
+    public function testObserverInterfaceCanChangeCharset()
+    {
+        $stream = $this->createCharacterStream();
+        $stream->shouldReceive('setCharacterSet')
+               ->once()
+               ->with('windows-1252');
+
+        $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($stream);
+        $encoder->charsetChanged('windows-1252');
+    }
+
+    public function testTextIsPreWrapped()
+    {
+        $encoder = $this->createEncoder();
+
+        $input = str_repeat('a', 70)."\r\n".
+                 str_repeat('a', 70)."\r\n".
+                 str_repeat('a', 70);
+
+        $os = new Swift_ByteStream_ArrayByteStream();
+        $is = new Swift_ByteStream_ArrayByteStream();
+        $is->write($input);
+
+        $encoder->encodeByteStream($is, $os);
+
+        $this->assertEquals(
+            $input, $os->read(PHP_INT_MAX)
+            );
+    }
+
+    private function createCharacterStream($stub = false)
+    {
+        return $this->getMockery('Swift_CharacterStream')->shouldIgnoreMissing();
+    }
+
+    private function createEncoder()
+    {
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $charStream = new Swift_CharacterStream_NgCharacterStream($factory, 'utf-8');
+
+        return new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+    }
+
+    private function createOutputByteStream($stub = false)
+    {
+        return $this->getMockery('Swift_OutputByteStream')->shouldIgnoreMissing();
+    }
+
+    private function createInputByteStream($stub = false)
+    {
+        return $this->getMockery('Swift_InputByteStream')->shouldIgnoreMissing();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Loggers/ArrayLoggerTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Loggers/ArrayLoggerTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Loggers/ArrayLoggerTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Loggers/ArrayLoggerTest.php	(date 1495187412000)
@@ -0,0 +1,65 @@
+<?php
+
+class Swift_Plugins_Loggers_ArrayLoggerTest extends \PHPUnit\Framework\TestCase
+{
+    public function testAddingSingleEntryDumpsSingleLine()
+    {
+        $logger = new Swift_Plugins_Loggers_ArrayLogger();
+        $logger->add(">> Foo\r\n");
+        $this->assertEquals(">> Foo\r\n", $logger->dump());
+    }
+
+    public function testAddingMultipleEntriesDumpsMultipleLines()
+    {
+        $logger = new Swift_Plugins_Loggers_ArrayLogger();
+        $logger->add(">> FOO\r\n");
+        $logger->add("<< 502 That makes no sense\r\n");
+        $logger->add(">> RSET\r\n");
+        $logger->add("<< 250 OK\r\n");
+
+        $this->assertEquals(
+            ">> FOO\r\n".PHP_EOL.
+            "<< 502 That makes no sense\r\n".PHP_EOL.
+            ">> RSET\r\n".PHP_EOL.
+            "<< 250 OK\r\n",
+            $logger->dump()
+            );
+    }
+
+    public function testLogCanBeCleared()
+    {
+        $logger = new Swift_Plugins_Loggers_ArrayLogger();
+        $logger->add(">> FOO\r\n");
+        $logger->add("<< 502 That makes no sense\r\n");
+        $logger->add(">> RSET\r\n");
+        $logger->add("<< 250 OK\r\n");
+
+        $this->assertEquals(
+            ">> FOO\r\n".PHP_EOL.
+            "<< 502 That makes no sense\r\n".PHP_EOL.
+            ">> RSET\r\n".PHP_EOL.
+            "<< 250 OK\r\n",
+            $logger->dump()
+            );
+
+        $logger->clear();
+
+        $this->assertEquals('', $logger->dump());
+    }
+
+    public function testLengthCanBeTruncated()
+    {
+        $logger = new Swift_Plugins_Loggers_ArrayLogger(2);
+        $logger->add(">> FOO\r\n");
+        $logger->add("<< 502 That makes no sense\r\n");
+        $logger->add(">> RSET\r\n");
+        $logger->add("<< 250 OK\r\n");
+
+        $this->assertEquals(
+            ">> RSET\r\n".PHP_EOL.
+            "<< 250 OK\r\n",
+            $logger->dump(),
+            '%s: Log should be truncated to last 2 entries'
+            );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Loggers/EchoLoggerTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Loggers/EchoLoggerTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Loggers/EchoLoggerTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Loggers/EchoLoggerTest.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+class Swift_Plugins_Loggers_EchoLoggerTest extends \PHPUnit\Framework\TestCase
+{
+    public function testAddingEntryDumpsSingleLineWithoutHtml()
+    {
+        $logger = new Swift_Plugins_Loggers_EchoLogger(false);
+        ob_start();
+        $logger->add('>> Foo');
+        $data = ob_get_clean();
+
+        $this->assertEquals('>> Foo'.PHP_EOL, $data);
+    }
+
+    public function testAddingEntryDumpsEscapedLineWithHtml()
+    {
+        $logger = new Swift_Plugins_Loggers_EchoLogger(true);
+        ob_start();
+        $logger->add('>> Foo');
+        $data = ob_get_clean();
+
+        $this->assertEquals('&gt;&gt; Foo<br />'.PHP_EOL, $data);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/UnstructuredHeaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/UnstructuredHeaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/UnstructuredHeaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/Headers/UnstructuredHeaderTest.php	(date 1495187412000)
@@ -0,0 +1,353 @@
+<?php
+
+class Swift_Mime_Headers_UnstructuredHeaderTest extends \SwiftMailerTestCase
+{
+    private $charset = 'utf-8';
+
+    public function testTypeIsTextHeader()
+    {
+        $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
+        $this->assertEquals(Swift_Mime_Header::TYPE_TEXT, $header->getFieldType());
+    }
+
+    public function testGetNameReturnsNameVerbatim()
+    {
+        $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
+        $this->assertEquals('Subject', $header->getFieldName());
+    }
+
+    public function testGetValueReturnsValueVerbatim()
+    {
+        $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
+        $header->setValue('Test');
+        $this->assertEquals('Test', $header->getValue());
+    }
+
+    public function testBasicStructureIsKeyValuePair()
+    {
+        /* -- RFC 2822, 2.2
+        Header fields are lines composed of a field name, followed by a colon
+        (":"), followed by a field body, and terminated by CRLF.
+        */
+        $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
+        $header->setValue('Test');
+        $this->assertEquals('Subject: Test'."\r\n", $header->toString());
+    }
+
+    public function testLongHeadersAreFoldedAtWordBoundary()
+    {
+        /* -- RFC 2822, 2.2.3
+        Each header field is logically a single line of characters comprising
+        the field name, the colon, and the field body.  For convenience
+        however, and to deal with the 998/78 character limitations per line,
+        the field body portion of a header field can be split into a multiple
+        line representation; this is called "folding".  The general rule is
+        that wherever this standard allows for folding white space (not
+        simply WSP characters), a CRLF may be inserted before any WSP.
+        */
+
+        $value = 'The quick brown fox jumped over the fence, he was a very very '.
+            'scary brown fox with a bushy tail';
+        $header = $this->getHeader('X-Custom-Header',
+            $this->getEncoder('Q', true)
+            );
+        $header->setValue($value);
+        $header->setMaxLineLength(78); //A safe [RFC 2822, 2.2.3] default
+        /*
+        X-Custom-Header: The quick brown fox jumped over the fence, he was a very very
+     scary brown fox with a bushy tail
+        */
+        $this->assertEquals(
+            'X-Custom-Header: The quick brown fox jumped over the fence, he was a'.
+            ' very very'."\r\n".//Folding
+            ' scary brown fox with a bushy tail'."\r\n",
+            $header->toString(), '%s: The header should have been folded at 78th char'
+            );
+    }
+
+    public function testPrintableAsciiOnlyAppearsInHeaders()
+    {
+        /* -- RFC 2822, 2.2.
+        A field name MUST be composed of printable US-ASCII characters (i.e.,
+        characters that have values between 33 and 126, inclusive), except
+        colon.  A field body may be composed of any US-ASCII characters,
+        except for CR and LF.
+        */
+
+        $nonAsciiChar = pack('C', 0x8F);
+        $header = $this->getHeader('X-Test', $this->getEncoder('Q', true));
+        $header->setValue($nonAsciiChar);
+        $this->assertRegExp(
+            '~^[^:\x00-\x20\x80-\xFF]+: [^\x80-\xFF\r\n]+\r\n$~s',
+            $header->toString()
+            );
+    }
+
+    public function testEncodedWordsFollowGeneralStructure()
+    {
+        /* -- RFC 2047, 1.
+        Generally, an "encoded-word" is a sequence of printable ASCII
+        characters that begins with "=?", ends with "?=", and has two "?"s in
+        between.
+        */
+
+        $nonAsciiChar = pack('C', 0x8F);
+        $header = $this->getHeader('X-Test', $this->getEncoder('Q', true));
+        $header->setValue($nonAsciiChar);
+        $this->assertRegExp(
+            '~^X-Test: \=?.*?\?.*?\?.*?\?=\r\n$~s',
+            $header->toString()
+            );
+    }
+
+    public function testEncodedWordIncludesCharsetAndEncodingMethodAndText()
+    {
+        /* -- RFC 2047, 2.
+        An 'encoded-word' is defined by the following ABNF grammar.  The
+        notation of RFC 822 is used, with the exception that white space
+        characters MUST NOT appear between components of an 'encoded-word'.
+
+        encoded-word = "=?" charset "?" encoding "?" encoded-text "?="
+        */
+
+        $nonAsciiChar = pack('C', 0x8F);
+
+        $encoder = $this->getEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($nonAsciiChar, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('=8F');
+
+        $header = $this->getHeader('X-Test', $encoder);
+        $header->setValue($nonAsciiChar);
+        $this->assertEquals(
+            'X-Test: =?'.$this->charset.'?Q?=8F?='."\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testEncodedWordsAreUsedToEncodedNonPrintableAscii()
+    {
+        //SPACE and TAB permitted
+        $nonPrintableBytes = array_merge(
+            range(0x00, 0x08), range(0x10, 0x19), array(0x7F)
+            );
+
+        foreach ($nonPrintableBytes as $byte) {
+            $char = pack('C', $byte);
+            $encodedChar = sprintf('=%02X', $byte);
+
+            $encoder = $this->getEncoder('Q');
+            $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($char, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn($encodedChar);
+
+            $header = $this->getHeader('X-A', $encoder);
+            $header->setValue($char);
+
+            $this->assertEquals(
+                'X-A: =?'.$this->charset.'?Q?'.$encodedChar.'?='."\r\n",
+                $header->toString(), '%s: Non-printable ascii should be encoded'
+                );
+        }
+    }
+
+    public function testEncodedWordsAreUsedToEncode8BitOctets()
+    {
+        foreach (range(0x80, 0xFF) as $byte) {
+            $char = pack('C', $byte);
+            $encodedChar = sprintf('=%02X', $byte);
+
+            $encoder = $this->getEncoder('Q');
+            $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($char, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn($encodedChar);
+
+            $header = $this->getHeader('X-A', $encoder);
+            $header->setValue($char);
+
+            $this->assertEquals(
+                'X-A: =?'.$this->charset.'?Q?'.$encodedChar.'?='."\r\n",
+                $header->toString(), '%s: 8-bit octets should be encoded'
+                );
+        }
+    }
+
+    public function testEncodedWordsAreNoMoreThan75CharsPerLine()
+    {
+        /* -- RFC 2047, 2.
+        An 'encoded-word' may not be more than 75 characters long, including
+        'charset', 'encoding', 'encoded-text', and delimiters.
+
+        ... SNIP ...
+
+        While there is no limit to the length of a multiple-line header
+        field, each line of a header field that contains one or more
+        'encoded-word's is limited to 76 characters.
+        */
+
+        $nonAsciiChar = pack('C', 0x8F);
+
+        $encoder = $this->getEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($nonAsciiChar, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('=8F');
+        //Note that multi-line headers begin with LWSP which makes 75 + 1 = 76
+        //Note also that =?utf-8?q??= is 12 chars which makes 75 - 12 = 63
+
+        //* X-Test: is 8 chars
+        $header = $this->getHeader('X-Test', $encoder);
+        $header->setValue($nonAsciiChar);
+
+        $this->assertEquals(
+            'X-Test: =?'.$this->charset.'?Q?=8F?='."\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testFWSPIsUsedWhenEncoderReturnsMultipleLines()
+    {
+        /* --RFC 2047, 2.
+        If it is desirable to encode more text than will fit in an 'encoded-word' of
+        75 characters, multiple 'encoded-word's (separated by CRLF SPACE) may
+        be used.
+        */
+
+        //Note the Mock does NOT return 8F encoded, the 8F merely triggers
+        // encoding for the sake of testing
+        $nonAsciiChar = pack('C', 0x8F);
+
+        $encoder = $this->getEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($nonAsciiChar, 8, 63, \Mockery::any())
+                ->andReturn('line_one_here'."\r\n".'line_two_here');
+
+        //Note that multi-line headers begin with LWSP which makes 75 + 1 = 76
+        //Note also that =?utf-8?q??= is 12 chars which makes 75 - 12 = 63
+
+        //* X-Test: is 8 chars
+        $header = $this->getHeader('X-Test', $encoder);
+        $header->setValue($nonAsciiChar);
+
+        $this->assertEquals(
+            'X-Test: =?'.$this->charset.'?Q?line_one_here?='."\r\n".
+            ' =?'.$this->charset.'?Q?line_two_here?='."\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testAdjacentWordsAreEncodedTogether()
+    {
+        /* -- RFC 2047, 5 (1)
+     Ordinary ASCII text and 'encoded-word's may appear together in the
+     same header field.  However, an 'encoded-word' that appears in a
+     header field defined as '*text' MUST be separated from any adjacent
+     'encoded-word' or 'text' by 'linear-white-space'.
+
+     -- RFC 2047, 2.
+     IMPORTANT: 'encoded-word's are designed to be recognized as 'atom's
+     by an RFC 822 parser.  As a consequence, unencoded white space
+     characters (such as SPACE and HTAB) are FORBIDDEN within an
+     'encoded-word'.
+     */
+
+        //It would be valid to encode all words needed, however it's probably
+        // easiest to encode the longest amount required at a time
+
+        $word = 'w'.pack('C', 0x8F).'rd';
+        $text = 'start '.$word.' '.$word.' then end '.$word;
+        // 'start', ' word word', ' and end', ' word'
+
+        $encoder = $this->getEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($word.' '.$word, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('w=8Frd_w=8Frd');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($word, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('w=8Frd');
+
+        $header = $this->getHeader('X-Test', $encoder);
+        $header->setValue($text);
+
+        $headerString = $header->toString();
+
+        $this->assertEquals('X-Test: start =?'.$this->charset.'?Q?'.
+            'w=8Frd_w=8Frd?= then end =?'.$this->charset.'?Q?'.
+            'w=8Frd?='."\r\n", $headerString,
+            '%s: Adjacent encoded words should appear grouped with WSP encoded'
+            );
+    }
+
+    public function testLanguageInformationAppearsInEncodedWords()
+    {
+        /* -- RFC 2231, 5.
+        5.  Language specification in Encoded Words
+
+        RFC 2047 provides support for non-US-ASCII character sets in RFC 822
+        message header comments, phrases, and any unstructured text field.
+        This is done by defining an encoded word construct which can appear
+        in any of these places.  Given that these are fields intended for
+        display, it is sometimes necessary to associate language information
+        with encoded words as well as just the character set.  This
+        specification extends the definition of an encoded word to allow the
+        inclusion of such information.  This is simply done by suffixing the
+        character set specification with an asterisk followed by the language
+        tag.  For example:
+
+                    From: =?US-ASCII*EN?Q?Keith_Moore?= <moore@cs.utk.edu>
+        */
+
+        $value = 'fo'.pack('C', 0x8F).'bar';
+
+        $encoder = $this->getEncoder('Q');
+        $encoder->shouldReceive('encodeString')
+                ->once()
+                ->with($value, \Mockery::any(), \Mockery::any(), \Mockery::any())
+                ->andReturn('fo=8Fbar');
+
+        $header = $this->getHeader('Subject', $encoder);
+        $header->setLanguage('en');
+        $header->setValue($value);
+        $this->assertEquals("Subject: =?utf-8*en?Q?fo=8Fbar?=\r\n",
+            $header->toString()
+            );
+    }
+
+    public function testSetBodyModel()
+    {
+        $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
+        $header->setFieldBodyModel('test');
+        $this->assertEquals('test', $header->getValue());
+    }
+
+    public function testGetBodyModel()
+    {
+        $header = $this->getHeader('Subject', $this->getEncoder('Q', true));
+        $header->setValue('test');
+        $this->assertEquals('test', $header->getFieldBodyModel());
+    }
+
+    private function getHeader($name, $encoder)
+    {
+        $header = new Swift_Mime_Headers_UnstructuredHeader($name, $encoder);
+        $header->setCharset($this->charset);
+
+        return $header;
+    }
+
+    private function getEncoder($type, $stub = false)
+    {
+        $encoder = $this->getMockery('Swift_Mime_HeaderEncoder')->shouldIgnoreMissing();
+        $encoder->shouldReceive('getName')
+                ->zeroOrMoreTimes()
+                ->andReturn($type);
+
+        return $encoder;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/Base64HeaderEncoderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/Base64HeaderEncoderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/Base64HeaderEncoderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/Base64HeaderEncoderTest.php	(date 1495187412000)
@@ -0,0 +1,13 @@
+<?php
+
+class Swift_Mime_HeaderEncoder_Base64HeaderEncoderTest extends \PHPUnit\Framework\TestCase
+{
+    //Most tests are already covered in Base64EncoderTest since this subclass only
+    // adds a getName() method
+
+    public function testNameIsB()
+    {
+        $encoder = new Swift_Mime_HeaderEncoder_Base64HeaderEncoder();
+        $this->assertEquals('B', $encoder->getName());
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/QpHeaderEncoderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/QpHeaderEncoderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/QpHeaderEncoderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/HeaderEncoder/QpHeaderEncoderTest.php	(date 1495187412000)
@@ -0,0 +1,221 @@
+<?php
+
+class Swift_Mime_HeaderEncoder_QpHeaderEncoderTest extends \SwiftMailerTestCase
+{
+    //Most tests are already covered in QpEncoderTest since this subclass only
+    // adds a getName() method
+
+    public function testNameIsQ()
+    {
+        $encoder = $this->createEncoder(
+            $this->createCharacterStream(true)
+            );
+        $this->assertEquals('Q', $encoder->getName());
+    }
+
+    public function testSpaceAndTabNeverAppear()
+    {
+        /* -- RFC 2047, 4.
+     Only a subset of the printable ASCII characters may be used in
+     'encoded-text'.  Space and tab characters are not allowed, so that
+     the beginning and end of an 'encoded-word' are obvious.
+     */
+
+        $charStream = $this->createCharacterStream();
+        $charStream->shouldReceive('readBytes')
+                   ->atLeast()->times(6)
+                   ->andReturn(array(ord('a')), array(0x20), array(0x09), array(0x20), array(ord('b')), false);
+
+        $encoder = $this->createEncoder($charStream);
+        $this->assertNotRegExp('~[ \t]~', $encoder->encodeString("a \t b"),
+            '%s: encoded-words in headers cannot contain LWSP as per RFC 2047.'
+            );
+    }
+
+    public function testSpaceIsRepresentedByUnderscore()
+    {
+        /* -- RFC 2047, 4.2.
+        (2) The 8-bit hexadecimal value 20 (e.g., ISO-8859-1 SPACE) may be
+       represented as "_" (underscore, ASCII 95.).  (This character may
+       not pass through some internetwork mail gateways, but its use
+       will greatly enhance readability of "Q" encoded data with mail
+       readers that do not support this encoding.)  Note that the "_"
+       always represents hexadecimal 20, even if the SPACE character
+       occupies a different code position in the character set in use.
+       */
+        $charStream = $this->createCharacterStream();
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('a')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(0x20));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('b')));
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = $this->createEncoder($charStream);
+        $this->assertEquals('a_b', $encoder->encodeString('a b'),
+            '%s: Spaces can be represented by more readable underscores as per RFC 2047.'
+            );
+    }
+
+    public function testEqualsAndQuestionAndUnderscoreAreEncoded()
+    {
+        /* -- RFC 2047, 4.2.
+        (3) 8-bit values which correspond to printable ASCII characters other
+       than "=", "?", and "_" (underscore), MAY be represented as those
+       characters.  (But see section 5 for restrictions.)  In
+       particular, SPACE and TAB MUST NOT be represented as themselves
+       within encoded words.
+       */
+        $charStream = $this->createCharacterStream();
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('=')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('?')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('_')));
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = $this->createEncoder($charStream);
+        $this->assertEquals('=3D=3F=5F', $encoder->encodeString('=?_'),
+            '%s: Chars =, ? and _ (underscore) may not appear as per RFC 2047.'
+            );
+    }
+
+    public function testParensAndQuotesAreEncoded()
+    {
+        /* -- RFC 2047, 5 (2).
+     A "Q"-encoded 'encoded-word' which appears in a 'comment' MUST NOT
+     contain the characters "(", ")" or "
+     */
+
+        $charStream = $this->createCharacterStream();
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('(')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord('"')));
+        $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array(ord(')')));
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = $this->createEncoder($charStream);
+        $this->assertEquals('=28=22=29', $encoder->encodeString('(")'),
+            '%s: Chars (, " (DQUOTE) and ) may not appear as per RFC 2047.'
+            );
+    }
+
+    public function testOnlyCharactersAllowedInPhrasesAreUsed()
+    {
+        /* -- RFC 2047, 5.
+        (3) As a replacement for a 'word' entity within a 'phrase', for example,
+        one that precedes an address in a From, To, or Cc header.  The ABNF
+        definition for 'phrase' from RFC 822 thus becomes:
+
+        phrase = 1*( encoded-word / word )
+
+        In this case the set of characters that may be used in a "Q"-encoded
+        'encoded-word' is restricted to: <upper and lower case ASCII
+        letters, decimal digits, "!", "*", "+", "-", "/", "=", and "_"
+        (underscore, ASCII 95.)>.  An 'encoded-word' that appears within a
+        'phrase' MUST be separated from any adjacent 'word', 'text' or
+        'special' by 'linear-white-space'.
+        */
+
+        $allowedBytes = array_merge(
+            range(ord('a'), ord('z')), range(ord('A'), ord('Z')),
+            range(ord('0'), ord('9')),
+            array(ord('!'), ord('*'), ord('+'), ord('-'), ord('/'))
+            );
+
+        foreach (range(0x00, 0xFF) as $byte) {
+            $char = pack('C', $byte);
+
+            $charStream = $this->createCharacterStream();
+            $charStream->shouldReceive('readBytes')
+                   ->once()
+                   ->andReturn(array($byte));
+            $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+            $encoder = $this->createEncoder($charStream);
+            $encodedChar = $encoder->encodeString($char);
+
+            if (in_array($byte, $allowedBytes)) {
+                $this->assertEquals($char, $encodedChar,
+                    '%s: Character '.$char.' should not be encoded.'
+                    );
+            } elseif (0x20 == $byte) {
+                //Special case
+                $this->assertEquals('_', $encodedChar,
+                    '%s: Space character should be replaced.'
+                    );
+            } else {
+                $this->assertEquals(sprintf('=%02X', $byte), $encodedChar,
+                    '%s: Byte '.$byte.' should be encoded.'
+                    );
+            }
+        }
+    }
+
+    public function testEqualsNeverAppearsAtEndOfLine()
+    {
+        /* -- RFC 2047, 5 (3).
+        The 'encoded-text' in an 'encoded-word' must be self-contained;
+        'encoded-text' MUST NOT be continued from one 'encoded-word' to
+        another.  This implies that the 'encoded-text' portion of a "B"
+        'encoded-word' will be a multiple of 4 characters long; for a "Q"
+        'encoded-word', any "=" character that appears in the 'encoded-text'
+        portion will be followed by two hexadecimal characters.
+        */
+
+        $input = str_repeat('a', 140);
+
+        $charStream = $this->createCharacterStream();
+
+        $output = '';
+        $seq = 0;
+        for (; $seq < 140; ++$seq) {
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array(ord('a')));
+
+            if (75 == $seq) {
+                $output .= "\r\n"; // =\r\n
+            }
+            $output .= 'a';
+        }
+
+        $charStream->shouldReceive('readBytes')
+                   ->zeroOrMoreTimes()
+                   ->andReturn(false);
+
+        $encoder = $this->createEncoder($charStream);
+        $this->assertEquals($output, $encoder->encodeString($input));
+    }
+
+    private function createEncoder($charStream)
+    {
+        return new Swift_Mime_HeaderEncoder_QpHeaderEncoder($charStream);
+    }
+
+    private function createCharacterStream($stub = false)
+    {
+        return $this->getMockery('Swift_CharacterStream')->shouldIgnoreMissing();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/Base64ContentEncoderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/Base64ContentEncoderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/Base64ContentEncoderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/ContentEncoder/Base64ContentEncoderTest.php	(date 1495187412000)
@@ -0,0 +1,323 @@
+<?php
+
+class Swift_Mime_ContentEncoder_Base64ContentEncoderTest extends \SwiftMailerTestCase
+{
+    private $encoder;
+
+    protected function setUp()
+    {
+        $this->encoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
+    }
+
+    public function testNameIsBase64()
+    {
+        $this->assertEquals('base64', $this->encoder->getName());
+    }
+
+    /*
+    There's really no point in testing the entire base64 encoding to the
+    level QP encoding has been tested.  base64_encode() has been in PHP for
+    years.
+    */
+
+    public function testInputOutputRatioIs3to4Bytes()
+    {
+        /*
+        RFC 2045, 6.8
+
+         The encoding process represents 24-bit groups of input bits as output
+         strings of 4 encoded characters.  Proceeding from left to right, a
+         24-bit input group is formed by concatenating 3 8bit input groups.
+         These 24 bits are then treated as 4 concatenated 6-bit groups, each
+         of which is translated into a single digit in the base64 alphabet.
+         */
+
+        $os = $this->createOutputByteStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('123');
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $this->encoder->encodeByteStream($os, $is);
+        $this->assertEquals('MTIz', $collection->content);
+    }
+
+    public function testPadLength()
+    {
+        /*
+        RFC 2045, 6.8
+
+       Special processing is performed if fewer than 24 bits are available
+       at the end of the data being encoded.  A full encoding quantum is
+       always completed at the end of a body.  When fewer than 24 input bits
+       are available in an input group, zero bits are added (on the right)
+       to form an integral number of 6-bit groups.  Padding at the end of
+       the data is performed using the "=" character.  Since all base64
+       input is an integral number of octets, only the following cases can
+       arise: (1) the final quantum of encoding input is an integral
+       multiple of 24 bits; here, the final unit of encoded output will be
+       an integral multiple of 4 characters with no "=" padding, (2) the
+       final quantum of encoding input is exactly 8 bits; here, the final
+       unit of encoded output will be two characters followed by two "="
+       padding characters, or (3) the final quantum of encoding input is
+       exactly 16 bits; here, the final unit of encoded output will be three
+       characters followed by one "=" padding character.
+       */
+
+        for ($i = 0; $i < 30; ++$i) {
+            $os = $this->createOutputByteStream();
+            $is = $this->createInputByteStream();
+            $collection = new Swift_StreamCollector();
+
+            $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+            $os->shouldReceive('read')
+               ->once()
+               ->andReturn(pack('C', rand(0, 255)));
+            $os->shouldReceive('read')
+               ->zeroOrMoreTimes()
+               ->andReturn(false);
+
+            $this->encoder->encodeByteStream($os, $is);
+            $this->assertRegExp('~^[a-zA-Z0-9/\+]{2}==$~', $collection->content,
+                '%s: A single byte should have 2 bytes of padding'
+                );
+        }
+
+        for ($i = 0; $i < 30; ++$i) {
+            $os = $this->createOutputByteStream();
+            $is = $this->createInputByteStream();
+            $collection = new Swift_StreamCollector();
+
+            $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+            $os->shouldReceive('read')
+               ->once()
+               ->andReturn(pack('C*', rand(0, 255), rand(0, 255)));
+            $os->shouldReceive('read')
+               ->zeroOrMoreTimes()
+               ->andReturn(false);
+
+            $this->encoder->encodeByteStream($os, $is);
+            $this->assertRegExp('~^[a-zA-Z0-9/\+]{3}=$~', $collection->content,
+                '%s: Two bytes should have 1 byte of padding'
+                );
+        }
+
+        for ($i = 0; $i < 30; ++$i) {
+            $os = $this->createOutputByteStream();
+            $is = $this->createInputByteStream();
+            $collection = new Swift_StreamCollector();
+
+            $is->shouldReceive('write')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing($collection);
+            $os->shouldReceive('read')
+               ->once()
+               ->andReturn(pack('C*', rand(0, 255), rand(0, 255), rand(0, 255)));
+            $os->shouldReceive('read')
+               ->zeroOrMoreTimes()
+               ->andReturn(false);
+
+            $this->encoder->encodeByteStream($os, $is);
+            $this->assertRegExp('~^[a-zA-Z0-9/\+]{4}$~', $collection->content,
+                '%s: Three bytes should have no padding'
+                );
+        }
+    }
+
+    public function testMaximumLineLengthIs76Characters()
+    {
+        /*
+         The encoded output stream must be represented in lines of no more
+         than 76 characters each.  All line breaks or other characters not
+         found in Table 1 must be ignored by decoding software.
+         */
+
+        $os = $this->createOutputByteStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('abcdefghijkl'); //12
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('mnopqrstuvwx'); //24
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('yzabc1234567'); //36
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('890ABCDEFGHI'); //48
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('JKLMNOPQRSTU'); //60
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('VWXYZ1234567'); //72
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('abcdefghijkl'); //84
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $this->encoder->encodeByteStream($os, $is);
+        $this->assertEquals(
+            "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmMxMjM0NTY3ODkwQUJDREVGR0hJSktMTU5PUFFS\r\n".
+            'U1RVVldYWVoxMjM0NTY3YWJjZGVmZ2hpamts',
+            $collection->content
+            );
+    }
+
+    public function testMaximumLineLengthCanBeDifferent()
+    {
+        $os = $this->createOutputByteStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('abcdefghijkl'); //12
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('mnopqrstuvwx'); //24
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('yzabc1234567'); //36
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('890ABCDEFGHI'); //48
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('JKLMNOPQRSTU'); //60
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('VWXYZ1234567'); //72
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('abcdefghijkl'); //84
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $this->encoder->encodeByteStream($os, $is, 0, 50);
+        $this->assertEquals(
+            "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmMxMjM0NTY3OD\r\n".
+            "kwQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoxMjM0NTY3YWJj\r\n".
+            'ZGVmZ2hpamts',
+            $collection->content
+            );
+    }
+
+    public function testMaximumLineLengthIsNeverMoreThan76Chars()
+    {
+        $os = $this->createOutputByteStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('abcdefghijkl'); //12
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('mnopqrstuvwx'); //24
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('yzabc1234567'); //36
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('890ABCDEFGHI'); //48
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('JKLMNOPQRSTU'); //60
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('VWXYZ1234567'); //72
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('abcdefghijkl'); //84
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $this->encoder->encodeByteStream($os, $is, 0, 100);
+        $this->assertEquals(
+            "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmMxMjM0NTY3ODkwQUJDREVGR0hJSktMTU5PUFFS\r\n".
+            'U1RVVldYWVoxMjM0NTY3YWJjZGVmZ2hpamts',
+            $collection->content
+            );
+    }
+
+    public function testFirstLineLengthCanBeDifferent()
+    {
+        $os = $this->createOutputByteStream();
+        $is = $this->createInputByteStream();
+        $collection = new Swift_StreamCollector();
+
+        $is->shouldReceive('write')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing($collection);
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('abcdefghijkl'); //12
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('mnopqrstuvwx'); //24
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('yzabc1234567'); //36
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('890ABCDEFGHI'); //48
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('JKLMNOPQRSTU'); //60
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('VWXYZ1234567'); //72
+        $os->shouldReceive('read')
+           ->once()
+           ->andReturn('abcdefghijkl'); //84
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $this->encoder->encodeByteStream($os, $is, 19);
+        $this->assertEquals(
+            "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmMxMjM0NTY3ODkwQUJDR\r\n".
+            'EVGR0hJSktMTU5PUFFSU1RVVldYWVoxMjM0NTY3YWJjZGVmZ2hpamts',
+            $collection->content
+            );
+    }
+
+    private function createOutputByteStream($stub = false)
+    {
+        return $this->getMockery('Swift_OutputByteStream')->shouldIgnoreMissing();
+    }
+
+    private function createInputByteStream($stub = false)
+    {
+        return $this->getMockery('Swift_InputByteStream')->shouldIgnoreMissing();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php	(date 1495187412000)
@@ -0,0 +1,561 @@
+<?php
+
+require_once dirname(__DIR__).'/EsmtpTransportTest.php';
+
+interface Swift_Transport_EsmtpHandlerMixin extends Swift_Transport_EsmtpHandler
+{
+    public function setUsername($user);
+
+    public function setPassword($pass);
+}
+
+class Swift_Transport_EsmtpTransport_ExtensionSupportTest extends Swift_Transport_EsmtpTransportTest
+{
+    public function testExtensionHandlersAreSortedAsNeeded()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('STARTTLS')
+             ->andReturn(1);
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $ext2->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('AUTH')
+             ->andReturn(-1);
+        $this->finishBuffer($buf);
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2));
+        $this->assertEquals(array($ext2, $ext1), $smtp->getExtensionHandlers());
+    }
+
+    public function testHandlersAreNotifiedOfParams()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 server.com foo\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .*?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-ServerName.tld\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-AUTH PLAIN LOGIN\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 SIZE=123456\r\n");
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('setKeywordParams')
+             ->once()
+             ->with(array('PLAIN', 'LOGIN'));
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('SIZE');
+        $ext2->shouldReceive('setKeywordParams')
+             ->zeroOrMoreTimes()
+             ->with(array('123456'));
+        $this->finishBuffer($buf);
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2));
+        $smtp->start();
+    }
+
+    public function testSupportedExtensionHandlersAreRunAfterEhlo()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext3 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 server.com foo\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .*?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-ServerName.tld\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-AUTH PLAIN LOGIN\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 SIZE=123456\r\n");
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('afterEhlo')
+             ->once()
+             ->with($smtp);
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('SIZE');
+        $ext2->shouldReceive('afterEhlo')
+             ->zeroOrMoreTimes()
+             ->with($smtp);
+        $ext3->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $ext3->shouldReceive('afterEhlo')
+             ->never()
+             ->with($smtp);
+        $this->finishBuffer($buf);
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2, $ext3));
+        $smtp->start();
+    }
+
+    public function testExtensionsCanModifyMailFromParams()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher();
+        $smtp = new Swift_Transport_EsmtpTransport($buf, array(), $dispatcher, 'example.org');
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext3 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('me@domain' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => null));
+
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 server.com foo\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .*?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-ServerName.tld\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-AUTH PLAIN LOGIN\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 SIZE=123456\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<me@domain> FOO ZIP\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar>\r\n")
+            ->andReturn(3);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(3)
+            ->andReturn("250 OK\r\n");
+        $this->finishBuffer($buf);
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('getMailParams')
+             ->once()
+             ->andReturn('FOO');
+        $ext1->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('STARTTLS')
+             ->andReturn(1);
+        $ext1->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('SIZE')
+             ->andReturn(-1);
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('SIZE');
+        $ext2->shouldReceive('getMailParams')
+             ->once()
+             ->andReturn('ZIP');
+        $ext2->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('AUTH')
+             ->andReturn(1);
+        $ext2->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('STARTTLS')
+             ->andReturn(1);
+        $ext3->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $ext3->shouldReceive('getMailParams')
+             ->never();
+        $ext3->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('AUTH')
+             ->andReturn(-1);
+        $ext3->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('SIZE')
+             ->andReturn(-1);
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2, $ext3));
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testExtensionsCanModifyRcptParams()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher();
+        $smtp = new Swift_Transport_EsmtpTransport($buf, array(), $dispatcher, 'example.org');
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext3 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('me@domain' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => null));
+
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 server.com foo\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .+?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-ServerName.tld\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-AUTH PLAIN LOGIN\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 SIZE=123456\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<me@domain>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar> FOO ZIP\r\n")
+            ->andReturn(3);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(3)
+            ->andReturn("250 OK\r\n");
+        $this->finishBuffer($buf);
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('getRcptParams')
+             ->once()
+             ->andReturn('FOO');
+        $ext1->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('STARTTLS')
+             ->andReturn(1);
+        $ext1->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('SIZE')
+             ->andReturn(-1);
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('SIZE');
+        $ext2->shouldReceive('getRcptParams')
+             ->once()
+             ->andReturn('ZIP');
+        $ext2->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('STARTTLS')
+             ->andReturn(1);
+        $ext2->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('AUTH')
+             ->andReturn(1);
+        $ext3->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $ext3->shouldReceive('getRcptParams')
+             ->never();
+        $ext3->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('AUTH')
+             ->andReturn(-1);
+        $ext3->shouldReceive('getPriorityOver')
+             ->zeroOrMoreTimes()
+             ->with('SIZE')
+             ->andReturn(-1);
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2, $ext3));
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testExtensionsAreNotifiedOnCommand()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext3 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 server.com foo\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .+?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-ServerName.tld\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-AUTH PLAIN LOGIN\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 SIZE=123456\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("FOO\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn("250 Cool\r\n");
+        $this->finishBuffer($buf);
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('onCommand')
+             ->once()
+             ->with($smtp, "FOO\r\n", array(250, 251), \Mockery::any(), \Mockery::any());
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('SIZE');
+        $ext2->shouldReceive('onCommand')
+             ->once()
+             ->with($smtp, "FOO\r\n", array(250, 251), \Mockery::any(), \Mockery::any());
+        $ext3->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $ext3->shouldReceive('onCommand')
+             ->never()
+             ->with(\Mockery::any(), \Mockery::any(), \Mockery::any(), \Mockery::any(), \Mockery::any());
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2, $ext3));
+        $smtp->start();
+        $smtp->executeCommand("FOO\r\n", array(250, 251));
+    }
+
+    public function testChainOfCommandAlgorithmWhenNotifyingExtensions()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+        $ext3 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 server.com foo\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .+?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-ServerName.tld\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250-AUTH PLAIN LOGIN\r\n");
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 SIZE=123456\r\n");
+        $buf->shouldReceive('write')
+            ->never()
+            ->with("FOO\r\n");
+        $this->finishBuffer($buf);
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('onCommand')
+             ->once()
+             ->with($smtp, "FOO\r\n", array(250, 251), \Mockery::any(), \Mockery::any())
+             ->andReturnUsing(function ($a, $b, $c, $d, &$e) {
+                 $e = true;
+
+                 return '250 ok';
+             });
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('SIZE');
+        $ext2->shouldReceive('onCommand')
+             ->never()
+             ->with(\Mockery::any(), \Mockery::any(), \Mockery::any(), \Mockery::any());
+
+        $ext3->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $ext3->shouldReceive('onCommand')
+             ->never()
+             ->with(\Mockery::any(), \Mockery::any(), \Mockery::any(), \Mockery::any());
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2, $ext3));
+        $smtp->start();
+        $smtp->executeCommand("FOO\r\n", array(250, 251));
+    }
+
+    public function testExtensionsCanExposeMixinMethods()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandlerMixin')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('exposeMixinMethods')
+             ->zeroOrMoreTimes()
+             ->andReturn(array('setUsername', 'setPassword'));
+        $ext1->shouldReceive('setUsername')
+             ->once()
+             ->with('mick');
+        $ext1->shouldReceive('setPassword')
+             ->once()
+             ->with('pass');
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $this->finishBuffer($buf);
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2));
+        $smtp->setUsername('mick');
+        $smtp->setPassword('pass');
+    }
+
+    public function testMixinMethodsBeginningWithSetAndNullReturnAreFluid()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandlerMixin')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('exposeMixinMethods')
+             ->zeroOrMoreTimes()
+             ->andReturn(array('setUsername', 'setPassword'));
+        $ext1->shouldReceive('setUsername')
+             ->once()
+             ->with('mick')
+             ->andReturn(null);
+        $ext1->shouldReceive('setPassword')
+             ->once()
+             ->with('pass')
+             ->andReturn(null);
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $this->finishBuffer($buf);
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2));
+        $ret = $smtp->setUsername('mick');
+        $this->assertEquals($smtp, $ret);
+        $ret = $smtp->setPassword('pass');
+        $this->assertEquals($smtp, $ret);
+    }
+
+    public function testMixinSetterWhichReturnValuesAreNotFluid()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ext1 = $this->getMockery('Swift_Transport_EsmtpHandlerMixin')->shouldIgnoreMissing();
+        $ext2 = $this->getMockery('Swift_Transport_EsmtpHandler')->shouldIgnoreMissing();
+
+        $ext1->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('AUTH');
+        $ext1->shouldReceive('exposeMixinMethods')
+             ->zeroOrMoreTimes()
+             ->andReturn(array('setUsername', 'setPassword'));
+        $ext1->shouldReceive('setUsername')
+             ->once()
+             ->with('mick')
+             ->andReturn('x');
+        $ext1->shouldReceive('setPassword')
+             ->once()
+             ->with('pass')
+             ->andReturn('x');
+        $ext2->shouldReceive('getHandledKeyword')
+             ->zeroOrMoreTimes()
+             ->andReturn('STARTTLS');
+        $this->finishBuffer($buf);
+
+        $smtp->setExtensionHandlers(array($ext1, $ext2));
+        $this->assertEquals('x', $smtp->setUsername('mick'));
+        $this->assertEquals('x', $smtp->setPassword('pass'));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/HeaderEncoder/Base64HeaderEncoderAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/HeaderEncoder/Base64HeaderEncoderAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/HeaderEncoder/Base64HeaderEncoderAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/HeaderEncoder/Base64HeaderEncoderAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,32 @@
+<?php
+
+class Swift_Mime_HeaderEncoder_Base64HeaderEncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $encoder;
+
+    protected function setUp()
+    {
+        $this->encoder = new Swift_Mime_HeaderEncoder_Base64HeaderEncoder();
+    }
+
+    public function testEncodingJIS()
+    {
+        if (function_exists('mb_convert_encoding')) {
+            // base64_encode and split cannot handle long JIS text to fold
+            $subject = '長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い長い件名';
+
+            $encodedWrapperLength = strlen('=?iso-2022-jp?'.$this->encoder->getName().'??=');
+
+            $old = mb_internal_encoding();
+            mb_internal_encoding('utf-8');
+            $newstring = mb_encode_mimeheader($subject, 'iso-2022-jp', 'B', "\r\n");
+            mb_internal_encoding($old);
+
+            $encoded = $this->encoder->encodeString($subject, 0, 75 - $encodedWrapperLength, 'iso-2022-jp');
+            $this->assertEquals(
+                $encoded, $newstring,
+                'Encoded string should decode back to original string for sample '
+            );
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/Base64ContentEncoderAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,56 @@
+<?php
+
+class Swift_Mime_ContentEncoder_Base64ContentEncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $samplesDir;
+    private $encoder;
+
+    protected function setUp()
+    {
+        $this->samplesDir = realpath(__DIR__.'/../../../../_samples/charsets');
+        $this->encoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
+    }
+
+    public function testEncodingAndDecodingSamples()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+
+                    $os = new Swift_ByteStream_ArrayByteStream();
+                    $os->write($text);
+
+                    $is = new Swift_ByteStream_ArrayByteStream();
+
+                    $this->encoder->encodeByteStream($os, $is);
+
+                    $encoded = '';
+                    while (false !== $bytes = $is->read(8192)) {
+                        $encoded .= $bytes;
+                    }
+
+                    $this->assertEquals(
+                        base64_decode($encoded), $text,
+                        '%s: Encoded string should decode back to original string for sample '.
+                        $sampleDir.'/'.$sampleFile
+                        );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/NativeQpContentEncoderAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,88 @@
+<?php
+
+class Swift_Mime_ContentEncoder_NativeQpContentEncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    protected $_samplesDir;
+
+    /**
+     * @var Swift_Mime_ContentEncoder_NativeQpContentEncoder
+     */
+    protected $encoder;
+
+    protected function setUp()
+    {
+        $this->samplesDir = realpath(__DIR__.'/../../../../_samples/charsets');
+        $this->encoder = new Swift_Mime_ContentEncoder_NativeQpContentEncoder();
+    }
+
+    public function testEncodingAndDecodingSamples()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+
+                    $os = new Swift_ByteStream_ArrayByteStream();
+                    $os->write($text);
+
+                    $is = new Swift_ByteStream_ArrayByteStream();
+                    $this->encoder->encodeByteStream($os, $is);
+
+                    $encoded = '';
+                    while (false !== $bytes = $is->read(8192)) {
+                        $encoded .= $bytes;
+                    }
+
+                    $this->assertEquals(
+                        quoted_printable_decode($encoded),
+                        // CR and LF are converted to CRLF
+                        preg_replace('~\r(?!\n)|(?<!\r)\n~', "\r\n", $text),
+                        '%s: Encoded string should decode back to original string for sample '.$sampleDir.'/'.$sampleFile
+                    );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+
+    public function testEncodingAndDecodingSamplesFromDiConfiguredInstance()
+    {
+        $encoder = $this->createEncoderFromContainer();
+        $this->assertSame('=C3=A4=C3=B6=C3=BC=C3=9F', $encoder->encodeString('äöüß'));
+    }
+
+    /**
+     * @expectedException \RuntimeException
+     */
+    public function testCharsetChangeNotImplemented()
+    {
+        $this->encoder->charsetChanged('utf-8');
+        $this->encoder->charsetChanged('charset');
+        $this->encoder->encodeString('foo');
+    }
+
+    public function testGetName()
+    {
+        $this->assertSame('quoted-printable', $this->encoder->getName());
+    }
+
+    private function createEncoderFromContainer()
+    {
+        return Swift_DependencyContainer::getInstance()
+            ->lookup('mime.nativeqpcontentencoder')
+            ;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Reporters/HitReporterTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Reporters/HitReporterTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Reporters/HitReporterTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Reporters/HitReporterTest.php	(date 1495187412000)
@@ -0,0 +1,64 @@
+<?php
+
+class Swift_Plugins_Reporters_HitReporterTest extends \PHPUnit\Framework\TestCase
+{
+    private $hitReporter;
+    private $message;
+
+    protected function setUp()
+    {
+        $this->hitReporter = new Swift_Plugins_Reporters_HitReporter();
+        $this->message = $this->getMockBuilder('Swift_Mime_SimpleMessage')->disableOriginalConstructor()->getMock();
+    }
+
+    public function testReportingFail()
+    {
+        $this->hitReporter->notify($this->message, 'foo@bar.tld',
+            Swift_Plugins_Reporter::RESULT_FAIL
+            );
+        $this->assertEquals(array('foo@bar.tld'),
+            $this->hitReporter->getFailedRecipients()
+            );
+    }
+
+    public function testMultipleReports()
+    {
+        $this->hitReporter->notify($this->message, 'foo@bar.tld',
+            Swift_Plugins_Reporter::RESULT_FAIL
+            );
+        $this->hitReporter->notify($this->message, 'zip@button',
+            Swift_Plugins_Reporter::RESULT_FAIL
+            );
+        $this->assertEquals(array('foo@bar.tld', 'zip@button'),
+            $this->hitReporter->getFailedRecipients()
+            );
+    }
+
+    public function testReportingPassIsIgnored()
+    {
+        $this->hitReporter->notify($this->message, 'foo@bar.tld',
+            Swift_Plugins_Reporter::RESULT_FAIL
+            );
+        $this->hitReporter->notify($this->message, 'zip@button',
+            Swift_Plugins_Reporter::RESULT_PASS
+            );
+        $this->assertEquals(array('foo@bar.tld'),
+            $this->hitReporter->getFailedRecipients()
+            );
+    }
+
+    public function testBufferCanBeCleared()
+    {
+        $this->hitReporter->notify($this->message, 'foo@bar.tld',
+            Swift_Plugins_Reporter::RESULT_FAIL
+            );
+        $this->hitReporter->notify($this->message, 'zip@button',
+            Swift_Plugins_Reporter::RESULT_FAIL
+            );
+        $this->assertEquals(array('foo@bar.tld', 'zip@button'),
+            $this->hitReporter->getFailedRecipients()
+            );
+        $this->hitReporter->clear();
+        $this->assertEquals(array(), $this->hitReporter->getFailedRecipients());
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Reporters/HtmlReporterTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Reporters/HtmlReporterTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Reporters/HtmlReporterTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/Reporters/HtmlReporterTest.php	(date 1495187412000)
@@ -0,0 +1,54 @@
+<?php
+
+class Swift_Plugins_Reporters_HtmlReporterTest extends \PHPUnit\Framework\TestCase
+{
+    private $html;
+    private $message;
+
+    protected function setUp()
+    {
+        $this->html = new Swift_Plugins_Reporters_HtmlReporter();
+        $this->message = $this->getMockBuilder('Swift_Mime_SimpleMessage')->disableOriginalConstructor()->getMock();
+    }
+
+    public function testReportingPass()
+    {
+        ob_start();
+        $this->html->notify($this->message, 'foo@bar.tld',
+            Swift_Plugins_Reporter::RESULT_PASS
+            );
+        $html = ob_get_clean();
+
+        $this->assertRegExp('~ok|pass~i', $html, '%s: Reporter should indicate pass');
+        $this->assertRegExp('~foo@bar\.tld~', $html, '%s: Reporter should show address');
+    }
+
+    public function testReportingFail()
+    {
+        ob_start();
+        $this->html->notify($this->message, 'zip@button',
+            Swift_Plugins_Reporter::RESULT_FAIL
+            );
+        $html = ob_get_clean();
+
+        $this->assertRegExp('~fail~i', $html, '%s: Reporter should indicate fail');
+        $this->assertRegExp('~zip@button~', $html, '%s: Reporter should show address');
+    }
+
+    public function testMultipleReports()
+    {
+        ob_start();
+        $this->html->notify($this->message, 'foo@bar.tld',
+            Swift_Plugins_Reporter::RESULT_PASS
+            );
+        $this->html->notify($this->message, 'zip@button',
+            Swift_Plugins_Reporter::RESULT_FAIL
+            );
+        $html = ob_get_clean();
+
+        $this->assertRegExp('~ok|pass~i', $html, '%s: Reporter should indicate pass');
+        $this->assertRegExp('~foo@bar\.tld~', $html, '%s: Reporter should show address');
+        $this->assertRegExp('~fail~i', $html, '%s: Reporter should indicate fail');
+        $this->assertRegExp('~zip@button~', $html, '%s: Reporter should show address');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/AuthHandlerTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/AuthHandlerTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/AuthHandlerTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/AuthHandlerTest.php	(date 1495187412000)
@@ -0,0 +1,165 @@
+<?php
+
+class Swift_Transport_Esmtp_AuthHandlerTest extends \SwiftMailerTestCase
+{
+    private $agent;
+
+    protected function setUp()
+    {
+        $this->agent = $this->getMockery('Swift_Transport_SmtpAgent')->shouldIgnoreMissing();
+    }
+
+    public function testKeywordIsAuth()
+    {
+        $auth = $this->createHandler(array());
+        $this->assertEquals('AUTH', $auth->getHandledKeyword());
+    }
+
+    public function testUsernameCanBeSetAndFetched()
+    {
+        $auth = $this->createHandler(array());
+        $auth->setUsername('jack');
+        $this->assertEquals('jack', $auth->getUsername());
+    }
+
+    public function testPasswordCanBeSetAndFetched()
+    {
+        $auth = $this->createHandler(array());
+        $auth->setPassword('pass');
+        $this->assertEquals('pass', $auth->getPassword());
+    }
+
+    public function testAuthModeCanBeSetAndFetched()
+    {
+        $auth = $this->createHandler(array());
+        $auth->setAuthMode('PLAIN');
+        $this->assertEquals('PLAIN', $auth->getAuthMode());
+    }
+
+    public function testMixinMethods()
+    {
+        $auth = $this->createHandler(array());
+        $mixins = $auth->exposeMixinMethods();
+        $this->assertTrue(in_array('getUsername', $mixins),
+            '%s: getUsername() should be accessible via mixin'
+            );
+        $this->assertTrue(in_array('setUsername', $mixins),
+            '%s: setUsername() should be accessible via mixin'
+            );
+        $this->assertTrue(in_array('getPassword', $mixins),
+            '%s: getPassword() should be accessible via mixin'
+            );
+        $this->assertTrue(in_array('setPassword', $mixins),
+            '%s: setPassword() should be accessible via mixin'
+            );
+        $this->assertTrue(in_array('setAuthMode', $mixins),
+            '%s: setAuthMode() should be accessible via mixin'
+            );
+        $this->assertTrue(in_array('getAuthMode', $mixins),
+            '%s: getAuthMode() should be accessible via mixin'
+            );
+    }
+
+    public function testAuthenticatorsAreCalledAccordingToParamsAfterEhlo()
+    {
+        $a1 = $this->createMockAuthenticator('PLAIN');
+        $a2 = $this->createMockAuthenticator('LOGIN');
+
+        $a1->shouldReceive('authenticate')
+           ->never()
+           ->with($this->agent, 'jack', 'pass');
+        $a2->shouldReceive('authenticate')
+           ->once()
+           ->with($this->agent, 'jack', 'pass')
+           ->andReturn(true);
+
+        $auth = $this->createHandler(array($a1, $a2));
+        $auth->setUsername('jack');
+        $auth->setPassword('pass');
+
+        $auth->setKeywordParams(array('CRAM-MD5', 'LOGIN'));
+        $auth->afterEhlo($this->agent);
+    }
+
+    public function testAuthenticatorsAreNotUsedIfNoUsernameSet()
+    {
+        $a1 = $this->createMockAuthenticator('PLAIN');
+        $a2 = $this->createMockAuthenticator('LOGIN');
+
+        $a1->shouldReceive('authenticate')
+           ->never()
+           ->with($this->agent, 'jack', 'pass');
+        $a2->shouldReceive('authenticate')
+           ->never()
+           ->with($this->agent, 'jack', 'pass')
+           ->andReturn(true);
+
+        $auth = $this->createHandler(array($a1, $a2));
+
+        $auth->setKeywordParams(array('CRAM-MD5', 'LOGIN'));
+        $auth->afterEhlo($this->agent);
+    }
+
+    public function testSeveralAuthenticatorsAreTriedIfNeeded()
+    {
+        $a1 = $this->createMockAuthenticator('PLAIN');
+        $a2 = $this->createMockAuthenticator('LOGIN');
+
+        $a1->shouldReceive('authenticate')
+           ->once()
+           ->with($this->agent, 'jack', 'pass')
+           ->andReturn(false);
+        $a2->shouldReceive('authenticate')
+           ->once()
+           ->with($this->agent, 'jack', 'pass')
+           ->andReturn(true);
+
+        $auth = $this->createHandler(array($a1, $a2));
+        $auth->setUsername('jack');
+        $auth->setPassword('pass');
+
+        $auth->setKeywordParams(array('PLAIN', 'LOGIN'));
+        $auth->afterEhlo($this->agent);
+    }
+
+    public function testFirstAuthenticatorToPassBreaksChain()
+    {
+        $a1 = $this->createMockAuthenticator('PLAIN');
+        $a2 = $this->createMockAuthenticator('LOGIN');
+        $a3 = $this->createMockAuthenticator('CRAM-MD5');
+
+        $a1->shouldReceive('authenticate')
+           ->once()
+           ->with($this->agent, 'jack', 'pass')
+           ->andReturn(false);
+        $a2->shouldReceive('authenticate')
+           ->once()
+           ->with($this->agent, 'jack', 'pass')
+           ->andReturn(true);
+        $a3->shouldReceive('authenticate')
+           ->never()
+           ->with($this->agent, 'jack', 'pass');
+
+        $auth = $this->createHandler(array($a1, $a2));
+        $auth->setUsername('jack');
+        $auth->setPassword('pass');
+
+        $auth->setKeywordParams(array('PLAIN', 'LOGIN', 'CRAM-MD5'));
+        $auth->afterEhlo($this->agent);
+    }
+
+    private function createHandler($authenticators)
+    {
+        return new Swift_Transport_Esmtp_AuthHandler($authenticators);
+    }
+
+    private function createMockAuthenticator($type)
+    {
+        $authenticator = $this->getMockery('Swift_Transport_Esmtp_Authenticator')->shouldIgnoreMissing();
+        $authenticator->shouldReceive('getAuthKeyword')
+                      ->zeroOrMoreTimes()
+                      ->andReturn($type);
+
+        return $authenticator;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/ProcessAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/ProcessAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/ProcessAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/ProcessAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,26 @@
+<?php
+
+require_once __DIR__.'/AbstractStreamBufferAcceptanceTest.php';
+
+class Swift_Transport_StreamBuffer_ProcessAcceptanceTest extends Swift_Transport_StreamBuffer_AbstractStreamBufferAcceptanceTest
+{
+    protected function setUp()
+    {
+        if (!defined('SWIFT_SENDMAIL_PATH')) {
+            $this->markTestSkipped(
+                'Cannot run test without a path to sendmail (define '.
+                'SWIFT_SENDMAIL_PATH in tests/acceptance.conf.php if you wish to run this test)'
+             );
+        }
+
+        parent::setUp();
+    }
+
+    protected function initializeBuffer()
+    {
+        $this->buffer->initialize(array(
+            'type' => Swift_Transport_IoBuffer::TYPE_PROCESS,
+            'command' => SWIFT_SENDMAIL_PATH.' -bs',
+        ));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/SocketTimeoutTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/SocketTimeoutTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/SocketTimeoutTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/SocketTimeoutTest.php	(date 1495187412000)
@@ -0,0 +1,65 @@
+<?php
+
+class Swift_Transport_StreamBuffer_SocketTimeoutTest extends \PHPUnit\Framework\TestCase
+{
+    protected $buffer;
+    protected $server;
+    protected $randomHighPort;
+
+    protected function setUp()
+    {
+        if (!defined('SWIFT_SMTP_HOST')) {
+            $this->markTestSkipped(
+                'Cannot run test without an SMTP host to connect to (define '.
+                'SWIFT_SMTP_HOST in tests/acceptance.conf.php if you wish to run this test)'
+             );
+        }
+
+        $serverStarted = false;
+        for ($i = 0; $i < 5; ++$i) {
+            $this->randomHighPort = rand(50000, 65000);
+            $this->server = stream_socket_server('tcp://127.0.0.1:'.$this->randomHighPort);
+            if ($this->server) {
+                $serverStarted = true;
+            }
+        }
+
+        $this->buffer = new Swift_Transport_StreamBuffer(
+            $this->getMockBuilder('Swift_ReplacementFilterFactory')->getMock()
+        );
+    }
+
+    protected function initializeBuffer()
+    {
+        $host = '127.0.0.1';
+        $port = $this->randomHighPort;
+
+        $this->buffer->initialize(array(
+            'type' => Swift_Transport_IoBuffer::TYPE_SOCKET,
+            'host' => $host,
+            'port' => $port,
+            'protocol' => 'tcp',
+            'blocking' => 1,
+            'timeout' => 1,
+        ));
+    }
+
+    public function testTimeoutException()
+    {
+        $this->initializeBuffer();
+        $e = null;
+        try {
+            $line = $this->buffer->readLine(0);
+        } catch (Exception $e) {
+        }
+        $this->assertInstanceOf('Swift_IoException', $e, 'IO Exception Not Thrown On Connection Timeout');
+        $this->assertRegExp('/Connection to .* Timed Out/', $e->getMessage());
+    }
+
+    protected function tearDown()
+    {
+        if ($this->server) {
+            stream_socket_shutdown($this->server, STREAM_SHUT_RDWR);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/SslSocketAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/SslSocketAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/SslSocketAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/SslSocketAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,40 @@
+<?php
+
+require_once __DIR__.'/AbstractStreamBufferAcceptanceTest.php';
+
+class Swift_Transport_StreamBuffer_SslSocketAcceptanceTest extends Swift_Transport_StreamBuffer_AbstractStreamBufferAcceptanceTest
+{
+    protected function setUp()
+    {
+        $streams = stream_get_transports();
+        if (!in_array('ssl', $streams)) {
+            $this->markTestSkipped(
+                'SSL is not configured for your system.  It is not possible to run this test'
+             );
+        }
+        if (!defined('SWIFT_SSL_HOST')) {
+            $this->markTestSkipped(
+                'Cannot run test without an SSL enabled SMTP host to connect to (define '.
+                'SWIFT_SSL_HOST in tests/acceptance.conf.php if you wish to run this test)'
+             );
+        }
+
+        parent::setUp();
+    }
+
+    protected function initializeBuffer()
+    {
+        $parts = explode(':', SWIFT_SSL_HOST);
+        $host = $parts[0];
+        $port = isset($parts[1]) ? $parts[1] : 25;
+
+        $this->buffer->initialize(array(
+            'type' => Swift_Transport_IoBuffer::TYPE_SOCKET,
+            'host' => $host,
+            'port' => $port,
+            'protocol' => 'ssl',
+            'blocking' => 1,
+            'timeout' => 15,
+        ));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/TlsSocketAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/TlsSocketAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/TlsSocketAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/TlsSocketAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,39 @@
+<?php
+
+require_once __DIR__.'/AbstractStreamBufferAcceptanceTest.php';
+
+class Swift_Transport_StreamBuffer_TlsSocketAcceptanceTest extends Swift_Transport_StreamBuffer_AbstractStreamBufferAcceptanceTest
+{
+    protected function setUp()
+    {
+        $streams = stream_get_transports();
+        if (!in_array('tls', $streams)) {
+            $this->markTestSkipped(
+                'TLS is not configured for your system.  It is not possible to run this test'
+             );
+        }
+        if (!defined('SWIFT_TLS_HOST')) {
+            $this->markTestSkipped(
+                'Cannot run test without a TLS enabled SMTP host to connect to (define '.
+                'SWIFT_TLS_HOST in tests/acceptance.conf.php if you wish to run this test)'
+             );
+        }
+        parent::setUp();
+    }
+
+    protected function initializeBuffer()
+    {
+        $parts = explode(':', SWIFT_TLS_HOST);
+        $host = $parts[0];
+        $port = isset($parts[1]) ? $parts[1] : 25;
+
+        $this->buffer->initialize(array(
+            'type' => Swift_Transport_IoBuffer::TYPE_SOCKET,
+            'host' => $host,
+            'port' => $port,
+            'protocol' => 'tls',
+            'blocking' => 1,
+            'timeout' => 15,
+            ));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/PlainContentEncoderAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,88 @@
+<?php
+
+class Swift_Mime_ContentEncoder_PlainContentEncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $samplesDir;
+    private $encoder;
+
+    protected function setUp()
+    {
+        $this->samplesDir = realpath(__DIR__.'/../../../../_samples/charsets');
+        $this->encoder = new Swift_Mime_ContentEncoder_PlainContentEncoder('8bit');
+    }
+
+    public function testEncodingAndDecodingSamplesString()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+                    $encodedText = $this->encoder->encodeString($text);
+
+                    $this->assertEquals(
+                        $encodedText, $text,
+                        '%s: Encoded string should be identical to original string for sample '.
+                        $sampleDir.'/'.$sampleFile
+                        );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+
+    public function testEncodingAndDecodingSamplesByteStream()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+
+                    $os = new Swift_ByteStream_ArrayByteStream();
+                    $os->write($text);
+
+                    $is = new Swift_ByteStream_ArrayByteStream();
+
+                    $this->encoder->encodeByteStream($os, $is);
+
+                    $encoded = '';
+                    while (false !== $bytes = $is->read(8192)) {
+                        $encoded .= $bytes;
+                    }
+
+                    $this->assertEquals(
+                        $encoded, $text,
+                        '%s: Encoded string should be identical to original string for sample '.
+                        $sampleDir.'/'.$sampleFile
+                        );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/ContentEncoder/QpContentEncoderAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,160 @@
+<?php
+
+class Swift_Mime_ContentEncoder_QpContentEncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $samplesDir;
+    private $factory;
+
+    protected function setUp()
+    {
+        $this->samplesDir = realpath(__DIR__.'/../../../../_samples/charsets');
+        $this->factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+    }
+
+    protected function tearDown()
+    {
+        Swift_Preferences::getInstance()->setQPDotEscape(false);
+    }
+
+    public function testEncodingAndDecodingSamples()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $encoding = $encodingDir;
+            $charStream = new Swift_CharacterStream_NgCharacterStream(
+                $this->factory, $encoding);
+            $encoder = new Swift_Mime_ContentEncoder_QpContentEncoder($charStream);
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+
+                    $os = new Swift_ByteStream_ArrayByteStream();
+                    $os->write($text);
+
+                    $is = new Swift_ByteStream_ArrayByteStream();
+                    $encoder->encodeByteStream($os, $is);
+
+                    $encoded = '';
+                    while (false !== $bytes = $is->read(8192)) {
+                        $encoded .= $bytes;
+                    }
+
+                    $this->assertEquals(
+                        quoted_printable_decode($encoded), $text,
+                        '%s: Encoded string should decode back to original string for sample '.
+                        $sampleDir.'/'.$sampleFile
+                        );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+
+    public function testEncodingAndDecodingSamplesFromDiConfiguredInstance()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $encoding = $encodingDir;
+            $encoder = $this->createEncoderFromContainer();
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+
+                    $os = new Swift_ByteStream_ArrayByteStream();
+                    $os->write($text);
+
+                    $is = new Swift_ByteStream_ArrayByteStream();
+                    $encoder->encodeByteStream($os, $is);
+
+                    $encoded = '';
+                    while (false !== $bytes = $is->read(8192)) {
+                        $encoded .= $bytes;
+                    }
+
+                    $this->assertEquals(
+                        str_replace("\r\n", "\n", quoted_printable_decode($encoded)), str_replace("\r\n", "\n", $text),
+                        '%s: Encoded string should decode back to original string for sample '.
+                        $sampleDir.'/'.$sampleFile
+                        );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+
+    public function testEncodingLFTextWithDiConfiguredInstance()
+    {
+        $encoder = $this->createEncoderFromContainer();
+        $this->assertEquals("a\r\nb\r\nc", $encoder->encodeString("a\nb\nc"));
+    }
+
+    public function testEncodingCRTextWithDiConfiguredInstance()
+    {
+        $encoder = $this->createEncoderFromContainer();
+        $this->assertEquals("a\r\nb\r\nc", $encoder->encodeString("a\rb\rc"));
+    }
+
+    public function testEncodingLFCRTextWithDiConfiguredInstance()
+    {
+        $encoder = $this->createEncoderFromContainer();
+        $this->assertEquals("a\r\n\r\nb\r\n\r\nc", $encoder->encodeString("a\n\rb\n\rc"));
+    }
+
+    public function testEncodingCRLFTextWithDiConfiguredInstance()
+    {
+        $encoder = $this->createEncoderFromContainer();
+        $this->assertEquals("a\r\nb\r\nc", $encoder->encodeString("a\r\nb\r\nc"));
+    }
+
+    public function testEncodingDotStuffingWithDiConfiguredInstance()
+    {
+        // Enable DotEscaping
+        Swift_Preferences::getInstance()->setQPDotEscape(true);
+        $encoder = $this->createEncoderFromContainer();
+        $this->assertEquals("a=2E\r\n=2E\r\n=2Eb\r\nc", $encoder->encodeString("a.\r\n.\r\n.b\r\nc"));
+        // Return to default
+        Swift_Preferences::getInstance()->setQPDotEscape(false);
+        $encoder = $this->createEncoderFromContainer();
+        $this->assertEquals("a.\r\n.\r\n.b\r\nc", $encoder->encodeString("a.\r\n.\r\n.b\r\nc"));
+    }
+
+    public function testDotStuffingEncodingAndDecodingSamplesFromDiConfiguredInstance()
+    {
+        // Enable DotEscaping
+        Swift_Preferences::getInstance()->setQPDotEscape(true);
+        $this->testEncodingAndDecodingSamplesFromDiConfiguredInstance();
+    }
+
+    private function createEncoderFromContainer()
+    {
+        return Swift_DependencyContainer::getInstance()
+            ->lookup('mime.qpcontentencoder')
+            ;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/AbstractStreamBufferAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/AbstractStreamBufferAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/AbstractStreamBufferAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/AbstractStreamBufferAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,131 @@
+<?php
+
+abstract class Swift_Transport_StreamBuffer_AbstractStreamBufferAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    protected $buffer;
+
+    abstract protected function initializeBuffer();
+
+    protected function setUp()
+    {
+        if (true == getenv('TRAVIS')) {
+            $this->markTestSkipped(
+                'Will fail on travis-ci if not skipped due to travis blocking '.
+                'socket mailing tcp connections.'
+             );
+        }
+
+        $this->buffer = new Swift_Transport_StreamBuffer(
+            $this->getMockBuilder('Swift_ReplacementFilterFactory')->getMock()
+        );
+    }
+
+    public function testReadLine()
+    {
+        $this->initializeBuffer();
+
+        $line = $this->buffer->readLine(0);
+        $this->assertRegExp('/^[0-9]{3}.*?\r\n$/D', $line);
+        $seq = $this->buffer->write("QUIT\r\n");
+        $this->assertTrue((bool) $seq);
+        $line = $this->buffer->readLine($seq);
+        $this->assertRegExp('/^[0-9]{3}.*?\r\n$/D', $line);
+        $this->buffer->terminate();
+    }
+
+    public function testWrite()
+    {
+        $this->initializeBuffer();
+
+        $line = $this->buffer->readLine(0);
+        $this->assertRegExp('/^[0-9]{3}.*?\r\n$/D', $line);
+
+        $seq = $this->buffer->write("HELO foo\r\n");
+        $this->assertTrue((bool) $seq);
+        $line = $this->buffer->readLine($seq);
+        $this->assertRegExp('/^[0-9]{3}.*?\r\n$/D', $line);
+
+        $seq = $this->buffer->write("QUIT\r\n");
+        $this->assertTrue((bool) $seq);
+        $line = $this->buffer->readLine($seq);
+        $this->assertRegExp('/^[0-9]{3}.*?\r\n$/D', $line);
+        $this->buffer->terminate();
+    }
+
+    public function testBindingOtherStreamsMirrorsWriteOperations()
+    {
+        $this->initializeBuffer();
+
+        $is1 = $this->createMockInputStream();
+        $is2 = $this->createMockInputStream();
+
+        $is1->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is1->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+        $is2->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is2->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+
+        $this->buffer->bind($is1);
+        $this->buffer->bind($is2);
+
+        $this->buffer->write('x');
+        $this->buffer->write('y');
+    }
+
+    public function testBindingOtherStreamsMirrorsFlushOperations()
+    {
+        $this->initializeBuffer();
+
+        $is1 = $this->createMockInputStream();
+        $is2 = $this->createMockInputStream();
+
+        $is1->expects($this->once())
+            ->method('flushBuffers');
+        $is2->expects($this->once())
+            ->method('flushBuffers');
+
+        $this->buffer->bind($is1);
+        $this->buffer->bind($is2);
+
+        $this->buffer->flushBuffers();
+    }
+
+    public function testUnbindingStreamPreventsFurtherWrites()
+    {
+        $this->initializeBuffer();
+
+        $is1 = $this->createMockInputStream();
+        $is2 = $this->createMockInputStream();
+
+        $is1->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is1->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+        $is2->expects($this->once())
+            ->method('write')
+            ->with('x');
+
+        $this->buffer->bind($is1);
+        $this->buffer->bind($is2);
+
+        $this->buffer->write('x');
+
+        $this->buffer->unbind($is2);
+
+        $this->buffer->write('y');
+    }
+
+    private function createMockInputStream()
+    {
+        return $this->getMockBuilder('Swift_InputByteStream')->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/BasicSocketAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/BasicSocketAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/BasicSocketAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Transport/StreamBuffer/BasicSocketAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,33 @@
+<?php
+
+require_once __DIR__.'/AbstractStreamBufferAcceptanceTest.php';
+
+class Swift_Transport_StreamBuffer_BasicSocketAcceptanceTest extends Swift_Transport_StreamBuffer_AbstractStreamBufferAcceptanceTest
+{
+    protected function setUp()
+    {
+        if (!defined('SWIFT_SMTP_HOST')) {
+            $this->markTestSkipped(
+                'Cannot run test without an SMTP host to connect to (define '.
+                'SWIFT_SMTP_HOST in tests/acceptance.conf.php if you wish to run this test)'
+             );
+        }
+        parent::setUp();
+    }
+
+    protected function initializeBuffer()
+    {
+        $parts = explode(':', SWIFT_SMTP_HOST);
+        $host = $parts[0];
+        $port = isset($parts[1]) ? $parts[1] : 25;
+
+        $this->buffer->initialize(array(
+            'type' => Swift_Transport_IoBuffer::TYPE_SOCKET,
+            'host' => $host,
+            'port' => $port,
+            'protocol' => 'tcp',
+            'blocking' => 1,
+            'timeout' => 15,
+        ));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/XOAuth2Authenticator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/XOAuth2Authenticator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/XOAuth2Authenticator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/XOAuth2Authenticator.php	(date 1495187412000)
@@ -0,0 +1,70 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles XOAUTH2 authentication.
+ *
+ * Example:
+ * <code>
+ * $transport = (new Swift_SmtpTransport('smtp.gmail.com', 587, 'tls'))
+ *   ->setAuthMode('XOAUTH2')
+ *   ->setUsername('YOUR_EMAIL_ADDRESS')
+ *   ->setPassword('YOUR_ACCESS_TOKEN');
+ * </code>
+ *
+ * @author xu.li<AthenaLightenedMyPath@gmail.com>
+ *
+ * @see        https://developers.google.com/google-apps/gmail/xoauth2_protocol
+ */
+class Swift_Transport_Esmtp_Auth_XOAuth2Authenticator implements Swift_Transport_Esmtp_Authenticator
+{
+    /**
+     * Get the name of the AUTH mechanism this Authenticator handles.
+     *
+     * @return string
+     */
+    public function getAuthKeyword()
+    {
+        return 'XOAUTH2';
+    }
+
+    /**
+     * Try to authenticate the user with $email and $token.
+     *
+     * @param Swift_Transport_SmtpAgent $agent
+     * @param string                    $email
+     * @param string                    $token
+     *
+     * @return bool
+     */
+    public function authenticate(Swift_Transport_SmtpAgent $agent, $email, $token)
+    {
+        try {
+            $param = $this->constructXOAuth2Params($email, $token);
+            $agent->executeCommand('AUTH XOAUTH2 '.$param."\r\n", array(235));
+
+            return true;
+        } catch (Swift_TransportException $e) {
+            $agent->executeCommand("RSET\r\n", array(250));
+
+            return false;
+        }
+    }
+
+    /**
+     * Construct the auth parameter.
+     *
+     * @see https://developers.google.com/google-apps/gmail/xoauth2_protocol#the_sasl_xoauth2_mechanism
+     */
+    protected function constructXOAuth2Params($email, $token)
+    {
+        return base64_encode("user=$email\1auth=Bearer $token\1\1");
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/CramMd5AuthenticatorTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/CramMd5AuthenticatorTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/CramMd5AuthenticatorTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/CramMd5AuthenticatorTest.php	(date 1495187412000)
@@ -0,0 +1,64 @@
+<?php
+
+class Swift_Transport_Esmtp_Auth_CramMd5AuthenticatorTest extends \SwiftMailerTestCase
+{
+    private $agent;
+
+    protected function setUp()
+    {
+        $this->agent = $this->getMockery('Swift_Transport_SmtpAgent')->shouldIgnoreMissing();
+    }
+
+    public function testKeywordIsCramMd5()
+    {
+        /* -- RFC 2195, 2.
+        The authentication type associated with CRAM is "CRAM-MD5".
+        */
+
+        $cram = $this->getAuthenticator();
+        $this->assertEquals('CRAM-MD5', $cram->getAuthKeyword());
+    }
+
+    public function testSuccessfulAuthentication()
+    {
+        $cram = $this->getAuthenticator();
+
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with("AUTH CRAM-MD5\r\n", array(334))
+             ->andReturn('334 '.base64_encode('<foo@bar>')."\r\n");
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with(\Mockery::any(), array(235));
+
+        $this->assertTrue($cram->authenticate($this->agent, 'jack', 'pass'),
+            '%s: The buffer accepted all commands authentication should succeed'
+            );
+    }
+
+    public function testAuthenticationFailureSendRsetAndReturnFalse()
+    {
+        $cram = $this->getAuthenticator();
+
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with("AUTH CRAM-MD5\r\n", array(334))
+             ->andReturn('334 '.base64_encode('<foo@bar>')."\r\n");
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with(\Mockery::any(), array(235))
+             ->andThrow(new Swift_TransportException(''));
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with("RSET\r\n", array(250));
+
+        $this->assertFalse($cram->authenticate($this->agent, 'jack', 'pass'),
+            '%s: Authentication fails, so RSET should be sent'
+            );
+    }
+
+    private function getAuthenticator()
+    {
+        return new Swift_Transport_Esmtp_Auth_CramMd5Authenticator();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/LoginAuthenticatorTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/LoginAuthenticatorTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/LoginAuthenticatorTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/LoginAuthenticatorTest.php	(date 1495187412000)
@@ -0,0 +1,64 @@
+<?php
+
+class Swift_Transport_Esmtp_Auth_LoginAuthenticatorTest extends \SwiftMailerTestCase
+{
+    private $agent;
+
+    protected function setUp()
+    {
+        $this->agent = $this->getMockery('Swift_Transport_SmtpAgent')->shouldIgnoreMissing();
+    }
+
+    public function testKeywordIsLogin()
+    {
+        $login = $this->getAuthenticator();
+        $this->assertEquals('LOGIN', $login->getAuthKeyword());
+    }
+
+    public function testSuccessfulAuthentication()
+    {
+        $login = $this->getAuthenticator();
+
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with("AUTH LOGIN\r\n", array(334));
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with(base64_encode('jack')."\r\n", array(334));
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with(base64_encode('pass')."\r\n", array(235));
+
+        $this->assertTrue($login->authenticate($this->agent, 'jack', 'pass'),
+            '%s: The buffer accepted all commands authentication should succeed'
+            );
+    }
+
+    public function testAuthenticationFailureSendRsetAndReturnFalse()
+    {
+        $login = $this->getAuthenticator();
+
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with("AUTH LOGIN\r\n", array(334));
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with(base64_encode('jack')."\r\n", array(334));
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with(base64_encode('pass')."\r\n", array(235))
+             ->andThrow(new Swift_TransportException(''));
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with("RSET\r\n", array(250));
+
+        $this->assertFalse($login->authenticate($this->agent, 'jack', 'pass'),
+            '%s: Authentication fails, so RSET should be sent'
+            );
+    }
+
+    private function getAuthenticator()
+    {
+        return new Swift_Transport_Esmtp_Auth_LoginAuthenticator();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/NTLMAuthenticatorTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/NTLMAuthenticatorTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/NTLMAuthenticatorTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/NTLMAuthenticatorTest.php	(date 1495187412000)
@@ -0,0 +1,201 @@
+<?php
+
+class Swift_Transport_Esmtp_Auth_NTLMAuthenticatorTest extends \SwiftMailerTestCase
+{
+    private $message1 = '4e544c4d535350000100000007020000';
+    private $message2 = '4e544c4d53535000020000000c000c003000000035828980514246973ea892c10000000000000000460046003c00000054004500530054004e00540002000c0054004500530054004e00540001000c004d0045004d0042004500520003001e006d0065006d006200650072002e0074006500730074002e0063006f006d0000000000';
+    private $message3 = '4e544c4d5353500003000000180018006000000076007600780000000c000c0040000000080008004c0000000c000c0054000000000000009a0000000102000054004500530054004e00540074006500730074004d0045004d00420045005200bf2e015119f6bdb3f6fdb768aa12d478f5ce3d2401c8f6e9caa4da8f25d5e840974ed8976d3ada46010100000000000030fa7e3c677bc301f5ce3d2401c8f6e90000000002000c0054004500530054004e00540001000c004d0045004d0042004500520003001e006d0065006d006200650072002e0074006500730074002e0063006f006d000000000000000000';
+
+    protected function setUp()
+    {
+        if (!function_exists('openssl_encrypt') || !function_exists('openssl_random_pseudo_bytes') || !function_exists('bcmul') || !function_exists('iconv')) {
+            $this->markTestSkipped('One of the required functions is not available.');
+        }
+    }
+
+    public function testKeywordIsNtlm()
+    {
+        $login = $this->getAuthenticator();
+        $this->assertEquals('NTLM', $login->getAuthKeyword());
+    }
+
+    public function testMessage1Generator()
+    {
+        $login = $this->getAuthenticator();
+        $message1 = $this->invokePrivateMethod('createMessage1', $login);
+
+        $this->assertEquals($this->message1, bin2hex($message1), '%s: We send the smallest ntlm message which should never fail.');
+    }
+
+    public function testLMv1Generator()
+    {
+        $password = 'test1234';
+        $challenge = 'b019d38bad875c9d';
+        $lmv1 = '1879f60127f8a877022132ec221bcbf3ca016a9f76095606';
+
+        $login = $this->getAuthenticator();
+        $lmv1Result = $this->invokePrivateMethod('createLMPassword', $login, array($password, hex2bin($challenge)));
+
+        $this->assertEquals($lmv1, bin2hex($lmv1Result), '%s: The keys should be the same cause we use the same values to generate them.');
+    }
+
+    public function testLMv2Generator()
+    {
+        $username = 'user';
+        $password = 'SecREt01';
+        $domain = 'DOMAIN';
+        $challenge = '0123456789abcdef';
+        $lmv2 = 'd6e6152ea25d03b7c6ba6629c2d6aaf0ffffff0011223344';
+
+        $login = $this->getAuthenticator();
+        $lmv2Result = $this->invokePrivateMethod('createLMv2Password', $login, array($password, $username, $domain, hex2bin($challenge), hex2bin('ffffff0011223344')));
+
+        $this->assertEquals($lmv2, bin2hex($lmv2Result), '%s: The keys should be the same cause we use the same values to generate them.');
+    }
+
+    public function testMessage3v1Generator()
+    {
+        $username = 'test';
+        $domain = 'TESTNT';
+        $workstation = 'MEMBER';
+        $lmResponse = '1879f60127f8a877022132ec221bcbf3ca016a9f76095606';
+        $ntlmResponse = 'e6285df3287c5d194f84df1a94817c7282d09754b6f9e02a';
+        $message3T = '4e544c4d5353500003000000180018006000000018001800780000000c000c0040000000080008004c0000000c000c0054000000000000009a0000000102000054004500530054004e00540074006500730074004d0045004d004200450052001879f60127f8a877022132ec221bcbf3ca016a9f76095606e6285df3287c5d194f84df1a94817c7282d09754b6f9e02a';
+
+        $login = $this->getAuthenticator();
+        $message3 = $this->invokePrivateMethod('createMessage3', $login, array($domain, $username, $workstation, hex2bin($lmResponse), hex2bin($ntlmResponse)));
+
+        $this->assertEquals($message3T, bin2hex($message3), '%s: We send the same information as the example is created with so this should be the same');
+    }
+
+    public function testMessage3v2Generator()
+    {
+        $username = 'test';
+        $domain = 'TESTNT';
+        $workstation = 'MEMBER';
+        $lmResponse = 'bf2e015119f6bdb3f6fdb768aa12d478f5ce3d2401c8f6e9';
+        $ntlmResponse = 'caa4da8f25d5e840974ed8976d3ada46010100000000000030fa7e3c677bc301f5ce3d2401c8f6e90000000002000c0054004500530054004e00540001000c004d0045004d0042004500520003001e006d0065006d006200650072002e0074006500730074002e0063006f006d000000000000000000';
+
+        $login = $this->getAuthenticator();
+        $message3 = $this->invokePrivateMethod('createMessage3', $login, array($domain, $username, $workstation, hex2bin($lmResponse), hex2bin($ntlmResponse)));
+
+        $this->assertEquals($this->message3, bin2hex($message3), '%s: We send the same information as the example is created with so this should be the same');
+    }
+
+    public function testGetDomainAndUsername()
+    {
+        $username = "DOMAIN\user";
+
+        $login = $this->getAuthenticator();
+        list($domain, $user) = $this->invokePrivateMethod('getDomainAndUsername', $login, array($username));
+
+        $this->assertEquals('DOMAIN', $domain, '%s: the fetched domain did not match');
+        $this->assertEquals('user', $user, '%s: the fetched user did not match');
+    }
+
+    public function testGetDomainAndUsernameWithExtension()
+    {
+        $username = "domain.com\user";
+
+        $login = $this->getAuthenticator();
+        list($domain, $user) = $this->invokePrivateMethod('getDomainAndUsername', $login, array($username));
+
+        $this->assertEquals('domain.com', $domain, '%s: the fetched domain did not match');
+        $this->assertEquals('user', $user, '%s: the fetched user did not match');
+    }
+
+    public function testGetDomainAndUsernameWithAtSymbol()
+    {
+        $username = 'user@DOMAIN';
+
+        $login = $this->getAuthenticator();
+        list($domain, $user) = $this->invokePrivateMethod('getDomainAndUsername', $login, array($username));
+
+        $this->assertEquals('DOMAIN', $domain, '%s: the fetched domain did not match');
+        $this->assertEquals('user', $user, '%s: the fetched user did not match');
+    }
+
+    public function testGetDomainAndUsernameWithAtSymbolAndExtension()
+    {
+        $username = 'user@domain.com';
+
+        $login = $this->getAuthenticator();
+        list($domain, $user) = $this->invokePrivateMethod('getDomainAndUsername', $login, array($username));
+
+        $this->assertEquals('domain.com', $domain, '%s: the fetched domain did not match');
+        $this->assertEquals('user', $user, '%s: the fetched user did not match');
+    }
+
+    public function testGetDomainAndUsernameWithoutDomain()
+    {
+        $username = 'user';
+
+        $login = $this->getAuthenticator();
+        list($domain, $user) = $this->invokePrivateMethod('getDomainAndUsername', $login, array($username));
+
+        $this->assertEquals('', $domain, '%s: the fetched domain did not match');
+        $this->assertEquals('user', $user, '%s: the fetched user did not match');
+    }
+
+    public function testSuccessfulAuthentication()
+    {
+        $domain = 'TESTNT';
+        $username = 'test';
+        $secret = 'test1234';
+
+        $ntlm = $this->getAuthenticator();
+        $agent = $this->getAgent();
+        $agent->shouldReceive('executeCommand')
+              ->once()
+              ->with('AUTH NTLM '.base64_encode(
+                        $this->invokePrivateMethod('createMessage1', $ntlm)
+                    )."\r\n", array(334))
+              ->andReturn('334 '.base64_encode(hex2bin('4e544c4d53535000020000000c000c003000000035828980514246973ea892c10000000000000000460046003c00000054004500530054004e00540002000c0054004500530054004e00540001000c004d0045004d0042004500520003001e006d0065006d006200650072002e0074006500730074002e0063006f006d0000000000')));
+        $agent->shouldReceive('executeCommand')
+              ->once()
+              ->with(base64_encode(
+                        $this->invokePrivateMethod('createMessage3', $ntlm, array($domain, $username, hex2bin('4d0045004d00420045005200'), hex2bin('bf2e015119f6bdb3f6fdb768aa12d478f5ce3d2401c8f6e9'), hex2bin('caa4da8f25d5e840974ed8976d3ada46010100000000000030fa7e3c677bc301f5ce3d2401c8f6e90000000002000c0054004500530054004e00540001000c004d0045004d0042004500520003001e006d0065006d006200650072002e0074006500730074002e0063006f006d000000000000000000'))
+                    ))."\r\n", array(235));
+
+        $this->assertTrue($ntlm->authenticate($agent, $username.'@'.$domain, $secret, hex2bin('30fa7e3c677bc301'), hex2bin('f5ce3d2401c8f6e9')), '%s: The buffer accepted all commands authentication should succeed');
+    }
+
+    public function testAuthenticationFailureSendRsetAndReturnFalse()
+    {
+        $domain = 'TESTNT';
+        $username = 'test';
+        $secret = 'test1234';
+
+        $ntlm = $this->getAuthenticator();
+        $agent = $this->getAgent();
+        $agent->shouldReceive('executeCommand')
+              ->once()
+              ->with('AUTH NTLM '.base64_encode(
+                        $this->invokePrivateMethod('createMessage1', $ntlm)
+                    )."\r\n", array(334))
+              ->andThrow(new Swift_TransportException(''));
+        $agent->shouldReceive('executeCommand')
+              ->once()
+              ->with("RSET\r\n", array(250));
+
+        $this->assertFalse($ntlm->authenticate($agent, $username.'@'.$domain, $secret, hex2bin('30fa7e3c677bc301'), hex2bin('f5ce3d2401c8f6e9')), '%s: Authentication fails, so RSET should be sent');
+    }
+
+    private function getAuthenticator()
+    {
+        return new Swift_Transport_Esmtp_Auth_NTLMAuthenticator();
+    }
+
+    private function getAgent()
+    {
+        return $this->getMockery('Swift_Transport_SmtpAgent')->shouldIgnoreMissing();
+    }
+
+    private function invokePrivateMethod($method, $instance, array $args = array())
+    {
+        $methodC = new ReflectionMethod($instance, trim($method));
+        $methodC->setAccessible(true);
+
+        return $methodC->invokeArgs($instance, $args);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php	(date 1495187412000)
@@ -0,0 +1,81 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles CRAM-MD5 authentication.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Transport_Esmtp_Auth_CramMd5Authenticator implements Swift_Transport_Esmtp_Authenticator
+{
+    /**
+     * Get the name of the AUTH mechanism this Authenticator handles.
+     *
+     * @return string
+     */
+    public function getAuthKeyword()
+    {
+        return 'CRAM-MD5';
+    }
+
+    /**
+     * Try to authenticate the user with $username and $password.
+     *
+     * @param Swift_Transport_SmtpAgent $agent
+     * @param string                    $username
+     * @param string                    $password
+     *
+     * @return bool
+     */
+    public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)
+    {
+        try {
+            $challenge = $agent->executeCommand("AUTH CRAM-MD5\r\n", array(334));
+            $challenge = base64_decode(substr($challenge, 4));
+            $message = base64_encode(
+                $username.' '.$this->getResponse($password, $challenge)
+                );
+            $agent->executeCommand(sprintf("%s\r\n", $message), array(235));
+
+            return true;
+        } catch (Swift_TransportException $e) {
+            $agent->executeCommand("RSET\r\n", array(250));
+
+            return false;
+        }
+    }
+
+    /**
+     * Generate a CRAM-MD5 response from a server challenge.
+     *
+     * @param string $secret
+     * @param string $challenge
+     *
+     * @return string
+     */
+    private function getResponse($secret, $challenge)
+    {
+        if (strlen($secret) > 64) {
+            $secret = pack('H32', md5($secret));
+        }
+
+        if (strlen($secret) < 64) {
+            $secret = str_pad($secret, 64, chr(0));
+        }
+
+        $k_ipad = substr($secret, 0, 64) ^ str_repeat(chr(0x36), 64);
+        $k_opad = substr($secret, 0, 64) ^ str_repeat(chr(0x5C), 64);
+
+        $inner = pack('H32', md5($k_ipad.$challenge));
+        $digest = md5($k_opad.$inner);
+
+        return $digest;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/LoginAuthenticator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/LoginAuthenticator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/LoginAuthenticator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/LoginAuthenticator.php	(date 1495187412000)
@@ -0,0 +1,51 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles LOGIN authentication.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Transport_Esmtp_Auth_LoginAuthenticator implements Swift_Transport_Esmtp_Authenticator
+{
+    /**
+     * Get the name of the AUTH mechanism this Authenticator handles.
+     *
+     * @return string
+     */
+    public function getAuthKeyword()
+    {
+        return 'LOGIN';
+    }
+
+    /**
+     * Try to authenticate the user with $username and $password.
+     *
+     * @param Swift_Transport_SmtpAgent $agent
+     * @param string                    $username
+     * @param string                    $password
+     *
+     * @return bool
+     */
+    public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)
+    {
+        try {
+            $agent->executeCommand("AUTH LOGIN\r\n", array(334));
+            $agent->executeCommand(sprintf("%s\r\n", base64_encode($username)), array(334));
+            $agent->executeCommand(sprintf("%s\r\n", base64_encode($password)), array(235));
+
+            return true;
+        } catch (Swift_TransportException $e) {
+            $agent->executeCommand("RSET\r\n", array(250));
+
+            return false;
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php	(date 1495187412000)
@@ -0,0 +1,708 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * This authentication is for Exchange servers. We support version 1 & 2.
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles NTLM authentication.
+ *
+ * @author     Ward Peeters <ward@coding-tech.com>
+ */
+class Swift_Transport_Esmtp_Auth_NTLMAuthenticator implements Swift_Transport_Esmtp_Authenticator
+{
+    const NTLMSIG = "NTLMSSP\x00";
+    const DESCONST = 'KGS!@#$%';
+
+    /**
+     * Get the name of the AUTH mechanism this Authenticator handles.
+     *
+     * @return string
+     */
+    public function getAuthKeyword()
+    {
+        return 'NTLM';
+    }
+
+    /**
+     * Try to authenticate the user with $username and $password.
+     *
+     * @param Swift_Transport_SmtpAgent $agent
+     * @param string                    $username
+     * @param string                    $password
+     *
+     * @return bool
+     */
+    public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)
+    {
+        if (!function_exists('openssl_random_pseudo_bytes') || !function_exists('openssl_encrypt')) {
+            throw new LogicException('The OpenSSL extension must be enabled to use the NTLM authenticator.');
+        }
+
+        if (!function_exists('bcmul')) {
+            throw new LogicException('The BCMath functions must be enabled to use the NTLM authenticator.');
+        }
+
+        try {
+            // execute AUTH command and filter out the code at the beginning
+            // AUTH NTLM xxxx
+            $response = base64_decode(substr(trim($this->sendMessage1($agent)), 4));
+
+            // extra parameters for our unit cases
+            $timestamp = func_num_args() > 3 ? func_get_arg(3) : $this->getCorrectTimestamp(bcmul(microtime(true), '1000'));
+            $client = func_num_args() > 4 ? func_get_arg(4) : $this->getRandomBytes(8);
+
+            // Message 3 response
+            $this->sendMessage3($response, $username, $password, $timestamp, $client, $agent);
+
+            return true;
+        } catch (Swift_TransportException $e) {
+            $agent->executeCommand("RSET\r\n", array(250));
+
+            return false;
+        }
+    }
+
+    protected function si2bin($si, $bits = 32)
+    {
+        $bin = null;
+        if ($si >= -pow(2, $bits - 1) && ($si <= pow(2, $bits - 1))) {
+            // positive or zero
+            if ($si >= 0) {
+                $bin = base_convert($si, 10, 2);
+                // pad to $bits bit
+                $bin_length = strlen($bin);
+                if ($bin_length < $bits) {
+                    $bin = str_repeat('0', $bits - $bin_length).$bin;
+                }
+            } else {
+                // negative
+                $si = -$si - pow(2, $bits);
+                $bin = base_convert($si, 10, 2);
+                $bin_length = strlen($bin);
+                if ($bin_length > $bits) {
+                    $bin = str_repeat('1', $bits - $bin_length).$bin;
+                }
+            }
+        }
+
+        return $bin;
+    }
+
+    /**
+     * Send our auth message and returns the response.
+     *
+     * @param Swift_Transport_SmtpAgent $agent
+     *
+     * @return string SMTP Response
+     */
+    protected function sendMessage1(Swift_Transport_SmtpAgent $agent)
+    {
+        $message = $this->createMessage1();
+
+        return $agent->executeCommand(sprintf("AUTH %s %s\r\n", $this->getAuthKeyword(), base64_encode($message)), array(334));
+    }
+
+    /**
+     * Fetch all details of our response (message 2).
+     *
+     * @param string $response
+     *
+     * @return array our response parsed
+     */
+    protected function parseMessage2($response)
+    {
+        $responseHex = bin2hex($response);
+        $length = floor(hexdec(substr($responseHex, 28, 4)) / 256) * 2;
+        $offset = floor(hexdec(substr($responseHex, 32, 4)) / 256) * 2;
+        $challenge = hex2bin(substr($responseHex, 48, 16));
+        $context = hex2bin(substr($responseHex, 64, 16));
+        $targetInfoH = hex2bin(substr($responseHex, 80, 16));
+        $targetName = hex2bin(substr($responseHex, $offset, $length));
+        $offset = floor(hexdec(substr($responseHex, 88, 4)) / 256) * 2;
+        $targetInfoBlock = substr($responseHex, $offset);
+        list($domainName, $serverName, $DNSDomainName, $DNSServerName, $terminatorByte) = $this->readSubBlock($targetInfoBlock);
+
+        return array(
+            $challenge,
+            $context,
+            $targetInfoH,
+            $targetName,
+            $domainName,
+            $serverName,
+            $DNSDomainName,
+            $DNSServerName,
+            hex2bin($targetInfoBlock),
+            $terminatorByte,
+        );
+    }
+
+    /**
+     * Read the blob information in from message2.
+     *
+     * @param $block
+     *
+     * @return array
+     */
+    protected function readSubBlock($block)
+    {
+        // remove terminatorByte cause it's always the same
+        $block = substr($block, 0, -8);
+
+        $length = strlen($block);
+        $offset = 0;
+        $data = array();
+        while ($offset < $length) {
+            $blockLength = hexdec(substr(substr($block, $offset, 8), -4)) / 256;
+            $offset += 8;
+            $data[] = hex2bin(substr($block, $offset, $blockLength * 2));
+            $offset += $blockLength * 2;
+        }
+
+        if (count($data) == 3) {
+            $data[] = $data[2];
+            $data[2] = '';
+        }
+
+        $data[] = $this->createByte('00');
+
+        return $data;
+    }
+
+    /**
+     * Send our final message with all our data.
+     *
+     * @param string                    $response  Message 1 response (message 2)
+     * @param string                    $username
+     * @param string                    $password
+     * @param string                    $timestamp
+     * @param string                    $client
+     * @param Swift_Transport_SmtpAgent $agent
+     * @param bool                      $v2        Use version2 of the protocol
+     *
+     * @return string
+     */
+    protected function sendMessage3($response, $username, $password, $timestamp, $client, Swift_Transport_SmtpAgent $agent, $v2 = true)
+    {
+        list($domain, $username) = $this->getDomainAndUsername($username);
+        //$challenge, $context, $targetInfoH, $targetName, $domainName, $workstation, $DNSDomainName, $DNSServerName, $blob, $ter
+        list($challenge, , , , , $workstation, , , $blob) = $this->parseMessage2($response);
+
+        if (!$v2) {
+            // LMv1
+            $lmResponse = $this->createLMPassword($password, $challenge);
+            // NTLMv1
+            $ntlmResponse = $this->createNTLMPassword($password, $challenge);
+        } else {
+            // LMv2
+            $lmResponse = $this->createLMv2Password($password, $username, $domain, $challenge, $client);
+            // NTLMv2
+            $ntlmResponse = $this->createNTLMv2Hash($password, $username, $domain, $challenge, $blob, $timestamp, $client);
+        }
+
+        $message = $this->createMessage3($domain, $username, $workstation, $lmResponse, $ntlmResponse);
+
+        return $agent->executeCommand(sprintf("%s\r\n", base64_encode($message)), array(235));
+    }
+
+    /**
+     * Create our message 1.
+     *
+     * @return string
+     */
+    protected function createMessage1()
+    {
+        return self::NTLMSIG
+        .$this->createByte('01') // Message 1
+.$this->createByte('0702'); // Flags
+    }
+
+    /**
+     * Create our message 3.
+     *
+     * @param string $domain
+     * @param string $username
+     * @param string $workstation
+     * @param string $lmResponse
+     * @param string $ntlmResponse
+     *
+     * @return string
+     */
+    protected function createMessage3($domain, $username, $workstation, $lmResponse, $ntlmResponse)
+    {
+        // Create security buffers
+        $domainSec = $this->createSecurityBuffer($domain, 64);
+        $domainInfo = $this->readSecurityBuffer(bin2hex($domainSec));
+        $userSec = $this->createSecurityBuffer($username, ($domainInfo[0] + $domainInfo[1]) / 2);
+        $userInfo = $this->readSecurityBuffer(bin2hex($userSec));
+        $workSec = $this->createSecurityBuffer($workstation, ($userInfo[0] + $userInfo[1]) / 2);
+        $workInfo = $this->readSecurityBuffer(bin2hex($workSec));
+        $lmSec = $this->createSecurityBuffer($lmResponse, ($workInfo[0] + $workInfo[1]) / 2, true);
+        $lmInfo = $this->readSecurityBuffer(bin2hex($lmSec));
+        $ntlmSec = $this->createSecurityBuffer($ntlmResponse, ($lmInfo[0] + $lmInfo[1]) / 2, true);
+
+        return self::NTLMSIG
+        .$this->createByte('03') // TYPE 3 message
+.$lmSec // LM response header
+.$ntlmSec // NTLM response header
+.$domainSec // Domain header
+.$userSec // User header
+.$workSec // Workstation header
+.$this->createByte('000000009a', 8) // session key header (empty)
+.$this->createByte('01020000') // FLAGS
+.$this->convertTo16bit($domain) // domain name
+.$this->convertTo16bit($username) // username
+.$this->convertTo16bit($workstation) // workstation
+.$lmResponse
+        .$ntlmResponse;
+    }
+
+    /**
+     * @param string $timestamp  Epoch timestamp in microseconds
+     * @param string $client     Random bytes
+     * @param string $targetInfo
+     *
+     * @return string
+     */
+    protected function createBlob($timestamp, $client, $targetInfo)
+    {
+        return $this->createByte('0101')
+        .$this->createByte('00')
+        .$timestamp
+        .$client
+        .$this->createByte('00')
+        .$targetInfo
+        .$this->createByte('00');
+    }
+
+    /**
+     * Get domain and username from our username.
+     *
+     * @example DOMAIN\username
+     *
+     * @param string $name
+     *
+     * @return array
+     */
+    protected function getDomainAndUsername($name)
+    {
+        if (strpos($name, '\\') !== false) {
+            return explode('\\', $name);
+        }
+
+        if (false !== strpos($name, '@')) {
+            list($user, $domain) = explode('@', $name);
+
+            return array($domain, $user);
+        }
+
+        // no domain passed
+        return array('', $name);
+    }
+
+    /**
+     * Create LMv1 response.
+     *
+     * @param string $password
+     * @param string $challenge
+     *
+     * @return string
+     */
+    protected function createLMPassword($password, $challenge)
+    {
+        // FIRST PART
+        $password = $this->createByte(strtoupper($password), 14, false);
+        list($key1, $key2) = str_split($password, 7);
+
+        $desKey1 = $this->createDesKey($key1);
+        $desKey2 = $this->createDesKey($key2);
+
+        $constantDecrypt = $this->createByte($this->desEncrypt(self::DESCONST, $desKey1).$this->desEncrypt(self::DESCONST, $desKey2), 21, false);
+
+        // SECOND PART
+        list($key1, $key2, $key3) = str_split($constantDecrypt, 7);
+
+        $desKey1 = $this->createDesKey($key1);
+        $desKey2 = $this->createDesKey($key2);
+        $desKey3 = $this->createDesKey($key3);
+
+        return $this->desEncrypt($challenge, $desKey1).$this->desEncrypt($challenge, $desKey2).$this->desEncrypt($challenge, $desKey3);
+    }
+
+    /**
+     * Create NTLMv1 response.
+     *
+     * @param string $password
+     * @param string $challenge
+     *
+     * @return string
+     */
+    protected function createNTLMPassword($password, $challenge)
+    {
+        // FIRST PART
+        $ntlmHash = $this->createByte($this->md4Encrypt($password), 21, false);
+        list($key1, $key2, $key3) = str_split($ntlmHash, 7);
+
+        $desKey1 = $this->createDesKey($key1);
+        $desKey2 = $this->createDesKey($key2);
+        $desKey3 = $this->createDesKey($key3);
+
+        return $this->desEncrypt($challenge, $desKey1).$this->desEncrypt($challenge, $desKey2).$this->desEncrypt($challenge, $desKey3);
+    }
+
+    /**
+     * Convert a normal timestamp to a tenth of a microtime epoch time.
+     *
+     * @param string $time
+     *
+     * @return string
+     */
+    protected function getCorrectTimestamp($time)
+    {
+        // Get our timestamp (tricky!)
+        $time = number_format($time, 0, '.', ''); // save microtime to string
+        $time = bcadd($time, '11644473600000', 0); // add epoch time
+        $time = bcmul($time, 10000, 0); // tenths of a microsecond.
+
+        $binary = $this->si2bin($time, 64); // create 64 bit binary string
+        $timestamp = '';
+        for ($i = 0; $i < 8; ++$i) {
+            $timestamp .= chr(bindec(substr($binary, -(($i + 1) * 8), 8)));
+        }
+
+        return $timestamp;
+    }
+
+    /**
+     * Create LMv2 response.
+     *
+     * @param string $password
+     * @param string $username
+     * @param string $domain
+     * @param string $challenge NTLM Challenge
+     * @param string $client    Random string
+     *
+     * @return string
+     */
+    protected function createLMv2Password($password, $username, $domain, $challenge, $client)
+    {
+        $lmPass = '00'; // by default 00
+        // if $password > 15 than we can't use this method
+        if (strlen($password) <= 15) {
+            $ntlmHash = $this->md4Encrypt($password);
+            $ntml2Hash = $this->md5Encrypt($ntlmHash, $this->convertTo16bit(strtoupper($username).$domain));
+
+            $lmPass = bin2hex($this->md5Encrypt($ntml2Hash, $challenge.$client).$client);
+        }
+
+        return $this->createByte($lmPass, 24);
+    }
+
+    /**
+     * Create NTLMv2 response.
+     *
+     * @param string $password
+     * @param string $username
+     * @param string $domain
+     * @param string $challenge  Hex values
+     * @param string $targetInfo Hex values
+     * @param string $timestamp
+     * @param string $client     Random bytes
+     *
+     * @return string
+     *
+     * @see http://davenport.sourceforge.net/ntlm.html#theNtlmResponse
+     */
+    protected function createNTLMv2Hash($password, $username, $domain, $challenge, $targetInfo, $timestamp, $client)
+    {
+        $ntlmHash = $this->md4Encrypt($password);
+        $ntml2Hash = $this->md5Encrypt($ntlmHash, $this->convertTo16bit(strtoupper($username).$domain));
+
+        // create blob
+        $blob = $this->createBlob($timestamp, $client, $targetInfo);
+
+        $ntlmv2Response = $this->md5Encrypt($ntml2Hash, $challenge.$blob);
+
+        return $ntlmv2Response.$blob;
+    }
+
+    protected function createDesKey($key)
+    {
+        $material = array(bin2hex($key[0]));
+        $len = strlen($key);
+        for ($i = 1; $i < $len; ++$i) {
+            list($high, $low) = str_split(bin2hex($key[$i]));
+            $v = $this->castToByte(ord($key[$i - 1]) << (7 + 1 - $i) | $this->uRShift(hexdec(dechex(hexdec($high) & 0xf).dechex(hexdec($low) & 0xf)), $i));
+            $material[] = str_pad(substr(dechex($v), -2), 2, '0', STR_PAD_LEFT); // cast to byte
+        }
+        $material[] = str_pad(substr(dechex($this->castToByte(ord($key[6]) << 1)), -2), 2, '0');
+
+        // odd parity
+        foreach ($material as $k => $v) {
+            $b = $this->castToByte(hexdec($v));
+            $needsParity = (($this->uRShift($b, 7) ^ $this->uRShift($b, 6) ^ $this->uRShift($b, 5)
+                        ^ $this->uRShift($b, 4) ^ $this->uRShift($b, 3) ^ $this->uRShift($b, 2)
+                        ^ $this->uRShift($b, 1)) & 0x01) == 0;
+
+            list($high, $low) = str_split($v);
+            if ($needsParity) {
+                $material[$k] = dechex(hexdec($high) | 0x0).dechex(hexdec($low) | 0x1);
+            } else {
+                $material[$k] = dechex(hexdec($high) & 0xf).dechex(hexdec($low) & 0xe);
+            }
+        }
+
+        return hex2bin(implode('', $material));
+    }
+
+    /** HELPER FUNCTIONS */
+
+    /**
+     * Create our security buffer depending on length and offset.
+     *
+     * @param string $value  Value we want to put in
+     * @param int    $offset start of value
+     * @param bool   $is16   Do we 16bit string or not?
+     *
+     * @return string
+     */
+    protected function createSecurityBuffer($value, $offset, $is16 = false)
+    {
+        $length = strlen(bin2hex($value));
+        $length = $is16 ? $length / 2 : $length;
+        $length = $this->createByte(str_pad(dechex($length), 2, '0', STR_PAD_LEFT), 2);
+
+        return $length.$length.$this->createByte(dechex($offset), 4);
+    }
+
+    /**
+     * Read our security buffer to fetch length and offset of our value.
+     *
+     * @param string $value Securitybuffer in hex
+     *
+     * @return array array with length and offset
+     */
+    protected function readSecurityBuffer($value)
+    {
+        $length = floor(hexdec(substr($value, 0, 4)) / 256) * 2;
+        $offset = floor(hexdec(substr($value, 8, 4)) / 256) * 2;
+
+        return array($length, $offset);
+    }
+
+    /**
+     * Cast to byte java equivalent to (byte).
+     *
+     * @param int $v
+     *
+     * @return int
+     */
+    protected function castToByte($v)
+    {
+        return (($v + 128) % 256) - 128;
+    }
+
+    /**
+     * Java unsigned right bitwise
+     * $a >>> $b.
+     *
+     * @param int $a
+     * @param int $b
+     *
+     * @return int
+     */
+    protected function uRShift($a, $b)
+    {
+        if ($b == 0) {
+            return $a;
+        }
+
+        return ($a >> $b) & ~(1 << (8 * PHP_INT_SIZE - 1) >> ($b - 1));
+    }
+
+    /**
+     * Right padding with 0 to certain length.
+     *
+     * @param string $input
+     * @param int    $bytes Length of bytes
+     * @param bool   $isHex Did we provided hex value
+     *
+     * @return string
+     */
+    protected function createByte($input, $bytes = 4, $isHex = true)
+    {
+        if ($isHex) {
+            $byte = hex2bin(str_pad($input, $bytes * 2, '00'));
+        } else {
+            $byte = str_pad($input, $bytes, "\x00");
+        }
+
+        return $byte;
+    }
+
+    /**
+     * Create random bytes.
+     *
+     * @param $length
+     *
+     * @return string
+     */
+    protected function getRandomBytes($length)
+    {
+        $bytes = openssl_random_pseudo_bytes($length, $strong);
+
+        if (false !== $bytes && true === $strong) {
+            return $bytes;
+        }
+
+        throw new RuntimeException('OpenSSL did not produce a secure random number.');
+    }
+
+    /** ENCRYPTION ALGORITHMS */
+
+    /**
+     * DES Encryption.
+     *
+     * @param string $value An 8-byte string
+     * @param string $key
+     *
+     * @return string
+     */
+    protected function desEncrypt($value, $key)
+    {
+        return substr(openssl_encrypt($value, 'DES-ECB', $key, \OPENSSL_RAW_DATA), 0, 8);
+    }
+
+    /**
+     * MD5 Encryption.
+     *
+     * @param string $key Encryption key
+     * @param string $msg Message to encrypt
+     *
+     * @return string
+     */
+    protected function md5Encrypt($key, $msg)
+    {
+        $blocksize = 64;
+        if (strlen($key) > $blocksize) {
+            $key = pack('H*', md5($key));
+        }
+
+        $key = str_pad($key, $blocksize, "\0");
+        $ipadk = $key ^ str_repeat("\x36", $blocksize);
+        $opadk = $key ^ str_repeat("\x5c", $blocksize);
+
+        return pack('H*', md5($opadk.pack('H*', md5($ipadk.$msg))));
+    }
+
+    /**
+     * MD4 Encryption.
+     *
+     * @param string $input
+     *
+     * @return string
+     *
+     * @see http://php.net/manual/en/ref.hash.php
+     */
+    protected function md4Encrypt($input)
+    {
+        $input = $this->convertTo16bit($input);
+
+        return function_exists('hash') ? hex2bin(hash('md4', $input)) : mhash(MHASH_MD4, $input);
+    }
+
+    /**
+     * Convert UTF-8 to UTF-16.
+     *
+     * @param string $input
+     *
+     * @return string
+     */
+    protected function convertTo16bit($input)
+    {
+        return iconv('UTF-8', 'UTF-16LE', $input);
+    }
+
+    /**
+     * @param string $message
+     */
+    protected function debug($message)
+    {
+        $message = bin2hex($message);
+        $messageId = substr($message, 16, 8);
+        echo substr($message, 0, 16)." NTLMSSP Signature<br />\n";
+        echo $messageId." Type Indicator<br />\n";
+
+        if ($messageId == '02000000') {
+            $map = array(
+                'Challenge',
+                'Context',
+                'Target Information Security Buffer',
+                'Target Name Data',
+                'NetBIOS Domain Name',
+                'NetBIOS Server Name',
+                'DNS Domain Name',
+                'DNS Server Name',
+                'BLOB',
+                'Target Information Terminator',
+            );
+
+            $data = $this->parseMessage2(hex2bin($message));
+
+            foreach ($map as $key => $value) {
+                echo bin2hex($data[$key]).' - '.$data[$key].' ||| '.$value."<br />\n";
+            }
+        } elseif ($messageId == '03000000') {
+            $i = 0;
+            $data[$i++] = substr($message, 24, 16);
+            list($lmLength, $lmOffset) = $this->readSecurityBuffer($data[$i - 1]);
+
+            $data[$i++] = substr($message, 40, 16);
+            list($ntmlLength, $ntmlOffset) = $this->readSecurityBuffer($data[$i - 1]);
+
+            $data[$i++] = substr($message, 56, 16);
+            list($targetLength, $targetOffset) = $this->readSecurityBuffer($data[$i - 1]);
+
+            $data[$i++] = substr($message, 72, 16);
+            list($userLength, $userOffset) = $this->readSecurityBuffer($data[$i - 1]);
+
+            $data[$i++] = substr($message, 88, 16);
+            list($workLength, $workOffset) = $this->readSecurityBuffer($data[$i - 1]);
+
+            $data[$i++] = substr($message, 104, 16);
+            $data[$i++] = substr($message, 120, 8);
+            $data[$i++] = substr($message, $targetOffset, $targetLength);
+            $data[$i++] = substr($message, $userOffset, $userLength);
+            $data[$i++] = substr($message, $workOffset, $workLength);
+            $data[$i++] = substr($message, $lmOffset, $lmLength);
+            $data[$i] = substr($message, $ntmlOffset, $ntmlLength);
+
+            $map = array(
+                'LM Response Security Buffer',
+                'NTLM Response Security Buffer',
+                'Target Name Security Buffer',
+                'User Name Security Buffer',
+                'Workstation Name Security Buffer',
+                'Session Key Security Buffer',
+                'Flags',
+                'Target Name Data',
+                'User Name Data',
+                'Workstation Name Data',
+                'LM Response Data',
+                'NTLM Response Data',
+            );
+
+            foreach ($map as $key => $value) {
+                echo $data[$key].' - '.hex2bin($data[$key]).' ||| '.$value."<br />\n";
+            }
+        }
+
+        echo '<br /><br />';
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/PlainAuthenticator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/PlainAuthenticator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/PlainAuthenticator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/PlainAuthenticator.php	(date 1495187412000)
@@ -0,0 +1,50 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles PLAIN authentication.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Transport_Esmtp_Auth_PlainAuthenticator implements Swift_Transport_Esmtp_Authenticator
+{
+    /**
+     * Get the name of the AUTH mechanism this Authenticator handles.
+     *
+     * @return string
+     */
+    public function getAuthKeyword()
+    {
+        return 'PLAIN';
+    }
+
+    /**
+     * Try to authenticate the user with $username and $password.
+     *
+     * @param Swift_Transport_SmtpAgent $agent
+     * @param string                    $username
+     * @param string                    $password
+     *
+     * @return bool
+     */
+    public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)
+    {
+        try {
+            $message = base64_encode($username.chr(0).$username.chr(0).$password);
+            $agent->executeCommand(sprintf("AUTH PLAIN %s\r\n", $message), array(235));
+
+            return true;
+        } catch (Swift_TransportException $e) {
+            $agent->executeCommand("RSET\r\n", array(250));
+
+            return false;
+        }
+    }
+}
Index: vendor/composer/autoload_psr4.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/autoload_psr4.php b/vendor/composer/autoload_psr4.php
new file mode 100644
--- /dev/null	(date 1734291712003)
+++ b/vendor/composer/autoload_psr4.php	(date 1734291712003)
@@ -0,0 +1,15 @@
+<?php
+
+// autoload_psr4.php @generated by Composer
+
+$vendorDir = dirname(__DIR__);
+$baseDir = dirname($vendorDir);
+
+return array(
+    'Symfony\\Polyfill\\Intl\\Normalizer\\' => array($vendorDir . '/symfony/polyfill-intl-normalizer'),
+    'Symfony\\Polyfill\\Intl\\Idn\\' => array($vendorDir . '/symfony/polyfill-intl-idn'),
+    'Egulias\\EmailValidator\\' => array($vendorDir . '/egulias/email-validator/src'),
+    'Doctrine\\Common\\Lexer\\' => array($vendorDir . '/doctrine/lexer/lib/Doctrine/Common/Lexer'),
+    'Base\\' => array($baseDir . '/base'),
+    'App\\' => array($baseDir . '/app'),
+);
Index: vendor/composer/autoload_real.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/autoload_real.php b/vendor/composer/autoload_real.php
new file mode 100644
--- /dev/null	(date 1734291712006)
+++ b/vendor/composer/autoload_real.php	(date 1734291712006)
@@ -0,0 +1,50 @@
+<?php
+
+// autoload_real.php @generated by Composer
+
+class ComposerAutoloaderInit4e7cdc8497e2dffe5a9da14d7d0398d7
+{
+    private static $loader;
+
+    public static function loadClassLoader($class)
+    {
+        if ('Composer\Autoload\ClassLoader' === $class) {
+            require __DIR__ . '/ClassLoader.php';
+        }
+    }
+
+    /**
+     * @return \Composer\Autoload\ClassLoader
+     */
+    public static function getLoader()
+    {
+        if (null !== self::$loader) {
+            return self::$loader;
+        }
+
+        require __DIR__ . '/platform_check.php';
+
+        spl_autoload_register(array('ComposerAutoloaderInit4e7cdc8497e2dffe5a9da14d7d0398d7', 'loadClassLoader'), true, true);
+        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
+        spl_autoload_unregister(array('ComposerAutoloaderInit4e7cdc8497e2dffe5a9da14d7d0398d7', 'loadClassLoader'));
+
+        require __DIR__ . '/autoload_static.php';
+        call_user_func(\Composer\Autoload\ComposerStaticInit4e7cdc8497e2dffe5a9da14d7d0398d7::getInitializer($loader));
+
+        $loader->register(true);
+
+        $filesToLoad = \Composer\Autoload\ComposerStaticInit4e7cdc8497e2dffe5a9da14d7d0398d7::$files;
+        $requireFile = \Closure::bind(static function ($fileIdentifier, $file) {
+            if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
+                $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
+
+                require $file;
+            }
+        }, null, null);
+        foreach ($filesToLoad as $fileIdentifier => $file) {
+            $requireFile($fileIdentifier, $file);
+        }
+
+        return $loader;
+    }
+}
Index: vendor/composer/autoload_static.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/autoload_static.php b/vendor/composer/autoload_static.php
new file mode 100644
--- /dev/null	(date 1734291712005)
+++ b/vendor/composer/autoload_static.php	(date 1734291712005)
@@ -0,0 +1,80 @@
+<?php
+
+// autoload_static.php @generated by Composer
+
+namespace Composer\Autoload;
+
+class ComposerStaticInit4e7cdc8497e2dffe5a9da14d7d0398d7
+{
+    public static $files = array (
+        'e69f7f6ee287b969198c3c9d6777bd38' => __DIR__ . '/..' . '/symfony/polyfill-intl-normalizer/bootstrap.php',
+        'f598d06aa772fa33d905e87be6398fb1' => __DIR__ . '/..' . '/symfony/polyfill-intl-idn/bootstrap.php',
+        '2c102faa651ef8ea5874edb585946bce' => __DIR__ . '/..' . '/swiftmailer/swiftmailer/lib/swift_required.php',
+    );
+
+    public static $prefixLengthsPsr4 = array (
+        'S' => 
+        array (
+            'Symfony\\Polyfill\\Intl\\Normalizer\\' => 33,
+            'Symfony\\Polyfill\\Intl\\Idn\\' => 26,
+        ),
+        'E' => 
+        array (
+            'Egulias\\EmailValidator\\' => 23,
+        ),
+        'D' => 
+        array (
+            'Doctrine\\Common\\Lexer\\' => 22,
+        ),
+        'B' => 
+        array (
+            'Base\\' => 5,
+        ),
+        'A' => 
+        array (
+            'App\\' => 4,
+        ),
+    );
+
+    public static $prefixDirsPsr4 = array (
+        'Symfony\\Polyfill\\Intl\\Normalizer\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/symfony/polyfill-intl-normalizer',
+        ),
+        'Symfony\\Polyfill\\Intl\\Idn\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/symfony/polyfill-intl-idn',
+        ),
+        'Egulias\\EmailValidator\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/egulias/email-validator/src',
+        ),
+        'Doctrine\\Common\\Lexer\\' => 
+        array (
+            0 => __DIR__ . '/..' . '/doctrine/lexer/lib/Doctrine/Common/Lexer',
+        ),
+        'Base\\' => 
+        array (
+            0 => __DIR__ . '/../..' . '/base',
+        ),
+        'App\\' => 
+        array (
+            0 => __DIR__ . '/../..' . '/app',
+        ),
+    );
+
+    public static $classMap = array (
+        'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',
+        'Normalizer' => __DIR__ . '/..' . '/symfony/polyfill-intl-normalizer/Resources/stubs/Normalizer.php',
+    );
+
+    public static function getInitializer(ClassLoader $loader)
+    {
+        return \Closure::bind(function () use ($loader) {
+            $loader->prefixLengthsPsr4 = ComposerStaticInit4e7cdc8497e2dffe5a9da14d7d0398d7::$prefixLengthsPsr4;
+            $loader->prefixDirsPsr4 = ComposerStaticInit4e7cdc8497e2dffe5a9da14d7d0398d7::$prefixDirsPsr4;
+            $loader->classMap = ComposerStaticInit4e7cdc8497e2dffe5a9da14d7d0398d7::$classMap;
+
+        }, null, ClassLoader::class);
+    }
+}
Index: vendor/composer/ClassLoader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/ClassLoader.php b/vendor/composer/ClassLoader.php
new file mode 100644
--- /dev/null	(date 1713813423000)
+++ b/vendor/composer/ClassLoader.php	(date 1713813423000)
@@ -0,0 +1,579 @@
+<?php
+
+/*
+ * This file is part of Composer.
+ *
+ * (c) Nils Adermann <naderman@naderman.de>
+ *     Jordi Boggiano <j.boggiano@seld.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Composer\Autoload;
+
+/**
+ * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
+ *
+ *     $loader = new \Composer\Autoload\ClassLoader();
+ *
+ *     // register classes with namespaces
+ *     $loader->add('Symfony\Component', __DIR__.'/component');
+ *     $loader->add('Symfony',           __DIR__.'/framework');
+ *
+ *     // activate the autoloader
+ *     $loader->register();
+ *
+ *     // to enable searching the include path (eg. for PEAR packages)
+ *     $loader->setUseIncludePath(true);
+ *
+ * In this example, if you try to use a class in the Symfony\Component
+ * namespace or one of its children (Symfony\Component\Console for instance),
+ * the autoloader will first look for the class under the component/
+ * directory, and it will then fallback to the framework/ directory if not
+ * found before giving up.
+ *
+ * This class is loosely based on the Symfony UniversalClassLoader.
+ *
+ * @author Fabien Potencier <fabien@symfony.com>
+ * @author Jordi Boggiano <j.boggiano@seld.be>
+ * @see    https://www.php-fig.org/psr/psr-0/
+ * @see    https://www.php-fig.org/psr/psr-4/
+ */
+class ClassLoader
+{
+    /** @var \Closure(string):void */
+    private static $includeFile;
+
+    /** @var string|null */
+    private $vendorDir;
+
+    // PSR-4
+    /**
+     * @var array<string, array<string, int>>
+     */
+    private $prefixLengthsPsr4 = array();
+    /**
+     * @var array<string, list<string>>
+     */
+    private $prefixDirsPsr4 = array();
+    /**
+     * @var list<string>
+     */
+    private $fallbackDirsPsr4 = array();
+
+    // PSR-0
+    /**
+     * List of PSR-0 prefixes
+     *
+     * Structured as array('F (first letter)' => array('Foo\Bar (full prefix)' => array('path', 'path2')))
+     *
+     * @var array<string, array<string, list<string>>>
+     */
+    private $prefixesPsr0 = array();
+    /**
+     * @var list<string>
+     */
+    private $fallbackDirsPsr0 = array();
+
+    /** @var bool */
+    private $useIncludePath = false;
+
+    /**
+     * @var array<string, string>
+     */
+    private $classMap = array();
+
+    /** @var bool */
+    private $classMapAuthoritative = false;
+
+    /**
+     * @var array<string, bool>
+     */
+    private $missingClasses = array();
+
+    /** @var string|null */
+    private $apcuPrefix;
+
+    /**
+     * @var array<string, self>
+     */
+    private static $registeredLoaders = array();
+
+    /**
+     * @param string|null $vendorDir
+     */
+    public function __construct($vendorDir = null)
+    {
+        $this->vendorDir = $vendorDir;
+        self::initializeIncludeClosure();
+    }
+
+    /**
+     * @return array<string, list<string>>
+     */
+    public function getPrefixes()
+    {
+        if (!empty($this->prefixesPsr0)) {
+            return call_user_func_array('array_merge', array_values($this->prefixesPsr0));
+        }
+
+        return array();
+    }
+
+    /**
+     * @return array<string, list<string>>
+     */
+    public function getPrefixesPsr4()
+    {
+        return $this->prefixDirsPsr4;
+    }
+
+    /**
+     * @return list<string>
+     */
+    public function getFallbackDirs()
+    {
+        return $this->fallbackDirsPsr0;
+    }
+
+    /**
+     * @return list<string>
+     */
+    public function getFallbackDirsPsr4()
+    {
+        return $this->fallbackDirsPsr4;
+    }
+
+    /**
+     * @return array<string, string> Array of classname => path
+     */
+    public function getClassMap()
+    {
+        return $this->classMap;
+    }
+
+    /**
+     * @param array<string, string> $classMap Class to filename map
+     *
+     * @return void
+     */
+    public function addClassMap(array $classMap)
+    {
+        if ($this->classMap) {
+            $this->classMap = array_merge($this->classMap, $classMap);
+        } else {
+            $this->classMap = $classMap;
+        }
+    }
+
+    /**
+     * Registers a set of PSR-0 directories for a given prefix, either
+     * appending or prepending to the ones previously set for this prefix.
+     *
+     * @param string              $prefix  The prefix
+     * @param list<string>|string $paths   The PSR-0 root directories
+     * @param bool                $prepend Whether to prepend the directories
+     *
+     * @return void
+     */
+    public function add($prefix, $paths, $prepend = false)
+    {
+        $paths = (array) $paths;
+        if (!$prefix) {
+            if ($prepend) {
+                $this->fallbackDirsPsr0 = array_merge(
+                    $paths,
+                    $this->fallbackDirsPsr0
+                );
+            } else {
+                $this->fallbackDirsPsr0 = array_merge(
+                    $this->fallbackDirsPsr0,
+                    $paths
+                );
+            }
+
+            return;
+        }
+
+        $first = $prefix[0];
+        if (!isset($this->prefixesPsr0[$first][$prefix])) {
+            $this->prefixesPsr0[$first][$prefix] = $paths;
+
+            return;
+        }
+        if ($prepend) {
+            $this->prefixesPsr0[$first][$prefix] = array_merge(
+                $paths,
+                $this->prefixesPsr0[$first][$prefix]
+            );
+        } else {
+            $this->prefixesPsr0[$first][$prefix] = array_merge(
+                $this->prefixesPsr0[$first][$prefix],
+                $paths
+            );
+        }
+    }
+
+    /**
+     * Registers a set of PSR-4 directories for a given namespace, either
+     * appending or prepending to the ones previously set for this namespace.
+     *
+     * @param string              $prefix  The prefix/namespace, with trailing '\\'
+     * @param list<string>|string $paths   The PSR-4 base directories
+     * @param bool                $prepend Whether to prepend the directories
+     *
+     * @throws \InvalidArgumentException
+     *
+     * @return void
+     */
+    public function addPsr4($prefix, $paths, $prepend = false)
+    {
+        $paths = (array) $paths;
+        if (!$prefix) {
+            // Register directories for the root namespace.
+            if ($prepend) {
+                $this->fallbackDirsPsr4 = array_merge(
+                    $paths,
+                    $this->fallbackDirsPsr4
+                );
+            } else {
+                $this->fallbackDirsPsr4 = array_merge(
+                    $this->fallbackDirsPsr4,
+                    $paths
+                );
+            }
+        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
+            // Register directories for a new namespace.
+            $length = strlen($prefix);
+            if ('\\' !== $prefix[$length - 1]) {
+                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
+            }
+            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
+            $this->prefixDirsPsr4[$prefix] = $paths;
+        } elseif ($prepend) {
+            // Prepend directories for an already registered namespace.
+            $this->prefixDirsPsr4[$prefix] = array_merge(
+                $paths,
+                $this->prefixDirsPsr4[$prefix]
+            );
+        } else {
+            // Append directories for an already registered namespace.
+            $this->prefixDirsPsr4[$prefix] = array_merge(
+                $this->prefixDirsPsr4[$prefix],
+                $paths
+            );
+        }
+    }
+
+    /**
+     * Registers a set of PSR-0 directories for a given prefix,
+     * replacing any others previously set for this prefix.
+     *
+     * @param string              $prefix The prefix
+     * @param list<string>|string $paths  The PSR-0 base directories
+     *
+     * @return void
+     */
+    public function set($prefix, $paths)
+    {
+        if (!$prefix) {
+            $this->fallbackDirsPsr0 = (array) $paths;
+        } else {
+            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
+        }
+    }
+
+    /**
+     * Registers a set of PSR-4 directories for a given namespace,
+     * replacing any others previously set for this namespace.
+     *
+     * @param string              $prefix The prefix/namespace, with trailing '\\'
+     * @param list<string>|string $paths  The PSR-4 base directories
+     *
+     * @throws \InvalidArgumentException
+     *
+     * @return void
+     */
+    public function setPsr4($prefix, $paths)
+    {
+        if (!$prefix) {
+            $this->fallbackDirsPsr4 = (array) $paths;
+        } else {
+            $length = strlen($prefix);
+            if ('\\' !== $prefix[$length - 1]) {
+                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
+            }
+            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
+            $this->prefixDirsPsr4[$prefix] = (array) $paths;
+        }
+    }
+
+    /**
+     * Turns on searching the include path for class files.
+     *
+     * @param bool $useIncludePath
+     *
+     * @return void
+     */
+    public function setUseIncludePath($useIncludePath)
+    {
+        $this->useIncludePath = $useIncludePath;
+    }
+
+    /**
+     * Can be used to check if the autoloader uses the include path to check
+     * for classes.
+     *
+     * @return bool
+     */
+    public function getUseIncludePath()
+    {
+        return $this->useIncludePath;
+    }
+
+    /**
+     * Turns off searching the prefix and fallback directories for classes
+     * that have not been registered with the class map.
+     *
+     * @param bool $classMapAuthoritative
+     *
+     * @return void
+     */
+    public function setClassMapAuthoritative($classMapAuthoritative)
+    {
+        $this->classMapAuthoritative = $classMapAuthoritative;
+    }
+
+    /**
+     * Should class lookup fail if not found in the current class map?
+     *
+     * @return bool
+     */
+    public function isClassMapAuthoritative()
+    {
+        return $this->classMapAuthoritative;
+    }
+
+    /**
+     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
+     *
+     * @param string|null $apcuPrefix
+     *
+     * @return void
+     */
+    public function setApcuPrefix($apcuPrefix)
+    {
+        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;
+    }
+
+    /**
+     * The APCu prefix in use, or null if APCu caching is not enabled.
+     *
+     * @return string|null
+     */
+    public function getApcuPrefix()
+    {
+        return $this->apcuPrefix;
+    }
+
+    /**
+     * Registers this instance as an autoloader.
+     *
+     * @param bool $prepend Whether to prepend the autoloader or not
+     *
+     * @return void
+     */
+    public function register($prepend = false)
+    {
+        spl_autoload_register(array($this, 'loadClass'), true, $prepend);
+
+        if (null === $this->vendorDir) {
+            return;
+        }
+
+        if ($prepend) {
+            self::$registeredLoaders = array($this->vendorDir => $this) + self::$registeredLoaders;
+        } else {
+            unset(self::$registeredLoaders[$this->vendorDir]);
+            self::$registeredLoaders[$this->vendorDir] = $this;
+        }
+    }
+
+    /**
+     * Unregisters this instance as an autoloader.
+     *
+     * @return void
+     */
+    public function unregister()
+    {
+        spl_autoload_unregister(array($this, 'loadClass'));
+
+        if (null !== $this->vendorDir) {
+            unset(self::$registeredLoaders[$this->vendorDir]);
+        }
+    }
+
+    /**
+     * Loads the given class or interface.
+     *
+     * @param  string    $class The name of the class
+     * @return true|null True if loaded, null otherwise
+     */
+    public function loadClass($class)
+    {
+        if ($file = $this->findFile($class)) {
+            $includeFile = self::$includeFile;
+            $includeFile($file);
+
+            return true;
+        }
+
+        return null;
+    }
+
+    /**
+     * Finds the path to the file where the class is defined.
+     *
+     * @param string $class The name of the class
+     *
+     * @return string|false The path if found, false otherwise
+     */
+    public function findFile($class)
+    {
+        // class map lookup
+        if (isset($this->classMap[$class])) {
+            return $this->classMap[$class];
+        }
+        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
+            return false;
+        }
+        if (null !== $this->apcuPrefix) {
+            $file = apcu_fetch($this->apcuPrefix.$class, $hit);
+            if ($hit) {
+                return $file;
+            }
+        }
+
+        $file = $this->findFileWithExtension($class, '.php');
+
+        // Search for Hack files if we are running on HHVM
+        if (false === $file && defined('HHVM_VERSION')) {
+            $file = $this->findFileWithExtension($class, '.hh');
+        }
+
+        if (null !== $this->apcuPrefix) {
+            apcu_add($this->apcuPrefix.$class, $file);
+        }
+
+        if (false === $file) {
+            // Remember that this class does not exist.
+            $this->missingClasses[$class] = true;
+        }
+
+        return $file;
+    }
+
+    /**
+     * Returns the currently registered loaders keyed by their corresponding vendor directories.
+     *
+     * @return array<string, self>
+     */
+    public static function getRegisteredLoaders()
+    {
+        return self::$registeredLoaders;
+    }
+
+    /**
+     * @param  string       $class
+     * @param  string       $ext
+     * @return string|false
+     */
+    private function findFileWithExtension($class, $ext)
+    {
+        // PSR-4 lookup
+        $logicalPathPsr4 = strtr($class, '\\', DIRECTORY_SEPARATOR) . $ext;
+
+        $first = $class[0];
+        if (isset($this->prefixLengthsPsr4[$first])) {
+            $subPath = $class;
+            while (false !== $lastPos = strrpos($subPath, '\\')) {
+                $subPath = substr($subPath, 0, $lastPos);
+                $search = $subPath . '\\';
+                if (isset($this->prefixDirsPsr4[$search])) {
+                    $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);
+                    foreach ($this->prefixDirsPsr4[$search] as $dir) {
+                        if (file_exists($file = $dir . $pathEnd)) {
+                            return $file;
+                        }
+                    }
+                }
+            }
+        }
+
+        // PSR-4 fallback dirs
+        foreach ($this->fallbackDirsPsr4 as $dir) {
+            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {
+                return $file;
+            }
+        }
+
+        // PSR-0 lookup
+        if (false !== $pos = strrpos($class, '\\')) {
+            // namespaced class name
+            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)
+                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);
+        } else {
+            // PEAR-like class name
+            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;
+        }
+
+        if (isset($this->prefixesPsr0[$first])) {
+            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
+                if (0 === strpos($class, $prefix)) {
+                    foreach ($dirs as $dir) {
+                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
+                            return $file;
+                        }
+                    }
+                }
+            }
+        }
+
+        // PSR-0 fallback dirs
+        foreach ($this->fallbackDirsPsr0 as $dir) {
+            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
+                return $file;
+            }
+        }
+
+        // PSR-0 include paths.
+        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
+            return $file;
+        }
+
+        return false;
+    }
+
+    /**
+     * @return void
+     */
+    private static function initializeIncludeClosure()
+    {
+        if (self::$includeFile !== null) {
+            return;
+        }
+
+        /**
+         * Scope isolated include.
+         *
+         * Prevents access to $this/self from included files.
+         *
+         * @param  string $file
+         * @return void
+         */
+        self::$includeFile = \Closure::bind(static function($file) {
+            include $file;
+        }, null, null);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/PlainAuthenticatorTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/PlainAuthenticatorTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/PlainAuthenticatorTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/PlainAuthenticatorTest.php	(date 1495187412000)
@@ -0,0 +1,67 @@
+<?php
+
+class Swift_Transport_Esmtp_Auth_PlainAuthenticatorTest extends \SwiftMailerTestCase
+{
+    private $agent;
+
+    protected function setUp()
+    {
+        $this->agent = $this->getMockery('Swift_Transport_SmtpAgent')->shouldIgnoreMissing();
+    }
+
+    public function testKeywordIsPlain()
+    {
+        /* -- RFC 4616, 1.
+        The name associated with this mechanism is "PLAIN".
+        */
+
+        $login = $this->getAuthenticator();
+        $this->assertEquals('PLAIN', $login->getAuthKeyword());
+    }
+
+    public function testSuccessfulAuthentication()
+    {
+        /* -- RFC 4616, 2.
+        The client presents the authorization identity (identity to act as),
+        followed by a NUL (U+0000) character, followed by the authentication
+        identity (identity whose password will be used), followed by a NUL
+        (U+0000) character, followed by the clear-text password.
+        */
+
+        $plain = $this->getAuthenticator();
+
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with('AUTH PLAIN '.base64_encode(
+                        'jack'.chr(0).'jack'.chr(0).'pass'
+                    )."\r\n", array(235));
+
+        $this->assertTrue($plain->authenticate($this->agent, 'jack', 'pass'),
+            '%s: The buffer accepted all commands authentication should succeed'
+            );
+    }
+
+    public function testAuthenticationFailureSendRsetAndReturnFalse()
+    {
+        $plain = $this->getAuthenticator();
+
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with('AUTH PLAIN '.base64_encode(
+                        'jack'.chr(0).'jack'.chr(0).'pass'
+                    )."\r\n", array(235))
+             ->andThrow(new Swift_TransportException(''));
+        $this->agent->shouldReceive('executeCommand')
+             ->once()
+             ->with("RSET\r\n", array(250));
+
+        $this->assertFalse($plain->authenticate($this->agent, 'jack', 'pass'),
+            '%s: Authentication fails, so RSET should be sent'
+            );
+    }
+
+    private function getAuthenticator()
+    {
+        return new Swift_Transport_Esmtp_Auth_PlainAuthenticator();
+    }
+}
Index: vendor/composer/autoload_classmap.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/autoload_classmap.php b/vendor/composer/autoload_classmap.php
new file mode 100644
--- /dev/null	(date 1734291712004)
+++ b/vendor/composer/autoload_classmap.php	(date 1734291712004)
@@ -0,0 +1,11 @@
+<?php
+
+// autoload_classmap.php @generated by Composer
+
+$vendorDir = dirname(__DIR__);
+$baseDir = dirname($vendorDir);
+
+return array(
+    'Composer\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',
+    'Normalizer' => $vendorDir . '/symfony/polyfill-intl-normalizer/Resources/stubs/Normalizer.php',
+);
Index: vendor/composer/autoload_files.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/autoload_files.php b/vendor/composer/autoload_files.php
new file mode 100644
--- /dev/null	(date 1734291712004)
+++ b/vendor/composer/autoload_files.php	(date 1734291712004)
@@ -0,0 +1,12 @@
+<?php
+
+// autoload_files.php @generated by Composer
+
+$vendorDir = dirname(__DIR__);
+$baseDir = dirname($vendorDir);
+
+return array(
+    'e69f7f6ee287b969198c3c9d6777bd38' => $vendorDir . '/symfony/polyfill-intl-normalizer/bootstrap.php',
+    'f598d06aa772fa33d905e87be6398fb1' => $vendorDir . '/symfony/polyfill-intl-idn/bootstrap.php',
+    '2c102faa651ef8ea5874edb585946bce' => $vendorDir . '/swiftmailer/swiftmailer/lib/swift_required.php',
+);
Index: vendor/composer/autoload_namespaces.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/autoload_namespaces.php b/vendor/composer/autoload_namespaces.php
new file mode 100644
--- /dev/null	(date 1734291712003)
+++ b/vendor/composer/autoload_namespaces.php	(date 1734291712003)
@@ -0,0 +1,9 @@
+<?php
+
+// autoload_namespaces.php @generated by Composer
+
+$vendorDir = dirname(__DIR__);
+$baseDir = dirname($vendorDir);
+
+return array(
+);
Index: vendor/composer/platform_check.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/platform_check.php b/vendor/composer/platform_check.php
new file mode 100644
--- /dev/null	(date 1734291712005)
+++ b/vendor/composer/platform_check.php	(date 1734291712005)
@@ -0,0 +1,26 @@
+<?php
+
+// platform_check.php @generated by Composer
+
+$issues = array();
+
+if (!(PHP_VERSION_ID >= 70200)) {
+    $issues[] = 'Your Composer dependencies require a PHP version ">= 7.2.0". You are running ' . PHP_VERSION . '.';
+}
+
+if ($issues) {
+    if (!headers_sent()) {
+        header('HTTP/1.1 500 Internal Server Error');
+    }
+    if (!ini_get('display_errors')) {
+        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
+            fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);
+        } elseif (!headers_sent()) {
+            echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;
+        }
+    }
+    trigger_error(
+        'Composer detected issues in your platform: ' . implode(' ', $issues),
+        E_USER_ERROR
+    );
+}
Index: vendor/egulias/email-validator/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/composer.json b/vendor/egulias/email-validator/composer.json
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/composer.json	(date 1609213806000)
@@ -0,0 +1,38 @@
+{
+  "name":         "egulias/email-validator",
+  "description":  "A library for validating emails against several RFCs",
+  "homepage":     "https://github.com/egulias/EmailValidator",
+  "keywords":     ["email", "validation", "validator", "emailvalidation", "emailvalidator"],
+  "license":      "MIT",
+  "authors": [
+    {"name": "Eduardo Gulias Davis"}
+  ],
+  "extra": {
+    "branch-alias": {
+      "dev-master": "2.1.x-dev"
+    }
+  },
+  "require": {
+    "php": ">=5.5",
+    "doctrine/lexer": "^1.0.1",
+    "symfony/polyfill-intl-idn": "^1.10"
+  },
+  "require-dev": {
+    "dominicsayers/isemail": "^3.0.7",
+    "phpunit/phpunit": "^4.8.36|^7.5.15",
+    "satooshi/php-coveralls": "^1.0.1"
+  },
+  "suggest": {
+    "ext-intl": "PHP Internationalization Libraries are required to use the SpoofChecking validation"
+  },
+  "autoload": {
+    "psr-4": {
+      "Egulias\\EmailValidator\\": "src"
+    }
+  },
+  "autoload-dev": {
+    "psr-4": {
+      "Egulias\\EmailValidator\\Tests\\": "tests"
+    }
+  }
+}
Index: vendor/egulias/email-validator/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/LICENSE b/vendor/egulias/email-validator/LICENSE
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/LICENSE	(date 1609213806000)
@@ -0,0 +1,19 @@
+Copyright (c) 2013-2016 Eduardo Gulias Davis
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
Index: vendor/composer/installed.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/installed.json b/vendor/composer/installed.json
new file mode 100644
--- /dev/null	(date 1734291711789)
+++ b/vendor/composer/installed.json	(date 1734291711789)
@@ -0,0 +1,389 @@
+{
+    "packages": [
+        {
+            "name": "doctrine/lexer",
+            "version": "1.2.3",
+            "version_normalized": "1.2.3.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/doctrine/lexer.git",
+                "reference": "c268e882d4dbdd85e36e4ad69e02dc284f89d229"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/doctrine/lexer/zipball/c268e882d4dbdd85e36e4ad69e02dc284f89d229",
+                "reference": "c268e882d4dbdd85e36e4ad69e02dc284f89d229",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1 || ^8.0"
+            },
+            "require-dev": {
+                "doctrine/coding-standard": "^9.0",
+                "phpstan/phpstan": "^1.3",
+                "phpunit/phpunit": "^7.5 || ^8.5 || ^9.5",
+                "vimeo/psalm": "^4.11"
+            },
+            "time": "2022-02-28T11:07:21+00:00",
+            "type": "library",
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Doctrine\\Common\\Lexer\\": "lib/Doctrine/Common/Lexer"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Guilherme Blanco",
+                    "email": "guilhermeblanco@gmail.com"
+                },
+                {
+                    "name": "Roman Borschel",
+                    "email": "roman@code-factory.org"
+                },
+                {
+                    "name": "Johannes Schmitt",
+                    "email": "schmittjoh@gmail.com"
+                }
+            ],
+            "description": "PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.",
+            "homepage": "https://www.doctrine-project.org/projects/lexer.html",
+            "keywords": [
+                "annotations",
+                "docblock",
+                "lexer",
+                "parser",
+                "php"
+            ],
+            "support": {
+                "issues": "https://github.com/doctrine/lexer/issues",
+                "source": "https://github.com/doctrine/lexer/tree/1.2.3"
+            },
+            "funding": [
+                {
+                    "url": "https://www.doctrine-project.org/sponsorship.html",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.patreon.com/phpdoctrine",
+                    "type": "patreon"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Flexer",
+                    "type": "tidelift"
+                }
+            ],
+            "install-path": "../doctrine/lexer"
+        },
+        {
+            "name": "egulias/email-validator",
+            "version": "2.1.25",
+            "version_normalized": "2.1.25.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/egulias/EmailValidator.git",
+                "reference": "0dbf5d78455d4d6a41d186da50adc1122ec066f4"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/egulias/EmailValidator/zipball/0dbf5d78455d4d6a41d186da50adc1122ec066f4",
+                "reference": "0dbf5d78455d4d6a41d186da50adc1122ec066f4",
+                "shasum": ""
+            },
+            "require": {
+                "doctrine/lexer": "^1.0.1",
+                "php": ">=5.5",
+                "symfony/polyfill-intl-idn": "^1.10"
+            },
+            "require-dev": {
+                "dominicsayers/isemail": "^3.0.7",
+                "phpunit/phpunit": "^4.8.36|^7.5.15",
+                "satooshi/php-coveralls": "^1.0.1"
+            },
+            "suggest": {
+                "ext-intl": "PHP Internationalization Libraries are required to use the SpoofChecking validation"
+            },
+            "time": "2020-12-29T14:50:06+00:00",
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.1.x-dev"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "psr-4": {
+                    "Egulias\\EmailValidator\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Eduardo Gulias Davis"
+                }
+            ],
+            "description": "A library for validating emails against several RFCs",
+            "homepage": "https://github.com/egulias/EmailValidator",
+            "keywords": [
+                "email",
+                "emailvalidation",
+                "emailvalidator",
+                "validation",
+                "validator"
+            ],
+            "support": {
+                "issues": "https://github.com/egulias/EmailValidator/issues",
+                "source": "https://github.com/egulias/EmailValidator/tree/2.1.25"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/egulias",
+                    "type": "github"
+                }
+            ],
+            "install-path": "../egulias/email-validator"
+        },
+        {
+            "name": "swiftmailer/swiftmailer",
+            "version": "v6.0.0",
+            "version_normalized": "6.0.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/swiftmailer/swiftmailer.git",
+                "reference": "74e20ce4dad5011fb2c2cedefb76b2237f123c0e"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/swiftmailer/swiftmailer/zipball/74e20ce4dad5011fb2c2cedefb76b2237f123c0e",
+                "reference": "74e20ce4dad5011fb2c2cedefb76b2237f123c0e",
+                "shasum": ""
+            },
+            "require": {
+                "egulias/email-validator": "~2.0",
+                "php": ">=7.0.0"
+            },
+            "require-dev": {
+                "mockery/mockery": "~0.9.1",
+                "symfony/phpunit-bridge": "~3.3@dev"
+            },
+            "time": "2017-05-19T19:50:13+00:00",
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "6.0-dev"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "files": [
+                    "lib/swift_required.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Chris Corbyn"
+                },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                }
+            ],
+            "description": "Swiftmailer, free feature-rich PHP mailer",
+            "homepage": "http://swiftmailer.org",
+            "keywords": [
+                "email",
+                "mail",
+                "mailer"
+            ],
+            "support": {
+                "issues": "https://github.com/swiftmailer/swiftmailer/issues",
+                "source": "https://github.com/swiftmailer/swiftmailer/tree/v6.0.0"
+            },
+            "abandoned": "symfony/mailer",
+            "install-path": "../swiftmailer/swiftmailer"
+        },
+        {
+            "name": "symfony/polyfill-intl-idn",
+            "version": "v1.31.0",
+            "version_normalized": "1.31.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-intl-idn.git",
+                "reference": "c36586dcf89a12315939e00ec9b4474adcb1d773"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/c36586dcf89a12315939e00ec9b4474adcb1d773",
+                "reference": "c36586dcf89a12315939e00ec9b4474adcb1d773",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2",
+                "symfony/polyfill-intl-normalizer": "^1.10"
+            },
+            "suggest": {
+                "ext-intl": "For best performance"
+            },
+            "time": "2024-09-09T11:45:10+00:00",
+            "type": "library",
+            "extra": {
+                "thanks": {
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "files": [
+                    "bootstrap.php"
+                ],
+                "psr-4": {
+                    "Symfony\\Polyfill\\Intl\\Idn\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Laurent Bassin",
+                    "email": "laurent@bassin.info"
+                },
+                {
+                    "name": "Trevor Rowbotham",
+                    "email": "trevor.rowbotham@pm.me"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "idn",
+                "intl",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "support": {
+                "source": "https://github.com/symfony/polyfill-intl-idn/tree/v1.31.0"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "install-path": "../symfony/polyfill-intl-idn"
+        },
+        {
+            "name": "symfony/polyfill-intl-normalizer",
+            "version": "v1.31.0",
+            "version_normalized": "1.31.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
+                "reference": "3833d7255cc303546435cb650316bff708a1c75c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/3833d7255cc303546435cb650316bff708a1c75c",
+                "reference": "3833d7255cc303546435cb650316bff708a1c75c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2"
+            },
+            "suggest": {
+                "ext-intl": "For best performance"
+            },
+            "time": "2024-09-09T11:45:10+00:00",
+            "type": "library",
+            "extra": {
+                "thanks": {
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
+                }
+            },
+            "installation-source": "dist",
+            "autoload": {
+                "files": [
+                    "bootstrap.php"
+                ],
+                "psr-4": {
+                    "Symfony\\Polyfill\\Intl\\Normalizer\\": ""
+                },
+                "classmap": [
+                    "Resources/stubs"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for intl's Normalizer class and related functions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "intl",
+                "normalizer",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "support": {
+                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.31.0"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "install-path": "../symfony/polyfill-intl-normalizer"
+        }
+    ],
+    "dev": true,
+    "dev-package-names": []
+}
Index: vendor/composer/installed.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/installed.php b/vendor/composer/installed.php
new file mode 100644
--- /dev/null	(date 1734291711789)
+++ b/vendor/composer/installed.php	(date 1734291711789)
@@ -0,0 +1,68 @@
+<?php return array(
+    'root' => array(
+        'name' => '__root__',
+        'pretty_version' => 'dev-main',
+        'version' => 'dev-main',
+        'reference' => '12f2958a9e121a954c9bffadd231110cf29054d7',
+        'type' => 'library',
+        'install_path' => __DIR__ . '/../../',
+        'aliases' => array(),
+        'dev' => true,
+    ),
+    'versions' => array(
+        '__root__' => array(
+            'pretty_version' => 'dev-main',
+            'version' => 'dev-main',
+            'reference' => '12f2958a9e121a954c9bffadd231110cf29054d7',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../../',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'doctrine/lexer' => array(
+            'pretty_version' => '1.2.3',
+            'version' => '1.2.3.0',
+            'reference' => 'c268e882d4dbdd85e36e4ad69e02dc284f89d229',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../doctrine/lexer',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'egulias/email-validator' => array(
+            'pretty_version' => '2.1.25',
+            'version' => '2.1.25.0',
+            'reference' => '0dbf5d78455d4d6a41d186da50adc1122ec066f4',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../egulias/email-validator',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'swiftmailer/swiftmailer' => array(
+            'pretty_version' => 'v6.0.0',
+            'version' => '6.0.0.0',
+            'reference' => '74e20ce4dad5011fb2c2cedefb76b2237f123c0e',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../swiftmailer/swiftmailer',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'symfony/polyfill-intl-idn' => array(
+            'pretty_version' => 'v1.31.0',
+            'version' => '1.31.0.0',
+            'reference' => 'c36586dcf89a12315939e00ec9b4474adcb1d773',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../symfony/polyfill-intl-idn',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+        'symfony/polyfill-intl-normalizer' => array(
+            'pretty_version' => 'v1.31.0',
+            'version' => '1.31.0.0',
+            'reference' => '3833d7255cc303546435cb650316bff708a1c75c',
+            'type' => 'library',
+            'install_path' => __DIR__ . '/../symfony/polyfill-intl-normalizer',
+            'aliases' => array(),
+            'dev_requirement' => false,
+        ),
+    ),
+);
Index: vendor/composer/InstalledVersions.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/InstalledVersions.php b/vendor/composer/InstalledVersions.php
new file mode 100644
--- /dev/null	(date 1734291711783)
+++ b/vendor/composer/InstalledVersions.php	(date 1734291711783)
@@ -0,0 +1,359 @@
+<?php
+
+/*
+ * This file is part of Composer.
+ *
+ * (c) Nils Adermann <naderman@naderman.de>
+ *     Jordi Boggiano <j.boggiano@seld.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Composer;
+
+use Composer\Autoload\ClassLoader;
+use Composer\Semver\VersionParser;
+
+/**
+ * This class is copied in every Composer installed project and available to all
+ *
+ * See also https://getcomposer.org/doc/07-runtime.md#installed-versions
+ *
+ * To require its presence, you can require `composer-runtime-api ^2.0`
+ *
+ * @final
+ */
+class InstalledVersions
+{
+    /**
+     * @var mixed[]|null
+     * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null
+     */
+    private static $installed;
+
+    /**
+     * @var bool|null
+     */
+    private static $canGetVendors;
+
+    /**
+     * @var array[]
+     * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
+     */
+    private static $installedByVendor = array();
+
+    /**
+     * Returns a list of all package names which are present, either by being installed, replaced or provided
+     *
+     * @return string[]
+     * @psalm-return list<string>
+     */
+    public static function getInstalledPackages()
+    {
+        $packages = array();
+        foreach (self::getInstalled() as $installed) {
+            $packages[] = array_keys($installed['versions']);
+        }
+
+        if (1 === \count($packages)) {
+            return $packages[0];
+        }
+
+        return array_keys(array_flip(\call_user_func_array('array_merge', $packages)));
+    }
+
+    /**
+     * Returns a list of all package names with a specific type e.g. 'library'
+     *
+     * @param  string   $type
+     * @return string[]
+     * @psalm-return list<string>
+     */
+    public static function getInstalledPackagesByType($type)
+    {
+        $packagesByType = array();
+
+        foreach (self::getInstalled() as $installed) {
+            foreach ($installed['versions'] as $name => $package) {
+                if (isset($package['type']) && $package['type'] === $type) {
+                    $packagesByType[] = $name;
+                }
+            }
+        }
+
+        return $packagesByType;
+    }
+
+    /**
+     * Checks whether the given package is installed
+     *
+     * This also returns true if the package name is provided or replaced by another package
+     *
+     * @param  string $packageName
+     * @param  bool   $includeDevRequirements
+     * @return bool
+     */
+    public static function isInstalled($packageName, $includeDevRequirements = true)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (isset($installed['versions'][$packageName])) {
+                return $includeDevRequirements || !isset($installed['versions'][$packageName]['dev_requirement']) || $installed['versions'][$packageName]['dev_requirement'] === false;
+            }
+        }
+
+        return false;
+    }
+
+    /**
+     * Checks whether the given package satisfies a version constraint
+     *
+     * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:
+     *
+     *   Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')
+     *
+     * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
+     * @param  string        $packageName
+     * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package
+     * @return bool
+     */
+    public static function satisfies(VersionParser $parser, $packageName, $constraint)
+    {
+        $constraint = $parser->parseConstraints((string) $constraint);
+        $provided = $parser->parseConstraints(self::getVersionRanges($packageName));
+
+        return $provided->matches($constraint);
+    }
+
+    /**
+     * Returns a version constraint representing all the range(s) which are installed for a given package
+     *
+     * It is easier to use this via isInstalled() with the $constraint argument if you need to check
+     * whether a given version of a package is installed, and not just whether it exists
+     *
+     * @param  string $packageName
+     * @return string Version constraint usable with composer/semver
+     */
+    public static function getVersionRanges($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            $ranges = array();
+            if (isset($installed['versions'][$packageName]['pretty_version'])) {
+                $ranges[] = $installed['versions'][$packageName]['pretty_version'];
+            }
+            if (array_key_exists('aliases', $installed['versions'][$packageName])) {
+                $ranges = array_merge($ranges, $installed['versions'][$packageName]['aliases']);
+            }
+            if (array_key_exists('replaced', $installed['versions'][$packageName])) {
+                $ranges = array_merge($ranges, $installed['versions'][$packageName]['replaced']);
+            }
+            if (array_key_exists('provided', $installed['versions'][$packageName])) {
+                $ranges = array_merge($ranges, $installed['versions'][$packageName]['provided']);
+            }
+
+            return implode(' || ', $ranges);
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @param  string      $packageName
+     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
+     */
+    public static function getVersion($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            if (!isset($installed['versions'][$packageName]['version'])) {
+                return null;
+            }
+
+            return $installed['versions'][$packageName]['version'];
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @param  string      $packageName
+     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
+     */
+    public static function getPrettyVersion($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            if (!isset($installed['versions'][$packageName]['pretty_version'])) {
+                return null;
+            }
+
+            return $installed['versions'][$packageName]['pretty_version'];
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @param  string      $packageName
+     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference
+     */
+    public static function getReference($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            if (!isset($installed['versions'][$packageName]['reference'])) {
+                return null;
+            }
+
+            return $installed['versions'][$packageName]['reference'];
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @param  string      $packageName
+     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.
+     */
+    public static function getInstallPath($packageName)
+    {
+        foreach (self::getInstalled() as $installed) {
+            if (!isset($installed['versions'][$packageName])) {
+                continue;
+            }
+
+            return isset($installed['versions'][$packageName]['install_path']) ? $installed['versions'][$packageName]['install_path'] : null;
+        }
+
+        throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
+    }
+
+    /**
+     * @return array
+     * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}
+     */
+    public static function getRootPackage()
+    {
+        $installed = self::getInstalled();
+
+        return $installed[0]['root'];
+    }
+
+    /**
+     * Returns the raw installed.php data for custom implementations
+     *
+     * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.
+     * @return array[]
+     * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}
+     */
+    public static function getRawData()
+    {
+        @trigger_error('getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process.', E_USER_DEPRECATED);
+
+        if (null === self::$installed) {
+            // only require the installed.php file if this file is loaded from its dumped location,
+            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
+            if (substr(__DIR__, -8, 1) !== 'C') {
+                self::$installed = include __DIR__ . '/installed.php';
+            } else {
+                self::$installed = array();
+            }
+        }
+
+        return self::$installed;
+    }
+
+    /**
+     * Returns the raw data of all installed.php which are currently loaded for custom implementations
+     *
+     * @return array[]
+     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
+     */
+    public static function getAllRawData()
+    {
+        return self::getInstalled();
+    }
+
+    /**
+     * Lets you reload the static array from another file
+     *
+     * This is only useful for complex integrations in which a project needs to use
+     * this class but then also needs to execute another project's autoloader in process,
+     * and wants to ensure both projects have access to their version of installed.php.
+     *
+     * A typical case would be PHPUnit, where it would need to make sure it reads all
+     * the data it needs from this class, then call reload() with
+     * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
+     * the project in which it runs can then also use this class safely, without
+     * interference between PHPUnit's dependencies and the project's dependencies.
+     *
+     * @param  array[] $data A vendor/composer/installed.php data set
+     * @return void
+     *
+     * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data
+     */
+    public static function reload($data)
+    {
+        self::$installed = $data;
+        self::$installedByVendor = array();
+    }
+
+    /**
+     * @return array[]
+     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>
+     */
+    private static function getInstalled()
+    {
+        if (null === self::$canGetVendors) {
+            self::$canGetVendors = method_exists('Composer\Autoload\ClassLoader', 'getRegisteredLoaders');
+        }
+
+        $installed = array();
+
+        if (self::$canGetVendors) {
+            foreach (ClassLoader::getRegisteredLoaders() as $vendorDir => $loader) {
+                if (isset(self::$installedByVendor[$vendorDir])) {
+                    $installed[] = self::$installedByVendor[$vendorDir];
+                } elseif (is_file($vendorDir.'/composer/installed.php')) {
+                    /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */
+                    $required = require $vendorDir.'/composer/installed.php';
+                    $installed[] = self::$installedByVendor[$vendorDir] = $required;
+                    if (null === self::$installed && strtr($vendorDir.'/composer', '\\', '/') === strtr(__DIR__, '\\', '/')) {
+                        self::$installed = $installed[count($installed) - 1];
+                    }
+                }
+            }
+        }
+
+        if (null === self::$installed) {
+            // only require the installed.php file if this file is loaded from its dumped location,
+            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
+            if (substr(__DIR__, -8, 1) !== 'C') {
+                /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */
+                $required = require __DIR__ . '/installed.php';
+                self::$installed = $required;
+            } else {
+                self::$installed = array();
+            }
+        }
+
+        if (self::$installed !== array()) {
+            $installed[] = self::$installed;
+        }
+
+        return $installed;
+    }
+}
Index: vendor/composer/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/LICENSE b/vendor/composer/LICENSE
new file mode 100644
--- /dev/null	(date 1713813423000)
+++ b/vendor/composer/LICENSE	(date 1713813423000)
@@ -0,0 +1,21 @@
+
+Copyright (c) Nils Adermann, Jordi Boggiano
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+
Index: vendor/egulias/email-validator/src/EmailLexer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/EmailLexer.php b/vendor/egulias/email-validator/src/EmailLexer.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/EmailLexer.php	(date 1609213806000)
@@ -0,0 +1,283 @@
+<?php
+
+namespace Egulias\EmailValidator;
+
+use Doctrine\Common\Lexer\AbstractLexer;
+
+class EmailLexer extends AbstractLexer
+{
+    //ASCII values
+    const C_DEL              = 127;
+    const C_NUL              = 0;
+    const S_AT               = 64;
+    const S_BACKSLASH        = 92;
+    const S_DOT              = 46;
+    const S_DQUOTE           = 34;
+    const S_SQUOTE           = 39;
+    const S_BACKTICK         = 96;
+    const S_OPENPARENTHESIS  = 49;
+    const S_CLOSEPARENTHESIS = 261;
+    const S_OPENBRACKET      = 262;
+    const S_CLOSEBRACKET     = 263;
+    const S_HYPHEN           = 264;
+    const S_COLON            = 265;
+    const S_DOUBLECOLON      = 266;
+    const S_SP               = 267;
+    const S_HTAB             = 268;
+    const S_CR               = 269;
+    const S_LF               = 270;
+    const S_IPV6TAG          = 271;
+    const S_LOWERTHAN        = 272;
+    const S_GREATERTHAN      = 273;
+    const S_COMMA            = 274;
+    const S_SEMICOLON        = 275;
+    const S_OPENQBRACKET     = 276;
+    const S_CLOSEQBRACKET    = 277;
+    const S_SLASH            = 278;
+    const S_EMPTY            = null;
+    const GENERIC            = 300;
+    const CRLF               = 301;
+    const INVALID            = 302;
+    const ASCII_INVALID_FROM = 127;
+    const ASCII_INVALID_TO   = 199;
+
+    /**
+     * US-ASCII visible characters not valid for atext (@link http://tools.ietf.org/html/rfc5322#section-3.2.3)
+     *
+     * @var array
+     */
+    protected $charValue = array(
+        '('    => self::S_OPENPARENTHESIS,
+        ')'    => self::S_CLOSEPARENTHESIS,
+        '<'    => self::S_LOWERTHAN,
+        '>'    => self::S_GREATERTHAN,
+        '['    => self::S_OPENBRACKET,
+        ']'    => self::S_CLOSEBRACKET,
+        ':'    => self::S_COLON,
+        ';'    => self::S_SEMICOLON,
+        '@'    => self::S_AT,
+        '\\'   => self::S_BACKSLASH,
+        '/'    => self::S_SLASH,
+        ','    => self::S_COMMA,
+        '.'    => self::S_DOT,
+        "'"    => self::S_SQUOTE,
+        "`"    => self::S_BACKTICK,
+        '"'    => self::S_DQUOTE,
+        '-'    => self::S_HYPHEN,
+        '::'   => self::S_DOUBLECOLON,
+        ' '    => self::S_SP,
+        "\t"   => self::S_HTAB,
+        "\r"   => self::S_CR,
+        "\n"   => self::S_LF,
+        "\r\n" => self::CRLF,
+        'IPv6' => self::S_IPV6TAG,
+        '{'    => self::S_OPENQBRACKET,
+        '}'    => self::S_CLOSEQBRACKET,
+        ''     => self::S_EMPTY,
+        '\0'   => self::C_NUL,
+    );
+
+    /**
+     * @var bool
+     */
+    protected $hasInvalidTokens = false;
+
+    /**
+     * @var array
+     *
+     * @psalm-var array{value:string, type:null|int, position:int}|array<empty, empty>
+     */
+    protected $previous = [];
+
+    /**
+     * The last matched/seen token.
+     *
+     * @var array
+     *
+     * @psalm-var array{value:string, type:null|int, position:int}
+     */
+    public $token;
+
+    /**
+     * The next token in the input.
+     *
+     * @var array|null
+     */
+    public $lookahead;
+
+    /**
+     * @psalm-var array{value:'', type:null, position:0}
+     */
+    private static $nullToken = [
+        'value' => '',
+        'type' => null,
+        'position' => 0,
+    ];
+
+    public function __construct()
+    {
+        $this->previous = $this->token = self::$nullToken;
+        $this->lookahead = null;
+    }
+
+    /**
+     * @return void
+     */
+    public function reset()
+    {
+        $this->hasInvalidTokens = false;
+        parent::reset();
+        $this->previous = $this->token = self::$nullToken;
+    }
+
+    /**
+     * @return bool
+     */
+    public function hasInvalidTokens()
+    {
+        return $this->hasInvalidTokens;
+    }
+
+    /**
+     * @param int $type
+     * @throws \UnexpectedValueException
+     * @return boolean
+     *
+     * @psalm-suppress InvalidScalarArgument
+     */
+    public function find($type)
+    {
+        $search = clone $this;
+        $search->skipUntil($type);
+
+        if (!$search->lookahead) {
+            throw new \UnexpectedValueException($type . ' not found');
+        }
+        return true;
+    }
+
+    /**
+     * getPrevious
+     *
+     * @return array
+     */
+    public function getPrevious()
+    {
+        return $this->previous;
+    }
+
+    /**
+     * moveNext
+     *
+     * @return boolean
+     */
+    public function moveNext()
+    {
+        $this->previous = $this->token;
+        $hasNext = parent::moveNext();
+        $this->token = $this->token ?: self::$nullToken;
+
+        return $hasNext;
+    }
+
+    /**
+     * Lexical catchable patterns.
+     *
+     * @return string[]
+     */
+    protected function getCatchablePatterns()
+    {
+        return array(
+            '[a-zA-Z_]+[46]?', //ASCII and domain literal
+            '[^\x00-\x7F]',  //UTF-8
+            '[0-9]+',
+            '\r\n',
+            '::',
+            '\s+?',
+            '.',
+            );
+    }
+
+    /**
+     * Lexical non-catchable patterns.
+     *
+     * @return string[]
+     */
+    protected function getNonCatchablePatterns()
+    {
+        return array('[\xA0-\xff]+');
+    }
+
+    /**
+     * Retrieve token type. Also processes the token value if necessary.
+     *
+     * @param string $value
+     * @throws \InvalidArgumentException
+     * @return integer
+     */
+    protected function getType(&$value)
+    {
+        if ($this->isNullType($value)) {
+            return self::C_NUL;
+        }
+
+        if ($this->isValid($value)) {
+            return $this->charValue[$value];
+        }
+
+        if ($this->isUTF8Invalid($value)) {
+            $this->hasInvalidTokens = true;
+            return self::INVALID;
+        }
+
+        return  self::GENERIC;
+    }
+
+    /**
+     * @param string $value
+     *
+     * @return bool
+     */
+    protected function isValid($value)
+    {
+        if (isset($this->charValue[$value])) {
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * @param string $value
+     * @return bool
+     */
+    protected function isNullType($value)
+    {
+        if ($value === "\0") {
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * @param string $value
+     * @return bool
+     */
+    protected function isUTF8Invalid($value)
+    {
+        if (preg_match('/\p{Cc}+/u', $value)) {
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * @return string
+     */
+    protected function getModifiers()
+    {
+        return 'iu';
+    }
+}
Index: vendor/egulias/email-validator/src/EmailParser.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/EmailParser.php b/vendor/egulias/email-validator/src/EmailParser.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/EmailParser.php	(date 1609213806000)
@@ -0,0 +1,137 @@
+<?php
+
+namespace Egulias\EmailValidator;
+
+use Egulias\EmailValidator\Exception\ExpectingATEXT;
+use Egulias\EmailValidator\Exception\NoLocalPart;
+use Egulias\EmailValidator\Parser\DomainPart;
+use Egulias\EmailValidator\Parser\LocalPart;
+use Egulias\EmailValidator\Warning\EmailTooLong;
+
+/**
+ * EmailParser
+ *
+ * @author Eduardo Gulias Davis <me@egulias.com>
+ */
+class EmailParser
+{
+    const EMAIL_MAX_LENGTH = 254;
+
+    /**
+     * @var array
+     */
+    protected $warnings = [];
+
+    /**
+     * @var string
+     */
+    protected $domainPart = '';
+
+    /**
+     * @var string
+     */
+    protected $localPart = '';
+    /**
+     * @var EmailLexer
+     */
+    protected $lexer;
+
+    /**
+     * @var LocalPart
+     */
+    protected $localPartParser;
+
+    /**
+     * @var DomainPart
+     */
+    protected $domainPartParser;
+
+    public function __construct(EmailLexer $lexer)
+    {
+        $this->lexer = $lexer;
+        $this->localPartParser = new LocalPart($this->lexer);
+        $this->domainPartParser = new DomainPart($this->lexer);
+    }
+
+    /**
+     * @param string $str
+     * @return array
+     */
+    public function parse($str)
+    {
+        $this->lexer->setInput($str);
+
+        if (!$this->hasAtToken()) {
+            throw new NoLocalPart();
+        }
+
+
+        $this->localPartParser->parse($str);
+        $this->domainPartParser->parse($str);
+
+        $this->setParts($str);
+
+        if ($this->lexer->hasInvalidTokens()) {
+            throw new ExpectingATEXT();
+        }
+
+        return array('local' => $this->localPart, 'domain' => $this->domainPart);
+    }
+
+    /**
+     * @return Warning\Warning[]
+     */
+    public function getWarnings()
+    {
+        $localPartWarnings = $this->localPartParser->getWarnings();
+        $domainPartWarnings = $this->domainPartParser->getWarnings();
+        $this->warnings = array_merge($localPartWarnings, $domainPartWarnings);
+
+        $this->addLongEmailWarning($this->localPart, $this->domainPart);
+
+        return $this->warnings;
+    }
+
+    /**
+     * @return string
+     */
+    public function getParsedDomainPart()
+    {
+        return $this->domainPart;
+    }
+
+    /**
+     * @param string $email
+     */
+    protected function setParts($email)
+    {
+        $parts = explode('@', $email);
+        $this->domainPart = $this->domainPartParser->getDomainPart();
+        $this->localPart = $parts[0];
+    }
+
+    /**
+     * @return bool
+     */
+    protected function hasAtToken()
+    {
+        $this->lexer->moveNext();
+        $this->lexer->moveNext();
+        if ($this->lexer->token['type'] === EmailLexer::S_AT) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * @param string $localPart
+     * @param string $parsedDomainPart
+     */
+    protected function addLongEmailWarning($localPart, $parsedDomainPart)
+    {
+        if (strlen($localPart . '@' . $parsedDomainPart) > self::EMAIL_MAX_LENGTH) {
+            $this->warnings[EmailTooLong::CODE] = new EmailTooLong();
+        }
+    }
+}
Index: vendor/egulias/email-validator/src/EmailValidator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/EmailValidator.php b/vendor/egulias/email-validator/src/EmailValidator.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/EmailValidator.php	(date 1609213806000)
@@ -0,0 +1,67 @@
+<?php
+
+namespace Egulias\EmailValidator;
+
+use Egulias\EmailValidator\Exception\InvalidEmail;
+use Egulias\EmailValidator\Validation\EmailValidation;
+
+class EmailValidator
+{
+    /**
+     * @var EmailLexer
+     */
+    private $lexer;
+
+    /**
+     * @var Warning\Warning[]
+     */
+    protected $warnings = [];
+
+    /**
+     * @var InvalidEmail|null
+     */
+    protected $error;
+
+    public function __construct()
+    {
+        $this->lexer = new EmailLexer();
+    }
+
+    /**
+     * @param string          $email
+     * @param EmailValidation $emailValidation
+     * @return bool
+     */
+    public function isValid($email, EmailValidation $emailValidation)
+    {
+        $isValid = $emailValidation->isValid($email, $this->lexer);
+        $this->warnings = $emailValidation->getWarnings();
+        $this->error = $emailValidation->getError();
+
+        return $isValid;
+    }
+
+    /**
+     * @return boolean
+     */
+    public function hasWarnings()
+    {
+        return !empty($this->warnings);
+    }
+
+    /**
+     * @return array
+     */
+    public function getWarnings()
+    {
+        return $this->warnings;
+    }
+
+    /**
+     * @return InvalidEmail|null
+     */
+    public function getError()
+    {
+        return $this->error;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/CFWSNearAt.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/CFWSNearAt.php b/vendor/egulias/email-validator/src/Warning/CFWSNearAt.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/CFWSNearAt.php	(date 1609213806000)
@@ -0,0 +1,13 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class CFWSNearAt extends Warning
+{
+    const CODE = 49;
+
+    public function __construct()
+    {
+        $this->message = "Deprecated folding white space near @";
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/CFWSWithFWS.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/CFWSWithFWS.php b/vendor/egulias/email-validator/src/Warning/CFWSWithFWS.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/CFWSWithFWS.php	(date 1609213806000)
@@ -0,0 +1,13 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class CFWSWithFWS extends Warning
+{
+    const CODE = 18;
+
+    public function __construct()
+    {
+        $this->message = 'Folding whites space followed by folding white space';
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/Comment.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/Comment.php b/vendor/egulias/email-validator/src/Warning/Comment.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/Comment.php	(date 1609213806000)
@@ -0,0 +1,13 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class Comment extends Warning
+{
+    const CODE = 17;
+
+    public function __construct()
+    {
+        $this->message = "Comments found in this email";
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/DeprecatedComment.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/DeprecatedComment.php b/vendor/egulias/email-validator/src/Warning/DeprecatedComment.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/DeprecatedComment.php	(date 1609213806000)
@@ -0,0 +1,13 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class DeprecatedComment extends Warning
+{
+    const CODE = 37;
+
+    public function __construct()
+    {
+        $this->message = 'Deprecated comments';
+    }
+}
Index: vendor/egulias/email-validator/src/Parser/DomainPart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Parser/DomainPart.php b/vendor/egulias/email-validator/src/Parser/DomainPart.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Parser/DomainPart.php	(date 1609213806000)
@@ -0,0 +1,443 @@
+<?php
+
+namespace Egulias\EmailValidator\Parser;
+
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\Exception\CharNotAllowed;
+use Egulias\EmailValidator\Exception\CommaInDomain;
+use Egulias\EmailValidator\Exception\ConsecutiveAt;
+use Egulias\EmailValidator\Exception\CRLFAtTheEnd;
+use Egulias\EmailValidator\Exception\CRNoLF;
+use Egulias\EmailValidator\Exception\DomainHyphened;
+use Egulias\EmailValidator\Exception\DotAtEnd;
+use Egulias\EmailValidator\Exception\DotAtStart;
+use Egulias\EmailValidator\Exception\ExpectingATEXT;
+use Egulias\EmailValidator\Exception\ExpectingDomainLiteralClose;
+use Egulias\EmailValidator\Exception\ExpectingDTEXT;
+use Egulias\EmailValidator\Exception\NoDomainPart;
+use Egulias\EmailValidator\Exception\UnopenedComment;
+use Egulias\EmailValidator\Warning\AddressLiteral;
+use Egulias\EmailValidator\Warning\CFWSWithFWS;
+use Egulias\EmailValidator\Warning\DeprecatedComment;
+use Egulias\EmailValidator\Warning\DomainLiteral;
+use Egulias\EmailValidator\Warning\DomainTooLong;
+use Egulias\EmailValidator\Warning\IPV6BadChar;
+use Egulias\EmailValidator\Warning\IPV6ColonEnd;
+use Egulias\EmailValidator\Warning\IPV6ColonStart;
+use Egulias\EmailValidator\Warning\IPV6Deprecated;
+use Egulias\EmailValidator\Warning\IPV6DoubleColon;
+use Egulias\EmailValidator\Warning\IPV6GroupCount;
+use Egulias\EmailValidator\Warning\IPV6MaxGroups;
+use Egulias\EmailValidator\Warning\LabelTooLong;
+use Egulias\EmailValidator\Warning\ObsoleteDTEXT;
+use Egulias\EmailValidator\Warning\TLD;
+
+class DomainPart extends Parser
+{
+    const DOMAIN_MAX_LENGTH = 254;
+    const LABEL_MAX_LENGTH = 63;
+
+    /**
+     * @var string
+     */
+    protected $domainPart = '';
+
+    public function parse($domainPart)
+    {
+        $this->lexer->moveNext();
+
+        $this->performDomainStartChecks();
+
+        $domain = $this->doParseDomainPart();
+
+        $prev = $this->lexer->getPrevious();
+        $length = strlen($domain);
+
+        if ($prev['type'] === EmailLexer::S_DOT) {
+            throw new DotAtEnd();
+        }
+        if ($prev['type'] === EmailLexer::S_HYPHEN) {
+            throw new DomainHyphened();
+        }
+        if ($length > self::DOMAIN_MAX_LENGTH) {
+            $this->warnings[DomainTooLong::CODE] = new DomainTooLong();
+        }
+        if ($prev['type'] === EmailLexer::S_CR) {
+            throw new CRLFAtTheEnd();
+        }
+        $this->domainPart = $domain;
+    }
+
+    private function performDomainStartChecks()
+    {
+        $this->checkInvalidTokensAfterAT();
+        $this->checkEmptyDomain();
+
+        if ($this->lexer->token['type'] === EmailLexer::S_OPENPARENTHESIS) {
+            $this->warnings[DeprecatedComment::CODE] = new DeprecatedComment();
+            $this->parseDomainComments();
+        }
+    }
+
+    private function checkEmptyDomain()
+    {
+        $thereIsNoDomain = $this->lexer->token['type'] === EmailLexer::S_EMPTY ||
+            ($this->lexer->token['type'] === EmailLexer::S_SP &&
+            !$this->lexer->isNextToken(EmailLexer::GENERIC));
+
+        if ($thereIsNoDomain) {
+            throw new NoDomainPart();
+        }
+    }
+
+    private function checkInvalidTokensAfterAT()
+    {
+        if ($this->lexer->token['type'] === EmailLexer::S_DOT) {
+            throw new DotAtStart();
+        }
+        if ($this->lexer->token['type'] === EmailLexer::S_HYPHEN) {
+            throw new DomainHyphened();
+        }
+    }
+
+    /**
+     * @return string
+     */
+    public function getDomainPart()
+    {
+        return $this->domainPart;
+    }
+
+    /**
+     * @param string $addressLiteral
+     * @param int $maxGroups
+     */
+    public function checkIPV6Tag($addressLiteral, $maxGroups = 8)
+    {
+        $prev = $this->lexer->getPrevious();
+        if ($prev['type'] === EmailLexer::S_COLON) {
+            $this->warnings[IPV6ColonEnd::CODE] = new IPV6ColonEnd();
+        }
+
+        $IPv6       = substr($addressLiteral, 5);
+        //Daniel Marschall's new IPv6 testing strategy
+        $matchesIP  = explode(':', $IPv6);
+        $groupCount = count($matchesIP);
+        $colons     = strpos($IPv6, '::');
+
+        if (count(preg_grep('/^[0-9A-Fa-f]{0,4}$/', $matchesIP, PREG_GREP_INVERT)) !== 0) {
+            $this->warnings[IPV6BadChar::CODE] = new IPV6BadChar();
+        }
+
+        if ($colons === false) {
+            // We need exactly the right number of groups
+            if ($groupCount !== $maxGroups) {
+                $this->warnings[IPV6GroupCount::CODE] = new IPV6GroupCount();
+            }
+            return;
+        }
+
+        if ($colons !== strrpos($IPv6, '::')) {
+            $this->warnings[IPV6DoubleColon::CODE] = new IPV6DoubleColon();
+            return;
+        }
+
+        if ($colons === 0 || $colons === (strlen($IPv6) - 2)) {
+            // RFC 4291 allows :: at the start or end of an address
+            //with 7 other groups in addition
+            ++$maxGroups;
+        }
+
+        if ($groupCount > $maxGroups) {
+            $this->warnings[IPV6MaxGroups::CODE] = new IPV6MaxGroups();
+        } elseif ($groupCount === $maxGroups) {
+            $this->warnings[IPV6Deprecated::CODE] = new IPV6Deprecated();
+        }
+    }
+
+    /**
+     * @return string
+     */
+    protected function doParseDomainPart()
+    {
+        $domain = '';
+        $label = '';
+        $openedParenthesis = 0;
+        do {
+            $prev = $this->lexer->getPrevious();
+
+            $this->checkNotAllowedChars($this->lexer->token);
+
+            if ($this->lexer->token['type'] === EmailLexer::S_OPENPARENTHESIS) {
+                $this->parseComments();
+                $openedParenthesis += $this->getOpenedParenthesis();
+                $this->lexer->moveNext();
+                $tmpPrev = $this->lexer->getPrevious();
+                if ($tmpPrev['type'] === EmailLexer::S_CLOSEPARENTHESIS) {
+                    $openedParenthesis--;
+                }
+            }
+            if ($this->lexer->token['type'] === EmailLexer::S_CLOSEPARENTHESIS) {
+                if ($openedParenthesis === 0) {
+                    throw new UnopenedComment();
+                } else {
+                    $openedParenthesis--;
+                }
+            }
+
+            $this->checkConsecutiveDots();
+            $this->checkDomainPartExceptions($prev);
+
+            if ($this->hasBrackets()) {
+                $this->parseDomainLiteral();
+            }
+
+            if ($this->lexer->token['type'] === EmailLexer::S_DOT) {
+                $this->checkLabelLength($label);
+                $label = '';
+            } else {
+                $label .= $this->lexer->token['value'];
+            }
+
+            if ($this->isFWS()) {
+                $this->parseFWS();
+            }
+
+            $domain .= $this->lexer->token['value'];
+            $this->lexer->moveNext();
+            if ($this->lexer->token['type'] === EmailLexer::S_SP) {
+                throw new CharNotAllowed();
+            }
+        } while (null !== $this->lexer->token['type']);
+
+        $this->checkLabelLength($label);
+
+        return $domain;
+    }
+
+    private function checkNotAllowedChars(array $token)
+    {
+        $notAllowed = [EmailLexer::S_BACKSLASH => true, EmailLexer::S_SLASH=> true];
+        if (isset($notAllowed[$token['type']])) {
+            throw new CharNotAllowed();
+        }
+    }
+
+    /**
+     * @return string|false
+     */
+    protected function parseDomainLiteral()
+    {
+        if ($this->lexer->isNextToken(EmailLexer::S_COLON)) {
+            $this->warnings[IPV6ColonStart::CODE] = new IPV6ColonStart();
+        }
+        if ($this->lexer->isNextToken(EmailLexer::S_IPV6TAG)) {
+            $lexer = clone $this->lexer;
+            $lexer->moveNext();
+            if ($lexer->isNextToken(EmailLexer::S_DOUBLECOLON)) {
+                $this->warnings[IPV6ColonStart::CODE] = new IPV6ColonStart();
+            }
+        }
+
+        return $this->doParseDomainLiteral();
+    }
+
+    /**
+     * @return string|false
+     */
+    protected function doParseDomainLiteral()
+    {
+        $IPv6TAG = false;
+        $addressLiteral = '';
+        do {
+            if ($this->lexer->token['type'] === EmailLexer::C_NUL) {
+                throw new ExpectingDTEXT();
+            }
+
+            if ($this->lexer->token['type'] === EmailLexer::INVALID ||
+                $this->lexer->token['type'] === EmailLexer::C_DEL   ||
+                $this->lexer->token['type'] === EmailLexer::S_LF
+            ) {
+                $this->warnings[ObsoleteDTEXT::CODE] = new ObsoleteDTEXT();
+            }
+
+            if ($this->lexer->isNextTokenAny(array(EmailLexer::S_OPENQBRACKET, EmailLexer::S_OPENBRACKET))) {
+                throw new ExpectingDTEXT();
+            }
+
+            if ($this->lexer->isNextTokenAny(
+                array(EmailLexer::S_HTAB, EmailLexer::S_SP, $this->lexer->token['type'] === EmailLexer::CRLF)
+            )) {
+                $this->warnings[CFWSWithFWS::CODE] = new CFWSWithFWS();
+                $this->parseFWS();
+            }
+
+            if ($this->lexer->isNextToken(EmailLexer::S_CR)) {
+                throw new CRNoLF();
+            }
+
+            if ($this->lexer->token['type'] === EmailLexer::S_BACKSLASH) {
+                $this->warnings[ObsoleteDTEXT::CODE] = new ObsoleteDTEXT();
+                $addressLiteral .= $this->lexer->token['value'];
+                $this->lexer->moveNext();
+                $this->validateQuotedPair();
+            }
+            if ($this->lexer->token['type'] === EmailLexer::S_IPV6TAG) {
+                $IPv6TAG = true;
+            }
+            if ($this->lexer->token['type'] === EmailLexer::S_CLOSEQBRACKET) {
+                break;
+            }
+
+            $addressLiteral .= $this->lexer->token['value'];
+
+        } while ($this->lexer->moveNext());
+
+        $addressLiteral = str_replace('[', '', $addressLiteral);
+        $addressLiteral = $this->checkIPV4Tag($addressLiteral);
+
+        if (false === $addressLiteral) {
+            return $addressLiteral;
+        }
+
+        if (!$IPv6TAG) {
+            $this->warnings[DomainLiteral::CODE] = new DomainLiteral();
+            return $addressLiteral;
+        }
+
+        $this->warnings[AddressLiteral::CODE] = new AddressLiteral();
+
+        $this->checkIPV6Tag($addressLiteral);
+
+        return $addressLiteral;
+    }
+
+    /**
+     * @param string $addressLiteral
+     *
+     * @return string|false
+     */
+    protected function checkIPV4Tag($addressLiteral)
+    {
+        $matchesIP  = array();
+
+        // Extract IPv4 part from the end of the address-literal (if there is one)
+        if (preg_match(
+            '/\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/',
+            $addressLiteral,
+            $matchesIP
+        ) > 0
+        ) {
+            $index = strrpos($addressLiteral, $matchesIP[0]);
+            if ($index === 0) {
+                $this->warnings[AddressLiteral::CODE] = new AddressLiteral();
+                return false;
+            }
+            // Convert IPv4 part to IPv6 format for further testing
+            $addressLiteral = substr($addressLiteral, 0, (int) $index) . '0:0';
+        }
+
+        return $addressLiteral;
+    }
+
+    protected function checkDomainPartExceptions(array $prev)
+    {
+        $invalidDomainTokens = array(
+            EmailLexer::S_DQUOTE => true,
+            EmailLexer::S_SQUOTE => true,
+            EmailLexer::S_BACKTICK => true,
+            EmailLexer::S_SEMICOLON => true,
+            EmailLexer::S_GREATERTHAN => true,
+            EmailLexer::S_LOWERTHAN => true,
+        );
+
+        if (isset($invalidDomainTokens[$this->lexer->token['type']])) {
+            throw new ExpectingATEXT();
+        }
+
+        if ($this->lexer->token['type'] === EmailLexer::S_COMMA) {
+            throw new CommaInDomain();
+        }
+
+        if ($this->lexer->token['type'] === EmailLexer::S_AT) {
+            throw new ConsecutiveAt();
+        }
+
+        if ($this->lexer->token['type'] === EmailLexer::S_OPENQBRACKET && $prev['type'] !== EmailLexer::S_AT) {
+            throw new ExpectingATEXT();
+        }
+
+        if ($this->lexer->token['type'] === EmailLexer::S_HYPHEN && $this->lexer->isNextToken(EmailLexer::S_DOT)) {
+            throw new DomainHyphened();
+        }
+
+        if ($this->lexer->token['type'] === EmailLexer::S_BACKSLASH
+            && $this->lexer->isNextToken(EmailLexer::GENERIC)) {
+            throw new ExpectingATEXT();
+        }
+    }
+
+    /**
+     * @return bool
+     */
+    protected function hasBrackets()
+    {
+        if ($this->lexer->token['type'] !== EmailLexer::S_OPENBRACKET) {
+            return false;
+        }
+
+        try {
+            $this->lexer->find(EmailLexer::S_CLOSEBRACKET);
+        } catch (\RuntimeException $e) {
+            throw new ExpectingDomainLiteralClose();
+        }
+
+        return true;
+    }
+
+    /**
+     * @param string $label
+     */
+    protected function checkLabelLength($label)
+    {
+        if ($this->isLabelTooLong($label)) {
+            $this->warnings[LabelTooLong::CODE] = new LabelTooLong();
+        }
+    }
+
+    /**
+     * @param string $label
+     * @return bool
+     */
+    private function isLabelTooLong($label)
+    {
+        if (preg_match('/[^\x00-\x7F]/', $label)) {
+            idn_to_ascii($label, IDNA_DEFAULT, INTL_IDNA_VARIANT_UTS46, $idnaInfo);
+
+            return (bool) ($idnaInfo['errors'] & IDNA_ERROR_LABEL_TOO_LONG);
+        }
+
+        return strlen($label) > self::LABEL_MAX_LENGTH;
+    }
+
+    protected function parseDomainComments()
+    {
+        $this->isUnclosedComment();
+        while (!$this->lexer->isNextToken(EmailLexer::S_CLOSEPARENTHESIS)) {
+            $this->warnEscaping();
+            $this->lexer->moveNext();
+        }
+
+        $this->lexer->moveNext();
+        if ($this->lexer->isNextToken(EmailLexer::S_DOT)) {
+            throw new ExpectingATEXT();
+        }
+    }
+
+    protected function addTLDWarnings()
+    {
+        if ($this->warnings[DomainLiteral::CODE]) {
+            $this->warnings[TLD::CODE] = new TLD();
+        }
+    }
+}
Index: vendor/egulias/email-validator/src/Parser/LocalPart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Parser/LocalPart.php b/vendor/egulias/email-validator/src/Parser/LocalPart.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Parser/LocalPart.php	(date 1609213806000)
@@ -0,0 +1,145 @@
+<?php
+
+namespace Egulias\EmailValidator\Parser;
+
+use Egulias\EmailValidator\Exception\DotAtEnd;
+use Egulias\EmailValidator\Exception\DotAtStart;
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\Exception\ExpectingAT;
+use Egulias\EmailValidator\Exception\ExpectingATEXT;
+use Egulias\EmailValidator\Exception\UnclosedQuotedString;
+use Egulias\EmailValidator\Exception\UnopenedComment;
+use Egulias\EmailValidator\Warning\CFWSWithFWS;
+use Egulias\EmailValidator\Warning\LocalTooLong;
+
+class LocalPart extends Parser
+{
+    public function parse($localPart)
+    {
+        $parseDQuote = true;
+        $closingQuote = false;
+        $openedParenthesis = 0;
+        $totalLength = 0;
+
+        while ($this->lexer->token['type'] !== EmailLexer::S_AT && null !== $this->lexer->token['type']) {
+            if ($this->lexer->token['type'] === EmailLexer::S_DOT && null === $this->lexer->getPrevious()['type']) {
+                throw new DotAtStart();
+            }
+
+            $closingQuote = $this->checkDQUOTE($closingQuote);
+            if ($closingQuote && $parseDQuote) {
+                $parseDQuote = $this->parseDoubleQuote();
+            }
+
+            if ($this->lexer->token['type'] === EmailLexer::S_OPENPARENTHESIS) {
+                $this->parseComments();
+                $openedParenthesis += $this->getOpenedParenthesis();
+            }
+
+            if ($this->lexer->token['type'] === EmailLexer::S_CLOSEPARENTHESIS) {
+                if ($openedParenthesis === 0) {
+                    throw new UnopenedComment();
+                }
+
+                $openedParenthesis--;
+            }
+
+            $this->checkConsecutiveDots();
+
+            if ($this->lexer->token['type'] === EmailLexer::S_DOT &&
+                $this->lexer->isNextToken(EmailLexer::S_AT)
+            ) {
+                throw new DotAtEnd();
+            }
+
+            $this->warnEscaping();
+            $this->isInvalidToken($this->lexer->token, $closingQuote);
+
+            if ($this->isFWS()) {
+                $this->parseFWS();
+            }
+
+            $totalLength += strlen($this->lexer->token['value']);
+            $this->lexer->moveNext();
+        }
+
+        if ($totalLength > LocalTooLong::LOCAL_PART_LENGTH) {
+            $this->warnings[LocalTooLong::CODE] = new LocalTooLong();
+        }
+    }
+
+    /**
+     * @return bool
+     */
+    protected function parseDoubleQuote()
+    {
+        $parseAgain = true;
+        $special = array(
+            EmailLexer::S_CR => true,
+            EmailLexer::S_HTAB => true,
+            EmailLexer::S_LF => true
+        );
+
+        $invalid = array(
+            EmailLexer::C_NUL => true,
+            EmailLexer::S_HTAB => true,
+            EmailLexer::S_CR => true,
+            EmailLexer::S_LF => true
+        );
+        $setSpecialsWarning = true;
+
+        $this->lexer->moveNext();
+
+        while ($this->lexer->token['type'] !== EmailLexer::S_DQUOTE && null !== $this->lexer->token['type']) {
+            $parseAgain = false;
+            if (isset($special[$this->lexer->token['type']]) && $setSpecialsWarning) {
+                $this->warnings[CFWSWithFWS::CODE] = new CFWSWithFWS();
+                $setSpecialsWarning = false;
+            }
+            if ($this->lexer->token['type'] === EmailLexer::S_BACKSLASH && $this->lexer->isNextToken(EmailLexer::S_DQUOTE)) {
+                $this->lexer->moveNext();
+            }
+
+            $this->lexer->moveNext();
+
+            if (!$this->escaped() && isset($invalid[$this->lexer->token['type']])) {
+                throw new ExpectingATEXT();
+            }
+        }
+
+        $prev = $this->lexer->getPrevious();
+
+        if ($prev['type'] === EmailLexer::S_BACKSLASH) {
+            if (!$this->checkDQUOTE(false)) {
+                throw new UnclosedQuotedString();
+            }
+        }
+
+        if (!$this->lexer->isNextToken(EmailLexer::S_AT) && $prev['type'] !== EmailLexer::S_BACKSLASH) {
+            throw new ExpectingAT();
+        }
+
+        return $parseAgain;
+    }
+
+    /**
+     * @param bool $closingQuote
+     */
+    protected function isInvalidToken(array $token, $closingQuote)
+    {
+        $forbidden = array(
+            EmailLexer::S_COMMA,
+            EmailLexer::S_CLOSEBRACKET,
+            EmailLexer::S_OPENBRACKET,
+            EmailLexer::S_GREATERTHAN,
+            EmailLexer::S_LOWERTHAN,
+            EmailLexer::S_COLON,
+            EmailLexer::S_SEMICOLON,
+            EmailLexer::INVALID
+        );
+
+        if (in_array($token['type'], $forbidden) && !$closingQuote) {
+            throw new ExpectingATEXT();
+        }
+    }
+}
Index: vendor/egulias/email-validator/src/Parser/Parser.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Parser/Parser.php b/vendor/egulias/email-validator/src/Parser/Parser.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Parser/Parser.php	(date 1609213806000)
@@ -0,0 +1,249 @@
+<?php
+
+namespace Egulias\EmailValidator\Parser;
+
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\Exception\AtextAfterCFWS;
+use Egulias\EmailValidator\Exception\ConsecutiveDot;
+use Egulias\EmailValidator\Exception\CRLFAtTheEnd;
+use Egulias\EmailValidator\Exception\CRLFX2;
+use Egulias\EmailValidator\Exception\CRNoLF;
+use Egulias\EmailValidator\Exception\ExpectingQPair;
+use Egulias\EmailValidator\Exception\ExpectingATEXT;
+use Egulias\EmailValidator\Exception\ExpectingCTEXT;
+use Egulias\EmailValidator\Exception\UnclosedComment;
+use Egulias\EmailValidator\Exception\UnclosedQuotedString;
+use Egulias\EmailValidator\Warning\CFWSNearAt;
+use Egulias\EmailValidator\Warning\CFWSWithFWS;
+use Egulias\EmailValidator\Warning\Comment;
+use Egulias\EmailValidator\Warning\QuotedPart;
+use Egulias\EmailValidator\Warning\QuotedString;
+
+abstract class Parser
+{
+    /**
+     * @var array
+     */
+    protected $warnings = [];
+
+    /**
+     * @var EmailLexer
+     */
+    protected $lexer;
+
+    /**
+     * @var int
+     */
+    protected $openedParenthesis = 0;
+
+    public function __construct(EmailLexer $lexer)
+    {
+        $this->lexer = $lexer;
+    }
+
+    /**
+     * @return \Egulias\EmailValidator\Warning\Warning[]
+     */
+    public function getWarnings()
+    {
+        return $this->warnings;
+    }
+
+    /**
+     * @param string $str
+     */
+    abstract public function parse($str);
+
+    /** @return int */
+    public function getOpenedParenthesis()
+    {
+        return $this->openedParenthesis;
+    }
+
+    /**
+     * validateQuotedPair
+     */
+    protected function validateQuotedPair()
+    {
+        if (!($this->lexer->token['type'] === EmailLexer::INVALID
+            || $this->lexer->token['type'] === EmailLexer::C_DEL)) {
+            throw new ExpectingQPair();
+        }
+
+        $this->warnings[QuotedPart::CODE] =
+            new QuotedPart($this->lexer->getPrevious()['type'], $this->lexer->token['type']);
+    }
+
+    protected function parseComments()
+    {
+        $this->openedParenthesis = 1;
+        $this->isUnclosedComment();
+        $this->warnings[Comment::CODE] = new Comment();
+        while (!$this->lexer->isNextToken(EmailLexer::S_CLOSEPARENTHESIS)) {
+            if ($this->lexer->isNextToken(EmailLexer::S_OPENPARENTHESIS)) {
+                $this->openedParenthesis++;
+            }
+            $this->warnEscaping();
+            $this->lexer->moveNext();
+        }
+
+        $this->lexer->moveNext();
+        if ($this->lexer->isNextTokenAny(array(EmailLexer::GENERIC, EmailLexer::S_EMPTY))) {
+            throw new ExpectingATEXT();
+        }
+
+        if ($this->lexer->isNextToken(EmailLexer::S_AT)) {
+            $this->warnings[CFWSNearAt::CODE] = new CFWSNearAt();
+        }
+    }
+
+    /**
+     * @return bool
+     */
+    protected function isUnclosedComment()
+    {
+        try {
+            $this->lexer->find(EmailLexer::S_CLOSEPARENTHESIS);
+            return true;
+        } catch (\RuntimeException $e) {
+            throw new UnclosedComment();
+        }
+    }
+
+    protected function parseFWS()
+    {
+        $previous = $this->lexer->getPrevious();
+
+        $this->checkCRLFInFWS();
+
+        if ($this->lexer->token['type'] === EmailLexer::S_CR) {
+            throw new CRNoLF();
+        }
+
+        if ($this->lexer->isNextToken(EmailLexer::GENERIC) && $previous['type']  !== EmailLexer::S_AT) {
+            throw new AtextAfterCFWS();
+        }
+
+        if ($this->lexer->token['type'] === EmailLexer::S_LF || $this->lexer->token['type'] === EmailLexer::C_NUL) {
+            throw new ExpectingCTEXT();
+        }
+
+        if ($this->lexer->isNextToken(EmailLexer::S_AT) || $previous['type']  === EmailLexer::S_AT) {
+            $this->warnings[CFWSNearAt::CODE] = new CFWSNearAt();
+        } else {
+            $this->warnings[CFWSWithFWS::CODE] = new CFWSWithFWS();
+        }
+    }
+
+    protected function checkConsecutiveDots()
+    {
+        if ($this->lexer->token['type'] === EmailLexer::S_DOT && $this->lexer->isNextToken(EmailLexer::S_DOT)) {
+            throw new ConsecutiveDot();
+        }
+    }
+
+    /**
+     * @return bool
+     */
+    protected function isFWS()
+    {
+        if ($this->escaped()) {
+            return false;
+        }
+
+        if ($this->lexer->token['type'] === EmailLexer::S_SP ||
+            $this->lexer->token['type'] === EmailLexer::S_HTAB ||
+            $this->lexer->token['type'] === EmailLexer::S_CR ||
+            $this->lexer->token['type'] === EmailLexer::S_LF ||
+            $this->lexer->token['type'] === EmailLexer::CRLF
+        ) {
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * @return bool
+     */
+    protected function escaped()
+    {
+        $previous = $this->lexer->getPrevious();
+
+        if ($previous && $previous['type'] === EmailLexer::S_BACKSLASH
+            &&
+            $this->lexer->token['type'] !== EmailLexer::GENERIC
+        ) {
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * @return bool
+     */
+    protected function warnEscaping()
+    {
+        if ($this->lexer->token['type'] !== EmailLexer::S_BACKSLASH) {
+            return false;
+        }
+
+        if ($this->lexer->isNextToken(EmailLexer::GENERIC)) {
+            throw new ExpectingATEXT();
+        }
+
+        if (!$this->lexer->isNextTokenAny(array(EmailLexer::S_SP, EmailLexer::S_HTAB, EmailLexer::C_DEL))) {
+            return false;
+        }
+
+        $this->warnings[QuotedPart::CODE] =
+            new QuotedPart($this->lexer->getPrevious()['type'], $this->lexer->token['type']);
+        return true;
+
+    }
+
+    /**
+     * @param bool $hasClosingQuote
+     *
+     * @return bool
+     */
+    protected function checkDQUOTE($hasClosingQuote)
+    {
+        if ($this->lexer->token['type'] !== EmailLexer::S_DQUOTE) {
+            return $hasClosingQuote;
+        }
+        if ($hasClosingQuote) {
+            return $hasClosingQuote;
+        }
+        $previous = $this->lexer->getPrevious();
+        if ($this->lexer->isNextToken(EmailLexer::GENERIC) && $previous['type'] === EmailLexer::GENERIC) {
+            throw new ExpectingATEXT();
+        }
+
+        try {
+            $this->lexer->find(EmailLexer::S_DQUOTE);
+            $hasClosingQuote = true;
+        } catch (\Exception $e) {
+            throw new UnclosedQuotedString();
+        }
+        $this->warnings[QuotedString::CODE] = new QuotedString($previous['value'], $this->lexer->token['value']);
+
+        return $hasClosingQuote;
+    }
+
+    protected function checkCRLFInFWS()
+    {
+        if ($this->lexer->token['type'] !== EmailLexer::CRLF) {
+            return;
+        }
+
+        if (!$this->lexer->isNextTokenAny(array(EmailLexer::S_SP, EmailLexer::S_HTAB))) {
+            throw new CRLFX2();
+        }
+
+        if (!$this->lexer->isNextTokenAny(array(EmailLexer::S_SP, EmailLexer::S_HTAB))) {
+            throw new CRLFAtTheEnd();
+        }
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/AddressLiteral.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/AddressLiteral.php b/vendor/egulias/email-validator/src/Warning/AddressLiteral.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/AddressLiteral.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class AddressLiteral extends Warning
+{
+    const CODE = 12;
+
+    public function __construct()
+    {
+        $this->message = 'Address literal in domain part';
+        $this->rfcNumber = 5321;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/IPV6ColonEnd.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/IPV6ColonEnd.php b/vendor/egulias/email-validator/src/Warning/IPV6ColonEnd.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/IPV6ColonEnd.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class IPV6ColonEnd extends Warning
+{
+    const CODE = 77;
+
+    public function __construct()
+    {
+        $this->message = ':: found at the end of the domain literal';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/IPV6ColonStart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/IPV6ColonStart.php b/vendor/egulias/email-validator/src/Warning/IPV6ColonStart.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/IPV6ColonStart.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class IPV6ColonStart extends Warning
+{
+    const CODE = 76;
+
+    public function __construct()
+    {
+        $this->message = ':: found at the start of the domain literal';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/IPV6Deprecated.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/IPV6Deprecated.php b/vendor/egulias/email-validator/src/Warning/IPV6Deprecated.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/IPV6Deprecated.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class IPV6Deprecated extends Warning
+{
+    const CODE = 13;
+
+    public function __construct()
+    {
+        $this->message = 'Deprecated form of IPV6';
+        $this->rfcNumber = 5321;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/IPV6DoubleColon.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/IPV6DoubleColon.php b/vendor/egulias/email-validator/src/Warning/IPV6DoubleColon.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/IPV6DoubleColon.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class IPV6DoubleColon extends Warning
+{
+    const CODE = 73;
+
+    public function __construct()
+    {
+        $this->message = 'Double colon found after IPV6 tag';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/DomainLiteral.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/DomainLiteral.php b/vendor/egulias/email-validator/src/Warning/DomainLiteral.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/DomainLiteral.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class DomainLiteral extends Warning
+{
+    const CODE = 70;
+
+    public function __construct()
+    {
+        $this->message = 'Domain Literal';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/DomainTooLong.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/DomainTooLong.php b/vendor/egulias/email-validator/src/Warning/DomainTooLong.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/DomainTooLong.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class DomainTooLong extends Warning
+{
+    const CODE = 255;
+
+    public function __construct()
+    {
+        $this->message = 'Domain is too long, exceeds 255 chars';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/EmailTooLong.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/EmailTooLong.php b/vendor/egulias/email-validator/src/Warning/EmailTooLong.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/EmailTooLong.php	(date 1609213806000)
@@ -0,0 +1,15 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+use Egulias\EmailValidator\EmailParser;
+
+class EmailTooLong extends Warning
+{
+    const CODE = 66;
+
+    public function __construct()
+    {
+        $this->message = 'Email is too long, exceeds ' . EmailParser::EMAIL_MAX_LENGTH;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/IPV6BadChar.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/IPV6BadChar.php b/vendor/egulias/email-validator/src/Warning/IPV6BadChar.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/IPV6BadChar.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class IPV6BadChar extends Warning
+{
+    const CODE = 74;
+
+    public function __construct()
+    {
+        $this->message = 'Bad char in IPV6 domain literal';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/NoDNSMXRecord.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/NoDNSMXRecord.php b/vendor/egulias/email-validator/src/Warning/NoDNSMXRecord.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/NoDNSMXRecord.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class NoDNSMXRecord extends Warning
+{
+    const CODE = 6;
+
+    public function __construct()
+    {
+        $this->message = 'No MX DSN record was found for this email';
+        $this->rfcNumber = 5321;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/ObsoleteDTEXT.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/ObsoleteDTEXT.php b/vendor/egulias/email-validator/src/Warning/ObsoleteDTEXT.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/ObsoleteDTEXT.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class ObsoleteDTEXT extends Warning
+{
+    const CODE = 71;
+
+    public function __construct()
+    {
+        $this->rfcNumber = 5322;
+        $this->message = 'Obsolete DTEXT in domain literal';
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/QuotedPart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/QuotedPart.php b/vendor/egulias/email-validator/src/Warning/QuotedPart.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/QuotedPart.php	(date 1609213806000)
@@ -0,0 +1,17 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class QuotedPart extends Warning
+{
+    const CODE = 36;
+
+    /**
+     * @param scalar $prevToken
+     * @param scalar $postToken
+     */
+    public function __construct($prevToken, $postToken)
+    {
+        $this->message = "Deprecated Quoted String found between $prevToken and $postToken";
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/QuotedString.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/QuotedString.php b/vendor/egulias/email-validator/src/Warning/QuotedString.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/QuotedString.php	(date 1609213806000)
@@ -0,0 +1,17 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class QuotedString extends Warning
+{
+    const CODE = 11;
+
+    /**
+     * @param scalar $prevToken
+     * @param scalar $postToken
+     */
+    public function __construct($prevToken, $postToken)
+    {
+        $this->message = "Quoted String found between $prevToken and $postToken";
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/IPV6GroupCount.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/IPV6GroupCount.php b/vendor/egulias/email-validator/src/Warning/IPV6GroupCount.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/IPV6GroupCount.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class IPV6GroupCount extends Warning
+{
+    const CODE = 72;
+
+    public function __construct()
+    {
+        $this->message = 'Group count is not IPV6 valid';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/IPV6MaxGroups.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/IPV6MaxGroups.php b/vendor/egulias/email-validator/src/Warning/IPV6MaxGroups.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/IPV6MaxGroups.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class IPV6MaxGroups extends Warning
+{
+    const CODE = 75;
+
+    public function __construct()
+    {
+        $this->message = 'Reached the maximum number of IPV6 groups allowed';
+        $this->rfcNumber = 5321;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/LabelTooLong.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/LabelTooLong.php b/vendor/egulias/email-validator/src/Warning/LabelTooLong.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/LabelTooLong.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class LabelTooLong extends Warning
+{
+    const CODE = 63;
+
+    public function __construct()
+    {
+        $this->message = 'Label too long';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/LocalTooLong.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/LocalTooLong.php b/vendor/egulias/email-validator/src/Warning/LocalTooLong.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/LocalTooLong.php	(date 1609213806000)
@@ -0,0 +1,15 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class LocalTooLong extends Warning
+{
+    const CODE = 64;
+    const LOCAL_PART_LENGTH = 64;
+
+    public function __construct()
+    {
+        $this->message = 'Local part is too long, exceeds 64 chars (octets)';
+        $this->rfcNumber = 5322;
+    }
+}
Index: vendor/egulias/email-validator/src/Exception/CommaInDomain.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/CommaInDomain.php b/vendor/egulias/email-validator/src/Exception/CommaInDomain.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/CommaInDomain.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class CommaInDomain extends InvalidEmail
+{
+    const CODE = 200;
+    const REASON = "Comma ',' is not allowed in domain part";
+}
Index: vendor/egulias/email-validator/src/Exception/ConsecutiveAt.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/ConsecutiveAt.php b/vendor/egulias/email-validator/src/Exception/ConsecutiveAt.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/ConsecutiveAt.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class ConsecutiveAt extends InvalidEmail
+{
+    const CODE = 128;
+    const REASON = "Consecutive AT";
+}
Index: vendor/egulias/email-validator/src/Exception/ConsecutiveDot.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/ConsecutiveDot.php b/vendor/egulias/email-validator/src/Exception/ConsecutiveDot.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/ConsecutiveDot.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class ConsecutiveDot extends InvalidEmail
+{
+    const CODE = 132;
+    const REASON = "Consecutive DOT";
+}
Index: vendor/egulias/email-validator/src/Exception/CRLFAtTheEnd.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/CRLFAtTheEnd.php b/vendor/egulias/email-validator/src/Exception/CRLFAtTheEnd.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/CRLFAtTheEnd.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class CRLFAtTheEnd extends InvalidEmail
+{
+    const CODE = 149;
+    const REASON = "CRLF at the end";
+}
Index: vendor/egulias/email-validator/src/Warning/TLD.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/TLD.php b/vendor/egulias/email-validator/src/Warning/TLD.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/TLD.php	(date 1609213806000)
@@ -0,0 +1,13 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+class TLD extends Warning
+{
+    const CODE = 9;
+
+    public function __construct()
+    {
+        $this->message = "RFC5321, TLD";
+    }
+}
Index: vendor/egulias/email-validator/src/Warning/Warning.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Warning/Warning.php b/vendor/egulias/email-validator/src/Warning/Warning.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Warning/Warning.php	(date 1609213806000)
@@ -0,0 +1,47 @@
+<?php
+
+namespace Egulias\EmailValidator\Warning;
+
+abstract class Warning
+{
+    const CODE = 0;
+
+    /**
+     * @var string
+     */
+    protected $message = '';
+
+    /**
+     * @var int
+     */
+    protected $rfcNumber = 0;
+
+    /**
+     * @return string
+     */
+    public function message()
+    {
+        return $this->message;
+    }
+
+    /**
+     * @return int
+     */
+    public function code()
+    {
+        return static::CODE;
+    }
+
+    /**
+     * @return int
+     */
+    public function RFCNumber()
+    {
+        return $this->rfcNumber;
+    }
+
+    public function __toString()
+    {
+        return $this->message() . " rfc: " .  $this->rfcNumber . "interal code: " . static::CODE;
+    }
+}
Index: vendor/egulias/email-validator/src/Exception/AtextAfterCFWS.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/AtextAfterCFWS.php b/vendor/egulias/email-validator/src/Exception/AtextAfterCFWS.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/AtextAfterCFWS.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class AtextAfterCFWS extends InvalidEmail
+{
+    const CODE = 133;
+    const REASON = "ATEXT found after CFWS";
+}
Index: vendor/egulias/email-validator/src/Exception/CharNotAllowed.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/CharNotAllowed.php b/vendor/egulias/email-validator/src/Exception/CharNotAllowed.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/CharNotAllowed.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class CharNotAllowed extends InvalidEmail
+{
+    const CODE = 201;
+    const REASON = "Non allowed character in domain";
+}
Index: vendor/egulias/email-validator/src/Exception/DotAtEnd.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/DotAtEnd.php b/vendor/egulias/email-validator/src/Exception/DotAtEnd.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/DotAtEnd.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class DotAtEnd extends InvalidEmail
+{
+    const CODE = 142;
+    const REASON = "Dot at the end";
+}
Index: vendor/egulias/email-validator/src/Exception/DotAtStart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/DotAtStart.php b/vendor/egulias/email-validator/src/Exception/DotAtStart.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/DotAtStart.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class DotAtStart extends InvalidEmail
+{
+    const CODE = 141;
+    const REASON = "Found DOT at start";
+}
Index: vendor/egulias/email-validator/src/Exception/ExpectingAT.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/ExpectingAT.php b/vendor/egulias/email-validator/src/Exception/ExpectingAT.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/ExpectingAT.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class ExpectingAT extends InvalidEmail
+{
+    const CODE = 202;
+    const REASON = "Expecting AT '@' ";
+}
Index: vendor/egulias/email-validator/src/Exception/ExpectingATEXT.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/ExpectingATEXT.php b/vendor/egulias/email-validator/src/Exception/ExpectingATEXT.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/ExpectingATEXT.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class ExpectingATEXT extends InvalidEmail
+{
+    const CODE = 137;
+    const REASON = "Expecting ATEXT";
+}
Index: vendor/egulias/email-validator/src/Exception/CRLFX2.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/CRLFX2.php b/vendor/egulias/email-validator/src/Exception/CRLFX2.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/CRLFX2.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class CRLFX2 extends InvalidEmail
+{
+    const CODE = 148;
+    const REASON = "Folding whitespace CR LF found twice";
+}
Index: vendor/egulias/email-validator/src/Exception/CRNoLF.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/CRNoLF.php b/vendor/egulias/email-validator/src/Exception/CRNoLF.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/CRNoLF.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class CRNoLF extends InvalidEmail
+{
+    const CODE = 150;
+    const REASON = "Missing LF after CR";
+}
Index: vendor/egulias/email-validator/src/Exception/DomainAcceptsNoMail.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/DomainAcceptsNoMail.php b/vendor/egulias/email-validator/src/Exception/DomainAcceptsNoMail.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/DomainAcceptsNoMail.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class DomainAcceptsNoMail extends InvalidEmail
+{
+    const CODE = 154;
+    const REASON = 'Domain accepts no mail (Null MX, RFC7505)';
+}
\ No newline at end of file
Index: vendor/egulias/email-validator/src/Exception/DomainHyphened.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/DomainHyphened.php b/vendor/egulias/email-validator/src/Exception/DomainHyphened.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/DomainHyphened.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class DomainHyphened extends InvalidEmail
+{
+    const CODE = 144;
+    const REASON = "Hyphen found in domain";
+}
Index: vendor/egulias/email-validator/src/Exception/InvalidEmail.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/InvalidEmail.php b/vendor/egulias/email-validator/src/Exception/InvalidEmail.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/InvalidEmail.php	(date 1609213806000)
@@ -0,0 +1,14 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+abstract class InvalidEmail extends \InvalidArgumentException
+{
+    const REASON = "Invalid email";
+    const CODE = 0;
+
+    public function __construct()
+    {
+        parent::__construct(static::REASON, static::CODE);
+    }
+}
Index: vendor/egulias/email-validator/src/Exception/LocalOrReservedDomain.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/LocalOrReservedDomain.php b/vendor/egulias/email-validator/src/Exception/LocalOrReservedDomain.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/LocalOrReservedDomain.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class LocalOrReservedDomain extends InvalidEmail
+{
+    const CODE = 153;
+    const REASON = 'Local, mDNS or reserved domain (RFC2606, RFC6762)';
+}
\ No newline at end of file
Index: vendor/egulias/email-validator/src/Exception/NoDNSRecord.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/NoDNSRecord.php b/vendor/egulias/email-validator/src/Exception/NoDNSRecord.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/NoDNSRecord.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class NoDNSRecord extends InvalidEmail
+{
+    const CODE = 5;
+    const REASON = 'No MX or A DSN record was found for this email';
+}
Index: vendor/egulias/email-validator/src/Exception/NoDomainPart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/NoDomainPart.php b/vendor/egulias/email-validator/src/Exception/NoDomainPart.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/NoDomainPart.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class NoDomainPart extends InvalidEmail
+{
+    const CODE = 131;
+    const REASON = "No Domain part";
+}
Index: vendor/egulias/email-validator/src/Exception/ExpectingCTEXT.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/ExpectingCTEXT.php b/vendor/egulias/email-validator/src/Exception/ExpectingCTEXT.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/ExpectingCTEXT.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class ExpectingCTEXT extends InvalidEmail
+{
+    const CODE = 139;
+    const REASON = "Expecting CTEXT";
+}
Index: vendor/egulias/email-validator/src/Exception/ExpectingDomainLiteralClose.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/ExpectingDomainLiteralClose.php b/vendor/egulias/email-validator/src/Exception/ExpectingDomainLiteralClose.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/ExpectingDomainLiteralClose.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class ExpectingDomainLiteralClose extends InvalidEmail
+{
+    const CODE = 137;
+    const REASON = "Closing bracket ']' for domain literal not found";
+}
Index: .idea/php.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"MessDetectorOptionsConfiguration\">\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PHPCSFixerOptionsConfiguration\">\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PHPCodeSnifferOptionsConfiguration\">\r\n    <option name=\"highlightLevel\" value=\"WARNING\" />\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PhpProjectSharedConfiguration\" php_language_level=\"8.3\" />\r\n  <component name=\"PhpStanOptionsConfiguration\">\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PsalmOptionsConfiguration\">\r\n    <option name=\"transferred\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/php.xml b/.idea/php.xml
--- a/.idea/php.xml	(revision 12f2958a9e121a954c9bffadd231110cf29054d7)
+++ b/.idea/php.xml	(date 1734291748196)
@@ -10,9 +10,24 @@
     <option name="highlightLevel" value="WARNING" />
     <option name="transferred" value="true" />
   </component>
+  <component name="PhpIncludePathManager">
+    <include_path>
+      <path value="$PROJECT_DIR$/vendor/egulias/email-validator" />
+      <path value="$PROJECT_DIR$/vendor/composer" />
+      <path value="$PROJECT_DIR$/vendor/doctrine/lexer" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-idn" />
+      <path value="$PROJECT_DIR$/vendor/swiftmailer/swiftmailer" />
+      <path value="$PROJECT_DIR$/vendor/symfony/polyfill-intl-normalizer" />
+    </include_path>
+  </component>
   <component name="PhpProjectSharedConfiguration" php_language_level="8.3" />
   <component name="PhpStanOptionsConfiguration">
     <option name="transferred" value="true" />
+  </component>
+  <component name="PhpUnit">
+    <phpunit_settings>
+      <PhpUnitSettings custom_loader_path="$PROJECT_DIR$/vendor/autoload.php" />
+    </phpunit_settings>
   </component>
   <component name="PsalmOptionsConfiguration">
     <option name="transferred" value="true" />
Index: vendor/egulias/email-validator/src/Exception/ExpectingDTEXT.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/ExpectingDTEXT.php b/vendor/egulias/email-validator/src/Exception/ExpectingDTEXT.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/ExpectingDTEXT.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class ExpectingDTEXT extends InvalidEmail
+{
+    const CODE = 129;
+    const REASON = "Expected DTEXT";
+}
Index: vendor/egulias/email-validator/src/Exception/ExpectingQPair.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/ExpectingQPair.php b/vendor/egulias/email-validator/src/Exception/ExpectingQPair.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/ExpectingQPair.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class ExpectingQPair extends InvalidEmail
+{
+    const CODE = 136;
+    const REASON = "Expecting QPAIR";
+}
Index: vendor/egulias/email-validator/src/Validation/DNSCheckValidation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/DNSCheckValidation.php b/vendor/egulias/email-validator/src/Validation/DNSCheckValidation.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/DNSCheckValidation.php	(date 1609213806000)
@@ -0,0 +1,166 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation;
+
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\Exception\InvalidEmail;
+use Egulias\EmailValidator\Exception\LocalOrReservedDomain;
+use Egulias\EmailValidator\Exception\DomainAcceptsNoMail;
+use Egulias\EmailValidator\Warning\NoDNSMXRecord;
+use Egulias\EmailValidator\Exception\NoDNSRecord;
+
+class DNSCheckValidation implements EmailValidation
+{
+    /**
+     * @var array
+     */
+    private $warnings = [];
+
+    /**
+     * @var InvalidEmail|null
+     */
+    private $error;
+
+    /**
+     * @var array
+     */
+    private $mxRecords = [];
+
+
+    public function __construct()
+    {
+        if (!function_exists('idn_to_ascii')) {
+            throw new \LogicException(sprintf('The %s class requires the Intl extension.', __CLASS__));
+        }
+    }
+
+    public function isValid($email, EmailLexer $emailLexer)
+    {
+        // use the input to check DNS if we cannot extract something similar to a domain
+        $host = $email;
+
+        // Arguable pattern to extract the domain. Not aiming to validate the domain nor the email
+        if (false !== $lastAtPos = strrpos($email, '@')) {
+            $host = substr($email, $lastAtPos + 1);
+        }
+
+        // Get the domain parts
+        $hostParts = explode('.', $host);
+
+        // Reserved Top Level DNS Names (https://tools.ietf.org/html/rfc2606#section-2),
+        // mDNS and private DNS Namespaces (https://tools.ietf.org/html/rfc6762#appendix-G)
+        $reservedTopLevelDnsNames = [
+            // Reserved Top Level DNS Names
+            'test',
+            'example',
+            'invalid',
+            'localhost',
+
+            // mDNS
+            'local',
+
+            // Private DNS Namespaces
+            'intranet',
+            'internal',
+            'private',
+            'corp',
+            'home',
+            'lan',
+        ];
+
+        $isLocalDomain = count($hostParts) <= 1;
+        $isReservedTopLevel = in_array($hostParts[(count($hostParts) - 1)], $reservedTopLevelDnsNames, true);
+
+        // Exclude reserved top level DNS names
+        if ($isLocalDomain || $isReservedTopLevel) {
+            $this->error = new LocalOrReservedDomain();
+            return false;
+        }
+
+        return $this->checkDns($host);
+    }
+
+    public function getError()
+    {
+        return $this->error;
+    }
+
+    public function getWarnings()
+    {
+        return $this->warnings;
+    }
+
+    /**
+     * @param string $host
+     *
+     * @return bool
+     */
+    protected function checkDns($host)
+    {
+        $variant = INTL_IDNA_VARIANT_UTS46;
+
+        $host = rtrim(idn_to_ascii($host, IDNA_DEFAULT, $variant), '.') . '.';
+
+        return $this->validateDnsRecords($host);
+    }
+
+
+    /**
+     * Validate the DNS records for given host.
+     *
+     * @param string $host A set of DNS records in the format returned by dns_get_record.
+     *
+     * @return bool True on success.
+     */
+    private function validateDnsRecords($host)
+    {
+        // Get all MX, A and AAAA DNS records for host
+        // Using @ as workaround to fix https://bugs.php.net/bug.php?id=73149
+        $dnsRecords = @dns_get_record($host, DNS_MX + DNS_A + DNS_AAAA);
+
+
+        // No MX, A or AAAA DNS records
+        if (empty($dnsRecords)) {
+            $this->error = new NoDNSRecord();
+            return false;
+        }
+
+        // For each DNS record
+        foreach ($dnsRecords as $dnsRecord) {
+            if (!$this->validateMXRecord($dnsRecord)) {
+                return false;
+            }
+        }
+
+        // No MX records (fallback to A or AAAA records)
+        if (empty($this->mxRecords)) {
+            $this->warnings[NoDNSMXRecord::CODE] = new NoDNSMXRecord();
+        }
+
+        return true;
+    }
+
+    /**
+     * Validate an MX record
+     *
+     * @param array $dnsRecord Given DNS record.
+     *
+     * @return bool True if valid.
+     */
+    private function validateMxRecord($dnsRecord)
+    {
+        if ($dnsRecord['type'] !== 'MX') {
+            return true;
+        }
+
+        // "Null MX" record indicates the domain accepts no mail (https://tools.ietf.org/html/rfc7505)
+        if (empty($dnsRecord['target']) || $dnsRecord['target'] === '.') {
+            $this->error = new DomainAcceptsNoMail();
+            return false;
+        }
+
+        $this->mxRecords[] = $dnsRecord;
+
+        return true;
+    }
+}
Index: vendor/egulias/email-validator/src/Validation/EmailValidation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/EmailValidation.php b/vendor/egulias/email-validator/src/Validation/EmailValidation.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/EmailValidation.php	(date 1609213806000)
@@ -0,0 +1,34 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation;
+
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\Exception\InvalidEmail;
+use Egulias\EmailValidator\Warning\Warning;
+
+interface EmailValidation
+{
+    /**
+     * Returns true if the given email is valid.
+     *
+     * @param string     $email      The email you want to validate.
+     * @param EmailLexer $emailLexer The email lexer.
+     *
+     * @return bool
+     */
+    public function isValid($email, EmailLexer $emailLexer);
+
+    /**
+     * Returns the validation error.
+     *
+     * @return InvalidEmail|null
+     */
+    public function getError();
+
+    /**
+     * Returns the validation warnings.
+     *
+     * @return Warning[]
+     */
+    public function getWarnings();
+}
Index: vendor/egulias/email-validator/src/Exception/NoLocalPart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/NoLocalPart.php b/vendor/egulias/email-validator/src/Exception/NoLocalPart.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/NoLocalPart.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class NoLocalPart extends InvalidEmail
+{
+    const CODE = 130;
+    const REASON = "No local part";
+}
Index: vendor/egulias/email-validator/src/Exception/UnclosedComment.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/UnclosedComment.php b/vendor/egulias/email-validator/src/Exception/UnclosedComment.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/UnclosedComment.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class UnclosedComment extends InvalidEmail
+{
+    const CODE = 146;
+    const REASON = "No closing comment token found";
+}
Index: vendor/egulias/email-validator/src/Exception/UnclosedQuotedString.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/UnclosedQuotedString.php b/vendor/egulias/email-validator/src/Exception/UnclosedQuotedString.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/UnclosedQuotedString.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class UnclosedQuotedString extends InvalidEmail
+{
+    const CODE = 145;
+    const REASON = "Unclosed quoted string";
+}
Index: vendor/egulias/email-validator/src/Exception/UnopenedComment.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Exception/UnopenedComment.php b/vendor/egulias/email-validator/src/Exception/UnopenedComment.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Exception/UnopenedComment.php	(date 1609213806000)
@@ -0,0 +1,9 @@
+<?php
+
+namespace Egulias\EmailValidator\Exception;
+
+class UnopenedComment extends InvalidEmail
+{
+    const CODE = 152;
+    const REASON = "No opening comment token found";
+}
Index: vendor/egulias/email-validator/src/Validation/SpoofCheckValidation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/SpoofCheckValidation.php b/vendor/egulias/email-validator/src/Validation/SpoofCheckValidation.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/SpoofCheckValidation.php	(date 1609213806000)
@@ -0,0 +1,51 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation;
+
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\Exception\InvalidEmail;
+use Egulias\EmailValidator\Validation\Error\SpoofEmail;
+use \Spoofchecker;
+
+class SpoofCheckValidation implements EmailValidation
+{
+    /**
+     * @var InvalidEmail|null
+     */
+    private $error;
+
+    public function __construct()
+    {
+        if (!extension_loaded('intl')) {
+            throw new \LogicException(sprintf('The %s class requires the Intl extension.', __CLASS__));
+        }
+    }
+
+    /**
+     * @psalm-suppress InvalidArgument
+     */
+    public function isValid($email, EmailLexer $emailLexer)
+    {
+        $checker = new Spoofchecker();
+        $checker->setChecks(Spoofchecker::SINGLE_SCRIPT);
+
+        if ($checker->isSuspicious($email)) {
+            $this->error = new SpoofEmail();
+        }
+
+        return $this->error === null;
+    }
+
+    /**
+     * @return InvalidEmail|null
+     */
+    public function getError()
+    {
+        return $this->error;
+    }
+
+    public function getWarnings()
+    {
+        return [];
+    }
+}
Index: vendor/egulias/email-validator/src/Validation/Error/RFCWarnings.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/Error/RFCWarnings.php b/vendor/egulias/email-validator/src/Validation/Error/RFCWarnings.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/Error/RFCWarnings.php	(date 1609213806000)
@@ -0,0 +1,11 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation\Error;
+
+use Egulias\EmailValidator\Exception\InvalidEmail;
+
+class RFCWarnings extends InvalidEmail
+{
+    const CODE = 997;
+    const REASON = 'Warnings were found.';
+}
Index: vendor/egulias/email-validator/src/Validation/Error/SpoofEmail.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/Error/SpoofEmail.php b/vendor/egulias/email-validator/src/Validation/Error/SpoofEmail.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/Error/SpoofEmail.php	(date 1609213806000)
@@ -0,0 +1,11 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation\Error;
+
+use Egulias\EmailValidator\Exception\InvalidEmail;
+
+class SpoofEmail extends InvalidEmail
+{
+    const CODE = 998;
+    const REASON = "The email contains mixed UTF8 chars that makes it suspicious";
+}
Index: vendor/egulias/email-validator/src/Validation/Exception/EmptyValidationList.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/Exception/EmptyValidationList.php b/vendor/egulias/email-validator/src/Validation/Exception/EmptyValidationList.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/Exception/EmptyValidationList.php	(date 1609213806000)
@@ -0,0 +1,16 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation\Exception;
+
+use Exception;
+
+class EmptyValidationList extends \InvalidArgumentException
+{
+    /**
+    * @param int $code
+    */
+    public function __construct($code = 0, Exception $previous = null)
+    {
+        parent::__construct("Empty validation list is not allowed", $code, $previous);
+    }
+}
Index: vendor/egulias/email-validator/src/Validation/MultipleErrors.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/MultipleErrors.php b/vendor/egulias/email-validator/src/Validation/MultipleErrors.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/MultipleErrors.php	(date 1609213806000)
@@ -0,0 +1,32 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation;
+
+use Egulias\EmailValidator\Exception\InvalidEmail;
+
+class MultipleErrors extends InvalidEmail
+{
+    const CODE = 999;
+    const REASON = "Accumulated errors for multiple validations";
+    /**
+     * @var InvalidEmail[]
+     */
+    private $errors = [];
+
+    /**
+     * @param InvalidEmail[] $errors
+     */
+    public function __construct(array $errors)
+    {
+        $this->errors = $errors;
+        parent::__construct();
+    }
+
+    /**
+     * @return InvalidEmail[]
+     */
+    public function getErrors()
+    {
+        return $this->errors;
+    }
+}
Index: vendor/egulias/email-validator/src/Validation/MultipleValidationWithAnd.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/MultipleValidationWithAnd.php b/vendor/egulias/email-validator/src/Validation/MultipleValidationWithAnd.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/MultipleValidationWithAnd.php	(date 1609213806000)
@@ -0,0 +1,124 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation;
+
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\Validation\Exception\EmptyValidationList;
+
+class MultipleValidationWithAnd implements EmailValidation
+{
+    /**
+     * If one of validations gets failure skips all succeeding validation.
+     * This means MultipleErrors will only contain a single error which first found.
+     */
+    const STOP_ON_ERROR = 0;
+
+    /**
+     * All of validations will be invoked even if one of them got failure.
+     * So MultipleErrors will contain all causes.
+     */
+    const ALLOW_ALL_ERRORS = 1;
+
+    /**
+     * @var EmailValidation[]
+     */
+    private $validations = [];
+
+    /**
+     * @var array
+     */
+    private $warnings = [];
+
+    /**
+     * @var MultipleErrors|null
+     */
+    private $error;
+
+    /**
+     * @var int
+     */
+    private $mode;
+
+    /**
+     * @param EmailValidation[] $validations The validations.
+     * @param int               $mode        The validation mode (one of the constants).
+     */
+    public function __construct(array $validations, $mode = self::ALLOW_ALL_ERRORS)
+    {
+        if (count($validations) == 0) {
+            throw new EmptyValidationList();
+        }
+
+        $this->validations = $validations;
+        $this->mode = $mode;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function isValid($email, EmailLexer $emailLexer)
+    {
+        $result = true;
+        $errors = [];
+        foreach ($this->validations as $validation) {
+            $emailLexer->reset();
+            $validationResult = $validation->isValid($email, $emailLexer);
+            $result = $result && $validationResult;
+            $this->warnings = array_merge($this->warnings, $validation->getWarnings());
+            $errors = $this->addNewError($validation->getError(), $errors);
+
+            if ($this->shouldStop($result)) {
+                break;
+            }
+        }
+
+        if (!empty($errors)) {
+            $this->error = new MultipleErrors($errors);
+        }
+
+        return $result;
+    }
+
+    /**
+     * @param \Egulias\EmailValidator\Exception\InvalidEmail|null $possibleError
+     * @param \Egulias\EmailValidator\Exception\InvalidEmail[] $errors
+     *
+     * @return \Egulias\EmailValidator\Exception\InvalidEmail[]
+     */
+    private function addNewError($possibleError, array $errors)
+    {
+        if (null !== $possibleError) {
+            $errors[] = $possibleError;
+        }
+
+        return $errors;
+    }
+
+    /**
+     * @param bool $result
+     *
+     * @return bool
+     */
+    private function shouldStop($result)
+    {
+        return !$result && $this->mode === self::STOP_ON_ERROR;
+    }
+
+    /**
+     * Returns the validation errors.
+     *
+     * @return MultipleErrors|null
+     */
+    public function getError()
+    {
+        return $this->error;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getWarnings()
+    {
+        return $this->warnings;
+    }
+}
Index: vendor/egulias/email-validator/src/Validation/NoRFCWarningsValidation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/NoRFCWarningsValidation.php b/vendor/egulias/email-validator/src/Validation/NoRFCWarningsValidation.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/NoRFCWarningsValidation.php	(date 1609213806000)
@@ -0,0 +1,41 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation;
+
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\Exception\InvalidEmail;
+use Egulias\EmailValidator\Validation\Error\RFCWarnings;
+
+class NoRFCWarningsValidation extends RFCValidation
+{
+    /**
+     * @var InvalidEmail|null
+     */
+    private $error;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function isValid($email, EmailLexer $emailLexer)
+    {
+        if (!parent::isValid($email, $emailLexer)) {
+            return false;
+        }
+
+        if (empty($this->getWarnings())) {
+            return true;
+        }
+
+        $this->error = new RFCWarnings();
+
+        return false;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getError()
+    {
+        return $this->error ?: parent::getError();
+    }
+}
Index: vendor/egulias/email-validator/src/Validation/RFCValidation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/egulias/email-validator/src/Validation/RFCValidation.php b/vendor/egulias/email-validator/src/Validation/RFCValidation.php
new file mode 100644
--- /dev/null	(date 1609213806000)
+++ b/vendor/egulias/email-validator/src/Validation/RFCValidation.php	(date 1609213806000)
@@ -0,0 +1,49 @@
+<?php
+
+namespace Egulias\EmailValidator\Validation;
+
+use Egulias\EmailValidator\EmailLexer;
+use Egulias\EmailValidator\EmailParser;
+use Egulias\EmailValidator\Exception\InvalidEmail;
+
+class RFCValidation implements EmailValidation
+{
+    /**
+     * @var EmailParser|null
+     */
+    private $parser;
+
+    /**
+     * @var array
+     */
+    private $warnings = [];
+
+    /**
+     * @var InvalidEmail|null
+     */
+    private $error;
+
+    public function isValid($email, EmailLexer $emailLexer)
+    {
+        $this->parser = new EmailParser($emailLexer);
+        try {
+            $this->parser->parse((string)$email);
+        } catch (InvalidEmail $invalid) {
+            $this->error = $invalid;
+            return false;
+        }
+
+        $this->warnings = $this->parser->getWarnings();
+        return true;
+    }
+
+    public function getError()
+    {
+        return $this->error;
+    }
+
+    public function getWarnings()
+    {
+        return $this->warnings;
+    }
+}
Index: vendor/doctrine/lexer/psalm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/doctrine/lexer/psalm.xml b/vendor/doctrine/lexer/psalm.xml
new file mode 100644
--- /dev/null	(date 1646006840000)
+++ b/vendor/doctrine/lexer/psalm.xml	(date 1646006840000)
@@ -0,0 +1,15 @@
+<?xml version="1.0"?>
+<psalm
+    errorLevel="5"
+    resolveFromConfigFile="true"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xmlns="https://getpsalm.org/schema/config"
+    xsi:schemaLocation="https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd"
+>
+    <projectFiles>
+        <directory name="lib/Doctrine/Common/Lexer" />
+        <ignoreFiles>
+            <directory name="vendor" />
+        </ignoreFiles>
+    </projectFiles>
+</psalm>
Index: vendor/doctrine/lexer/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/doctrine/lexer/README.md b/vendor/doctrine/lexer/README.md
new file mode 100644
--- /dev/null	(date 1646006840000)
+++ b/vendor/doctrine/lexer/README.md	(date 1646006840000)
@@ -0,0 +1,9 @@
+# Doctrine Lexer
+
+[![Build Status](https://github.com/doctrine/lexer/workflows/Continuous%20Integration/badge.svg)](https://github.com/doctrine/lexer/actions)
+
+Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.
+
+This lexer is used in Doctrine Annotations and in Doctrine ORM (DQL).
+
+https://www.doctrine-project.org/projects/lexer.html
Index: vendor/doctrine/lexer/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/doctrine/lexer/composer.json b/vendor/doctrine/lexer/composer.json
new file mode 100644
--- /dev/null	(date 1646006840000)
+++ b/vendor/doctrine/lexer/composer.json	(date 1646006840000)
@@ -0,0 +1,41 @@
+{
+    "name": "doctrine/lexer",
+    "type": "library",
+    "description": "PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.",
+    "keywords": [
+        "php",
+        "parser",
+        "lexer",
+        "annotations",
+        "docblock"
+    ],
+    "homepage": "https://www.doctrine-project.org/projects/lexer.html",
+    "license": "MIT",
+    "authors": [
+        {"name": "Guilherme Blanco", "email": "guilhermeblanco@gmail.com"},
+        {"name": "Roman Borschel", "email": "roman@code-factory.org"},
+        {"name": "Johannes Schmitt", "email": "schmittjoh@gmail.com"}
+    ],
+    "require": {
+        "php": "^7.1 || ^8.0"
+    },
+    "require-dev": {
+        "doctrine/coding-standard": "^9.0",
+        "phpstan/phpstan": "^1.3",
+        "phpunit/phpunit": "^7.5 || ^8.5 || ^9.5",
+        "vimeo/psalm": "^4.11"
+    },
+    "autoload": {
+        "psr-4": { "Doctrine\\Common\\Lexer\\": "lib/Doctrine/Common/Lexer" }
+    },
+    "autoload-dev": {
+        "psr-4": { "Doctrine\\Tests\\": "tests/Doctrine" }
+    },
+    "config": {
+        "allow-plugins": {
+            "composer/package-versions-deprecated": true,
+            "dealerdirect/phpcodesniffer-composer-installer": true
+        },
+        "sort-packages": true
+    }
+}
Index: vendor/doctrine/lexer/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/doctrine/lexer/LICENSE b/vendor/doctrine/lexer/LICENSE
new file mode 100644
--- /dev/null	(date 1646006840000)
+++ b/vendor/doctrine/lexer/LICENSE	(date 1646006840000)
@@ -0,0 +1,19 @@
+Copyright (c) 2006-2018 Doctrine Project
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
+of the Software, and to permit persons to whom the Software is furnished to do
+so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
Index: vendor/symfony/polyfill-intl-idn/bootstrap.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/bootstrap.php b/vendor/symfony/polyfill-intl-idn/bootstrap.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/bootstrap.php	(date 1725846310000)
@@ -0,0 +1,145 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+use Symfony\Polyfill\Intl\Idn as p;
+
+if (extension_loaded('intl')) {
+    return;
+}
+
+if (\PHP_VERSION_ID >= 80000) {
+    return require __DIR__.'/bootstrap80.php';
+}
+
+if (!defined('U_IDNA_PROHIBITED_ERROR')) {
+    define('U_IDNA_PROHIBITED_ERROR', 66560);
+}
+if (!defined('U_IDNA_ERROR_START')) {
+    define('U_IDNA_ERROR_START', 66560);
+}
+if (!defined('U_IDNA_UNASSIGNED_ERROR')) {
+    define('U_IDNA_UNASSIGNED_ERROR', 66561);
+}
+if (!defined('U_IDNA_CHECK_BIDI_ERROR')) {
+    define('U_IDNA_CHECK_BIDI_ERROR', 66562);
+}
+if (!defined('U_IDNA_STD3_ASCII_RULES_ERROR')) {
+    define('U_IDNA_STD3_ASCII_RULES_ERROR', 66563);
+}
+if (!defined('U_IDNA_ACE_PREFIX_ERROR')) {
+    define('U_IDNA_ACE_PREFIX_ERROR', 66564);
+}
+if (!defined('U_IDNA_VERIFICATION_ERROR')) {
+    define('U_IDNA_VERIFICATION_ERROR', 66565);
+}
+if (!defined('U_IDNA_LABEL_TOO_LONG_ERROR')) {
+    define('U_IDNA_LABEL_TOO_LONG_ERROR', 66566);
+}
+if (!defined('U_IDNA_ZERO_LENGTH_LABEL_ERROR')) {
+    define('U_IDNA_ZERO_LENGTH_LABEL_ERROR', 66567);
+}
+if (!defined('U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR')) {
+    define('U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR', 66568);
+}
+if (!defined('U_IDNA_ERROR_LIMIT')) {
+    define('U_IDNA_ERROR_LIMIT', 66569);
+}
+if (!defined('U_STRINGPREP_PROHIBITED_ERROR')) {
+    define('U_STRINGPREP_PROHIBITED_ERROR', 66560);
+}
+if (!defined('U_STRINGPREP_UNASSIGNED_ERROR')) {
+    define('U_STRINGPREP_UNASSIGNED_ERROR', 66561);
+}
+if (!defined('U_STRINGPREP_CHECK_BIDI_ERROR')) {
+    define('U_STRINGPREP_CHECK_BIDI_ERROR', 66562);
+}
+if (!defined('IDNA_DEFAULT')) {
+    define('IDNA_DEFAULT', 0);
+}
+if (!defined('IDNA_ALLOW_UNASSIGNED')) {
+    define('IDNA_ALLOW_UNASSIGNED', 1);
+}
+if (!defined('IDNA_USE_STD3_RULES')) {
+    define('IDNA_USE_STD3_RULES', 2);
+}
+if (!defined('IDNA_CHECK_BIDI')) {
+    define('IDNA_CHECK_BIDI', 4);
+}
+if (!defined('IDNA_CHECK_CONTEXTJ')) {
+    define('IDNA_CHECK_CONTEXTJ', 8);
+}
+if (!defined('IDNA_NONTRANSITIONAL_TO_ASCII')) {
+    define('IDNA_NONTRANSITIONAL_TO_ASCII', 16);
+}
+if (!defined('IDNA_NONTRANSITIONAL_TO_UNICODE')) {
+    define('IDNA_NONTRANSITIONAL_TO_UNICODE', 32);
+}
+if (!defined('INTL_IDNA_VARIANT_2003')) {
+    define('INTL_IDNA_VARIANT_2003', 0);
+}
+if (!defined('INTL_IDNA_VARIANT_UTS46')) {
+    define('INTL_IDNA_VARIANT_UTS46', 1);
+}
+if (!defined('IDNA_ERROR_EMPTY_LABEL')) {
+    define('IDNA_ERROR_EMPTY_LABEL', 1);
+}
+if (!defined('IDNA_ERROR_LABEL_TOO_LONG')) {
+    define('IDNA_ERROR_LABEL_TOO_LONG', 2);
+}
+if (!defined('IDNA_ERROR_DOMAIN_NAME_TOO_LONG')) {
+    define('IDNA_ERROR_DOMAIN_NAME_TOO_LONG', 4);
+}
+if (!defined('IDNA_ERROR_LEADING_HYPHEN')) {
+    define('IDNA_ERROR_LEADING_HYPHEN', 8);
+}
+if (!defined('IDNA_ERROR_TRAILING_HYPHEN')) {
+    define('IDNA_ERROR_TRAILING_HYPHEN', 16);
+}
+if (!defined('IDNA_ERROR_HYPHEN_3_4')) {
+    define('IDNA_ERROR_HYPHEN_3_4', 32);
+}
+if (!defined('IDNA_ERROR_LEADING_COMBINING_MARK')) {
+    define('IDNA_ERROR_LEADING_COMBINING_MARK', 64);
+}
+if (!defined('IDNA_ERROR_DISALLOWED')) {
+    define('IDNA_ERROR_DISALLOWED', 128);
+}
+if (!defined('IDNA_ERROR_PUNYCODE')) {
+    define('IDNA_ERROR_PUNYCODE', 256);
+}
+if (!defined('IDNA_ERROR_LABEL_HAS_DOT')) {
+    define('IDNA_ERROR_LABEL_HAS_DOT', 512);
+}
+if (!defined('IDNA_ERROR_INVALID_ACE_LABEL')) {
+    define('IDNA_ERROR_INVALID_ACE_LABEL', 1024);
+}
+if (!defined('IDNA_ERROR_BIDI')) {
+    define('IDNA_ERROR_BIDI', 2048);
+}
+if (!defined('IDNA_ERROR_CONTEXTJ')) {
+    define('IDNA_ERROR_CONTEXTJ', 4096);
+}
+
+if (\PHP_VERSION_ID < 70400) {
+    if (!function_exists('idn_to_ascii')) {
+        function idn_to_ascii($domain, $flags = 0, $variant = \INTL_IDNA_VARIANT_2003, &$idna_info = null) { return p\Idn::idn_to_ascii($domain, $flags, $variant, $idna_info); }
+    }
+    if (!function_exists('idn_to_utf8')) {
+        function idn_to_utf8($domain, $flags = 0, $variant = \INTL_IDNA_VARIANT_2003, &$idna_info = null) { return p\Idn::idn_to_utf8($domain, $flags, $variant, $idna_info); }
+    }
+} else {
+    if (!function_exists('idn_to_ascii')) {
+        function idn_to_ascii($domain, $flags = 0, $variant = \INTL_IDNA_VARIANT_UTS46, &$idna_info = null) { return p\Idn::idn_to_ascii($domain, $flags, $variant, $idna_info); }
+    }
+    if (!function_exists('idn_to_utf8')) {
+        function idn_to_utf8($domain, $flags = 0, $variant = \INTL_IDNA_VARIANT_UTS46, &$idna_info = null) { return p\Idn::idn_to_utf8($domain, $flags, $variant, $idna_info); }
+    }
+}
Index: vendor/symfony/polyfill-intl-idn/bootstrap80.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/bootstrap80.php b/vendor/symfony/polyfill-intl-idn/bootstrap80.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/bootstrap80.php	(date 1725846310000)
@@ -0,0 +1,125 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+use Symfony\Polyfill\Intl\Idn as p;
+
+if (!defined('U_IDNA_PROHIBITED_ERROR')) {
+    define('U_IDNA_PROHIBITED_ERROR', 66560);
+}
+if (!defined('U_IDNA_ERROR_START')) {
+    define('U_IDNA_ERROR_START', 66560);
+}
+if (!defined('U_IDNA_UNASSIGNED_ERROR')) {
+    define('U_IDNA_UNASSIGNED_ERROR', 66561);
+}
+if (!defined('U_IDNA_CHECK_BIDI_ERROR')) {
+    define('U_IDNA_CHECK_BIDI_ERROR', 66562);
+}
+if (!defined('U_IDNA_STD3_ASCII_RULES_ERROR')) {
+    define('U_IDNA_STD3_ASCII_RULES_ERROR', 66563);
+}
+if (!defined('U_IDNA_ACE_PREFIX_ERROR')) {
+    define('U_IDNA_ACE_PREFIX_ERROR', 66564);
+}
+if (!defined('U_IDNA_VERIFICATION_ERROR')) {
+    define('U_IDNA_VERIFICATION_ERROR', 66565);
+}
+if (!defined('U_IDNA_LABEL_TOO_LONG_ERROR')) {
+    define('U_IDNA_LABEL_TOO_LONG_ERROR', 66566);
+}
+if (!defined('U_IDNA_ZERO_LENGTH_LABEL_ERROR')) {
+    define('U_IDNA_ZERO_LENGTH_LABEL_ERROR', 66567);
+}
+if (!defined('U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR')) {
+    define('U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR', 66568);
+}
+if (!defined('U_IDNA_ERROR_LIMIT')) {
+    define('U_IDNA_ERROR_LIMIT', 66569);
+}
+if (!defined('U_STRINGPREP_PROHIBITED_ERROR')) {
+    define('U_STRINGPREP_PROHIBITED_ERROR', 66560);
+}
+if (!defined('U_STRINGPREP_UNASSIGNED_ERROR')) {
+    define('U_STRINGPREP_UNASSIGNED_ERROR', 66561);
+}
+if (!defined('U_STRINGPREP_CHECK_BIDI_ERROR')) {
+    define('U_STRINGPREP_CHECK_BIDI_ERROR', 66562);
+}
+if (!defined('IDNA_DEFAULT')) {
+    define('IDNA_DEFAULT', 0);
+}
+if (!defined('IDNA_ALLOW_UNASSIGNED')) {
+    define('IDNA_ALLOW_UNASSIGNED', 1);
+}
+if (!defined('IDNA_USE_STD3_RULES')) {
+    define('IDNA_USE_STD3_RULES', 2);
+}
+if (!defined('IDNA_CHECK_BIDI')) {
+    define('IDNA_CHECK_BIDI', 4);
+}
+if (!defined('IDNA_CHECK_CONTEXTJ')) {
+    define('IDNA_CHECK_CONTEXTJ', 8);
+}
+if (!defined('IDNA_NONTRANSITIONAL_TO_ASCII')) {
+    define('IDNA_NONTRANSITIONAL_TO_ASCII', 16);
+}
+if (!defined('IDNA_NONTRANSITIONAL_TO_UNICODE')) {
+    define('IDNA_NONTRANSITIONAL_TO_UNICODE', 32);
+}
+if (!defined('INTL_IDNA_VARIANT_UTS46')) {
+    define('INTL_IDNA_VARIANT_UTS46', 1);
+}
+if (!defined('IDNA_ERROR_EMPTY_LABEL')) {
+    define('IDNA_ERROR_EMPTY_LABEL', 1);
+}
+if (!defined('IDNA_ERROR_LABEL_TOO_LONG')) {
+    define('IDNA_ERROR_LABEL_TOO_LONG', 2);
+}
+if (!defined('IDNA_ERROR_DOMAIN_NAME_TOO_LONG')) {
+    define('IDNA_ERROR_DOMAIN_NAME_TOO_LONG', 4);
+}
+if (!defined('IDNA_ERROR_LEADING_HYPHEN')) {
+    define('IDNA_ERROR_LEADING_HYPHEN', 8);
+}
+if (!defined('IDNA_ERROR_TRAILING_HYPHEN')) {
+    define('IDNA_ERROR_TRAILING_HYPHEN', 16);
+}
+if (!defined('IDNA_ERROR_HYPHEN_3_4')) {
+    define('IDNA_ERROR_HYPHEN_3_4', 32);
+}
+if (!defined('IDNA_ERROR_LEADING_COMBINING_MARK')) {
+    define('IDNA_ERROR_LEADING_COMBINING_MARK', 64);
+}
+if (!defined('IDNA_ERROR_DISALLOWED')) {
+    define('IDNA_ERROR_DISALLOWED', 128);
+}
+if (!defined('IDNA_ERROR_PUNYCODE')) {
+    define('IDNA_ERROR_PUNYCODE', 256);
+}
+if (!defined('IDNA_ERROR_LABEL_HAS_DOT')) {
+    define('IDNA_ERROR_LABEL_HAS_DOT', 512);
+}
+if (!defined('IDNA_ERROR_INVALID_ACE_LABEL')) {
+    define('IDNA_ERROR_INVALID_ACE_LABEL', 1024);
+}
+if (!defined('IDNA_ERROR_BIDI')) {
+    define('IDNA_ERROR_BIDI', 2048);
+}
+if (!defined('IDNA_ERROR_CONTEXTJ')) {
+    define('IDNA_ERROR_CONTEXTJ', 4096);
+}
+
+if (!function_exists('idn_to_ascii')) {
+    function idn_to_ascii(?string $domain, ?int $flags = IDNA_DEFAULT, ?int $variant = INTL_IDNA_VARIANT_UTS46, &$idna_info = null): string|false { return p\Idn::idn_to_ascii((string) $domain, (int) $flags, (int) $variant, $idna_info); }
+}
+if (!function_exists('idn_to_utf8')) {
+    function idn_to_utf8(?string $domain, ?int $flags = IDNA_DEFAULT, ?int $variant = INTL_IDNA_VARIANT_UTS46, &$idna_info = null): string|false { return p\Idn::idn_to_utf8((string) $domain, (int) $flags, (int) $variant, $idna_info); }
+}
Index: vendor/symfony/polyfill-intl-idn/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/composer.json b/vendor/symfony/polyfill-intl-idn/composer.json
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/composer.json	(date 1725846310000)
@@ -0,0 +1,40 @@
+{
+    "name": "symfony/polyfill-intl-idn",
+    "type": "library",
+    "description": "Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions",
+    "keywords": ["polyfill", "shim", "compatibility", "portable", "intl", "idn"],
+    "homepage": "https://symfony.com",
+    "license": "MIT",
+    "authors": [
+        {
+            "name": "Laurent Bassin",
+            "email": "laurent@bassin.info"
+        },
+        {
+            "name": "Trevor Rowbotham",
+            "email": "trevor.rowbotham@pm.me"
+        },
+        {
+            "name": "Symfony Community",
+            "homepage": "https://symfony.com/contributors"
+        }
+    ],
+    "require": {
+        "php": ">=7.2",
+        "symfony/polyfill-intl-normalizer": "^1.10"
+    },
+    "autoload": {
+        "psr-4": { "Symfony\\Polyfill\\Intl\\Idn\\": "" },
+        "files": [ "bootstrap.php" ]
+    },
+    "suggest": {
+        "ext-intl": "For best performance"
+    },
+    "minimum-stability": "dev",
+    "extra": {
+        "thanks": {
+            "name": "symfony/polyfill",
+            "url": "https://github.com/symfony/polyfill"
+        }
+    }
+}
Index: vendor/symfony/polyfill-intl-idn/Idn.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Idn.php b/vendor/symfony/polyfill-intl-idn/Idn.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Idn.php	(date 1725846310000)
@@ -0,0 +1,933 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com> and Trevor Rowbotham <trevor.rowbotham@pm.me>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Polyfill\Intl\Idn;
+
+use Symfony\Polyfill\Intl\Idn\Resources\unidata\DisallowedRanges;
+use Symfony\Polyfill\Intl\Idn\Resources\unidata\Regex;
+
+/**
+ * @see https://www.unicode.org/reports/tr46/
+ *
+ * @internal
+ */
+final class Idn
+{
+    public const ERROR_EMPTY_LABEL = 1;
+    public const ERROR_LABEL_TOO_LONG = 2;
+    public const ERROR_DOMAIN_NAME_TOO_LONG = 4;
+    public const ERROR_LEADING_HYPHEN = 8;
+    public const ERROR_TRAILING_HYPHEN = 0x10;
+    public const ERROR_HYPHEN_3_4 = 0x20;
+    public const ERROR_LEADING_COMBINING_MARK = 0x40;
+    public const ERROR_DISALLOWED = 0x80;
+    public const ERROR_PUNYCODE = 0x100;
+    public const ERROR_LABEL_HAS_DOT = 0x200;
+    public const ERROR_INVALID_ACE_LABEL = 0x400;
+    public const ERROR_BIDI = 0x800;
+    public const ERROR_CONTEXTJ = 0x1000;
+    public const ERROR_CONTEXTO_PUNCTUATION = 0x2000;
+    public const ERROR_CONTEXTO_DIGITS = 0x4000;
+
+    public const INTL_IDNA_VARIANT_2003 = 0;
+    public const INTL_IDNA_VARIANT_UTS46 = 1;
+
+    public const IDNA_DEFAULT = 0;
+    public const IDNA_ALLOW_UNASSIGNED = 1;
+    public const IDNA_USE_STD3_RULES = 2;
+    public const IDNA_CHECK_BIDI = 4;
+    public const IDNA_CHECK_CONTEXTJ = 8;
+    public const IDNA_NONTRANSITIONAL_TO_ASCII = 16;
+    public const IDNA_NONTRANSITIONAL_TO_UNICODE = 32;
+
+    public const MAX_DOMAIN_SIZE = 253;
+    public const MAX_LABEL_SIZE = 63;
+
+    public const BASE = 36;
+    public const TMIN = 1;
+    public const TMAX = 26;
+    public const SKEW = 38;
+    public const DAMP = 700;
+    public const INITIAL_BIAS = 72;
+    public const INITIAL_N = 128;
+    public const DELIMITER = '-';
+    public const MAX_INT = 2147483647;
+
+    /**
+     * Contains the numeric value of a basic code point (for use in representing integers) in the
+     * range 0 to BASE-1, or -1 if b is does not represent a value.
+     *
+     * @var array<int, int>
+     */
+    private static $basicToDigit = [
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1,
+
+        -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
+
+        -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
+
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    ];
+
+    /**
+     * @var array<int, int>
+     */
+    private static $virama;
+
+    /**
+     * @var array<int, string>
+     */
+    private static $mapped;
+
+    /**
+     * @var array<int, bool>
+     */
+    private static $ignored;
+
+    /**
+     * @var array<int, string>
+     */
+    private static $deviation;
+
+    /**
+     * @var array<int, bool>
+     */
+    private static $disallowed;
+
+    /**
+     * @var array<int, string>
+     */
+    private static $disallowed_STD3_mapped;
+
+    /**
+     * @var array<int, bool>
+     */
+    private static $disallowed_STD3_valid;
+
+    /**
+     * @var bool
+     */
+    private static $mappingTableLoaded = false;
+
+    /**
+     * @see https://www.unicode.org/reports/tr46/#ToASCII
+     *
+     * @param string $domainName
+     * @param int    $options
+     * @param int    $variant
+     * @param array  $idna_info
+     *
+     * @return string|false
+     */
+    public static function idn_to_ascii($domainName, $options = self::IDNA_DEFAULT, $variant = self::INTL_IDNA_VARIANT_UTS46, &$idna_info = [])
+    {
+        if (self::INTL_IDNA_VARIANT_2003 === $variant) {
+            @trigger_error('idn_to_ascii(): INTL_IDNA_VARIANT_2003 is deprecated', \E_USER_DEPRECATED);
+        }
+
+        $options = [
+            'CheckHyphens' => true,
+            'CheckBidi' => self::INTL_IDNA_VARIANT_2003 === $variant || 0 !== ($options & self::IDNA_CHECK_BIDI),
+            'CheckJoiners' => self::INTL_IDNA_VARIANT_UTS46 === $variant && 0 !== ($options & self::IDNA_CHECK_CONTEXTJ),
+            'UseSTD3ASCIIRules' => 0 !== ($options & self::IDNA_USE_STD3_RULES),
+            'Transitional_Processing' => self::INTL_IDNA_VARIANT_2003 === $variant || 0 === ($options & self::IDNA_NONTRANSITIONAL_TO_ASCII),
+            'VerifyDnsLength' => true,
+        ];
+        $info = new Info();
+        $labels = self::process((string) $domainName, $options, $info);
+
+        foreach ($labels as $i => $label) {
+            // Only convert labels to punycode that contain non-ASCII code points
+            if (1 === preg_match('/[^\x00-\x7F]/', $label)) {
+                try {
+                    $label = 'xn--'.self::punycodeEncode($label);
+                } catch (\Exception $e) {
+                    $info->errors |= self::ERROR_PUNYCODE;
+                }
+
+                $labels[$i] = $label;
+            }
+        }
+
+        if ($options['VerifyDnsLength']) {
+            self::validateDomainAndLabelLength($labels, $info);
+        }
+
+        $idna_info = [
+            'result' => implode('.', $labels),
+            'isTransitionalDifferent' => $info->transitionalDifferent,
+            'errors' => $info->errors,
+        ];
+
+        return 0 === $info->errors ? $idna_info['result'] : false;
+    }
+
+    /**
+     * @see https://www.unicode.org/reports/tr46/#ToUnicode
+     *
+     * @param string $domainName
+     * @param int    $options
+     * @param int    $variant
+     * @param array  $idna_info
+     *
+     * @return string|false
+     */
+    public static function idn_to_utf8($domainName, $options = self::IDNA_DEFAULT, $variant = self::INTL_IDNA_VARIANT_UTS46, &$idna_info = [])
+    {
+        if (self::INTL_IDNA_VARIANT_2003 === $variant) {
+            @trigger_error('idn_to_utf8(): INTL_IDNA_VARIANT_2003 is deprecated', \E_USER_DEPRECATED);
+        }
+
+        $info = new Info();
+        $labels = self::process((string) $domainName, [
+            'CheckHyphens' => true,
+            'CheckBidi' => self::INTL_IDNA_VARIANT_2003 === $variant || 0 !== ($options & self::IDNA_CHECK_BIDI),
+            'CheckJoiners' => self::INTL_IDNA_VARIANT_UTS46 === $variant && 0 !== ($options & self::IDNA_CHECK_CONTEXTJ),
+            'UseSTD3ASCIIRules' => 0 !== ($options & self::IDNA_USE_STD3_RULES),
+            'Transitional_Processing' => self::INTL_IDNA_VARIANT_2003 === $variant || 0 === ($options & self::IDNA_NONTRANSITIONAL_TO_UNICODE),
+        ], $info);
+        $idna_info = [
+            'result' => implode('.', $labels),
+            'isTransitionalDifferent' => $info->transitionalDifferent,
+            'errors' => $info->errors,
+        ];
+
+        return 0 === $info->errors ? $idna_info['result'] : false;
+    }
+
+    /**
+     * @param string $label
+     *
+     * @return bool
+     */
+    private static function isValidContextJ(array $codePoints, $label)
+    {
+        if (!isset(self::$virama)) {
+            self::$virama = require __DIR__.\DIRECTORY_SEPARATOR.'Resources'.\DIRECTORY_SEPARATOR.'unidata'.\DIRECTORY_SEPARATOR.'virama.php';
+        }
+
+        $offset = 0;
+
+        foreach ($codePoints as $i => $codePoint) {
+            if (0x200C !== $codePoint && 0x200D !== $codePoint) {
+                continue;
+            }
+
+            if (!isset($codePoints[$i - 1])) {
+                return false;
+            }
+
+            // If Canonical_Combining_Class(Before(cp)) .eq. Virama Then True;
+            if (isset(self::$virama[$codePoints[$i - 1]])) {
+                continue;
+            }
+
+            // If RegExpMatch((Joining_Type:{L,D})(Joining_Type:T)*\u200C(Joining_Type:T)*(Joining_Type:{R,D})) Then
+            // True;
+            // Generated RegExp = ([Joining_Type:{L,D}][Joining_Type:T]*\u200C[Joining_Type:T]*)[Joining_Type:{R,D}]
+            if (0x200C === $codePoint && 1 === preg_match(Regex::ZWNJ, $label, $matches, \PREG_OFFSET_CAPTURE, $offset)) {
+                $offset += \strlen($matches[1][0]);
+
+                continue;
+            }
+
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * @see https://www.unicode.org/reports/tr46/#ProcessingStepMap
+     *
+     * @param string              $input
+     * @param array<string, bool> $options
+     *
+     * @return string
+     */
+    private static function mapCodePoints($input, array $options, Info $info)
+    {
+        $str = '';
+        $useSTD3ASCIIRules = $options['UseSTD3ASCIIRules'];
+        $transitional = $options['Transitional_Processing'];
+
+        foreach (self::utf8Decode($input) as $codePoint) {
+            $data = self::lookupCodePointStatus($codePoint, $useSTD3ASCIIRules);
+
+            switch ($data['status']) {
+                case 'disallowed':
+                case 'valid':
+                    $str .= mb_chr($codePoint, 'utf-8');
+
+                    break;
+
+                case 'ignored':
+                    // Do nothing.
+                    break;
+
+                case 'mapped':
+                    $str .= $transitional && 0x1E9E === $codePoint ? 'ss' : $data['mapping'];
+
+                    break;
+
+                case 'deviation':
+                    $info->transitionalDifferent = true;
+                    $str .= ($transitional ? $data['mapping'] : mb_chr($codePoint, 'utf-8'));
+
+                    break;
+            }
+        }
+
+        return $str;
+    }
+
+    /**
+     * @see https://www.unicode.org/reports/tr46/#Processing
+     *
+     * @param string              $domain
+     * @param array<string, bool> $options
+     *
+     * @return array<int, string>
+     */
+    private static function process($domain, array $options, Info $info)
+    {
+        // If VerifyDnsLength is not set, we are doing ToUnicode otherwise we are doing ToASCII and
+        // we need to respect the VerifyDnsLength option.
+        $checkForEmptyLabels = !isset($options['VerifyDnsLength']) || $options['VerifyDnsLength'];
+
+        if ($checkForEmptyLabels && '' === $domain) {
+            $info->errors |= self::ERROR_EMPTY_LABEL;
+
+            return [$domain];
+        }
+
+        // Step 1. Map each code point in the domain name string
+        $domain = self::mapCodePoints($domain, $options, $info);
+
+        // Step 2. Normalize the domain name string to Unicode Normalization Form C.
+        if (!\Normalizer::isNormalized($domain, \Normalizer::FORM_C)) {
+            $domain = \Normalizer::normalize($domain, \Normalizer::FORM_C);
+        }
+
+        // Step 3. Break the string into labels at U+002E (.) FULL STOP.
+        $labels = explode('.', $domain);
+        $lastLabelIndex = \count($labels) - 1;
+
+        // Step 4. Convert and validate each label in the domain name string.
+        foreach ($labels as $i => $label) {
+            $validationOptions = $options;
+
+            if ('xn--' === substr($label, 0, 4)) {
+                // Step 4.1. If the label contains any non-ASCII code point (i.e., a code point greater than U+007F),
+                // record that there was an error, and continue with the next label.
+                if (preg_match('/[^\x00-\x7F]/', $label)) {
+                    $info->errors |= self::ERROR_PUNYCODE;
+
+                    continue;
+                }
+
+                // Step 4.2. Attempt to convert the rest of the label to Unicode according to Punycode [RFC3492]. If
+                // that conversion fails, record that there was an error, and continue
+                // with the next label. Otherwise replace the original label in the string by the results of the
+                // conversion.
+                try {
+                    $label = self::punycodeDecode(substr($label, 4));
+                } catch (\Exception $e) {
+                    $info->errors |= self::ERROR_PUNYCODE;
+
+                    continue;
+                }
+
+                $validationOptions['Transitional_Processing'] = false;
+                $labels[$i] = $label;
+            }
+
+            self::validateLabel($label, $info, $validationOptions, $i > 0 && $i === $lastLabelIndex);
+        }
+
+        if ($info->bidiDomain && !$info->validBidiDomain) {
+            $info->errors |= self::ERROR_BIDI;
+        }
+
+        // Any input domain name string that does not record an error has been successfully
+        // processed according to this specification. Conversely, if an input domain_name string
+        // causes an error, then the processing of the input domain_name string fails. Determining
+        // what to do with error input is up to the caller, and not in the scope of this document.
+        return $labels;
+    }
+
+    /**
+     * @see https://tools.ietf.org/html/rfc5893#section-2
+     *
+     * @param string $label
+     */
+    private static function validateBidiLabel($label, Info $info)
+    {
+        if (1 === preg_match(Regex::RTL_LABEL, $label)) {
+            $info->bidiDomain = true;
+
+            // Step 1. The first character must be a character with Bidi property L, R, or AL.
+            // If it has the R or AL property, it is an RTL label
+            if (1 !== preg_match(Regex::BIDI_STEP_1_RTL, $label)) {
+                $info->validBidiDomain = false;
+
+                return;
+            }
+
+            // Step 2. In an RTL label, only characters with the Bidi properties R, AL, AN, EN, ES,
+            // CS, ET, ON, BN, or NSM are allowed.
+            if (1 === preg_match(Regex::BIDI_STEP_2, $label)) {
+                $info->validBidiDomain = false;
+
+                return;
+            }
+
+            // Step 3. In an RTL label, the end of the label must be a character with Bidi property
+            // R, AL, EN, or AN, followed by zero or more characters with Bidi property NSM.
+            if (1 !== preg_match(Regex::BIDI_STEP_3, $label)) {
+                $info->validBidiDomain = false;
+
+                return;
+            }
+
+            // Step 4. In an RTL label, if an EN is present, no AN may be present, and vice versa.
+            if (1 === preg_match(Regex::BIDI_STEP_4_AN, $label) && 1 === preg_match(Regex::BIDI_STEP_4_EN, $label)) {
+                $info->validBidiDomain = false;
+
+                return;
+            }
+
+            return;
+        }
+
+        // We are a LTR label
+        // Step 1. The first character must be a character with Bidi property L, R, or AL.
+        // If it has the L property, it is an LTR label.
+        if (1 !== preg_match(Regex::BIDI_STEP_1_LTR, $label)) {
+            $info->validBidiDomain = false;
+
+            return;
+        }
+
+        // Step 5. In an LTR label, only characters with the Bidi properties L, EN,
+        // ES, CS, ET, ON, BN, or NSM are allowed.
+        if (1 === preg_match(Regex::BIDI_STEP_5, $label)) {
+            $info->validBidiDomain = false;
+
+            return;
+        }
+
+        // Step 6.In an LTR label, the end of the label must be a character with Bidi property L or
+        // EN, followed by zero or more characters with Bidi property NSM.
+        if (1 !== preg_match(Regex::BIDI_STEP_6, $label)) {
+            $info->validBidiDomain = false;
+
+            return;
+        }
+    }
+
+    /**
+     * @param array<int, string> $labels
+     */
+    private static function validateDomainAndLabelLength(array $labels, Info $info)
+    {
+        $maxDomainSize = self::MAX_DOMAIN_SIZE;
+        $length = \count($labels);
+
+        // Number of "." delimiters.
+        $domainLength = $length - 1;
+
+        // If the last label is empty and it is not the first label, then it is the root label.
+        // Increase the max size by 1, making it 254, to account for the root label's "."
+        // delimiter. This also means we don't need to check the last label's length for being too
+        // long.
+        if ($length > 1 && '' === $labels[$length - 1]) {
+            ++$maxDomainSize;
+            --$length;
+        }
+
+        for ($i = 0; $i < $length; ++$i) {
+            $bytes = \strlen($labels[$i]);
+            $domainLength += $bytes;
+
+            if ($bytes > self::MAX_LABEL_SIZE) {
+                $info->errors |= self::ERROR_LABEL_TOO_LONG;
+            }
+        }
+
+        if ($domainLength > $maxDomainSize) {
+            $info->errors |= self::ERROR_DOMAIN_NAME_TOO_LONG;
+        }
+    }
+
+    /**
+     * @see https://www.unicode.org/reports/tr46/#Validity_Criteria
+     *
+     * @param string              $label
+     * @param array<string, bool> $options
+     * @param bool                $canBeEmpty
+     */
+    private static function validateLabel($label, Info $info, array $options, $canBeEmpty)
+    {
+        if ('' === $label) {
+            if (!$canBeEmpty && (!isset($options['VerifyDnsLength']) || $options['VerifyDnsLength'])) {
+                $info->errors |= self::ERROR_EMPTY_LABEL;
+            }
+
+            return;
+        }
+
+        // Step 1. The label must be in Unicode Normalization Form C.
+        if (!\Normalizer::isNormalized($label, \Normalizer::FORM_C)) {
+            $info->errors |= self::ERROR_INVALID_ACE_LABEL;
+        }
+
+        $codePoints = self::utf8Decode($label);
+
+        if ($options['CheckHyphens']) {
+            // Step 2. If CheckHyphens, the label must not contain a U+002D HYPHEN-MINUS character
+            // in both the thrid and fourth positions.
+            if (isset($codePoints[2], $codePoints[3]) && 0x002D === $codePoints[2] && 0x002D === $codePoints[3]) {
+                $info->errors |= self::ERROR_HYPHEN_3_4;
+            }
+
+            // Step 3. If CheckHyphens, the label must neither begin nor end with a U+002D
+            // HYPHEN-MINUS character.
+            if ('-' === substr($label, 0, 1)) {
+                $info->errors |= self::ERROR_LEADING_HYPHEN;
+            }
+
+            if ('-' === substr($label, -1, 1)) {
+                $info->errors |= self::ERROR_TRAILING_HYPHEN;
+            }
+        } elseif ('xn--' === substr($label, 0, 4)) {
+            $info->errors |= self::ERROR_PUNYCODE;
+        }
+
+        // Step 4. The label must not contain a U+002E (.) FULL STOP.
+        if (false !== strpos($label, '.')) {
+            $info->errors |= self::ERROR_LABEL_HAS_DOT;
+        }
+
+        // Step 5. The label must not begin with a combining mark, that is: General_Category=Mark.
+        if (1 === preg_match(Regex::COMBINING_MARK, $label)) {
+            $info->errors |= self::ERROR_LEADING_COMBINING_MARK;
+        }
+
+        // Step 6. Each code point in the label must only have certain status values according to
+        // Section 5, IDNA Mapping Table:
+        $transitional = $options['Transitional_Processing'];
+        $useSTD3ASCIIRules = $options['UseSTD3ASCIIRules'];
+
+        foreach ($codePoints as $codePoint) {
+            $data = self::lookupCodePointStatus($codePoint, $useSTD3ASCIIRules);
+            $status = $data['status'];
+
+            if ('valid' === $status || (!$transitional && 'deviation' === $status)) {
+                continue;
+            }
+
+            $info->errors |= self::ERROR_DISALLOWED;
+
+            break;
+        }
+
+        // Step 7. If CheckJoiners, the label must satisify the ContextJ rules from Appendix A, in
+        // The Unicode Code Points and Internationalized Domain Names for Applications (IDNA)
+        // [IDNA2008].
+        if ($options['CheckJoiners'] && !self::isValidContextJ($codePoints, $label)) {
+            $info->errors |= self::ERROR_CONTEXTJ;
+        }
+
+        // Step 8. If CheckBidi, and if the domain name is a  Bidi domain name, then the label must
+        // satisfy all six of the numbered conditions in [IDNA2008] RFC 5893, Section 2.
+        if ($options['CheckBidi'] && (!$info->bidiDomain || $info->validBidiDomain)) {
+            self::validateBidiLabel($label, $info);
+        }
+    }
+
+    /**
+     * @see https://tools.ietf.org/html/rfc3492#section-6.2
+     *
+     * @param string $input
+     *
+     * @return string
+     */
+    private static function punycodeDecode($input)
+    {
+        $n = self::INITIAL_N;
+        $out = 0;
+        $i = 0;
+        $bias = self::INITIAL_BIAS;
+        $lastDelimIndex = strrpos($input, self::DELIMITER);
+        $b = false === $lastDelimIndex ? 0 : $lastDelimIndex;
+        $inputLength = \strlen($input);
+        $output = [];
+        $bytes = array_map('ord', str_split($input));
+
+        for ($j = 0; $j < $b; ++$j) {
+            if ($bytes[$j] > 0x7F) {
+                throw new \Exception('Invalid input');
+            }
+
+            $output[$out++] = $input[$j];
+        }
+
+        if ($b > 0) {
+            ++$b;
+        }
+
+        for ($in = $b; $in < $inputLength; ++$out) {
+            $oldi = $i;
+            $w = 1;
+
+            for ($k = self::BASE; /* no condition */; $k += self::BASE) {
+                if ($in >= $inputLength) {
+                    throw new \Exception('Invalid input');
+                }
+
+                $digit = self::$basicToDigit[$bytes[$in++] & 0xFF];
+
+                if ($digit < 0) {
+                    throw new \Exception('Invalid input');
+                }
+
+                if ($digit > intdiv(self::MAX_INT - $i, $w)) {
+                    throw new \Exception('Integer overflow');
+                }
+
+                $i += $digit * $w;
+
+                if ($k <= $bias) {
+                    $t = self::TMIN;
+                } elseif ($k >= $bias + self::TMAX) {
+                    $t = self::TMAX;
+                } else {
+                    $t = $k - $bias;
+                }
+
+                if ($digit < $t) {
+                    break;
+                }
+
+                $baseMinusT = self::BASE - $t;
+
+                if ($w > intdiv(self::MAX_INT, $baseMinusT)) {
+                    throw new \Exception('Integer overflow');
+                }
+
+                $w *= $baseMinusT;
+            }
+
+            $outPlusOne = $out + 1;
+            $bias = self::adaptBias($i - $oldi, $outPlusOne, 0 === $oldi);
+
+            if (intdiv($i, $outPlusOne) > self::MAX_INT - $n) {
+                throw new \Exception('Integer overflow');
+            }
+
+            $n += intdiv($i, $outPlusOne);
+            $i %= $outPlusOne;
+            array_splice($output, $i++, 0, [mb_chr($n, 'utf-8')]);
+        }
+
+        return implode('', $output);
+    }
+
+    /**
+     * @see https://tools.ietf.org/html/rfc3492#section-6.3
+     *
+     * @param string $input
+     *
+     * @return string
+     */
+    private static function punycodeEncode($input)
+    {
+        $n = self::INITIAL_N;
+        $delta = 0;
+        $out = 0;
+        $bias = self::INITIAL_BIAS;
+        $inputLength = 0;
+        $output = '';
+        $iter = self::utf8Decode($input);
+
+        foreach ($iter as $codePoint) {
+            ++$inputLength;
+
+            if ($codePoint < 0x80) {
+                $output .= \chr($codePoint);
+                ++$out;
+            }
+        }
+
+        $h = $out;
+        $b = $out;
+
+        if ($b > 0) {
+            $output .= self::DELIMITER;
+            ++$out;
+        }
+
+        while ($h < $inputLength) {
+            $m = self::MAX_INT;
+
+            foreach ($iter as $codePoint) {
+                if ($codePoint >= $n && $codePoint < $m) {
+                    $m = $codePoint;
+                }
+            }
+
+            if ($m - $n > intdiv(self::MAX_INT - $delta, $h + 1)) {
+                throw new \Exception('Integer overflow');
+            }
+
+            $delta += ($m - $n) * ($h + 1);
+            $n = $m;
+
+            foreach ($iter as $codePoint) {
+                if ($codePoint < $n && 0 === ++$delta) {
+                    throw new \Exception('Integer overflow');
+                }
+
+                if ($codePoint === $n) {
+                    $q = $delta;
+
+                    for ($k = self::BASE; /* no condition */; $k += self::BASE) {
+                        if ($k <= $bias) {
+                            $t = self::TMIN;
+                        } elseif ($k >= $bias + self::TMAX) {
+                            $t = self::TMAX;
+                        } else {
+                            $t = $k - $bias;
+                        }
+
+                        if ($q < $t) {
+                            break;
+                        }
+
+                        $qMinusT = $q - $t;
+                        $baseMinusT = self::BASE - $t;
+                        $output .= self::encodeDigit($t + $qMinusT % $baseMinusT, false);
+                        ++$out;
+                        $q = intdiv($qMinusT, $baseMinusT);
+                    }
+
+                    $output .= self::encodeDigit($q, false);
+                    ++$out;
+                    $bias = self::adaptBias($delta, $h + 1, $h === $b);
+                    $delta = 0;
+                    ++$h;
+                }
+            }
+
+            ++$delta;
+            ++$n;
+        }
+
+        return $output;
+    }
+
+    /**
+     * @see https://tools.ietf.org/html/rfc3492#section-6.1
+     *
+     * @param int  $delta
+     * @param int  $numPoints
+     * @param bool $firstTime
+     *
+     * @return int
+     */
+    private static function adaptBias($delta, $numPoints, $firstTime)
+    {
+        // xxx >> 1 is a faster way of doing intdiv(xxx, 2)
+        $delta = $firstTime ? intdiv($delta, self::DAMP) : $delta >> 1;
+        $delta += intdiv($delta, $numPoints);
+        $k = 0;
+
+        while ($delta > ((self::BASE - self::TMIN) * self::TMAX) >> 1) {
+            $delta = intdiv($delta, self::BASE - self::TMIN);
+            $k += self::BASE;
+        }
+
+        return $k + intdiv((self::BASE - self::TMIN + 1) * $delta, $delta + self::SKEW);
+    }
+
+    /**
+     * @param int  $d
+     * @param bool $flag
+     *
+     * @return string
+     */
+    private static function encodeDigit($d, $flag)
+    {
+        return \chr($d + 22 + 75 * ($d < 26 ? 1 : 0) - (($flag ? 1 : 0) << 5));
+    }
+
+    /**
+     * Takes a UTF-8 encoded string and converts it into a series of integer code points. Any
+     * invalid byte sequences will be replaced by a U+FFFD replacement code point.
+     *
+     * @see https://encoding.spec.whatwg.org/#utf-8-decoder
+     *
+     * @param string $input
+     *
+     * @return array<int, int>
+     */
+    private static function utf8Decode($input)
+    {
+        $bytesSeen = 0;
+        $bytesNeeded = 0;
+        $lowerBoundary = 0x80;
+        $upperBoundary = 0xBF;
+        $codePoint = 0;
+        $codePoints = [];
+        $length = \strlen($input);
+
+        for ($i = 0; $i < $length; ++$i) {
+            $byte = \ord($input[$i]);
+
+            if (0 === $bytesNeeded) {
+                if ($byte >= 0x00 && $byte <= 0x7F) {
+                    $codePoints[] = $byte;
+
+                    continue;
+                }
+
+                if ($byte >= 0xC2 && $byte <= 0xDF) {
+                    $bytesNeeded = 1;
+                    $codePoint = $byte & 0x1F;
+                } elseif ($byte >= 0xE0 && $byte <= 0xEF) {
+                    if (0xE0 === $byte) {
+                        $lowerBoundary = 0xA0;
+                    } elseif (0xED === $byte) {
+                        $upperBoundary = 0x9F;
+                    }
+
+                    $bytesNeeded = 2;
+                    $codePoint = $byte & 0xF;
+                } elseif ($byte >= 0xF0 && $byte <= 0xF4) {
+                    if (0xF0 === $byte) {
+                        $lowerBoundary = 0x90;
+                    } elseif (0xF4 === $byte) {
+                        $upperBoundary = 0x8F;
+                    }
+
+                    $bytesNeeded = 3;
+                    $codePoint = $byte & 0x7;
+                } else {
+                    $codePoints[] = 0xFFFD;
+                }
+
+                continue;
+            }
+
+            if ($byte < $lowerBoundary || $byte > $upperBoundary) {
+                $codePoint = 0;
+                $bytesNeeded = 0;
+                $bytesSeen = 0;
+                $lowerBoundary = 0x80;
+                $upperBoundary = 0xBF;
+                --$i;
+                $codePoints[] = 0xFFFD;
+
+                continue;
+            }
+
+            $lowerBoundary = 0x80;
+            $upperBoundary = 0xBF;
+            $codePoint = ($codePoint << 6) | ($byte & 0x3F);
+
+            if (++$bytesSeen !== $bytesNeeded) {
+                continue;
+            }
+
+            $codePoints[] = $codePoint;
+            $codePoint = 0;
+            $bytesNeeded = 0;
+            $bytesSeen = 0;
+        }
+
+        // String unexpectedly ended, so append a U+FFFD code point.
+        if (0 !== $bytesNeeded) {
+            $codePoints[] = 0xFFFD;
+        }
+
+        return $codePoints;
+    }
+
+    /**
+     * @param int  $codePoint
+     * @param bool $useSTD3ASCIIRules
+     *
+     * @return array{status: string, mapping?: string}
+     */
+    private static function lookupCodePointStatus($codePoint, $useSTD3ASCIIRules)
+    {
+        if (!self::$mappingTableLoaded) {
+            self::$mappingTableLoaded = true;
+            self::$mapped = require __DIR__.'/Resources/unidata/mapped.php';
+            self::$ignored = require __DIR__.'/Resources/unidata/ignored.php';
+            self::$deviation = require __DIR__.'/Resources/unidata/deviation.php';
+            self::$disallowed = require __DIR__.'/Resources/unidata/disallowed.php';
+            self::$disallowed_STD3_mapped = require __DIR__.'/Resources/unidata/disallowed_STD3_mapped.php';
+            self::$disallowed_STD3_valid = require __DIR__.'/Resources/unidata/disallowed_STD3_valid.php';
+        }
+
+        if (isset(self::$mapped[$codePoint])) {
+            return ['status' => 'mapped', 'mapping' => self::$mapped[$codePoint]];
+        }
+
+        if (isset(self::$ignored[$codePoint])) {
+            return ['status' => 'ignored'];
+        }
+
+        if (isset(self::$deviation[$codePoint])) {
+            return ['status' => 'deviation', 'mapping' => self::$deviation[$codePoint]];
+        }
+
+        if (isset(self::$disallowed[$codePoint]) || DisallowedRanges::inRange($codePoint)) {
+            return ['status' => 'disallowed'];
+        }
+
+        $isDisallowedMapped = isset(self::$disallowed_STD3_mapped[$codePoint]);
+
+        if ($isDisallowedMapped || isset(self::$disallowed_STD3_valid[$codePoint])) {
+            $status = 'disallowed';
+
+            if (!$useSTD3ASCIIRules) {
+                $status = $isDisallowedMapped ? 'mapped' : 'valid';
+            }
+
+            if ($isDisallowedMapped) {
+                return ['status' => $status, 'mapping' => self::$disallowed_STD3_mapped[$codePoint]];
+            }
+
+            return ['status' => $status];
+        }
+
+        return ['status' => 'valid'];
+    }
+}
Index: vendor/doctrine/lexer/lib/Doctrine/Common/Lexer/AbstractLexer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/doctrine/lexer/lib/Doctrine/Common/Lexer/AbstractLexer.php b/vendor/doctrine/lexer/lib/Doctrine/Common/Lexer/AbstractLexer.php
new file mode 100644
--- /dev/null	(date 1646006840000)
+++ b/vendor/doctrine/lexer/lib/Doctrine/Common/Lexer/AbstractLexer.php	(date 1646006840000)
@@ -0,0 +1,337 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Doctrine\Common\Lexer;
+
+use ReflectionClass;
+
+use function implode;
+use function in_array;
+use function preg_split;
+use function sprintf;
+use function substr;
+
+use const PREG_SPLIT_DELIM_CAPTURE;
+use const PREG_SPLIT_NO_EMPTY;
+use const PREG_SPLIT_OFFSET_CAPTURE;
+
+/**
+ * Base class for writing simple lexers, i.e. for creating small DSLs.
+ *
+ * @psalm-type Token = array{value: int|string, type:string|int|null, position:int}
+ */
+abstract class AbstractLexer
+{
+    /**
+     * Lexer original input string.
+     *
+     * @var string
+     */
+    private $input;
+
+    /**
+     * Array of scanned tokens.
+     *
+     * Each token is an associative array containing three items:
+     *  - 'value'    : the string value of the token in the input string
+     *  - 'type'     : the type of the token (identifier, numeric, string, input
+     *                 parameter, none)
+     *  - 'position' : the position of the token in the input string
+     *
+     * @var mixed[][]
+     * @psalm-var list<Token>
+     */
+    private $tokens = [];
+
+    /**
+     * Current lexer position in input string.
+     *
+     * @var int
+     */
+    private $position = 0;
+
+    /**
+     * Current peek of current lexer position.
+     *
+     * @var int
+     */
+    private $peek = 0;
+
+    /**
+     * The next token in the input.
+     *
+     * @var mixed[]|null
+     * @psalm-var Token|null
+     */
+    public $lookahead;
+
+    /**
+     * The last matched/seen token.
+     *
+     * @var mixed[]|null
+     * @psalm-var Token|null
+     */
+    public $token;
+
+    /**
+     * Composed regex for input parsing.
+     *
+     * @var string|null
+     */
+    private $regex;
+
+    /**
+     * Sets the input data to be tokenized.
+     *
+     * The Lexer is immediately reset and the new input tokenized.
+     * Any unprocessed tokens from any previous input are lost.
+     *
+     * @param string $input The input to be tokenized.
+     *
+     * @return void
+     */
+    public function setInput($input)
+    {
+        $this->input  = $input;
+        $this->tokens = [];
+
+        $this->reset();
+        $this->scan($input);
+    }
+
+    /**
+     * Resets the lexer.
+     *
+     * @return void
+     */
+    public function reset()
+    {
+        $this->lookahead = null;
+        $this->token     = null;
+        $this->peek      = 0;
+        $this->position  = 0;
+    }
+
+    /**
+     * Resets the peek pointer to 0.
+     *
+     * @return void
+     */
+    public function resetPeek()
+    {
+        $this->peek = 0;
+    }
+
+    /**
+     * Resets the lexer position on the input to the given position.
+     *
+     * @param int $position Position to place the lexical scanner.
+     *
+     * @return void
+     */
+    public function resetPosition($position = 0)
+    {
+        $this->position = $position;
+    }
+
+    /**
+     * Retrieve the original lexer's input until a given position.
+     *
+     * @param int $position
+     *
+     * @return string
+     */
+    public function getInputUntilPosition($position)
+    {
+        return substr($this->input, 0, $position);
+    }
+
+    /**
+     * Checks whether a given token matches the current lookahead.
+     *
+     * @param int|string $type
+     *
+     * @return bool
+     */
+    public function isNextToken($type)
+    {
+        return $this->lookahead !== null && $this->lookahead['type'] === $type;
+    }
+
+    /**
+     * Checks whether any of the given tokens matches the current lookahead.
+     *
+     * @param list<int|string> $types
+     *
+     * @return bool
+     */
+    public function isNextTokenAny(array $types)
+    {
+        return $this->lookahead !== null && in_array($this->lookahead['type'], $types, true);
+    }
+
+    /**
+     * Moves to the next token in the input string.
+     *
+     * @return bool
+     */
+    public function moveNext()
+    {
+        $this->peek      = 0;
+        $this->token     = $this->lookahead;
+        $this->lookahead = isset($this->tokens[$this->position])
+            ? $this->tokens[$this->position++] : null;
+
+        return $this->lookahead !== null;
+    }
+
+    /**
+     * Tells the lexer to skip input tokens until it sees a token with the given value.
+     *
+     * @param string $type The token type to skip until.
+     *
+     * @return void
+     */
+    public function skipUntil($type)
+    {
+        while ($this->lookahead !== null && $this->lookahead['type'] !== $type) {
+            $this->moveNext();
+        }
+    }
+
+    /**
+     * Checks if given value is identical to the given token.
+     *
+     * @param mixed      $value
+     * @param int|string $token
+     *
+     * @return bool
+     */
+    public function isA($value, $token)
+    {
+        return $this->getType($value) === $token;
+    }
+
+    /**
+     * Moves the lookahead token forward.
+     *
+     * @return mixed[]|null The next token or NULL if there are no more tokens ahead.
+     * @psalm-return Token|null
+     */
+    public function peek()
+    {
+        if (isset($this->tokens[$this->position + $this->peek])) {
+            return $this->tokens[$this->position + $this->peek++];
+        }
+
+        return null;
+    }
+
+    /**
+     * Peeks at the next token, returns it and immediately resets the peek.
+     *
+     * @return mixed[]|null The next token or NULL if there are no more tokens ahead.
+     * @psalm-return Token|null
+     */
+    public function glimpse()
+    {
+        $peek       = $this->peek();
+        $this->peek = 0;
+
+        return $peek;
+    }
+
+    /**
+     * Scans the input string for tokens.
+     *
+     * @param string $input A query string.
+     *
+     * @return void
+     */
+    protected function scan($input)
+    {
+        if (! isset($this->regex)) {
+            $this->regex = sprintf(
+                '/(%s)|%s/%s',
+                implode(')|(', $this->getCatchablePatterns()),
+                implode('|', $this->getNonCatchablePatterns()),
+                $this->getModifiers()
+            );
+        }
+
+        $flags   = PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE;
+        $matches = preg_split($this->regex, $input, -1, $flags);
+
+        if ($matches === false) {
+            // Work around https://bugs.php.net/78122
+            $matches = [[$input, 0]];
+        }
+
+        foreach ($matches as $match) {
+            // Must remain before 'value' assignment since it can change content
+            $type = $this->getType($match[0]);
+
+            $this->tokens[] = [
+                'value' => $match[0],
+                'type'  => $type,
+                'position' => $match[1],
+            ];
+        }
+    }
+
+    /**
+     * Gets the literal for a given token.
+     *
+     * @param int|string $token
+     *
+     * @return int|string
+     */
+    public function getLiteral($token)
+    {
+        $className = static::class;
+        $reflClass = new ReflectionClass($className);
+        $constants = $reflClass->getConstants();
+
+        foreach ($constants as $name => $value) {
+            if ($value === $token) {
+                return $className . '::' . $name;
+            }
+        }
+
+        return $token;
+    }
+
+    /**
+     * Regex modifiers
+     *
+     * @return string
+     */
+    protected function getModifiers()
+    {
+        return 'iu';
+    }
+
+    /**
+     * Lexical catchable patterns.
+     *
+     * @return string[]
+     */
+    abstract protected function getCatchablePatterns();
+
+    /**
+     * Lexical non-catchable patterns.
+     *
+     * @return string[]
+     */
+    abstract protected function getNonCatchablePatterns();
+
+    /**
+     * Retrieve token type. Also processes the token value if necessary.
+     *
+     * @param string $value
+     *
+     * @return int|string|null
+     */
+    abstract protected function getType(&$value);
+}
Index: vendor/symfony/polyfill-intl-normalizer/bootstrap.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/bootstrap.php b/vendor/symfony/polyfill-intl-normalizer/bootstrap.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/bootstrap.php	(date 1725846310000)
@@ -0,0 +1,23 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+use Symfony\Polyfill\Intl\Normalizer as p;
+
+if (\PHP_VERSION_ID >= 80000) {
+    return require __DIR__.'/bootstrap80.php';
+}
+
+if (!function_exists('normalizer_is_normalized')) {
+    function normalizer_is_normalized($string, $form = p\Normalizer::FORM_C) { return p\Normalizer::isNormalized($string, $form); }
+}
+if (!function_exists('normalizer_normalize')) {
+    function normalizer_normalize($string, $form = p\Normalizer::FORM_C) { return p\Normalizer::normalize($string, $form); }
+}
Index: vendor/symfony/polyfill-intl-normalizer/bootstrap80.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/bootstrap80.php b/vendor/symfony/polyfill-intl-normalizer/bootstrap80.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/bootstrap80.php	(date 1725846310000)
@@ -0,0 +1,19 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+use Symfony\Polyfill\Intl\Normalizer as p;
+
+if (!function_exists('normalizer_is_normalized')) {
+    function normalizer_is_normalized(?string $string, ?int $form = p\Normalizer::FORM_C): bool { return p\Normalizer::isNormalized((string) $string, (int) $form); }
+}
+if (!function_exists('normalizer_normalize')) {
+    function normalizer_normalize(?string $string, ?int $form = p\Normalizer::FORM_C): string|false { return p\Normalizer::normalize((string) $string, (int) $form); }
+}
Index: vendor/symfony/polyfill-intl-normalizer/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/composer.json b/vendor/symfony/polyfill-intl-normalizer/composer.json
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/composer.json	(date 1725846310000)
@@ -0,0 +1,36 @@
+{
+    "name": "symfony/polyfill-intl-normalizer",
+    "type": "library",
+    "description": "Symfony polyfill for intl's Normalizer class and related functions",
+    "keywords": ["polyfill", "shim", "compatibility", "portable", "intl", "normalizer"],
+    "homepage": "https://symfony.com",
+    "license": "MIT",
+    "authors": [
+        {
+            "name": "Nicolas Grekas",
+            "email": "p@tchwork.com"
+        },
+        {
+            "name": "Symfony Community",
+            "homepage": "https://symfony.com/contributors"
+        }
+    ],
+    "require": {
+        "php": ">=7.2"
+    },
+    "autoload": {
+        "psr-4": { "Symfony\\Polyfill\\Intl\\Normalizer\\": "" },
+        "files": [ "bootstrap.php" ],
+        "classmap": [ "Resources/stubs" ]
+    },
+    "suggest": {
+        "ext-intl": "For best performance"
+    },
+    "minimum-stability": "dev",
+    "extra": {
+        "thanks": {
+            "name": "symfony/polyfill",
+            "url": "https://github.com/symfony/polyfill"
+        }
+    }
+}
Index: vendor/symfony/polyfill-intl-normalizer/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/LICENSE b/vendor/symfony/polyfill-intl-normalizer/LICENSE
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/LICENSE	(date 1725846310000)
@@ -0,0 +1,19 @@
+Copyright (c) 2015-present Fabien Potencier
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
Index: vendor/symfony/polyfill-intl-idn/Info.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Info.php b/vendor/symfony/polyfill-intl-idn/Info.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Info.php	(date 1725846310000)
@@ -0,0 +1,23 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com> and Trevor Rowbotham <trevor.rowbotham@pm.me>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Polyfill\Intl\Idn;
+
+/**
+ * @internal
+ */
+class Info
+{
+    public $bidiDomain = false;
+    public $errors = 0;
+    public $validBidiDomain = true;
+    public $transitionalDifferent = false;
+}
Index: vendor/symfony/polyfill-intl-idn/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/LICENSE b/vendor/symfony/polyfill-intl-idn/LICENSE
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/LICENSE	(date 1725846310000)
@@ -0,0 +1,19 @@
+Copyright (c) 2018-present Fabien Potencier and Trevor Rowbotham <trevor.rowbotham@pm.me>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
Index: vendor/symfony/polyfill-intl-idn/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/README.md b/vendor/symfony/polyfill-intl-idn/README.md
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/README.md	(date 1725846310000)
@@ -0,0 +1,12 @@
+Symfony Polyfill / Intl: Idn
+============================
+
+This component provides [`idn_to_ascii`](https://php.net/idn-to-ascii) and [`idn_to_utf8`](https://php.net/idn-to-utf8) functions to users who run php versions without the [Intl](https://php.net/intl) extension.
+
+More information can be found in the
+[main Polyfill README](https://github.com/symfony/polyfill/blob/main/README.md).
+
+License
+=======
+
+This library is released under the [MIT license](LICENSE).
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/deviation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/deviation.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/deviation.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/deviation.php	(date 1725846310000)
@@ -0,0 +1,8 @@
+<?php
+
+return array (
+  223 => 'ss',
+  962 => 'σ',
+  8204 => '',
+  8205 => '',
+);
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed.php	(date 1725846310000)
@@ -0,0 +1,2638 @@
+<?php
+
+return array (
+  888 => true,
+  889 => true,
+  896 => true,
+  897 => true,
+  898 => true,
+  899 => true,
+  907 => true,
+  909 => true,
+  930 => true,
+  1216 => true,
+  1328 => true,
+  1367 => true,
+  1368 => true,
+  1419 => true,
+  1420 => true,
+  1424 => true,
+  1480 => true,
+  1481 => true,
+  1482 => true,
+  1483 => true,
+  1484 => true,
+  1485 => true,
+  1486 => true,
+  1487 => true,
+  1515 => true,
+  1516 => true,
+  1517 => true,
+  1518 => true,
+  1525 => true,
+  1526 => true,
+  1527 => true,
+  1528 => true,
+  1529 => true,
+  1530 => true,
+  1531 => true,
+  1532 => true,
+  1533 => true,
+  1534 => true,
+  1535 => true,
+  1536 => true,
+  1537 => true,
+  1538 => true,
+  1539 => true,
+  1540 => true,
+  1541 => true,
+  1564 => true,
+  1565 => true,
+  1757 => true,
+  1806 => true,
+  1807 => true,
+  1867 => true,
+  1868 => true,
+  1970 => true,
+  1971 => true,
+  1972 => true,
+  1973 => true,
+  1974 => true,
+  1975 => true,
+  1976 => true,
+  1977 => true,
+  1978 => true,
+  1979 => true,
+  1980 => true,
+  1981 => true,
+  1982 => true,
+  1983 => true,
+  2043 => true,
+  2044 => true,
+  2094 => true,
+  2095 => true,
+  2111 => true,
+  2140 => true,
+  2141 => true,
+  2143 => true,
+  2229 => true,
+  2248 => true,
+  2249 => true,
+  2250 => true,
+  2251 => true,
+  2252 => true,
+  2253 => true,
+  2254 => true,
+  2255 => true,
+  2256 => true,
+  2257 => true,
+  2258 => true,
+  2274 => true,
+  2436 => true,
+  2445 => true,
+  2446 => true,
+  2449 => true,
+  2450 => true,
+  2473 => true,
+  2481 => true,
+  2483 => true,
+  2484 => true,
+  2485 => true,
+  2490 => true,
+  2491 => true,
+  2501 => true,
+  2502 => true,
+  2505 => true,
+  2506 => true,
+  2511 => true,
+  2512 => true,
+  2513 => true,
+  2514 => true,
+  2515 => true,
+  2516 => true,
+  2517 => true,
+  2518 => true,
+  2520 => true,
+  2521 => true,
+  2522 => true,
+  2523 => true,
+  2526 => true,
+  2532 => true,
+  2533 => true,
+  2559 => true,
+  2560 => true,
+  2564 => true,
+  2571 => true,
+  2572 => true,
+  2573 => true,
+  2574 => true,
+  2577 => true,
+  2578 => true,
+  2601 => true,
+  2609 => true,
+  2612 => true,
+  2615 => true,
+  2618 => true,
+  2619 => true,
+  2621 => true,
+  2627 => true,
+  2628 => true,
+  2629 => true,
+  2630 => true,
+  2633 => true,
+  2634 => true,
+  2638 => true,
+  2639 => true,
+  2640 => true,
+  2642 => true,
+  2643 => true,
+  2644 => true,
+  2645 => true,
+  2646 => true,
+  2647 => true,
+  2648 => true,
+  2653 => true,
+  2655 => true,
+  2656 => true,
+  2657 => true,
+  2658 => true,
+  2659 => true,
+  2660 => true,
+  2661 => true,
+  2679 => true,
+  2680 => true,
+  2681 => true,
+  2682 => true,
+  2683 => true,
+  2684 => true,
+  2685 => true,
+  2686 => true,
+  2687 => true,
+  2688 => true,
+  2692 => true,
+  2702 => true,
+  2706 => true,
+  2729 => true,
+  2737 => true,
+  2740 => true,
+  2746 => true,
+  2747 => true,
+  2758 => true,
+  2762 => true,
+  2766 => true,
+  2767 => true,
+  2769 => true,
+  2770 => true,
+  2771 => true,
+  2772 => true,
+  2773 => true,
+  2774 => true,
+  2775 => true,
+  2776 => true,
+  2777 => true,
+  2778 => true,
+  2779 => true,
+  2780 => true,
+  2781 => true,
+  2782 => true,
+  2783 => true,
+  2788 => true,
+  2789 => true,
+  2802 => true,
+  2803 => true,
+  2804 => true,
+  2805 => true,
+  2806 => true,
+  2807 => true,
+  2808 => true,
+  2816 => true,
+  2820 => true,
+  2829 => true,
+  2830 => true,
+  2833 => true,
+  2834 => true,
+  2857 => true,
+  2865 => true,
+  2868 => true,
+  2874 => true,
+  2875 => true,
+  2885 => true,
+  2886 => true,
+  2889 => true,
+  2890 => true,
+  2894 => true,
+  2895 => true,
+  2896 => true,
+  2897 => true,
+  2898 => true,
+  2899 => true,
+  2900 => true,
+  2904 => true,
+  2905 => true,
+  2906 => true,
+  2907 => true,
+  2910 => true,
+  2916 => true,
+  2917 => true,
+  2936 => true,
+  2937 => true,
+  2938 => true,
+  2939 => true,
+  2940 => true,
+  2941 => true,
+  2942 => true,
+  2943 => true,
+  2944 => true,
+  2945 => true,
+  2948 => true,
+  2955 => true,
+  2956 => true,
+  2957 => true,
+  2961 => true,
+  2966 => true,
+  2967 => true,
+  2968 => true,
+  2971 => true,
+  2973 => true,
+  2976 => true,
+  2977 => true,
+  2978 => true,
+  2981 => true,
+  2982 => true,
+  2983 => true,
+  2987 => true,
+  2988 => true,
+  2989 => true,
+  3002 => true,
+  3003 => true,
+  3004 => true,
+  3005 => true,
+  3011 => true,
+  3012 => true,
+  3013 => true,
+  3017 => true,
+  3022 => true,
+  3023 => true,
+  3025 => true,
+  3026 => true,
+  3027 => true,
+  3028 => true,
+  3029 => true,
+  3030 => true,
+  3032 => true,
+  3033 => true,
+  3034 => true,
+  3035 => true,
+  3036 => true,
+  3037 => true,
+  3038 => true,
+  3039 => true,
+  3040 => true,
+  3041 => true,
+  3042 => true,
+  3043 => true,
+  3044 => true,
+  3045 => true,
+  3067 => true,
+  3068 => true,
+  3069 => true,
+  3070 => true,
+  3071 => true,
+  3085 => true,
+  3089 => true,
+  3113 => true,
+  3130 => true,
+  3131 => true,
+  3132 => true,
+  3141 => true,
+  3145 => true,
+  3150 => true,
+  3151 => true,
+  3152 => true,
+  3153 => true,
+  3154 => true,
+  3155 => true,
+  3156 => true,
+  3159 => true,
+  3163 => true,
+  3164 => true,
+  3165 => true,
+  3166 => true,
+  3167 => true,
+  3172 => true,
+  3173 => true,
+  3184 => true,
+  3185 => true,
+  3186 => true,
+  3187 => true,
+  3188 => true,
+  3189 => true,
+  3190 => true,
+  3213 => true,
+  3217 => true,
+  3241 => true,
+  3252 => true,
+  3258 => true,
+  3259 => true,
+  3269 => true,
+  3273 => true,
+  3278 => true,
+  3279 => true,
+  3280 => true,
+  3281 => true,
+  3282 => true,
+  3283 => true,
+  3284 => true,
+  3287 => true,
+  3288 => true,
+  3289 => true,
+  3290 => true,
+  3291 => true,
+  3292 => true,
+  3293 => true,
+  3295 => true,
+  3300 => true,
+  3301 => true,
+  3312 => true,
+  3315 => true,
+  3316 => true,
+  3317 => true,
+  3318 => true,
+  3319 => true,
+  3320 => true,
+  3321 => true,
+  3322 => true,
+  3323 => true,
+  3324 => true,
+  3325 => true,
+  3326 => true,
+  3327 => true,
+  3341 => true,
+  3345 => true,
+  3397 => true,
+  3401 => true,
+  3408 => true,
+  3409 => true,
+  3410 => true,
+  3411 => true,
+  3428 => true,
+  3429 => true,
+  3456 => true,
+  3460 => true,
+  3479 => true,
+  3480 => true,
+  3481 => true,
+  3506 => true,
+  3516 => true,
+  3518 => true,
+  3519 => true,
+  3527 => true,
+  3528 => true,
+  3529 => true,
+  3531 => true,
+  3532 => true,
+  3533 => true,
+  3534 => true,
+  3541 => true,
+  3543 => true,
+  3552 => true,
+  3553 => true,
+  3554 => true,
+  3555 => true,
+  3556 => true,
+  3557 => true,
+  3568 => true,
+  3569 => true,
+  3573 => true,
+  3574 => true,
+  3575 => true,
+  3576 => true,
+  3577 => true,
+  3578 => true,
+  3579 => true,
+  3580 => true,
+  3581 => true,
+  3582 => true,
+  3583 => true,
+  3584 => true,
+  3643 => true,
+  3644 => true,
+  3645 => true,
+  3646 => true,
+  3715 => true,
+  3717 => true,
+  3723 => true,
+  3748 => true,
+  3750 => true,
+  3774 => true,
+  3775 => true,
+  3781 => true,
+  3783 => true,
+  3790 => true,
+  3791 => true,
+  3802 => true,
+  3803 => true,
+  3912 => true,
+  3949 => true,
+  3950 => true,
+  3951 => true,
+  3952 => true,
+  3992 => true,
+  4029 => true,
+  4045 => true,
+  4294 => true,
+  4296 => true,
+  4297 => true,
+  4298 => true,
+  4299 => true,
+  4300 => true,
+  4302 => true,
+  4303 => true,
+  4447 => true,
+  4448 => true,
+  4681 => true,
+  4686 => true,
+  4687 => true,
+  4695 => true,
+  4697 => true,
+  4702 => true,
+  4703 => true,
+  4745 => true,
+  4750 => true,
+  4751 => true,
+  4785 => true,
+  4790 => true,
+  4791 => true,
+  4799 => true,
+  4801 => true,
+  4806 => true,
+  4807 => true,
+  4823 => true,
+  4881 => true,
+  4886 => true,
+  4887 => true,
+  4955 => true,
+  4956 => true,
+  4989 => true,
+  4990 => true,
+  4991 => true,
+  5018 => true,
+  5019 => true,
+  5020 => true,
+  5021 => true,
+  5022 => true,
+  5023 => true,
+  5110 => true,
+  5111 => true,
+  5118 => true,
+  5119 => true,
+  5760 => true,
+  5789 => true,
+  5790 => true,
+  5791 => true,
+  5881 => true,
+  5882 => true,
+  5883 => true,
+  5884 => true,
+  5885 => true,
+  5886 => true,
+  5887 => true,
+  5901 => true,
+  5909 => true,
+  5910 => true,
+  5911 => true,
+  5912 => true,
+  5913 => true,
+  5914 => true,
+  5915 => true,
+  5916 => true,
+  5917 => true,
+  5918 => true,
+  5919 => true,
+  5943 => true,
+  5944 => true,
+  5945 => true,
+  5946 => true,
+  5947 => true,
+  5948 => true,
+  5949 => true,
+  5950 => true,
+  5951 => true,
+  5972 => true,
+  5973 => true,
+  5974 => true,
+  5975 => true,
+  5976 => true,
+  5977 => true,
+  5978 => true,
+  5979 => true,
+  5980 => true,
+  5981 => true,
+  5982 => true,
+  5983 => true,
+  5997 => true,
+  6001 => true,
+  6004 => true,
+  6005 => true,
+  6006 => true,
+  6007 => true,
+  6008 => true,
+  6009 => true,
+  6010 => true,
+  6011 => true,
+  6012 => true,
+  6013 => true,
+  6014 => true,
+  6015 => true,
+  6068 => true,
+  6069 => true,
+  6110 => true,
+  6111 => true,
+  6122 => true,
+  6123 => true,
+  6124 => true,
+  6125 => true,
+  6126 => true,
+  6127 => true,
+  6138 => true,
+  6139 => true,
+  6140 => true,
+  6141 => true,
+  6142 => true,
+  6143 => true,
+  6150 => true,
+  6158 => true,
+  6159 => true,
+  6170 => true,
+  6171 => true,
+  6172 => true,
+  6173 => true,
+  6174 => true,
+  6175 => true,
+  6265 => true,
+  6266 => true,
+  6267 => true,
+  6268 => true,
+  6269 => true,
+  6270 => true,
+  6271 => true,
+  6315 => true,
+  6316 => true,
+  6317 => true,
+  6318 => true,
+  6319 => true,
+  6390 => true,
+  6391 => true,
+  6392 => true,
+  6393 => true,
+  6394 => true,
+  6395 => true,
+  6396 => true,
+  6397 => true,
+  6398 => true,
+  6399 => true,
+  6431 => true,
+  6444 => true,
+  6445 => true,
+  6446 => true,
+  6447 => true,
+  6460 => true,
+  6461 => true,
+  6462 => true,
+  6463 => true,
+  6465 => true,
+  6466 => true,
+  6467 => true,
+  6510 => true,
+  6511 => true,
+  6517 => true,
+  6518 => true,
+  6519 => true,
+  6520 => true,
+  6521 => true,
+  6522 => true,
+  6523 => true,
+  6524 => true,
+  6525 => true,
+  6526 => true,
+  6527 => true,
+  6572 => true,
+  6573 => true,
+  6574 => true,
+  6575 => true,
+  6602 => true,
+  6603 => true,
+  6604 => true,
+  6605 => true,
+  6606 => true,
+  6607 => true,
+  6619 => true,
+  6620 => true,
+  6621 => true,
+  6684 => true,
+  6685 => true,
+  6751 => true,
+  6781 => true,
+  6782 => true,
+  6794 => true,
+  6795 => true,
+  6796 => true,
+  6797 => true,
+  6798 => true,
+  6799 => true,
+  6810 => true,
+  6811 => true,
+  6812 => true,
+  6813 => true,
+  6814 => true,
+  6815 => true,
+  6830 => true,
+  6831 => true,
+  6988 => true,
+  6989 => true,
+  6990 => true,
+  6991 => true,
+  7037 => true,
+  7038 => true,
+  7039 => true,
+  7156 => true,
+  7157 => true,
+  7158 => true,
+  7159 => true,
+  7160 => true,
+  7161 => true,
+  7162 => true,
+  7163 => true,
+  7224 => true,
+  7225 => true,
+  7226 => true,
+  7242 => true,
+  7243 => true,
+  7244 => true,
+  7305 => true,
+  7306 => true,
+  7307 => true,
+  7308 => true,
+  7309 => true,
+  7310 => true,
+  7311 => true,
+  7355 => true,
+  7356 => true,
+  7368 => true,
+  7369 => true,
+  7370 => true,
+  7371 => true,
+  7372 => true,
+  7373 => true,
+  7374 => true,
+  7375 => true,
+  7419 => true,
+  7420 => true,
+  7421 => true,
+  7422 => true,
+  7423 => true,
+  7674 => true,
+  7958 => true,
+  7959 => true,
+  7966 => true,
+  7967 => true,
+  8006 => true,
+  8007 => true,
+  8014 => true,
+  8015 => true,
+  8024 => true,
+  8026 => true,
+  8028 => true,
+  8030 => true,
+  8062 => true,
+  8063 => true,
+  8117 => true,
+  8133 => true,
+  8148 => true,
+  8149 => true,
+  8156 => true,
+  8176 => true,
+  8177 => true,
+  8181 => true,
+  8191 => true,
+  8206 => true,
+  8207 => true,
+  8228 => true,
+  8229 => true,
+  8230 => true,
+  8232 => true,
+  8233 => true,
+  8234 => true,
+  8235 => true,
+  8236 => true,
+  8237 => true,
+  8238 => true,
+  8289 => true,
+  8290 => true,
+  8291 => true,
+  8293 => true,
+  8294 => true,
+  8295 => true,
+  8296 => true,
+  8297 => true,
+  8298 => true,
+  8299 => true,
+  8300 => true,
+  8301 => true,
+  8302 => true,
+  8303 => true,
+  8306 => true,
+  8307 => true,
+  8335 => true,
+  8349 => true,
+  8350 => true,
+  8351 => true,
+  8384 => true,
+  8385 => true,
+  8386 => true,
+  8387 => true,
+  8388 => true,
+  8389 => true,
+  8390 => true,
+  8391 => true,
+  8392 => true,
+  8393 => true,
+  8394 => true,
+  8395 => true,
+  8396 => true,
+  8397 => true,
+  8398 => true,
+  8399 => true,
+  8433 => true,
+  8434 => true,
+  8435 => true,
+  8436 => true,
+  8437 => true,
+  8438 => true,
+  8439 => true,
+  8440 => true,
+  8441 => true,
+  8442 => true,
+  8443 => true,
+  8444 => true,
+  8445 => true,
+  8446 => true,
+  8447 => true,
+  8498 => true,
+  8579 => true,
+  8588 => true,
+  8589 => true,
+  8590 => true,
+  8591 => true,
+  9255 => true,
+  9256 => true,
+  9257 => true,
+  9258 => true,
+  9259 => true,
+  9260 => true,
+  9261 => true,
+  9262 => true,
+  9263 => true,
+  9264 => true,
+  9265 => true,
+  9266 => true,
+  9267 => true,
+  9268 => true,
+  9269 => true,
+  9270 => true,
+  9271 => true,
+  9272 => true,
+  9273 => true,
+  9274 => true,
+  9275 => true,
+  9276 => true,
+  9277 => true,
+  9278 => true,
+  9279 => true,
+  9291 => true,
+  9292 => true,
+  9293 => true,
+  9294 => true,
+  9295 => true,
+  9296 => true,
+  9297 => true,
+  9298 => true,
+  9299 => true,
+  9300 => true,
+  9301 => true,
+  9302 => true,
+  9303 => true,
+  9304 => true,
+  9305 => true,
+  9306 => true,
+  9307 => true,
+  9308 => true,
+  9309 => true,
+  9310 => true,
+  9311 => true,
+  9352 => true,
+  9353 => true,
+  9354 => true,
+  9355 => true,
+  9356 => true,
+  9357 => true,
+  9358 => true,
+  9359 => true,
+  9360 => true,
+  9361 => true,
+  9362 => true,
+  9363 => true,
+  9364 => true,
+  9365 => true,
+  9366 => true,
+  9367 => true,
+  9368 => true,
+  9369 => true,
+  9370 => true,
+  9371 => true,
+  11124 => true,
+  11125 => true,
+  11158 => true,
+  11311 => true,
+  11359 => true,
+  11508 => true,
+  11509 => true,
+  11510 => true,
+  11511 => true,
+  11512 => true,
+  11558 => true,
+  11560 => true,
+  11561 => true,
+  11562 => true,
+  11563 => true,
+  11564 => true,
+  11566 => true,
+  11567 => true,
+  11624 => true,
+  11625 => true,
+  11626 => true,
+  11627 => true,
+  11628 => true,
+  11629 => true,
+  11630 => true,
+  11633 => true,
+  11634 => true,
+  11635 => true,
+  11636 => true,
+  11637 => true,
+  11638 => true,
+  11639 => true,
+  11640 => true,
+  11641 => true,
+  11642 => true,
+  11643 => true,
+  11644 => true,
+  11645 => true,
+  11646 => true,
+  11671 => true,
+  11672 => true,
+  11673 => true,
+  11674 => true,
+  11675 => true,
+  11676 => true,
+  11677 => true,
+  11678 => true,
+  11679 => true,
+  11687 => true,
+  11695 => true,
+  11703 => true,
+  11711 => true,
+  11719 => true,
+  11727 => true,
+  11735 => true,
+  11743 => true,
+  11930 => true,
+  12020 => true,
+  12021 => true,
+  12022 => true,
+  12023 => true,
+  12024 => true,
+  12025 => true,
+  12026 => true,
+  12027 => true,
+  12028 => true,
+  12029 => true,
+  12030 => true,
+  12031 => true,
+  12246 => true,
+  12247 => true,
+  12248 => true,
+  12249 => true,
+  12250 => true,
+  12251 => true,
+  12252 => true,
+  12253 => true,
+  12254 => true,
+  12255 => true,
+  12256 => true,
+  12257 => true,
+  12258 => true,
+  12259 => true,
+  12260 => true,
+  12261 => true,
+  12262 => true,
+  12263 => true,
+  12264 => true,
+  12265 => true,
+  12266 => true,
+  12267 => true,
+  12268 => true,
+  12269 => true,
+  12270 => true,
+  12271 => true,
+  12272 => true,
+  12273 => true,
+  12274 => true,
+  12275 => true,
+  12276 => true,
+  12277 => true,
+  12278 => true,
+  12279 => true,
+  12280 => true,
+  12281 => true,
+  12282 => true,
+  12283 => true,
+  12284 => true,
+  12285 => true,
+  12286 => true,
+  12287 => true,
+  12352 => true,
+  12439 => true,
+  12440 => true,
+  12544 => true,
+  12545 => true,
+  12546 => true,
+  12547 => true,
+  12548 => true,
+  12592 => true,
+  12644 => true,
+  12687 => true,
+  12772 => true,
+  12773 => true,
+  12774 => true,
+  12775 => true,
+  12776 => true,
+  12777 => true,
+  12778 => true,
+  12779 => true,
+  12780 => true,
+  12781 => true,
+  12782 => true,
+  12783 => true,
+  12831 => true,
+  13250 => true,
+  13255 => true,
+  13272 => true,
+  40957 => true,
+  40958 => true,
+  40959 => true,
+  42125 => true,
+  42126 => true,
+  42127 => true,
+  42183 => true,
+  42184 => true,
+  42185 => true,
+  42186 => true,
+  42187 => true,
+  42188 => true,
+  42189 => true,
+  42190 => true,
+  42191 => true,
+  42540 => true,
+  42541 => true,
+  42542 => true,
+  42543 => true,
+  42544 => true,
+  42545 => true,
+  42546 => true,
+  42547 => true,
+  42548 => true,
+  42549 => true,
+  42550 => true,
+  42551 => true,
+  42552 => true,
+  42553 => true,
+  42554 => true,
+  42555 => true,
+  42556 => true,
+  42557 => true,
+  42558 => true,
+  42559 => true,
+  42744 => true,
+  42745 => true,
+  42746 => true,
+  42747 => true,
+  42748 => true,
+  42749 => true,
+  42750 => true,
+  42751 => true,
+  42944 => true,
+  42945 => true,
+  43053 => true,
+  43054 => true,
+  43055 => true,
+  43066 => true,
+  43067 => true,
+  43068 => true,
+  43069 => true,
+  43070 => true,
+  43071 => true,
+  43128 => true,
+  43129 => true,
+  43130 => true,
+  43131 => true,
+  43132 => true,
+  43133 => true,
+  43134 => true,
+  43135 => true,
+  43206 => true,
+  43207 => true,
+  43208 => true,
+  43209 => true,
+  43210 => true,
+  43211 => true,
+  43212 => true,
+  43213 => true,
+  43226 => true,
+  43227 => true,
+  43228 => true,
+  43229 => true,
+  43230 => true,
+  43231 => true,
+  43348 => true,
+  43349 => true,
+  43350 => true,
+  43351 => true,
+  43352 => true,
+  43353 => true,
+  43354 => true,
+  43355 => true,
+  43356 => true,
+  43357 => true,
+  43358 => true,
+  43389 => true,
+  43390 => true,
+  43391 => true,
+  43470 => true,
+  43482 => true,
+  43483 => true,
+  43484 => true,
+  43485 => true,
+  43519 => true,
+  43575 => true,
+  43576 => true,
+  43577 => true,
+  43578 => true,
+  43579 => true,
+  43580 => true,
+  43581 => true,
+  43582 => true,
+  43583 => true,
+  43598 => true,
+  43599 => true,
+  43610 => true,
+  43611 => true,
+  43715 => true,
+  43716 => true,
+  43717 => true,
+  43718 => true,
+  43719 => true,
+  43720 => true,
+  43721 => true,
+  43722 => true,
+  43723 => true,
+  43724 => true,
+  43725 => true,
+  43726 => true,
+  43727 => true,
+  43728 => true,
+  43729 => true,
+  43730 => true,
+  43731 => true,
+  43732 => true,
+  43733 => true,
+  43734 => true,
+  43735 => true,
+  43736 => true,
+  43737 => true,
+  43738 => true,
+  43767 => true,
+  43768 => true,
+  43769 => true,
+  43770 => true,
+  43771 => true,
+  43772 => true,
+  43773 => true,
+  43774 => true,
+  43775 => true,
+  43776 => true,
+  43783 => true,
+  43784 => true,
+  43791 => true,
+  43792 => true,
+  43799 => true,
+  43800 => true,
+  43801 => true,
+  43802 => true,
+  43803 => true,
+  43804 => true,
+  43805 => true,
+  43806 => true,
+  43807 => true,
+  43815 => true,
+  43823 => true,
+  43884 => true,
+  43885 => true,
+  43886 => true,
+  43887 => true,
+  44014 => true,
+  44015 => true,
+  44026 => true,
+  44027 => true,
+  44028 => true,
+  44029 => true,
+  44030 => true,
+  44031 => true,
+  55204 => true,
+  55205 => true,
+  55206 => true,
+  55207 => true,
+  55208 => true,
+  55209 => true,
+  55210 => true,
+  55211 => true,
+  55212 => true,
+  55213 => true,
+  55214 => true,
+  55215 => true,
+  55239 => true,
+  55240 => true,
+  55241 => true,
+  55242 => true,
+  55292 => true,
+  55293 => true,
+  55294 => true,
+  55295 => true,
+  64110 => true,
+  64111 => true,
+  64263 => true,
+  64264 => true,
+  64265 => true,
+  64266 => true,
+  64267 => true,
+  64268 => true,
+  64269 => true,
+  64270 => true,
+  64271 => true,
+  64272 => true,
+  64273 => true,
+  64274 => true,
+  64280 => true,
+  64281 => true,
+  64282 => true,
+  64283 => true,
+  64284 => true,
+  64311 => true,
+  64317 => true,
+  64319 => true,
+  64322 => true,
+  64325 => true,
+  64450 => true,
+  64451 => true,
+  64452 => true,
+  64453 => true,
+  64454 => true,
+  64455 => true,
+  64456 => true,
+  64457 => true,
+  64458 => true,
+  64459 => true,
+  64460 => true,
+  64461 => true,
+  64462 => true,
+  64463 => true,
+  64464 => true,
+  64465 => true,
+  64466 => true,
+  64832 => true,
+  64833 => true,
+  64834 => true,
+  64835 => true,
+  64836 => true,
+  64837 => true,
+  64838 => true,
+  64839 => true,
+  64840 => true,
+  64841 => true,
+  64842 => true,
+  64843 => true,
+  64844 => true,
+  64845 => true,
+  64846 => true,
+  64847 => true,
+  64912 => true,
+  64913 => true,
+  64968 => true,
+  64969 => true,
+  64970 => true,
+  64971 => true,
+  64972 => true,
+  64973 => true,
+  64974 => true,
+  64975 => true,
+  65022 => true,
+  65023 => true,
+  65042 => true,
+  65049 => true,
+  65050 => true,
+  65051 => true,
+  65052 => true,
+  65053 => true,
+  65054 => true,
+  65055 => true,
+  65072 => true,
+  65106 => true,
+  65107 => true,
+  65127 => true,
+  65132 => true,
+  65133 => true,
+  65134 => true,
+  65135 => true,
+  65141 => true,
+  65277 => true,
+  65278 => true,
+  65280 => true,
+  65440 => true,
+  65471 => true,
+  65472 => true,
+  65473 => true,
+  65480 => true,
+  65481 => true,
+  65488 => true,
+  65489 => true,
+  65496 => true,
+  65497 => true,
+  65501 => true,
+  65502 => true,
+  65503 => true,
+  65511 => true,
+  65519 => true,
+  65520 => true,
+  65521 => true,
+  65522 => true,
+  65523 => true,
+  65524 => true,
+  65525 => true,
+  65526 => true,
+  65527 => true,
+  65528 => true,
+  65529 => true,
+  65530 => true,
+  65531 => true,
+  65532 => true,
+  65533 => true,
+  65534 => true,
+  65535 => true,
+  65548 => true,
+  65575 => true,
+  65595 => true,
+  65598 => true,
+  65614 => true,
+  65615 => true,
+  65787 => true,
+  65788 => true,
+  65789 => true,
+  65790 => true,
+  65791 => true,
+  65795 => true,
+  65796 => true,
+  65797 => true,
+  65798 => true,
+  65844 => true,
+  65845 => true,
+  65846 => true,
+  65935 => true,
+  65949 => true,
+  65950 => true,
+  65951 => true,
+  66205 => true,
+  66206 => true,
+  66207 => true,
+  66257 => true,
+  66258 => true,
+  66259 => true,
+  66260 => true,
+  66261 => true,
+  66262 => true,
+  66263 => true,
+  66264 => true,
+  66265 => true,
+  66266 => true,
+  66267 => true,
+  66268 => true,
+  66269 => true,
+  66270 => true,
+  66271 => true,
+  66300 => true,
+  66301 => true,
+  66302 => true,
+  66303 => true,
+  66340 => true,
+  66341 => true,
+  66342 => true,
+  66343 => true,
+  66344 => true,
+  66345 => true,
+  66346 => true,
+  66347 => true,
+  66348 => true,
+  66379 => true,
+  66380 => true,
+  66381 => true,
+  66382 => true,
+  66383 => true,
+  66427 => true,
+  66428 => true,
+  66429 => true,
+  66430 => true,
+  66431 => true,
+  66462 => true,
+  66500 => true,
+  66501 => true,
+  66502 => true,
+  66503 => true,
+  66718 => true,
+  66719 => true,
+  66730 => true,
+  66731 => true,
+  66732 => true,
+  66733 => true,
+  66734 => true,
+  66735 => true,
+  66772 => true,
+  66773 => true,
+  66774 => true,
+  66775 => true,
+  66812 => true,
+  66813 => true,
+  66814 => true,
+  66815 => true,
+  66856 => true,
+  66857 => true,
+  66858 => true,
+  66859 => true,
+  66860 => true,
+  66861 => true,
+  66862 => true,
+  66863 => true,
+  66916 => true,
+  66917 => true,
+  66918 => true,
+  66919 => true,
+  66920 => true,
+  66921 => true,
+  66922 => true,
+  66923 => true,
+  66924 => true,
+  66925 => true,
+  66926 => true,
+  67383 => true,
+  67384 => true,
+  67385 => true,
+  67386 => true,
+  67387 => true,
+  67388 => true,
+  67389 => true,
+  67390 => true,
+  67391 => true,
+  67414 => true,
+  67415 => true,
+  67416 => true,
+  67417 => true,
+  67418 => true,
+  67419 => true,
+  67420 => true,
+  67421 => true,
+  67422 => true,
+  67423 => true,
+  67590 => true,
+  67591 => true,
+  67593 => true,
+  67638 => true,
+  67641 => true,
+  67642 => true,
+  67643 => true,
+  67645 => true,
+  67646 => true,
+  67670 => true,
+  67743 => true,
+  67744 => true,
+  67745 => true,
+  67746 => true,
+  67747 => true,
+  67748 => true,
+  67749 => true,
+  67750 => true,
+  67827 => true,
+  67830 => true,
+  67831 => true,
+  67832 => true,
+  67833 => true,
+  67834 => true,
+  67868 => true,
+  67869 => true,
+  67870 => true,
+  67898 => true,
+  67899 => true,
+  67900 => true,
+  67901 => true,
+  67902 => true,
+  68024 => true,
+  68025 => true,
+  68026 => true,
+  68027 => true,
+  68048 => true,
+  68049 => true,
+  68100 => true,
+  68103 => true,
+  68104 => true,
+  68105 => true,
+  68106 => true,
+  68107 => true,
+  68116 => true,
+  68120 => true,
+  68150 => true,
+  68151 => true,
+  68155 => true,
+  68156 => true,
+  68157 => true,
+  68158 => true,
+  68169 => true,
+  68170 => true,
+  68171 => true,
+  68172 => true,
+  68173 => true,
+  68174 => true,
+  68175 => true,
+  68185 => true,
+  68186 => true,
+  68187 => true,
+  68188 => true,
+  68189 => true,
+  68190 => true,
+  68191 => true,
+  68327 => true,
+  68328 => true,
+  68329 => true,
+  68330 => true,
+  68343 => true,
+  68344 => true,
+  68345 => true,
+  68346 => true,
+  68347 => true,
+  68348 => true,
+  68349 => true,
+  68350 => true,
+  68351 => true,
+  68406 => true,
+  68407 => true,
+  68408 => true,
+  68438 => true,
+  68439 => true,
+  68467 => true,
+  68468 => true,
+  68469 => true,
+  68470 => true,
+  68471 => true,
+  68498 => true,
+  68499 => true,
+  68500 => true,
+  68501 => true,
+  68502 => true,
+  68503 => true,
+  68504 => true,
+  68509 => true,
+  68510 => true,
+  68511 => true,
+  68512 => true,
+  68513 => true,
+  68514 => true,
+  68515 => true,
+  68516 => true,
+  68517 => true,
+  68518 => true,
+  68519 => true,
+  68520 => true,
+  68787 => true,
+  68788 => true,
+  68789 => true,
+  68790 => true,
+  68791 => true,
+  68792 => true,
+  68793 => true,
+  68794 => true,
+  68795 => true,
+  68796 => true,
+  68797 => true,
+  68798 => true,
+  68799 => true,
+  68851 => true,
+  68852 => true,
+  68853 => true,
+  68854 => true,
+  68855 => true,
+  68856 => true,
+  68857 => true,
+  68904 => true,
+  68905 => true,
+  68906 => true,
+  68907 => true,
+  68908 => true,
+  68909 => true,
+  68910 => true,
+  68911 => true,
+  69247 => true,
+  69290 => true,
+  69294 => true,
+  69295 => true,
+  69416 => true,
+  69417 => true,
+  69418 => true,
+  69419 => true,
+  69420 => true,
+  69421 => true,
+  69422 => true,
+  69423 => true,
+  69580 => true,
+  69581 => true,
+  69582 => true,
+  69583 => true,
+  69584 => true,
+  69585 => true,
+  69586 => true,
+  69587 => true,
+  69588 => true,
+  69589 => true,
+  69590 => true,
+  69591 => true,
+  69592 => true,
+  69593 => true,
+  69594 => true,
+  69595 => true,
+  69596 => true,
+  69597 => true,
+  69598 => true,
+  69599 => true,
+  69623 => true,
+  69624 => true,
+  69625 => true,
+  69626 => true,
+  69627 => true,
+  69628 => true,
+  69629 => true,
+  69630 => true,
+  69631 => true,
+  69710 => true,
+  69711 => true,
+  69712 => true,
+  69713 => true,
+  69744 => true,
+  69745 => true,
+  69746 => true,
+  69747 => true,
+  69748 => true,
+  69749 => true,
+  69750 => true,
+  69751 => true,
+  69752 => true,
+  69753 => true,
+  69754 => true,
+  69755 => true,
+  69756 => true,
+  69757 => true,
+  69758 => true,
+  69821 => true,
+  69826 => true,
+  69827 => true,
+  69828 => true,
+  69829 => true,
+  69830 => true,
+  69831 => true,
+  69832 => true,
+  69833 => true,
+  69834 => true,
+  69835 => true,
+  69836 => true,
+  69837 => true,
+  69838 => true,
+  69839 => true,
+  69865 => true,
+  69866 => true,
+  69867 => true,
+  69868 => true,
+  69869 => true,
+  69870 => true,
+  69871 => true,
+  69882 => true,
+  69883 => true,
+  69884 => true,
+  69885 => true,
+  69886 => true,
+  69887 => true,
+  69941 => true,
+  69960 => true,
+  69961 => true,
+  69962 => true,
+  69963 => true,
+  69964 => true,
+  69965 => true,
+  69966 => true,
+  69967 => true,
+  70007 => true,
+  70008 => true,
+  70009 => true,
+  70010 => true,
+  70011 => true,
+  70012 => true,
+  70013 => true,
+  70014 => true,
+  70015 => true,
+  70112 => true,
+  70133 => true,
+  70134 => true,
+  70135 => true,
+  70136 => true,
+  70137 => true,
+  70138 => true,
+  70139 => true,
+  70140 => true,
+  70141 => true,
+  70142 => true,
+  70143 => true,
+  70162 => true,
+  70279 => true,
+  70281 => true,
+  70286 => true,
+  70302 => true,
+  70314 => true,
+  70315 => true,
+  70316 => true,
+  70317 => true,
+  70318 => true,
+  70319 => true,
+  70379 => true,
+  70380 => true,
+  70381 => true,
+  70382 => true,
+  70383 => true,
+  70394 => true,
+  70395 => true,
+  70396 => true,
+  70397 => true,
+  70398 => true,
+  70399 => true,
+  70404 => true,
+  70413 => true,
+  70414 => true,
+  70417 => true,
+  70418 => true,
+  70441 => true,
+  70449 => true,
+  70452 => true,
+  70458 => true,
+  70469 => true,
+  70470 => true,
+  70473 => true,
+  70474 => true,
+  70478 => true,
+  70479 => true,
+  70481 => true,
+  70482 => true,
+  70483 => true,
+  70484 => true,
+  70485 => true,
+  70486 => true,
+  70488 => true,
+  70489 => true,
+  70490 => true,
+  70491 => true,
+  70492 => true,
+  70500 => true,
+  70501 => true,
+  70509 => true,
+  70510 => true,
+  70511 => true,
+  70748 => true,
+  70754 => true,
+  70755 => true,
+  70756 => true,
+  70757 => true,
+  70758 => true,
+  70759 => true,
+  70760 => true,
+  70761 => true,
+  70762 => true,
+  70763 => true,
+  70764 => true,
+  70765 => true,
+  70766 => true,
+  70767 => true,
+  70768 => true,
+  70769 => true,
+  70770 => true,
+  70771 => true,
+  70772 => true,
+  70773 => true,
+  70774 => true,
+  70775 => true,
+  70776 => true,
+  70777 => true,
+  70778 => true,
+  70779 => true,
+  70780 => true,
+  70781 => true,
+  70782 => true,
+  70783 => true,
+  70856 => true,
+  70857 => true,
+  70858 => true,
+  70859 => true,
+  70860 => true,
+  70861 => true,
+  70862 => true,
+  70863 => true,
+  71094 => true,
+  71095 => true,
+  71237 => true,
+  71238 => true,
+  71239 => true,
+  71240 => true,
+  71241 => true,
+  71242 => true,
+  71243 => true,
+  71244 => true,
+  71245 => true,
+  71246 => true,
+  71247 => true,
+  71258 => true,
+  71259 => true,
+  71260 => true,
+  71261 => true,
+  71262 => true,
+  71263 => true,
+  71277 => true,
+  71278 => true,
+  71279 => true,
+  71280 => true,
+  71281 => true,
+  71282 => true,
+  71283 => true,
+  71284 => true,
+  71285 => true,
+  71286 => true,
+  71287 => true,
+  71288 => true,
+  71289 => true,
+  71290 => true,
+  71291 => true,
+  71292 => true,
+  71293 => true,
+  71294 => true,
+  71295 => true,
+  71353 => true,
+  71354 => true,
+  71355 => true,
+  71356 => true,
+  71357 => true,
+  71358 => true,
+  71359 => true,
+  71451 => true,
+  71452 => true,
+  71468 => true,
+  71469 => true,
+  71470 => true,
+  71471 => true,
+  71923 => true,
+  71924 => true,
+  71925 => true,
+  71926 => true,
+  71927 => true,
+  71928 => true,
+  71929 => true,
+  71930 => true,
+  71931 => true,
+  71932 => true,
+  71933 => true,
+  71934 => true,
+  71943 => true,
+  71944 => true,
+  71946 => true,
+  71947 => true,
+  71956 => true,
+  71959 => true,
+  71990 => true,
+  71993 => true,
+  71994 => true,
+  72007 => true,
+  72008 => true,
+  72009 => true,
+  72010 => true,
+  72011 => true,
+  72012 => true,
+  72013 => true,
+  72014 => true,
+  72015 => true,
+  72104 => true,
+  72105 => true,
+  72152 => true,
+  72153 => true,
+  72165 => true,
+  72166 => true,
+  72167 => true,
+  72168 => true,
+  72169 => true,
+  72170 => true,
+  72171 => true,
+  72172 => true,
+  72173 => true,
+  72174 => true,
+  72175 => true,
+  72176 => true,
+  72177 => true,
+  72178 => true,
+  72179 => true,
+  72180 => true,
+  72181 => true,
+  72182 => true,
+  72183 => true,
+  72184 => true,
+  72185 => true,
+  72186 => true,
+  72187 => true,
+  72188 => true,
+  72189 => true,
+  72190 => true,
+  72191 => true,
+  72264 => true,
+  72265 => true,
+  72266 => true,
+  72267 => true,
+  72268 => true,
+  72269 => true,
+  72270 => true,
+  72271 => true,
+  72355 => true,
+  72356 => true,
+  72357 => true,
+  72358 => true,
+  72359 => true,
+  72360 => true,
+  72361 => true,
+  72362 => true,
+  72363 => true,
+  72364 => true,
+  72365 => true,
+  72366 => true,
+  72367 => true,
+  72368 => true,
+  72369 => true,
+  72370 => true,
+  72371 => true,
+  72372 => true,
+  72373 => true,
+  72374 => true,
+  72375 => true,
+  72376 => true,
+  72377 => true,
+  72378 => true,
+  72379 => true,
+  72380 => true,
+  72381 => true,
+  72382 => true,
+  72383 => true,
+  72713 => true,
+  72759 => true,
+  72774 => true,
+  72775 => true,
+  72776 => true,
+  72777 => true,
+  72778 => true,
+  72779 => true,
+  72780 => true,
+  72781 => true,
+  72782 => true,
+  72783 => true,
+  72813 => true,
+  72814 => true,
+  72815 => true,
+  72848 => true,
+  72849 => true,
+  72872 => true,
+  72967 => true,
+  72970 => true,
+  73015 => true,
+  73016 => true,
+  73017 => true,
+  73019 => true,
+  73022 => true,
+  73032 => true,
+  73033 => true,
+  73034 => true,
+  73035 => true,
+  73036 => true,
+  73037 => true,
+  73038 => true,
+  73039 => true,
+  73050 => true,
+  73051 => true,
+  73052 => true,
+  73053 => true,
+  73054 => true,
+  73055 => true,
+  73062 => true,
+  73065 => true,
+  73103 => true,
+  73106 => true,
+  73113 => true,
+  73114 => true,
+  73115 => true,
+  73116 => true,
+  73117 => true,
+  73118 => true,
+  73119 => true,
+  73649 => true,
+  73650 => true,
+  73651 => true,
+  73652 => true,
+  73653 => true,
+  73654 => true,
+  73655 => true,
+  73656 => true,
+  73657 => true,
+  73658 => true,
+  73659 => true,
+  73660 => true,
+  73661 => true,
+  73662 => true,
+  73663 => true,
+  73714 => true,
+  73715 => true,
+  73716 => true,
+  73717 => true,
+  73718 => true,
+  73719 => true,
+  73720 => true,
+  73721 => true,
+  73722 => true,
+  73723 => true,
+  73724 => true,
+  73725 => true,
+  73726 => true,
+  74863 => true,
+  74869 => true,
+  74870 => true,
+  74871 => true,
+  74872 => true,
+  74873 => true,
+  74874 => true,
+  74875 => true,
+  74876 => true,
+  74877 => true,
+  74878 => true,
+  74879 => true,
+  78895 => true,
+  78896 => true,
+  78897 => true,
+  78898 => true,
+  78899 => true,
+  78900 => true,
+  78901 => true,
+  78902 => true,
+  78903 => true,
+  78904 => true,
+  92729 => true,
+  92730 => true,
+  92731 => true,
+  92732 => true,
+  92733 => true,
+  92734 => true,
+  92735 => true,
+  92767 => true,
+  92778 => true,
+  92779 => true,
+  92780 => true,
+  92781 => true,
+  92910 => true,
+  92911 => true,
+  92918 => true,
+  92919 => true,
+  92920 => true,
+  92921 => true,
+  92922 => true,
+  92923 => true,
+  92924 => true,
+  92925 => true,
+  92926 => true,
+  92927 => true,
+  92998 => true,
+  92999 => true,
+  93000 => true,
+  93001 => true,
+  93002 => true,
+  93003 => true,
+  93004 => true,
+  93005 => true,
+  93006 => true,
+  93007 => true,
+  93018 => true,
+  93026 => true,
+  93048 => true,
+  93049 => true,
+  93050 => true,
+  93051 => true,
+  93052 => true,
+  94027 => true,
+  94028 => true,
+  94029 => true,
+  94030 => true,
+  94088 => true,
+  94089 => true,
+  94090 => true,
+  94091 => true,
+  94092 => true,
+  94093 => true,
+  94094 => true,
+  94181 => true,
+  94182 => true,
+  94183 => true,
+  94184 => true,
+  94185 => true,
+  94186 => true,
+  94187 => true,
+  94188 => true,
+  94189 => true,
+  94190 => true,
+  94191 => true,
+  94194 => true,
+  94195 => true,
+  94196 => true,
+  94197 => true,
+  94198 => true,
+  94199 => true,
+  94200 => true,
+  94201 => true,
+  94202 => true,
+  94203 => true,
+  94204 => true,
+  94205 => true,
+  94206 => true,
+  94207 => true,
+  100344 => true,
+  100345 => true,
+  100346 => true,
+  100347 => true,
+  100348 => true,
+  100349 => true,
+  100350 => true,
+  100351 => true,
+  110931 => true,
+  110932 => true,
+  110933 => true,
+  110934 => true,
+  110935 => true,
+  110936 => true,
+  110937 => true,
+  110938 => true,
+  110939 => true,
+  110940 => true,
+  110941 => true,
+  110942 => true,
+  110943 => true,
+  110944 => true,
+  110945 => true,
+  110946 => true,
+  110947 => true,
+  110952 => true,
+  110953 => true,
+  110954 => true,
+  110955 => true,
+  110956 => true,
+  110957 => true,
+  110958 => true,
+  110959 => true,
+  113771 => true,
+  113772 => true,
+  113773 => true,
+  113774 => true,
+  113775 => true,
+  113789 => true,
+  113790 => true,
+  113791 => true,
+  113801 => true,
+  113802 => true,
+  113803 => true,
+  113804 => true,
+  113805 => true,
+  113806 => true,
+  113807 => true,
+  113818 => true,
+  113819 => true,
+  119030 => true,
+  119031 => true,
+  119032 => true,
+  119033 => true,
+  119034 => true,
+  119035 => true,
+  119036 => true,
+  119037 => true,
+  119038 => true,
+  119039 => true,
+  119079 => true,
+  119080 => true,
+  119155 => true,
+  119156 => true,
+  119157 => true,
+  119158 => true,
+  119159 => true,
+  119160 => true,
+  119161 => true,
+  119162 => true,
+  119273 => true,
+  119274 => true,
+  119275 => true,
+  119276 => true,
+  119277 => true,
+  119278 => true,
+  119279 => true,
+  119280 => true,
+  119281 => true,
+  119282 => true,
+  119283 => true,
+  119284 => true,
+  119285 => true,
+  119286 => true,
+  119287 => true,
+  119288 => true,
+  119289 => true,
+  119290 => true,
+  119291 => true,
+  119292 => true,
+  119293 => true,
+  119294 => true,
+  119295 => true,
+  119540 => true,
+  119541 => true,
+  119542 => true,
+  119543 => true,
+  119544 => true,
+  119545 => true,
+  119546 => true,
+  119547 => true,
+  119548 => true,
+  119549 => true,
+  119550 => true,
+  119551 => true,
+  119639 => true,
+  119640 => true,
+  119641 => true,
+  119642 => true,
+  119643 => true,
+  119644 => true,
+  119645 => true,
+  119646 => true,
+  119647 => true,
+  119893 => true,
+  119965 => true,
+  119968 => true,
+  119969 => true,
+  119971 => true,
+  119972 => true,
+  119975 => true,
+  119976 => true,
+  119981 => true,
+  119994 => true,
+  119996 => true,
+  120004 => true,
+  120070 => true,
+  120075 => true,
+  120076 => true,
+  120085 => true,
+  120093 => true,
+  120122 => true,
+  120127 => true,
+  120133 => true,
+  120135 => true,
+  120136 => true,
+  120137 => true,
+  120145 => true,
+  120486 => true,
+  120487 => true,
+  120780 => true,
+  120781 => true,
+  121484 => true,
+  121485 => true,
+  121486 => true,
+  121487 => true,
+  121488 => true,
+  121489 => true,
+  121490 => true,
+  121491 => true,
+  121492 => true,
+  121493 => true,
+  121494 => true,
+  121495 => true,
+  121496 => true,
+  121497 => true,
+  121498 => true,
+  121504 => true,
+  122887 => true,
+  122905 => true,
+  122906 => true,
+  122914 => true,
+  122917 => true,
+  123181 => true,
+  123182 => true,
+  123183 => true,
+  123198 => true,
+  123199 => true,
+  123210 => true,
+  123211 => true,
+  123212 => true,
+  123213 => true,
+  123642 => true,
+  123643 => true,
+  123644 => true,
+  123645 => true,
+  123646 => true,
+  125125 => true,
+  125126 => true,
+  125260 => true,
+  125261 => true,
+  125262 => true,
+  125263 => true,
+  125274 => true,
+  125275 => true,
+  125276 => true,
+  125277 => true,
+  126468 => true,
+  126496 => true,
+  126499 => true,
+  126501 => true,
+  126502 => true,
+  126504 => true,
+  126515 => true,
+  126520 => true,
+  126522 => true,
+  126524 => true,
+  126525 => true,
+  126526 => true,
+  126527 => true,
+  126528 => true,
+  126529 => true,
+  126531 => true,
+  126532 => true,
+  126533 => true,
+  126534 => true,
+  126536 => true,
+  126538 => true,
+  126540 => true,
+  126544 => true,
+  126547 => true,
+  126549 => true,
+  126550 => true,
+  126552 => true,
+  126554 => true,
+  126556 => true,
+  126558 => true,
+  126560 => true,
+  126563 => true,
+  126565 => true,
+  126566 => true,
+  126571 => true,
+  126579 => true,
+  126584 => true,
+  126589 => true,
+  126591 => true,
+  126602 => true,
+  126620 => true,
+  126621 => true,
+  126622 => true,
+  126623 => true,
+  126624 => true,
+  126628 => true,
+  126634 => true,
+  127020 => true,
+  127021 => true,
+  127022 => true,
+  127023 => true,
+  127124 => true,
+  127125 => true,
+  127126 => true,
+  127127 => true,
+  127128 => true,
+  127129 => true,
+  127130 => true,
+  127131 => true,
+  127132 => true,
+  127133 => true,
+  127134 => true,
+  127135 => true,
+  127151 => true,
+  127152 => true,
+  127168 => true,
+  127184 => true,
+  127222 => true,
+  127223 => true,
+  127224 => true,
+  127225 => true,
+  127226 => true,
+  127227 => true,
+  127228 => true,
+  127229 => true,
+  127230 => true,
+  127231 => true,
+  127232 => true,
+  127491 => true,
+  127492 => true,
+  127493 => true,
+  127494 => true,
+  127495 => true,
+  127496 => true,
+  127497 => true,
+  127498 => true,
+  127499 => true,
+  127500 => true,
+  127501 => true,
+  127502 => true,
+  127503 => true,
+  127548 => true,
+  127549 => true,
+  127550 => true,
+  127551 => true,
+  127561 => true,
+  127562 => true,
+  127563 => true,
+  127564 => true,
+  127565 => true,
+  127566 => true,
+  127567 => true,
+  127570 => true,
+  127571 => true,
+  127572 => true,
+  127573 => true,
+  127574 => true,
+  127575 => true,
+  127576 => true,
+  127577 => true,
+  127578 => true,
+  127579 => true,
+  127580 => true,
+  127581 => true,
+  127582 => true,
+  127583 => true,
+  128728 => true,
+  128729 => true,
+  128730 => true,
+  128731 => true,
+  128732 => true,
+  128733 => true,
+  128734 => true,
+  128735 => true,
+  128749 => true,
+  128750 => true,
+  128751 => true,
+  128765 => true,
+  128766 => true,
+  128767 => true,
+  128884 => true,
+  128885 => true,
+  128886 => true,
+  128887 => true,
+  128888 => true,
+  128889 => true,
+  128890 => true,
+  128891 => true,
+  128892 => true,
+  128893 => true,
+  128894 => true,
+  128895 => true,
+  128985 => true,
+  128986 => true,
+  128987 => true,
+  128988 => true,
+  128989 => true,
+  128990 => true,
+  128991 => true,
+  129004 => true,
+  129005 => true,
+  129006 => true,
+  129007 => true,
+  129008 => true,
+  129009 => true,
+  129010 => true,
+  129011 => true,
+  129012 => true,
+  129013 => true,
+  129014 => true,
+  129015 => true,
+  129016 => true,
+  129017 => true,
+  129018 => true,
+  129019 => true,
+  129020 => true,
+  129021 => true,
+  129022 => true,
+  129023 => true,
+  129036 => true,
+  129037 => true,
+  129038 => true,
+  129039 => true,
+  129096 => true,
+  129097 => true,
+  129098 => true,
+  129099 => true,
+  129100 => true,
+  129101 => true,
+  129102 => true,
+  129103 => true,
+  129114 => true,
+  129115 => true,
+  129116 => true,
+  129117 => true,
+  129118 => true,
+  129119 => true,
+  129160 => true,
+  129161 => true,
+  129162 => true,
+  129163 => true,
+  129164 => true,
+  129165 => true,
+  129166 => true,
+  129167 => true,
+  129198 => true,
+  129199 => true,
+  129401 => true,
+  129484 => true,
+  129620 => true,
+  129621 => true,
+  129622 => true,
+  129623 => true,
+  129624 => true,
+  129625 => true,
+  129626 => true,
+  129627 => true,
+  129628 => true,
+  129629 => true,
+  129630 => true,
+  129631 => true,
+  129646 => true,
+  129647 => true,
+  129653 => true,
+  129654 => true,
+  129655 => true,
+  129659 => true,
+  129660 => true,
+  129661 => true,
+  129662 => true,
+  129663 => true,
+  129671 => true,
+  129672 => true,
+  129673 => true,
+  129674 => true,
+  129675 => true,
+  129676 => true,
+  129677 => true,
+  129678 => true,
+  129679 => true,
+  129705 => true,
+  129706 => true,
+  129707 => true,
+  129708 => true,
+  129709 => true,
+  129710 => true,
+  129711 => true,
+  129719 => true,
+  129720 => true,
+  129721 => true,
+  129722 => true,
+  129723 => true,
+  129724 => true,
+  129725 => true,
+  129726 => true,
+  129727 => true,
+  129731 => true,
+  129732 => true,
+  129733 => true,
+  129734 => true,
+  129735 => true,
+  129736 => true,
+  129737 => true,
+  129738 => true,
+  129739 => true,
+  129740 => true,
+  129741 => true,
+  129742 => true,
+  129743 => true,
+  129939 => true,
+  131070 => true,
+  131071 => true,
+  177973 => true,
+  177974 => true,
+  177975 => true,
+  177976 => true,
+  177977 => true,
+  177978 => true,
+  177979 => true,
+  177980 => true,
+  177981 => true,
+  177982 => true,
+  177983 => true,
+  178206 => true,
+  178207 => true,
+  183970 => true,
+  183971 => true,
+  183972 => true,
+  183973 => true,
+  183974 => true,
+  183975 => true,
+  183976 => true,
+  183977 => true,
+  183978 => true,
+  183979 => true,
+  183980 => true,
+  183981 => true,
+  183982 => true,
+  183983 => true,
+  194664 => true,
+  194676 => true,
+  194847 => true,
+  194911 => true,
+  195007 => true,
+  196606 => true,
+  196607 => true,
+  262142 => true,
+  262143 => true,
+  327678 => true,
+  327679 => true,
+  393214 => true,
+  393215 => true,
+  458750 => true,
+  458751 => true,
+  524286 => true,
+  524287 => true,
+  589822 => true,
+  589823 => true,
+  655358 => true,
+  655359 => true,
+  720894 => true,
+  720895 => true,
+  786430 => true,
+  786431 => true,
+  851966 => true,
+  851967 => true,
+  917502 => true,
+  917503 => true,
+  917504 => true,
+  917505 => true,
+  917506 => true,
+  917507 => true,
+  917508 => true,
+  917509 => true,
+  917510 => true,
+  917511 => true,
+  917512 => true,
+  917513 => true,
+  917514 => true,
+  917515 => true,
+  917516 => true,
+  917517 => true,
+  917518 => true,
+  917519 => true,
+  917520 => true,
+  917521 => true,
+  917522 => true,
+  917523 => true,
+  917524 => true,
+  917525 => true,
+  917526 => true,
+  917527 => true,
+  917528 => true,
+  917529 => true,
+  917530 => true,
+  917531 => true,
+  917532 => true,
+  917533 => true,
+  917534 => true,
+  917535 => true,
+  983038 => true,
+  983039 => true,
+  1048574 => true,
+  1048575 => true,
+  1114110 => true,
+  1114111 => true,
+);
Index: vendor/symfony/polyfill-intl-normalizer/Normalizer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/Normalizer.php b/vendor/symfony/polyfill-intl-normalizer/Normalizer.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/Normalizer.php	(date 1725846310000)
@@ -0,0 +1,310 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Polyfill\Intl\Normalizer;
+
+/**
+ * Normalizer is a PHP fallback implementation of the Normalizer class provided by the intl extension.
+ *
+ * It has been validated with Unicode 6.3 Normalization Conformance Test.
+ * See http://www.unicode.org/reports/tr15/ for detailed info about Unicode normalizations.
+ *
+ * @author Nicolas Grekas <p@tchwork.com>
+ *
+ * @internal
+ */
+class Normalizer
+{
+    public const FORM_D = \Normalizer::FORM_D;
+    public const FORM_KD = \Normalizer::FORM_KD;
+    public const FORM_C = \Normalizer::FORM_C;
+    public const FORM_KC = \Normalizer::FORM_KC;
+    public const NFD = \Normalizer::NFD;
+    public const NFKD = \Normalizer::NFKD;
+    public const NFC = \Normalizer::NFC;
+    public const NFKC = \Normalizer::NFKC;
+
+    private static $C;
+    private static $D;
+    private static $KD;
+    private static $cC;
+    private static $ulenMask = ["\xC0" => 2, "\xD0" => 2, "\xE0" => 3, "\xF0" => 4];
+    private static $ASCII = "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F";
+
+    public static function isNormalized(string $s, int $form = self::FORM_C)
+    {
+        if (!\in_array($form, [self::NFD, self::NFKD, self::NFC, self::NFKC])) {
+            return false;
+        }
+        if (!isset($s[strspn($s, self::$ASCII)])) {
+            return true;
+        }
+        if (self::NFC == $form && preg_match('//u', $s) && !preg_match('/[^\x00-\x{2FF}]/u', $s)) {
+            return true;
+        }
+
+        return self::normalize($s, $form) === $s;
+    }
+
+    public static function normalize(string $s, int $form = self::FORM_C)
+    {
+        if (!preg_match('//u', $s)) {
+            return false;
+        }
+
+        switch ($form) {
+            case self::NFC: $C = true; $K = false; break;
+            case self::NFD: $C = false; $K = false; break;
+            case self::NFKC: $C = true; $K = true; break;
+            case self::NFKD: $C = false; $K = true; break;
+            default:
+                if (\defined('Normalizer::NONE') && \Normalizer::NONE == $form) {
+                    return $s;
+                }
+
+                if (80000 > \PHP_VERSION_ID) {
+                    return false;
+                }
+
+                throw new \ValueError('normalizer_normalize(): Argument #2 ($form) must be a a valid normalization form');
+        }
+
+        if ('' === $s) {
+            return '';
+        }
+
+        if ($K && null === self::$KD) {
+            self::$KD = self::getData('compatibilityDecomposition');
+        }
+
+        if (null === self::$D) {
+            self::$D = self::getData('canonicalDecomposition');
+            self::$cC = self::getData('combiningClass');
+        }
+
+        if (null !== $mbEncoding = (2 /* MB_OVERLOAD_STRING */ & (int) \ini_get('mbstring.func_overload')) ? mb_internal_encoding() : null) {
+            mb_internal_encoding('8bit');
+        }
+
+        $r = self::decompose($s, $K);
+
+        if ($C) {
+            if (null === self::$C) {
+                self::$C = self::getData('canonicalComposition');
+            }
+
+            $r = self::recompose($r);
+        }
+        if (null !== $mbEncoding) {
+            mb_internal_encoding($mbEncoding);
+        }
+
+        return $r;
+    }
+
+    private static function recompose($s)
+    {
+        $ASCII = self::$ASCII;
+        $compMap = self::$C;
+        $combClass = self::$cC;
+        $ulenMask = self::$ulenMask;
+
+        $result = $tail = '';
+
+        $i = $s[0] < "\x80" ? 1 : $ulenMask[$s[0] & "\xF0"];
+        $len = \strlen($s);
+
+        $lastUchr = substr($s, 0, $i);
+        $lastUcls = isset($combClass[$lastUchr]) ? 256 : 0;
+
+        while ($i < $len) {
+            if ($s[$i] < "\x80") {
+                // ASCII chars
+
+                if ($tail) {
+                    $lastUchr .= $tail;
+                    $tail = '';
+                }
+
+                if ($j = strspn($s, $ASCII, $i + 1)) {
+                    $lastUchr .= substr($s, $i, $j);
+                    $i += $j;
+                }
+
+                $result .= $lastUchr;
+                $lastUchr = $s[$i];
+                $lastUcls = 0;
+                ++$i;
+                continue;
+            }
+
+            $ulen = $ulenMask[$s[$i] & "\xF0"];
+            $uchr = substr($s, $i, $ulen);
+
+            if ($lastUchr < "\xE1\x84\x80" || "\xE1\x84\x92" < $lastUchr
+                || $uchr < "\xE1\x85\xA1" || "\xE1\x85\xB5" < $uchr
+                || $lastUcls) {
+                // Table lookup and combining chars composition
+
+                $ucls = $combClass[$uchr] ?? 0;
+
+                if (isset($compMap[$lastUchr.$uchr]) && (!$lastUcls || $lastUcls < $ucls)) {
+                    $lastUchr = $compMap[$lastUchr.$uchr];
+                } elseif ($lastUcls = $ucls) {
+                    $tail .= $uchr;
+                } else {
+                    if ($tail) {
+                        $lastUchr .= $tail;
+                        $tail = '';
+                    }
+
+                    $result .= $lastUchr;
+                    $lastUchr = $uchr;
+                }
+            } else {
+                // Hangul chars
+
+                $L = \ord($lastUchr[2]) - 0x80;
+                $V = \ord($uchr[2]) - 0xA1;
+                $T = 0;
+
+                $uchr = substr($s, $i + $ulen, 3);
+
+                if ("\xE1\x86\xA7" <= $uchr && $uchr <= "\xE1\x87\x82") {
+                    $T = \ord($uchr[2]) - 0xA7;
+                    0 > $T && $T += 0x40;
+                    $ulen += 3;
+                }
+
+                $L = 0xAC00 + ($L * 21 + $V) * 28 + $T;
+                $lastUchr = \chr(0xE0 | $L >> 12).\chr(0x80 | $L >> 6 & 0x3F).\chr(0x80 | $L & 0x3F);
+            }
+
+            $i += $ulen;
+        }
+
+        return $result.$lastUchr.$tail;
+    }
+
+    private static function decompose($s, $c)
+    {
+        $result = '';
+
+        $ASCII = self::$ASCII;
+        $decompMap = self::$D;
+        $combClass = self::$cC;
+        $ulenMask = self::$ulenMask;
+        if ($c) {
+            $compatMap = self::$KD;
+        }
+
+        $c = [];
+        $i = 0;
+        $len = \strlen($s);
+
+        while ($i < $len) {
+            if ($s[$i] < "\x80") {
+                // ASCII chars
+
+                if ($c) {
+                    ksort($c);
+                    $result .= implode('', $c);
+                    $c = [];
+                }
+
+                $j = 1 + strspn($s, $ASCII, $i + 1);
+                $result .= substr($s, $i, $j);
+                $i += $j;
+                continue;
+            }
+
+            $ulen = $ulenMask[$s[$i] & "\xF0"];
+            $uchr = substr($s, $i, $ulen);
+            $i += $ulen;
+
+            if ($uchr < "\xEA\xB0\x80" || "\xED\x9E\xA3" < $uchr) {
+                // Table lookup
+
+                if ($uchr !== $j = $compatMap[$uchr] ?? ($decompMap[$uchr] ?? $uchr)) {
+                    $uchr = $j;
+
+                    $j = \strlen($uchr);
+                    $ulen = $uchr[0] < "\x80" ? 1 : $ulenMask[$uchr[0] & "\xF0"];
+
+                    if ($ulen != $j) {
+                        // Put trailing chars in $s
+
+                        $j -= $ulen;
+                        $i -= $j;
+
+                        if (0 > $i) {
+                            $s = str_repeat(' ', -$i).$s;
+                            $len -= $i;
+                            $i = 0;
+                        }
+
+                        while ($j--) {
+                            $s[$i + $j] = $uchr[$ulen + $j];
+                        }
+
+                        $uchr = substr($uchr, 0, $ulen);
+                    }
+                }
+                if (isset($combClass[$uchr])) {
+                    // Combining chars, for sorting
+
+                    if (!isset($c[$combClass[$uchr]])) {
+                        $c[$combClass[$uchr]] = '';
+                    }
+                    $c[$combClass[$uchr]] .= $uchr;
+                    continue;
+                }
+            } else {
+                // Hangul chars
+
+                $uchr = unpack('C*', $uchr);
+                $j = (($uchr[1] - 224) << 12) + (($uchr[2] - 128) << 6) + $uchr[3] - 0xAC80;
+
+                $uchr = "\xE1\x84".\chr(0x80 + (int) ($j / 588))
+                       ."\xE1\x85".\chr(0xA1 + (int) (($j % 588) / 28));
+
+                if ($j %= 28) {
+                    $uchr .= $j < 25
+                        ? ("\xE1\x86".\chr(0xA7 + $j))
+                        : ("\xE1\x87".\chr(0x67 + $j));
+                }
+            }
+            if ($c) {
+                ksort($c);
+                $result .= implode('', $c);
+                $c = [];
+            }
+
+            $result .= $uchr;
+        }
+
+        if ($c) {
+            ksort($c);
+            $result .= implode('', $c);
+        }
+
+        return $result;
+    }
+
+    private static function getData($file)
+    {
+        if (file_exists($file = __DIR__.'/Resources/unidata/'.$file.'.php')) {
+            return require $file;
+        }
+
+        return false;
+    }
+}
Index: vendor/symfony/polyfill-intl-normalizer/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/README.md b/vendor/symfony/polyfill-intl-normalizer/README.md
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/README.md	(date 1725846310000)
@@ -0,0 +1,14 @@
+Symfony Polyfill / Intl: Normalizer
+===================================
+
+This component provides a fallback implementation for the
+[`Normalizer`](https://php.net/Normalizer) class provided
+by the [Intl](https://php.net/intl) extension.
+
+More information can be found in the
+[main Polyfill README](https://github.com/symfony/polyfill/blob/main/README.md).
+
+License
+=======
+
+This library is released under the [MIT license](LICENSE).
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/mapped.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/mapped.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/mapped.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/mapped.php	(date 1725846310000)
@@ -0,0 +1,5778 @@
+<?php
+
+return array (
+  65 => 'a',
+  66 => 'b',
+  67 => 'c',
+  68 => 'd',
+  69 => 'e',
+  70 => 'f',
+  71 => 'g',
+  72 => 'h',
+  73 => 'i',
+  74 => 'j',
+  75 => 'k',
+  76 => 'l',
+  77 => 'm',
+  78 => 'n',
+  79 => 'o',
+  80 => 'p',
+  81 => 'q',
+  82 => 'r',
+  83 => 's',
+  84 => 't',
+  85 => 'u',
+  86 => 'v',
+  87 => 'w',
+  88 => 'x',
+  89 => 'y',
+  90 => 'z',
+  170 => 'a',
+  178 => '2',
+  179 => '3',
+  181 => 'μ',
+  185 => '1',
+  186 => 'o',
+  188 => '1⁄4',
+  189 => '1⁄2',
+  190 => '3⁄4',
+  192 => 'à',
+  193 => 'á',
+  194 => 'â',
+  195 => 'ã',
+  196 => 'ä',
+  197 => 'å',
+  198 => 'æ',
+  199 => 'ç',
+  200 => 'è',
+  201 => 'é',
+  202 => 'ê',
+  203 => 'ë',
+  204 => 'ì',
+  205 => 'í',
+  206 => 'î',
+  207 => 'ï',
+  208 => 'ð',
+  209 => 'ñ',
+  210 => 'ò',
+  211 => 'ó',
+  212 => 'ô',
+  213 => 'õ',
+  214 => 'ö',
+  216 => 'ø',
+  217 => 'ù',
+  218 => 'ú',
+  219 => 'û',
+  220 => 'ü',
+  221 => 'ý',
+  222 => 'þ',
+  256 => 'ā',
+  258 => 'ă',
+  260 => 'ą',
+  262 => 'ć',
+  264 => 'ĉ',
+  266 => 'ċ',
+  268 => 'č',
+  270 => 'ď',
+  272 => 'đ',
+  274 => 'ē',
+  276 => 'ĕ',
+  278 => 'ė',
+  280 => 'ę',
+  282 => 'ě',
+  284 => 'ĝ',
+  286 => 'ğ',
+  288 => 'ġ',
+  290 => 'ģ',
+  292 => 'ĥ',
+  294 => 'ħ',
+  296 => 'ĩ',
+  298 => 'ī',
+  300 => 'ĭ',
+  302 => 'į',
+  304 => 'i̇',
+  306 => 'ij',
+  307 => 'ij',
+  308 => 'ĵ',
+  310 => 'ķ',
+  313 => 'ĺ',
+  315 => 'ļ',
+  317 => 'ľ',
+  319 => 'l·',
+  320 => 'l·',
+  321 => 'ł',
+  323 => 'ń',
+  325 => 'ņ',
+  327 => 'ň',
+  329 => 'ʼn',
+  330 => 'ŋ',
+  332 => 'ō',
+  334 => 'ŏ',
+  336 => 'ő',
+  338 => 'œ',
+  340 => 'ŕ',
+  342 => 'ŗ',
+  344 => 'ř',
+  346 => 'ś',
+  348 => 'ŝ',
+  350 => 'ş',
+  352 => 'š',
+  354 => 'ţ',
+  356 => 'ť',
+  358 => 'ŧ',
+  360 => 'ũ',
+  362 => 'ū',
+  364 => 'ŭ',
+  366 => 'ů',
+  368 => 'ű',
+  370 => 'ų',
+  372 => 'ŵ',
+  374 => 'ŷ',
+  376 => 'ÿ',
+  377 => 'ź',
+  379 => 'ż',
+  381 => 'ž',
+  383 => 's',
+  385 => 'ɓ',
+  386 => 'ƃ',
+  388 => 'ƅ',
+  390 => 'ɔ',
+  391 => 'ƈ',
+  393 => 'ɖ',
+  394 => 'ɗ',
+  395 => 'ƌ',
+  398 => 'ǝ',
+  399 => 'ə',
+  400 => 'ɛ',
+  401 => 'ƒ',
+  403 => 'ɠ',
+  404 => 'ɣ',
+  406 => 'ɩ',
+  407 => 'ɨ',
+  408 => 'ƙ',
+  412 => 'ɯ',
+  413 => 'ɲ',
+  415 => 'ɵ',
+  416 => 'ơ',
+  418 => 'ƣ',
+  420 => 'ƥ',
+  422 => 'ʀ',
+  423 => 'ƨ',
+  425 => 'ʃ',
+  428 => 'ƭ',
+  430 => 'ʈ',
+  431 => 'ư',
+  433 => 'ʊ',
+  434 => 'ʋ',
+  435 => 'ƴ',
+  437 => 'ƶ',
+  439 => 'ʒ',
+  440 => 'ƹ',
+  444 => 'ƽ',
+  452 => 'dž',
+  453 => 'dž',
+  454 => 'dž',
+  455 => 'lj',
+  456 => 'lj',
+  457 => 'lj',
+  458 => 'nj',
+  459 => 'nj',
+  460 => 'nj',
+  461 => 'ǎ',
+  463 => 'ǐ',
+  465 => 'ǒ',
+  467 => 'ǔ',
+  469 => 'ǖ',
+  471 => 'ǘ',
+  473 => 'ǚ',
+  475 => 'ǜ',
+  478 => 'ǟ',
+  480 => 'ǡ',
+  482 => 'ǣ',
+  484 => 'ǥ',
+  486 => 'ǧ',
+  488 => 'ǩ',
+  490 => 'ǫ',
+  492 => 'ǭ',
+  494 => 'ǯ',
+  497 => 'dz',
+  498 => 'dz',
+  499 => 'dz',
+  500 => 'ǵ',
+  502 => 'ƕ',
+  503 => 'ƿ',
+  504 => 'ǹ',
+  506 => 'ǻ',
+  508 => 'ǽ',
+  510 => 'ǿ',
+  512 => 'ȁ',
+  514 => 'ȃ',
+  516 => 'ȅ',
+  518 => 'ȇ',
+  520 => 'ȉ',
+  522 => 'ȋ',
+  524 => 'ȍ',
+  526 => 'ȏ',
+  528 => 'ȑ',
+  530 => 'ȓ',
+  532 => 'ȕ',
+  534 => 'ȗ',
+  536 => 'ș',
+  538 => 'ț',
+  540 => 'ȝ',
+  542 => 'ȟ',
+  544 => 'ƞ',
+  546 => 'ȣ',
+  548 => 'ȥ',
+  550 => 'ȧ',
+  552 => 'ȩ',
+  554 => 'ȫ',
+  556 => 'ȭ',
+  558 => 'ȯ',
+  560 => 'ȱ',
+  562 => 'ȳ',
+  570 => 'ⱥ',
+  571 => 'ȼ',
+  573 => 'ƚ',
+  574 => 'ⱦ',
+  577 => 'ɂ',
+  579 => 'ƀ',
+  580 => 'ʉ',
+  581 => 'ʌ',
+  582 => 'ɇ',
+  584 => 'ɉ',
+  586 => 'ɋ',
+  588 => 'ɍ',
+  590 => 'ɏ',
+  688 => 'h',
+  689 => 'ɦ',
+  690 => 'j',
+  691 => 'r',
+  692 => 'ɹ',
+  693 => 'ɻ',
+  694 => 'ʁ',
+  695 => 'w',
+  696 => 'y',
+  736 => 'ɣ',
+  737 => 'l',
+  738 => 's',
+  739 => 'x',
+  740 => 'ʕ',
+  832 => '̀',
+  833 => '́',
+  835 => '̓',
+  836 => '̈́',
+  837 => 'ι',
+  880 => 'ͱ',
+  882 => 'ͳ',
+  884 => 'ʹ',
+  886 => 'ͷ',
+  895 => 'ϳ',
+  902 => 'ά',
+  903 => '·',
+  904 => 'έ',
+  905 => 'ή',
+  906 => 'ί',
+  908 => 'ό',
+  910 => 'ύ',
+  911 => 'ώ',
+  913 => 'α',
+  914 => 'β',
+  915 => 'γ',
+  916 => 'δ',
+  917 => 'ε',
+  918 => 'ζ',
+  919 => 'η',
+  920 => 'θ',
+  921 => 'ι',
+  922 => 'κ',
+  923 => 'λ',
+  924 => 'μ',
+  925 => 'ν',
+  926 => 'ξ',
+  927 => 'ο',
+  928 => 'π',
+  929 => 'ρ',
+  931 => 'σ',
+  932 => 'τ',
+  933 => 'υ',
+  934 => 'φ',
+  935 => 'χ',
+  936 => 'ψ',
+  937 => 'ω',
+  938 => 'ϊ',
+  939 => 'ϋ',
+  975 => 'ϗ',
+  976 => 'β',
+  977 => 'θ',
+  978 => 'υ',
+  979 => 'ύ',
+  980 => 'ϋ',
+  981 => 'φ',
+  982 => 'π',
+  984 => 'ϙ',
+  986 => 'ϛ',
+  988 => 'ϝ',
+  990 => 'ϟ',
+  992 => 'ϡ',
+  994 => 'ϣ',
+  996 => 'ϥ',
+  998 => 'ϧ',
+  1000 => 'ϩ',
+  1002 => 'ϫ',
+  1004 => 'ϭ',
+  1006 => 'ϯ',
+  1008 => 'κ',
+  1009 => 'ρ',
+  1010 => 'σ',
+  1012 => 'θ',
+  1013 => 'ε',
+  1015 => 'ϸ',
+  1017 => 'σ',
+  1018 => 'ϻ',
+  1021 => 'ͻ',
+  1022 => 'ͼ',
+  1023 => 'ͽ',
+  1024 => 'ѐ',
+  1025 => 'ё',
+  1026 => 'ђ',
+  1027 => 'ѓ',
+  1028 => 'є',
+  1029 => 'ѕ',
+  1030 => 'і',
+  1031 => 'ї',
+  1032 => 'ј',
+  1033 => 'љ',
+  1034 => 'њ',
+  1035 => 'ћ',
+  1036 => 'ќ',
+  1037 => 'ѝ',
+  1038 => 'ў',
+  1039 => 'џ',
+  1040 => 'а',
+  1041 => 'б',
+  1042 => 'в',
+  1043 => 'г',
+  1044 => 'д',
+  1045 => 'е',
+  1046 => 'ж',
+  1047 => 'з',
+  1048 => 'и',
+  1049 => 'й',
+  1050 => 'к',
+  1051 => 'л',
+  1052 => 'м',
+  1053 => 'н',
+  1054 => 'о',
+  1055 => 'п',
+  1056 => 'р',
+  1057 => 'с',
+  1058 => 'т',
+  1059 => 'у',
+  1060 => 'ф',
+  1061 => 'х',
+  1062 => 'ц',
+  1063 => 'ч',
+  1064 => 'ш',
+  1065 => 'щ',
+  1066 => 'ъ',
+  1067 => 'ы',
+  1068 => 'ь',
+  1069 => 'э',
+  1070 => 'ю',
+  1071 => 'я',
+  1120 => 'ѡ',
+  1122 => 'ѣ',
+  1124 => 'ѥ',
+  1126 => 'ѧ',
+  1128 => 'ѩ',
+  1130 => 'ѫ',
+  1132 => 'ѭ',
+  1134 => 'ѯ',
+  1136 => 'ѱ',
+  1138 => 'ѳ',
+  1140 => 'ѵ',
+  1142 => 'ѷ',
+  1144 => 'ѹ',
+  1146 => 'ѻ',
+  1148 => 'ѽ',
+  1150 => 'ѿ',
+  1152 => 'ҁ',
+  1162 => 'ҋ',
+  1164 => 'ҍ',
+  1166 => 'ҏ',
+  1168 => 'ґ',
+  1170 => 'ғ',
+  1172 => 'ҕ',
+  1174 => 'җ',
+  1176 => 'ҙ',
+  1178 => 'қ',
+  1180 => 'ҝ',
+  1182 => 'ҟ',
+  1184 => 'ҡ',
+  1186 => 'ң',
+  1188 => 'ҥ',
+  1190 => 'ҧ',
+  1192 => 'ҩ',
+  1194 => 'ҫ',
+  1196 => 'ҭ',
+  1198 => 'ү',
+  1200 => 'ұ',
+  1202 => 'ҳ',
+  1204 => 'ҵ',
+  1206 => 'ҷ',
+  1208 => 'ҹ',
+  1210 => 'һ',
+  1212 => 'ҽ',
+  1214 => 'ҿ',
+  1217 => 'ӂ',
+  1219 => 'ӄ',
+  1221 => 'ӆ',
+  1223 => 'ӈ',
+  1225 => 'ӊ',
+  1227 => 'ӌ',
+  1229 => 'ӎ',
+  1232 => 'ӑ',
+  1234 => 'ӓ',
+  1236 => 'ӕ',
+  1238 => 'ӗ',
+  1240 => 'ә',
+  1242 => 'ӛ',
+  1244 => 'ӝ',
+  1246 => 'ӟ',
+  1248 => 'ӡ',
+  1250 => 'ӣ',
+  1252 => 'ӥ',
+  1254 => 'ӧ',
+  1256 => 'ө',
+  1258 => 'ӫ',
+  1260 => 'ӭ',
+  1262 => 'ӯ',
+  1264 => 'ӱ',
+  1266 => 'ӳ',
+  1268 => 'ӵ',
+  1270 => 'ӷ',
+  1272 => 'ӹ',
+  1274 => 'ӻ',
+  1276 => 'ӽ',
+  1278 => 'ӿ',
+  1280 => 'ԁ',
+  1282 => 'ԃ',
+  1284 => 'ԅ',
+  1286 => 'ԇ',
+  1288 => 'ԉ',
+  1290 => 'ԋ',
+  1292 => 'ԍ',
+  1294 => 'ԏ',
+  1296 => 'ԑ',
+  1298 => 'ԓ',
+  1300 => 'ԕ',
+  1302 => 'ԗ',
+  1304 => 'ԙ',
+  1306 => 'ԛ',
+  1308 => 'ԝ',
+  1310 => 'ԟ',
+  1312 => 'ԡ',
+  1314 => 'ԣ',
+  1316 => 'ԥ',
+  1318 => 'ԧ',
+  1320 => 'ԩ',
+  1322 => 'ԫ',
+  1324 => 'ԭ',
+  1326 => 'ԯ',
+  1329 => 'ա',
+  1330 => 'բ',
+  1331 => 'գ',
+  1332 => 'դ',
+  1333 => 'ե',
+  1334 => 'զ',
+  1335 => 'է',
+  1336 => 'ը',
+  1337 => 'թ',
+  1338 => 'ժ',
+  1339 => 'ի',
+  1340 => 'լ',
+  1341 => 'խ',
+  1342 => 'ծ',
+  1343 => 'կ',
+  1344 => 'հ',
+  1345 => 'ձ',
+  1346 => 'ղ',
+  1347 => 'ճ',
+  1348 => 'մ',
+  1349 => 'յ',
+  1350 => 'ն',
+  1351 => 'շ',
+  1352 => 'ո',
+  1353 => 'չ',
+  1354 => 'պ',
+  1355 => 'ջ',
+  1356 => 'ռ',
+  1357 => 'ս',
+  1358 => 'վ',
+  1359 => 'տ',
+  1360 => 'ր',
+  1361 => 'ց',
+  1362 => 'ւ',
+  1363 => 'փ',
+  1364 => 'ք',
+  1365 => 'օ',
+  1366 => 'ֆ',
+  1415 => 'եւ',
+  1653 => 'اٴ',
+  1654 => 'وٴ',
+  1655 => 'ۇٴ',
+  1656 => 'يٴ',
+  2392 => 'क़',
+  2393 => 'ख़',
+  2394 => 'ग़',
+  2395 => 'ज़',
+  2396 => 'ड़',
+  2397 => 'ढ़',
+  2398 => 'फ़',
+  2399 => 'य़',
+  2524 => 'ড়',
+  2525 => 'ঢ়',
+  2527 => 'য়',
+  2611 => 'ਲ਼',
+  2614 => 'ਸ਼',
+  2649 => 'ਖ਼',
+  2650 => 'ਗ਼',
+  2651 => 'ਜ਼',
+  2654 => 'ਫ਼',
+  2908 => 'ଡ଼',
+  2909 => 'ଢ଼',
+  3635 => 'ํา',
+  3763 => 'ໍາ',
+  3804 => 'ຫນ',
+  3805 => 'ຫມ',
+  3852 => '་',
+  3907 => 'གྷ',
+  3917 => 'ཌྷ',
+  3922 => 'དྷ',
+  3927 => 'བྷ',
+  3932 => 'ཛྷ',
+  3945 => 'ཀྵ',
+  3955 => 'ཱི',
+  3957 => 'ཱུ',
+  3958 => 'ྲྀ',
+  3959 => 'ྲཱྀ',
+  3960 => 'ླྀ',
+  3961 => 'ླཱྀ',
+  3969 => 'ཱྀ',
+  3987 => 'ྒྷ',
+  3997 => 'ྜྷ',
+  4002 => 'ྡྷ',
+  4007 => 'ྦྷ',
+  4012 => 'ྫྷ',
+  4025 => 'ྐྵ',
+  4295 => 'ⴧ',
+  4301 => 'ⴭ',
+  4348 => 'ნ',
+  5112 => 'Ᏸ',
+  5113 => 'Ᏹ',
+  5114 => 'Ᏺ',
+  5115 => 'Ᏻ',
+  5116 => 'Ᏼ',
+  5117 => 'Ᏽ',
+  7296 => 'в',
+  7297 => 'д',
+  7298 => 'о',
+  7299 => 'с',
+  7300 => 'т',
+  7301 => 'т',
+  7302 => 'ъ',
+  7303 => 'ѣ',
+  7304 => 'ꙋ',
+  7312 => 'ა',
+  7313 => 'ბ',
+  7314 => 'გ',
+  7315 => 'დ',
+  7316 => 'ე',
+  7317 => 'ვ',
+  7318 => 'ზ',
+  7319 => 'თ',
+  7320 => 'ი',
+  7321 => 'კ',
+  7322 => 'ლ',
+  7323 => 'მ',
+  7324 => 'ნ',
+  7325 => 'ო',
+  7326 => 'პ',
+  7327 => 'ჟ',
+  7328 => 'რ',
+  7329 => 'ს',
+  7330 => 'ტ',
+  7331 => 'უ',
+  7332 => 'ფ',
+  7333 => 'ქ',
+  7334 => 'ღ',
+  7335 => 'ყ',
+  7336 => 'შ',
+  7337 => 'ჩ',
+  7338 => 'ც',
+  7339 => 'ძ',
+  7340 => 'წ',
+  7341 => 'ჭ',
+  7342 => 'ხ',
+  7343 => 'ჯ',
+  7344 => 'ჰ',
+  7345 => 'ჱ',
+  7346 => 'ჲ',
+  7347 => 'ჳ',
+  7348 => 'ჴ',
+  7349 => 'ჵ',
+  7350 => 'ჶ',
+  7351 => 'ჷ',
+  7352 => 'ჸ',
+  7353 => 'ჹ',
+  7354 => 'ჺ',
+  7357 => 'ჽ',
+  7358 => 'ჾ',
+  7359 => 'ჿ',
+  7468 => 'a',
+  7469 => 'æ',
+  7470 => 'b',
+  7472 => 'd',
+  7473 => 'e',
+  7474 => 'ǝ',
+  7475 => 'g',
+  7476 => 'h',
+  7477 => 'i',
+  7478 => 'j',
+  7479 => 'k',
+  7480 => 'l',
+  7481 => 'm',
+  7482 => 'n',
+  7484 => 'o',
+  7485 => 'ȣ',
+  7486 => 'p',
+  7487 => 'r',
+  7488 => 't',
+  7489 => 'u',
+  7490 => 'w',
+  7491 => 'a',
+  7492 => 'ɐ',
+  7493 => 'ɑ',
+  7494 => 'ᴂ',
+  7495 => 'b',
+  7496 => 'd',
+  7497 => 'e',
+  7498 => 'ə',
+  7499 => 'ɛ',
+  7500 => 'ɜ',
+  7501 => 'g',
+  7503 => 'k',
+  7504 => 'm',
+  7505 => 'ŋ',
+  7506 => 'o',
+  7507 => 'ɔ',
+  7508 => 'ᴖ',
+  7509 => 'ᴗ',
+  7510 => 'p',
+  7511 => 't',
+  7512 => 'u',
+  7513 => 'ᴝ',
+  7514 => 'ɯ',
+  7515 => 'v',
+  7516 => 'ᴥ',
+  7517 => 'β',
+  7518 => 'γ',
+  7519 => 'δ',
+  7520 => 'φ',
+  7521 => 'χ',
+  7522 => 'i',
+  7523 => 'r',
+  7524 => 'u',
+  7525 => 'v',
+  7526 => 'β',
+  7527 => 'γ',
+  7528 => 'ρ',
+  7529 => 'φ',
+  7530 => 'χ',
+  7544 => 'н',
+  7579 => 'ɒ',
+  7580 => 'c',
+  7581 => 'ɕ',
+  7582 => 'ð',
+  7583 => 'ɜ',
+  7584 => 'f',
+  7585 => 'ɟ',
+  7586 => 'ɡ',
+  7587 => 'ɥ',
+  7588 => 'ɨ',
+  7589 => 'ɩ',
+  7590 => 'ɪ',
+  7591 => 'ᵻ',
+  7592 => 'ʝ',
+  7593 => 'ɭ',
+  7594 => 'ᶅ',
+  7595 => 'ʟ',
+  7596 => 'ɱ',
+  7597 => 'ɰ',
+  7598 => 'ɲ',
+  7599 => 'ɳ',
+  7600 => 'ɴ',
+  7601 => 'ɵ',
+  7602 => 'ɸ',
+  7603 => 'ʂ',
+  7604 => 'ʃ',
+  7605 => 'ƫ',
+  7606 => 'ʉ',
+  7607 => 'ʊ',
+  7608 => 'ᴜ',
+  7609 => 'ʋ',
+  7610 => 'ʌ',
+  7611 => 'z',
+  7612 => 'ʐ',
+  7613 => 'ʑ',
+  7614 => 'ʒ',
+  7615 => 'θ',
+  7680 => 'ḁ',
+  7682 => 'ḃ',
+  7684 => 'ḅ',
+  7686 => 'ḇ',
+  7688 => 'ḉ',
+  7690 => 'ḋ',
+  7692 => 'ḍ',
+  7694 => 'ḏ',
+  7696 => 'ḑ',
+  7698 => 'ḓ',
+  7700 => 'ḕ',
+  7702 => 'ḗ',
+  7704 => 'ḙ',
+  7706 => 'ḛ',
+  7708 => 'ḝ',
+  7710 => 'ḟ',
+  7712 => 'ḡ',
+  7714 => 'ḣ',
+  7716 => 'ḥ',
+  7718 => 'ḧ',
+  7720 => 'ḩ',
+  7722 => 'ḫ',
+  7724 => 'ḭ',
+  7726 => 'ḯ',
+  7728 => 'ḱ',
+  7730 => 'ḳ',
+  7732 => 'ḵ',
+  7734 => 'ḷ',
+  7736 => 'ḹ',
+  7738 => 'ḻ',
+  7740 => 'ḽ',
+  7742 => 'ḿ',
+  7744 => 'ṁ',
+  7746 => 'ṃ',
+  7748 => 'ṅ',
+  7750 => 'ṇ',
+  7752 => 'ṉ',
+  7754 => 'ṋ',
+  7756 => 'ṍ',
+  7758 => 'ṏ',
+  7760 => 'ṑ',
+  7762 => 'ṓ',
+  7764 => 'ṕ',
+  7766 => 'ṗ',
+  7768 => 'ṙ',
+  7770 => 'ṛ',
+  7772 => 'ṝ',
+  7774 => 'ṟ',
+  7776 => 'ṡ',
+  7778 => 'ṣ',
+  7780 => 'ṥ',
+  7782 => 'ṧ',
+  7784 => 'ṩ',
+  7786 => 'ṫ',
+  7788 => 'ṭ',
+  7790 => 'ṯ',
+  7792 => 'ṱ',
+  7794 => 'ṳ',
+  7796 => 'ṵ',
+  7798 => 'ṷ',
+  7800 => 'ṹ',
+  7802 => 'ṻ',
+  7804 => 'ṽ',
+  7806 => 'ṿ',
+  7808 => 'ẁ',
+  7810 => 'ẃ',
+  7812 => 'ẅ',
+  7814 => 'ẇ',
+  7816 => 'ẉ',
+  7818 => 'ẋ',
+  7820 => 'ẍ',
+  7822 => 'ẏ',
+  7824 => 'ẑ',
+  7826 => 'ẓ',
+  7828 => 'ẕ',
+  7834 => 'aʾ',
+  7835 => 'ṡ',
+  7838 => 'ss',
+  7840 => 'ạ',
+  7842 => 'ả',
+  7844 => 'ấ',
+  7846 => 'ầ',
+  7848 => 'ẩ',
+  7850 => 'ẫ',
+  7852 => 'ậ',
+  7854 => 'ắ',
+  7856 => 'ằ',
+  7858 => 'ẳ',
+  7860 => 'ẵ',
+  7862 => 'ặ',
+  7864 => 'ẹ',
+  7866 => 'ẻ',
+  7868 => 'ẽ',
+  7870 => 'ế',
+  7872 => 'ề',
+  7874 => 'ể',
+  7876 => 'ễ',
+  7878 => 'ệ',
+  7880 => 'ỉ',
+  7882 => 'ị',
+  7884 => 'ọ',
+  7886 => 'ỏ',
+  7888 => 'ố',
+  7890 => 'ồ',
+  7892 => 'ổ',
+  7894 => 'ỗ',
+  7896 => 'ộ',
+  7898 => 'ớ',
+  7900 => 'ờ',
+  7902 => 'ở',
+  7904 => 'ỡ',
+  7906 => 'ợ',
+  7908 => 'ụ',
+  7910 => 'ủ',
+  7912 => 'ứ',
+  7914 => 'ừ',
+  7916 => 'ử',
+  7918 => 'ữ',
+  7920 => 'ự',
+  7922 => 'ỳ',
+  7924 => 'ỵ',
+  7926 => 'ỷ',
+  7928 => 'ỹ',
+  7930 => 'ỻ',
+  7932 => 'ỽ',
+  7934 => 'ỿ',
+  7944 => 'ἀ',
+  7945 => 'ἁ',
+  7946 => 'ἂ',
+  7947 => 'ἃ',
+  7948 => 'ἄ',
+  7949 => 'ἅ',
+  7950 => 'ἆ',
+  7951 => 'ἇ',
+  7960 => 'ἐ',
+  7961 => 'ἑ',
+  7962 => 'ἒ',
+  7963 => 'ἓ',
+  7964 => 'ἔ',
+  7965 => 'ἕ',
+  7976 => 'ἠ',
+  7977 => 'ἡ',
+  7978 => 'ἢ',
+  7979 => 'ἣ',
+  7980 => 'ἤ',
+  7981 => 'ἥ',
+  7982 => 'ἦ',
+  7983 => 'ἧ',
+  7992 => 'ἰ',
+  7993 => 'ἱ',
+  7994 => 'ἲ',
+  7995 => 'ἳ',
+  7996 => 'ἴ',
+  7997 => 'ἵ',
+  7998 => 'ἶ',
+  7999 => 'ἷ',
+  8008 => 'ὀ',
+  8009 => 'ὁ',
+  8010 => 'ὂ',
+  8011 => 'ὃ',
+  8012 => 'ὄ',
+  8013 => 'ὅ',
+  8025 => 'ὑ',
+  8027 => 'ὓ',
+  8029 => 'ὕ',
+  8031 => 'ὗ',
+  8040 => 'ὠ',
+  8041 => 'ὡ',
+  8042 => 'ὢ',
+  8043 => 'ὣ',
+  8044 => 'ὤ',
+  8045 => 'ὥ',
+  8046 => 'ὦ',
+  8047 => 'ὧ',
+  8049 => 'ά',
+  8051 => 'έ',
+  8053 => 'ή',
+  8055 => 'ί',
+  8057 => 'ό',
+  8059 => 'ύ',
+  8061 => 'ώ',
+  8064 => 'ἀι',
+  8065 => 'ἁι',
+  8066 => 'ἂι',
+  8067 => 'ἃι',
+  8068 => 'ἄι',
+  8069 => 'ἅι',
+  8070 => 'ἆι',
+  8071 => 'ἇι',
+  8072 => 'ἀι',
+  8073 => 'ἁι',
+  8074 => 'ἂι',
+  8075 => 'ἃι',
+  8076 => 'ἄι',
+  8077 => 'ἅι',
+  8078 => 'ἆι',
+  8079 => 'ἇι',
+  8080 => 'ἠι',
+  8081 => 'ἡι',
+  8082 => 'ἢι',
+  8083 => 'ἣι',
+  8084 => 'ἤι',
+  8085 => 'ἥι',
+  8086 => 'ἦι',
+  8087 => 'ἧι',
+  8088 => 'ἠι',
+  8089 => 'ἡι',
+  8090 => 'ἢι',
+  8091 => 'ἣι',
+  8092 => 'ἤι',
+  8093 => 'ἥι',
+  8094 => 'ἦι',
+  8095 => 'ἧι',
+  8096 => 'ὠι',
+  8097 => 'ὡι',
+  8098 => 'ὢι',
+  8099 => 'ὣι',
+  8100 => 'ὤι',
+  8101 => 'ὥι',
+  8102 => 'ὦι',
+  8103 => 'ὧι',
+  8104 => 'ὠι',
+  8105 => 'ὡι',
+  8106 => 'ὢι',
+  8107 => 'ὣι',
+  8108 => 'ὤι',
+  8109 => 'ὥι',
+  8110 => 'ὦι',
+  8111 => 'ὧι',
+  8114 => 'ὰι',
+  8115 => 'αι',
+  8116 => 'άι',
+  8119 => 'ᾶι',
+  8120 => 'ᾰ',
+  8121 => 'ᾱ',
+  8122 => 'ὰ',
+  8123 => 'ά',
+  8124 => 'αι',
+  8126 => 'ι',
+  8130 => 'ὴι',
+  8131 => 'ηι',
+  8132 => 'ήι',
+  8135 => 'ῆι',
+  8136 => 'ὲ',
+  8137 => 'έ',
+  8138 => 'ὴ',
+  8139 => 'ή',
+  8140 => 'ηι',
+  8147 => 'ΐ',
+  8152 => 'ῐ',
+  8153 => 'ῑ',
+  8154 => 'ὶ',
+  8155 => 'ί',
+  8163 => 'ΰ',
+  8168 => 'ῠ',
+  8169 => 'ῡ',
+  8170 => 'ὺ',
+  8171 => 'ύ',
+  8172 => 'ῥ',
+  8178 => 'ὼι',
+  8179 => 'ωι',
+  8180 => 'ώι',
+  8183 => 'ῶι',
+  8184 => 'ὸ',
+  8185 => 'ό',
+  8186 => 'ὼ',
+  8187 => 'ώ',
+  8188 => 'ωι',
+  8209 => '‐',
+  8243 => '′′',
+  8244 => '′′′',
+  8246 => '‵‵',
+  8247 => '‵‵‵',
+  8279 => '′′′′',
+  8304 => '0',
+  8305 => 'i',
+  8308 => '4',
+  8309 => '5',
+  8310 => '6',
+  8311 => '7',
+  8312 => '8',
+  8313 => '9',
+  8315 => '−',
+  8319 => 'n',
+  8320 => '0',
+  8321 => '1',
+  8322 => '2',
+  8323 => '3',
+  8324 => '4',
+  8325 => '5',
+  8326 => '6',
+  8327 => '7',
+  8328 => '8',
+  8329 => '9',
+  8331 => '−',
+  8336 => 'a',
+  8337 => 'e',
+  8338 => 'o',
+  8339 => 'x',
+  8340 => 'ə',
+  8341 => 'h',
+  8342 => 'k',
+  8343 => 'l',
+  8344 => 'm',
+  8345 => 'n',
+  8346 => 'p',
+  8347 => 's',
+  8348 => 't',
+  8360 => 'rs',
+  8450 => 'c',
+  8451 => '°c',
+  8455 => 'ɛ',
+  8457 => '°f',
+  8458 => 'g',
+  8459 => 'h',
+  8460 => 'h',
+  8461 => 'h',
+  8462 => 'h',
+  8463 => 'ħ',
+  8464 => 'i',
+  8465 => 'i',
+  8466 => 'l',
+  8467 => 'l',
+  8469 => 'n',
+  8470 => 'no',
+  8473 => 'p',
+  8474 => 'q',
+  8475 => 'r',
+  8476 => 'r',
+  8477 => 'r',
+  8480 => 'sm',
+  8481 => 'tel',
+  8482 => 'tm',
+  8484 => 'z',
+  8486 => 'ω',
+  8488 => 'z',
+  8490 => 'k',
+  8491 => 'å',
+  8492 => 'b',
+  8493 => 'c',
+  8495 => 'e',
+  8496 => 'e',
+  8497 => 'f',
+  8499 => 'm',
+  8500 => 'o',
+  8501 => 'א',
+  8502 => 'ב',
+  8503 => 'ג',
+  8504 => 'ד',
+  8505 => 'i',
+  8507 => 'fax',
+  8508 => 'π',
+  8509 => 'γ',
+  8510 => 'γ',
+  8511 => 'π',
+  8512 => '∑',
+  8517 => 'd',
+  8518 => 'd',
+  8519 => 'e',
+  8520 => 'i',
+  8521 => 'j',
+  8528 => '1⁄7',
+  8529 => '1⁄9',
+  8530 => '1⁄10',
+  8531 => '1⁄3',
+  8532 => '2⁄3',
+  8533 => '1⁄5',
+  8534 => '2⁄5',
+  8535 => '3⁄5',
+  8536 => '4⁄5',
+  8537 => '1⁄6',
+  8538 => '5⁄6',
+  8539 => '1⁄8',
+  8540 => '3⁄8',
+  8541 => '5⁄8',
+  8542 => '7⁄8',
+  8543 => '1⁄',
+  8544 => 'i',
+  8545 => 'ii',
+  8546 => 'iii',
+  8547 => 'iv',
+  8548 => 'v',
+  8549 => 'vi',
+  8550 => 'vii',
+  8551 => 'viii',
+  8552 => 'ix',
+  8553 => 'x',
+  8554 => 'xi',
+  8555 => 'xii',
+  8556 => 'l',
+  8557 => 'c',
+  8558 => 'd',
+  8559 => 'm',
+  8560 => 'i',
+  8561 => 'ii',
+  8562 => 'iii',
+  8563 => 'iv',
+  8564 => 'v',
+  8565 => 'vi',
+  8566 => 'vii',
+  8567 => 'viii',
+  8568 => 'ix',
+  8569 => 'x',
+  8570 => 'xi',
+  8571 => 'xii',
+  8572 => 'l',
+  8573 => 'c',
+  8574 => 'd',
+  8575 => 'm',
+  8585 => '0⁄3',
+  8748 => '∫∫',
+  8749 => '∫∫∫',
+  8751 => '∮∮',
+  8752 => '∮∮∮',
+  9001 => '〈',
+  9002 => '〉',
+  9312 => '1',
+  9313 => '2',
+  9314 => '3',
+  9315 => '4',
+  9316 => '5',
+  9317 => '6',
+  9318 => '7',
+  9319 => '8',
+  9320 => '9',
+  9321 => '10',
+  9322 => '11',
+  9323 => '12',
+  9324 => '13',
+  9325 => '14',
+  9326 => '15',
+  9327 => '16',
+  9328 => '17',
+  9329 => '18',
+  9330 => '19',
+  9331 => '20',
+  9398 => 'a',
+  9399 => 'b',
+  9400 => 'c',
+  9401 => 'd',
+  9402 => 'e',
+  9403 => 'f',
+  9404 => 'g',
+  9405 => 'h',
+  9406 => 'i',
+  9407 => 'j',
+  9408 => 'k',
+  9409 => 'l',
+  9410 => 'm',
+  9411 => 'n',
+  9412 => 'o',
+  9413 => 'p',
+  9414 => 'q',
+  9415 => 'r',
+  9416 => 's',
+  9417 => 't',
+  9418 => 'u',
+  9419 => 'v',
+  9420 => 'w',
+  9421 => 'x',
+  9422 => 'y',
+  9423 => 'z',
+  9424 => 'a',
+  9425 => 'b',
+  9426 => 'c',
+  9427 => 'd',
+  9428 => 'e',
+  9429 => 'f',
+  9430 => 'g',
+  9431 => 'h',
+  9432 => 'i',
+  9433 => 'j',
+  9434 => 'k',
+  9435 => 'l',
+  9436 => 'm',
+  9437 => 'n',
+  9438 => 'o',
+  9439 => 'p',
+  9440 => 'q',
+  9441 => 'r',
+  9442 => 's',
+  9443 => 't',
+  9444 => 'u',
+  9445 => 'v',
+  9446 => 'w',
+  9447 => 'x',
+  9448 => 'y',
+  9449 => 'z',
+  9450 => '0',
+  10764 => '∫∫∫∫',
+  10972 => '⫝̸',
+  11264 => 'ⰰ',
+  11265 => 'ⰱ',
+  11266 => 'ⰲ',
+  11267 => 'ⰳ',
+  11268 => 'ⰴ',
+  11269 => 'ⰵ',
+  11270 => 'ⰶ',
+  11271 => 'ⰷ',
+  11272 => 'ⰸ',
+  11273 => 'ⰹ',
+  11274 => 'ⰺ',
+  11275 => 'ⰻ',
+  11276 => 'ⰼ',
+  11277 => 'ⰽ',
+  11278 => 'ⰾ',
+  11279 => 'ⰿ',
+  11280 => 'ⱀ',
+  11281 => 'ⱁ',
+  11282 => 'ⱂ',
+  11283 => 'ⱃ',
+  11284 => 'ⱄ',
+  11285 => 'ⱅ',
+  11286 => 'ⱆ',
+  11287 => 'ⱇ',
+  11288 => 'ⱈ',
+  11289 => 'ⱉ',
+  11290 => 'ⱊ',
+  11291 => 'ⱋ',
+  11292 => 'ⱌ',
+  11293 => 'ⱍ',
+  11294 => 'ⱎ',
+  11295 => 'ⱏ',
+  11296 => 'ⱐ',
+  11297 => 'ⱑ',
+  11298 => 'ⱒ',
+  11299 => 'ⱓ',
+  11300 => 'ⱔ',
+  11301 => 'ⱕ',
+  11302 => 'ⱖ',
+  11303 => 'ⱗ',
+  11304 => 'ⱘ',
+  11305 => 'ⱙ',
+  11306 => 'ⱚ',
+  11307 => 'ⱛ',
+  11308 => 'ⱜ',
+  11309 => 'ⱝ',
+  11310 => 'ⱞ',
+  11360 => 'ⱡ',
+  11362 => 'ɫ',
+  11363 => 'ᵽ',
+  11364 => 'ɽ',
+  11367 => 'ⱨ',
+  11369 => 'ⱪ',
+  11371 => 'ⱬ',
+  11373 => 'ɑ',
+  11374 => 'ɱ',
+  11375 => 'ɐ',
+  11376 => 'ɒ',
+  11378 => 'ⱳ',
+  11381 => 'ⱶ',
+  11388 => 'j',
+  11389 => 'v',
+  11390 => 'ȿ',
+  11391 => 'ɀ',
+  11392 => 'ⲁ',
+  11394 => 'ⲃ',
+  11396 => 'ⲅ',
+  11398 => 'ⲇ',
+  11400 => 'ⲉ',
+  11402 => 'ⲋ',
+  11404 => 'ⲍ',
+  11406 => 'ⲏ',
+  11408 => 'ⲑ',
+  11410 => 'ⲓ',
+  11412 => 'ⲕ',
+  11414 => 'ⲗ',
+  11416 => 'ⲙ',
+  11418 => 'ⲛ',
+  11420 => 'ⲝ',
+  11422 => 'ⲟ',
+  11424 => 'ⲡ',
+  11426 => 'ⲣ',
+  11428 => 'ⲥ',
+  11430 => 'ⲧ',
+  11432 => 'ⲩ',
+  11434 => 'ⲫ',
+  11436 => 'ⲭ',
+  11438 => 'ⲯ',
+  11440 => 'ⲱ',
+  11442 => 'ⲳ',
+  11444 => 'ⲵ',
+  11446 => 'ⲷ',
+  11448 => 'ⲹ',
+  11450 => 'ⲻ',
+  11452 => 'ⲽ',
+  11454 => 'ⲿ',
+  11456 => 'ⳁ',
+  11458 => 'ⳃ',
+  11460 => 'ⳅ',
+  11462 => 'ⳇ',
+  11464 => 'ⳉ',
+  11466 => 'ⳋ',
+  11468 => 'ⳍ',
+  11470 => 'ⳏ',
+  11472 => 'ⳑ',
+  11474 => 'ⳓ',
+  11476 => 'ⳕ',
+  11478 => 'ⳗ',
+  11480 => 'ⳙ',
+  11482 => 'ⳛ',
+  11484 => 'ⳝ',
+  11486 => 'ⳟ',
+  11488 => 'ⳡ',
+  11490 => 'ⳣ',
+  11499 => 'ⳬ',
+  11501 => 'ⳮ',
+  11506 => 'ⳳ',
+  11631 => 'ⵡ',
+  11935 => '母',
+  12019 => '龟',
+  12032 => '一',
+  12033 => '丨',
+  12034 => '丶',
+  12035 => '丿',
+  12036 => '乙',
+  12037 => '亅',
+  12038 => '二',
+  12039 => '亠',
+  12040 => '人',
+  12041 => '儿',
+  12042 => '入',
+  12043 => '八',
+  12044 => '冂',
+  12045 => '冖',
+  12046 => '冫',
+  12047 => '几',
+  12048 => '凵',
+  12049 => '刀',
+  12050 => '力',
+  12051 => '勹',
+  12052 => '匕',
+  12053 => '匚',
+  12054 => '匸',
+  12055 => '十',
+  12056 => '卜',
+  12057 => '卩',
+  12058 => '厂',
+  12059 => '厶',
+  12060 => '又',
+  12061 => '口',
+  12062 => '囗',
+  12063 => '土',
+  12064 => '士',
+  12065 => '夂',
+  12066 => '夊',
+  12067 => '夕',
+  12068 => '大',
+  12069 => '女',
+  12070 => '子',
+  12071 => '宀',
+  12072 => '寸',
+  12073 => '小',
+  12074 => '尢',
+  12075 => '尸',
+  12076 => '屮',
+  12077 => '山',
+  12078 => '巛',
+  12079 => '工',
+  12080 => '己',
+  12081 => '巾',
+  12082 => '干',
+  12083 => '幺',
+  12084 => '广',
+  12085 => '廴',
+  12086 => '廾',
+  12087 => '弋',
+  12088 => '弓',
+  12089 => '彐',
+  12090 => '彡',
+  12091 => '彳',
+  12092 => '心',
+  12093 => '戈',
+  12094 => '戶',
+  12095 => '手',
+  12096 => '支',
+  12097 => '攴',
+  12098 => '文',
+  12099 => '斗',
+  12100 => '斤',
+  12101 => '方',
+  12102 => '无',
+  12103 => '日',
+  12104 => '曰',
+  12105 => '月',
+  12106 => '木',
+  12107 => '欠',
+  12108 => '止',
+  12109 => '歹',
+  12110 => '殳',
+  12111 => '毋',
+  12112 => '比',
+  12113 => '毛',
+  12114 => '氏',
+  12115 => '气',
+  12116 => '水',
+  12117 => '火',
+  12118 => '爪',
+  12119 => '父',
+  12120 => '爻',
+  12121 => '爿',
+  12122 => '片',
+  12123 => '牙',
+  12124 => '牛',
+  12125 => '犬',
+  12126 => '玄',
+  12127 => '玉',
+  12128 => '瓜',
+  12129 => '瓦',
+  12130 => '甘',
+  12131 => '生',
+  12132 => '用',
+  12133 => '田',
+  12134 => '疋',
+  12135 => '疒',
+  12136 => '癶',
+  12137 => '白',
+  12138 => '皮',
+  12139 => '皿',
+  12140 => '目',
+  12141 => '矛',
+  12142 => '矢',
+  12143 => '石',
+  12144 => '示',
+  12145 => '禸',
+  12146 => '禾',
+  12147 => '穴',
+  12148 => '立',
+  12149 => '竹',
+  12150 => '米',
+  12151 => '糸',
+  12152 => '缶',
+  12153 => '网',
+  12154 => '羊',
+  12155 => '羽',
+  12156 => '老',
+  12157 => '而',
+  12158 => '耒',
+  12159 => '耳',
+  12160 => '聿',
+  12161 => '肉',
+  12162 => '臣',
+  12163 => '自',
+  12164 => '至',
+  12165 => '臼',
+  12166 => '舌',
+  12167 => '舛',
+  12168 => '舟',
+  12169 => '艮',
+  12170 => '色',
+  12171 => '艸',
+  12172 => '虍',
+  12173 => '虫',
+  12174 => '血',
+  12175 => '行',
+  12176 => '衣',
+  12177 => '襾',
+  12178 => '見',
+  12179 => '角',
+  12180 => '言',
+  12181 => '谷',
+  12182 => '豆',
+  12183 => '豕',
+  12184 => '豸',
+  12185 => '貝',
+  12186 => '赤',
+  12187 => '走',
+  12188 => '足',
+  12189 => '身',
+  12190 => '車',
+  12191 => '辛',
+  12192 => '辰',
+  12193 => '辵',
+  12194 => '邑',
+  12195 => '酉',
+  12196 => '釆',
+  12197 => '里',
+  12198 => '金',
+  12199 => '長',
+  12200 => '門',
+  12201 => '阜',
+  12202 => '隶',
+  12203 => '隹',
+  12204 => '雨',
+  12205 => '靑',
+  12206 => '非',
+  12207 => '面',
+  12208 => '革',
+  12209 => '韋',
+  12210 => '韭',
+  12211 => '音',
+  12212 => '頁',
+  12213 => '風',
+  12214 => '飛',
+  12215 => '食',
+  12216 => '首',
+  12217 => '香',
+  12218 => '馬',
+  12219 => '骨',
+  12220 => '高',
+  12221 => '髟',
+  12222 => '鬥',
+  12223 => '鬯',
+  12224 => '鬲',
+  12225 => '鬼',
+  12226 => '魚',
+  12227 => '鳥',
+  12228 => '鹵',
+  12229 => '鹿',
+  12230 => '麥',
+  12231 => '麻',
+  12232 => '黃',
+  12233 => '黍',
+  12234 => '黑',
+  12235 => '黹',
+  12236 => '黽',
+  12237 => '鼎',
+  12238 => '鼓',
+  12239 => '鼠',
+  12240 => '鼻',
+  12241 => '齊',
+  12242 => '齒',
+  12243 => '龍',
+  12244 => '龜',
+  12245 => '龠',
+  12290 => '.',
+  12342 => '〒',
+  12344 => '十',
+  12345 => '卄',
+  12346 => '卅',
+  12447 => 'より',
+  12543 => 'コト',
+  12593 => 'ᄀ',
+  12594 => 'ᄁ',
+  12595 => 'ᆪ',
+  12596 => 'ᄂ',
+  12597 => 'ᆬ',
+  12598 => 'ᆭ',
+  12599 => 'ᄃ',
+  12600 => 'ᄄ',
+  12601 => 'ᄅ',
+  12602 => 'ᆰ',
+  12603 => 'ᆱ',
+  12604 => 'ᆲ',
+  12605 => 'ᆳ',
+  12606 => 'ᆴ',
+  12607 => 'ᆵ',
+  12608 => 'ᄚ',
+  12609 => 'ᄆ',
+  12610 => 'ᄇ',
+  12611 => 'ᄈ',
+  12612 => 'ᄡ',
+  12613 => 'ᄉ',
+  12614 => 'ᄊ',
+  12615 => 'ᄋ',
+  12616 => 'ᄌ',
+  12617 => 'ᄍ',
+  12618 => 'ᄎ',
+  12619 => 'ᄏ',
+  12620 => 'ᄐ',
+  12621 => 'ᄑ',
+  12622 => 'ᄒ',
+  12623 => 'ᅡ',
+  12624 => 'ᅢ',
+  12625 => 'ᅣ',
+  12626 => 'ᅤ',
+  12627 => 'ᅥ',
+  12628 => 'ᅦ',
+  12629 => 'ᅧ',
+  12630 => 'ᅨ',
+  12631 => 'ᅩ',
+  12632 => 'ᅪ',
+  12633 => 'ᅫ',
+  12634 => 'ᅬ',
+  12635 => 'ᅭ',
+  12636 => 'ᅮ',
+  12637 => 'ᅯ',
+  12638 => 'ᅰ',
+  12639 => 'ᅱ',
+  12640 => 'ᅲ',
+  12641 => 'ᅳ',
+  12642 => 'ᅴ',
+  12643 => 'ᅵ',
+  12645 => 'ᄔ',
+  12646 => 'ᄕ',
+  12647 => 'ᇇ',
+  12648 => 'ᇈ',
+  12649 => 'ᇌ',
+  12650 => 'ᇎ',
+  12651 => 'ᇓ',
+  12652 => 'ᇗ',
+  12653 => 'ᇙ',
+  12654 => 'ᄜ',
+  12655 => 'ᇝ',
+  12656 => 'ᇟ',
+  12657 => 'ᄝ',
+  12658 => 'ᄞ',
+  12659 => 'ᄠ',
+  12660 => 'ᄢ',
+  12661 => 'ᄣ',
+  12662 => 'ᄧ',
+  12663 => 'ᄩ',
+  12664 => 'ᄫ',
+  12665 => 'ᄬ',
+  12666 => 'ᄭ',
+  12667 => 'ᄮ',
+  12668 => 'ᄯ',
+  12669 => 'ᄲ',
+  12670 => 'ᄶ',
+  12671 => 'ᅀ',
+  12672 => 'ᅇ',
+  12673 => 'ᅌ',
+  12674 => 'ᇱ',
+  12675 => 'ᇲ',
+  12676 => 'ᅗ',
+  12677 => 'ᅘ',
+  12678 => 'ᅙ',
+  12679 => 'ᆄ',
+  12680 => 'ᆅ',
+  12681 => 'ᆈ',
+  12682 => 'ᆑ',
+  12683 => 'ᆒ',
+  12684 => 'ᆔ',
+  12685 => 'ᆞ',
+  12686 => 'ᆡ',
+  12690 => '一',
+  12691 => '二',
+  12692 => '三',
+  12693 => '四',
+  12694 => '上',
+  12695 => '中',
+  12696 => '下',
+  12697 => '甲',
+  12698 => '乙',
+  12699 => '丙',
+  12700 => '丁',
+  12701 => '天',
+  12702 => '地',
+  12703 => '人',
+  12868 => '問',
+  12869 => '幼',
+  12870 => '文',
+  12871 => '箏',
+  12880 => 'pte',
+  12881 => '21',
+  12882 => '22',
+  12883 => '23',
+  12884 => '24',
+  12885 => '25',
+  12886 => '26',
+  12887 => '27',
+  12888 => '28',
+  12889 => '29',
+  12890 => '30',
+  12891 => '31',
+  12892 => '32',
+  12893 => '33',
+  12894 => '34',
+  12895 => '35',
+  12896 => 'ᄀ',
+  12897 => 'ᄂ',
+  12898 => 'ᄃ',
+  12899 => 'ᄅ',
+  12900 => 'ᄆ',
+  12901 => 'ᄇ',
+  12902 => 'ᄉ',
+  12903 => 'ᄋ',
+  12904 => 'ᄌ',
+  12905 => 'ᄎ',
+  12906 => 'ᄏ',
+  12907 => 'ᄐ',
+  12908 => 'ᄑ',
+  12909 => 'ᄒ',
+  12910 => '가',
+  12911 => '나',
+  12912 => '다',
+  12913 => '라',
+  12914 => '마',
+  12915 => '바',
+  12916 => '사',
+  12917 => '아',
+  12918 => '자',
+  12919 => '차',
+  12920 => '카',
+  12921 => '타',
+  12922 => '파',
+  12923 => '하',
+  12924 => '참고',
+  12925 => '주의',
+  12926 => '우',
+  12928 => '一',
+  12929 => '二',
+  12930 => '三',
+  12931 => '四',
+  12932 => '五',
+  12933 => '六',
+  12934 => '七',
+  12935 => '八',
+  12936 => '九',
+  12937 => '十',
+  12938 => '月',
+  12939 => '火',
+  12940 => '水',
+  12941 => '木',
+  12942 => '金',
+  12943 => '土',
+  12944 => '日',
+  12945 => '株',
+  12946 => '有',
+  12947 => '社',
+  12948 => '名',
+  12949 => '特',
+  12950 => '財',
+  12951 => '祝',
+  12952 => '労',
+  12953 => '秘',
+  12954 => '男',
+  12955 => '女',
+  12956 => '適',
+  12957 => '優',
+  12958 => '印',
+  12959 => '注',
+  12960 => '項',
+  12961 => '休',
+  12962 => '写',
+  12963 => '正',
+  12964 => '上',
+  12965 => '中',
+  12966 => '下',
+  12967 => '左',
+  12968 => '右',
+  12969 => '医',
+  12970 => '宗',
+  12971 => '学',
+  12972 => '監',
+  12973 => '企',
+  12974 => '資',
+  12975 => '協',
+  12976 => '夜',
+  12977 => '36',
+  12978 => '37',
+  12979 => '38',
+  12980 => '39',
+  12981 => '40',
+  12982 => '41',
+  12983 => '42',
+  12984 => '43',
+  12985 => '44',
+  12986 => '45',
+  12987 => '46',
+  12988 => '47',
+  12989 => '48',
+  12990 => '49',
+  12991 => '50',
+  12992 => '1月',
+  12993 => '2月',
+  12994 => '3月',
+  12995 => '4月',
+  12996 => '5月',
+  12997 => '6月',
+  12998 => '7月',
+  12999 => '8月',
+  13000 => '9月',
+  13001 => '10月',
+  13002 => '11月',
+  13003 => '12月',
+  13004 => 'hg',
+  13005 => 'erg',
+  13006 => 'ev',
+  13007 => 'ltd',
+  13008 => 'ア',
+  13009 => 'イ',
+  13010 => 'ウ',
+  13011 => 'エ',
+  13012 => 'オ',
+  13013 => 'カ',
+  13014 => 'キ',
+  13015 => 'ク',
+  13016 => 'ケ',
+  13017 => 'コ',
+  13018 => 'サ',
+  13019 => 'シ',
+  13020 => 'ス',
+  13021 => 'セ',
+  13022 => 'ソ',
+  13023 => 'タ',
+  13024 => 'チ',
+  13025 => 'ツ',
+  13026 => 'テ',
+  13027 => 'ト',
+  13028 => 'ナ',
+  13029 => 'ニ',
+  13030 => 'ヌ',
+  13031 => 'ネ',
+  13032 => 'ノ',
+  13033 => 'ハ',
+  13034 => 'ヒ',
+  13035 => 'フ',
+  13036 => 'ヘ',
+  13037 => 'ホ',
+  13038 => 'マ',
+  13039 => 'ミ',
+  13040 => 'ム',
+  13041 => 'メ',
+  13042 => 'モ',
+  13043 => 'ヤ',
+  13044 => 'ユ',
+  13045 => 'ヨ',
+  13046 => 'ラ',
+  13047 => 'リ',
+  13048 => 'ル',
+  13049 => 'レ',
+  13050 => 'ロ',
+  13051 => 'ワ',
+  13052 => 'ヰ',
+  13053 => 'ヱ',
+  13054 => 'ヲ',
+  13055 => '令和',
+  13056 => 'アパート',
+  13057 => 'アルファ',
+  13058 => 'アンペア',
+  13059 => 'アール',
+  13060 => 'イニング',
+  13061 => 'インチ',
+  13062 => 'ウォン',
+  13063 => 'エスクード',
+  13064 => 'エーカー',
+  13065 => 'オンス',
+  13066 => 'オーム',
+  13067 => 'カイリ',
+  13068 => 'カラット',
+  13069 => 'カロリー',
+  13070 => 'ガロン',
+  13071 => 'ガンマ',
+  13072 => 'ギガ',
+  13073 => 'ギニー',
+  13074 => 'キュリー',
+  13075 => 'ギルダー',
+  13076 => 'キロ',
+  13077 => 'キログラム',
+  13078 => 'キロメートル',
+  13079 => 'キロワット',
+  13080 => 'グラム',
+  13081 => 'グラムトン',
+  13082 => 'クルゼイロ',
+  13083 => 'クローネ',
+  13084 => 'ケース',
+  13085 => 'コルナ',
+  13086 => 'コーポ',
+  13087 => 'サイクル',
+  13088 => 'サンチーム',
+  13089 => 'シリング',
+  13090 => 'センチ',
+  13091 => 'セント',
+  13092 => 'ダース',
+  13093 => 'デシ',
+  13094 => 'ドル',
+  13095 => 'トン',
+  13096 => 'ナノ',
+  13097 => 'ノット',
+  13098 => 'ハイツ',
+  13099 => 'パーセント',
+  13100 => 'パーツ',
+  13101 => 'バーレル',
+  13102 => 'ピアストル',
+  13103 => 'ピクル',
+  13104 => 'ピコ',
+  13105 => 'ビル',
+  13106 => 'ファラッド',
+  13107 => 'フィート',
+  13108 => 'ブッシェル',
+  13109 => 'フラン',
+  13110 => 'ヘクタール',
+  13111 => 'ペソ',
+  13112 => 'ペニヒ',
+  13113 => 'ヘルツ',
+  13114 => 'ペンス',
+  13115 => 'ページ',
+  13116 => 'ベータ',
+  13117 => 'ポイント',
+  13118 => 'ボルト',
+  13119 => 'ホン',
+  13120 => 'ポンド',
+  13121 => 'ホール',
+  13122 => 'ホーン',
+  13123 => 'マイクロ',
+  13124 => 'マイル',
+  13125 => 'マッハ',
+  13126 => 'マルク',
+  13127 => 'マンション',
+  13128 => 'ミクロン',
+  13129 => 'ミリ',
+  13130 => 'ミリバール',
+  13131 => 'メガ',
+  13132 => 'メガトン',
+  13133 => 'メートル',
+  13134 => 'ヤード',
+  13135 => 'ヤール',
+  13136 => 'ユアン',
+  13137 => 'リットル',
+  13138 => 'リラ',
+  13139 => 'ルピー',
+  13140 => 'ルーブル',
+  13141 => 'レム',
+  13142 => 'レントゲン',
+  13143 => 'ワット',
+  13144 => '0点',
+  13145 => '1点',
+  13146 => '2点',
+  13147 => '3点',
+  13148 => '4点',
+  13149 => '5点',
+  13150 => '6点',
+  13151 => '7点',
+  13152 => '8点',
+  13153 => '9点',
+  13154 => '10点',
+  13155 => '11点',
+  13156 => '12点',
+  13157 => '13点',
+  13158 => '14点',
+  13159 => '15点',
+  13160 => '16点',
+  13161 => '17点',
+  13162 => '18点',
+  13163 => '19点',
+  13164 => '20点',
+  13165 => '21点',
+  13166 => '22点',
+  13167 => '23点',
+  13168 => '24点',
+  13169 => 'hpa',
+  13170 => 'da',
+  13171 => 'au',
+  13172 => 'bar',
+  13173 => 'ov',
+  13174 => 'pc',
+  13175 => 'dm',
+  13176 => 'dm2',
+  13177 => 'dm3',
+  13178 => 'iu',
+  13179 => '平成',
+  13180 => '昭和',
+  13181 => '大正',
+  13182 => '明治',
+  13183 => '株式会社',
+  13184 => 'pa',
+  13185 => 'na',
+  13186 => 'μa',
+  13187 => 'ma',
+  13188 => 'ka',
+  13189 => 'kb',
+  13190 => 'mb',
+  13191 => 'gb',
+  13192 => 'cal',
+  13193 => 'kcal',
+  13194 => 'pf',
+  13195 => 'nf',
+  13196 => 'μf',
+  13197 => 'μg',
+  13198 => 'mg',
+  13199 => 'kg',
+  13200 => 'hz',
+  13201 => 'khz',
+  13202 => 'mhz',
+  13203 => 'ghz',
+  13204 => 'thz',
+  13205 => 'μl',
+  13206 => 'ml',
+  13207 => 'dl',
+  13208 => 'kl',
+  13209 => 'fm',
+  13210 => 'nm',
+  13211 => 'μm',
+  13212 => 'mm',
+  13213 => 'cm',
+  13214 => 'km',
+  13215 => 'mm2',
+  13216 => 'cm2',
+  13217 => 'm2',
+  13218 => 'km2',
+  13219 => 'mm3',
+  13220 => 'cm3',
+  13221 => 'm3',
+  13222 => 'km3',
+  13223 => 'm∕s',
+  13224 => 'm∕s2',
+  13225 => 'pa',
+  13226 => 'kpa',
+  13227 => 'mpa',
+  13228 => 'gpa',
+  13229 => 'rad',
+  13230 => 'rad∕s',
+  13231 => 'rad∕s2',
+  13232 => 'ps',
+  13233 => 'ns',
+  13234 => 'μs',
+  13235 => 'ms',
+  13236 => 'pv',
+  13237 => 'nv',
+  13238 => 'μv',
+  13239 => 'mv',
+  13240 => 'kv',
+  13241 => 'mv',
+  13242 => 'pw',
+  13243 => 'nw',
+  13244 => 'μw',
+  13245 => 'mw',
+  13246 => 'kw',
+  13247 => 'mw',
+  13248 => 'kω',
+  13249 => 'mω',
+  13251 => 'bq',
+  13252 => 'cc',
+  13253 => 'cd',
+  13254 => 'c∕kg',
+  13256 => 'db',
+  13257 => 'gy',
+  13258 => 'ha',
+  13259 => 'hp',
+  13260 => 'in',
+  13261 => 'kk',
+  13262 => 'km',
+  13263 => 'kt',
+  13264 => 'lm',
+  13265 => 'ln',
+  13266 => 'log',
+  13267 => 'lx',
+  13268 => 'mb',
+  13269 => 'mil',
+  13270 => 'mol',
+  13271 => 'ph',
+  13273 => 'ppm',
+  13274 => 'pr',
+  13275 => 'sr',
+  13276 => 'sv',
+  13277 => 'wb',
+  13278 => 'v∕m',
+  13279 => 'a∕m',
+  13280 => '1日',
+  13281 => '2日',
+  13282 => '3日',
+  13283 => '4日',
+  13284 => '5日',
+  13285 => '6日',
+  13286 => '7日',
+  13287 => '8日',
+  13288 => '9日',
+  13289 => '10日',
+  13290 => '11日',
+  13291 => '12日',
+  13292 => '13日',
+  13293 => '14日',
+  13294 => '15日',
+  13295 => '16日',
+  13296 => '17日',
+  13297 => '18日',
+  13298 => '19日',
+  13299 => '20日',
+  13300 => '21日',
+  13301 => '22日',
+  13302 => '23日',
+  13303 => '24日',
+  13304 => '25日',
+  13305 => '26日',
+  13306 => '27日',
+  13307 => '28日',
+  13308 => '29日',
+  13309 => '30日',
+  13310 => '31日',
+  13311 => 'gal',
+  42560 => 'ꙁ',
+  42562 => 'ꙃ',
+  42564 => 'ꙅ',
+  42566 => 'ꙇ',
+  42568 => 'ꙉ',
+  42570 => 'ꙋ',
+  42572 => 'ꙍ',
+  42574 => 'ꙏ',
+  42576 => 'ꙑ',
+  42578 => 'ꙓ',
+  42580 => 'ꙕ',
+  42582 => 'ꙗ',
+  42584 => 'ꙙ',
+  42586 => 'ꙛ',
+  42588 => 'ꙝ',
+  42590 => 'ꙟ',
+  42592 => 'ꙡ',
+  42594 => 'ꙣ',
+  42596 => 'ꙥ',
+  42598 => 'ꙧ',
+  42600 => 'ꙩ',
+  42602 => 'ꙫ',
+  42604 => 'ꙭ',
+  42624 => 'ꚁ',
+  42626 => 'ꚃ',
+  42628 => 'ꚅ',
+  42630 => 'ꚇ',
+  42632 => 'ꚉ',
+  42634 => 'ꚋ',
+  42636 => 'ꚍ',
+  42638 => 'ꚏ',
+  42640 => 'ꚑ',
+  42642 => 'ꚓ',
+  42644 => 'ꚕ',
+  42646 => 'ꚗ',
+  42648 => 'ꚙ',
+  42650 => 'ꚛ',
+  42652 => 'ъ',
+  42653 => 'ь',
+  42786 => 'ꜣ',
+  42788 => 'ꜥ',
+  42790 => 'ꜧ',
+  42792 => 'ꜩ',
+  42794 => 'ꜫ',
+  42796 => 'ꜭ',
+  42798 => 'ꜯ',
+  42802 => 'ꜳ',
+  42804 => 'ꜵ',
+  42806 => 'ꜷ',
+  42808 => 'ꜹ',
+  42810 => 'ꜻ',
+  42812 => 'ꜽ',
+  42814 => 'ꜿ',
+  42816 => 'ꝁ',
+  42818 => 'ꝃ',
+  42820 => 'ꝅ',
+  42822 => 'ꝇ',
+  42824 => 'ꝉ',
+  42826 => 'ꝋ',
+  42828 => 'ꝍ',
+  42830 => 'ꝏ',
+  42832 => 'ꝑ',
+  42834 => 'ꝓ',
+  42836 => 'ꝕ',
+  42838 => 'ꝗ',
+  42840 => 'ꝙ',
+  42842 => 'ꝛ',
+  42844 => 'ꝝ',
+  42846 => 'ꝟ',
+  42848 => 'ꝡ',
+  42850 => 'ꝣ',
+  42852 => 'ꝥ',
+  42854 => 'ꝧ',
+  42856 => 'ꝩ',
+  42858 => 'ꝫ',
+  42860 => 'ꝭ',
+  42862 => 'ꝯ',
+  42864 => 'ꝯ',
+  42873 => 'ꝺ',
+  42875 => 'ꝼ',
+  42877 => 'ᵹ',
+  42878 => 'ꝿ',
+  42880 => 'ꞁ',
+  42882 => 'ꞃ',
+  42884 => 'ꞅ',
+  42886 => 'ꞇ',
+  42891 => 'ꞌ',
+  42893 => 'ɥ',
+  42896 => 'ꞑ',
+  42898 => 'ꞓ',
+  42902 => 'ꞗ',
+  42904 => 'ꞙ',
+  42906 => 'ꞛ',
+  42908 => 'ꞝ',
+  42910 => 'ꞟ',
+  42912 => 'ꞡ',
+  42914 => 'ꞣ',
+  42916 => 'ꞥ',
+  42918 => 'ꞧ',
+  42920 => 'ꞩ',
+  42922 => 'ɦ',
+  42923 => 'ɜ',
+  42924 => 'ɡ',
+  42925 => 'ɬ',
+  42926 => 'ɪ',
+  42928 => 'ʞ',
+  42929 => 'ʇ',
+  42930 => 'ʝ',
+  42931 => 'ꭓ',
+  42932 => 'ꞵ',
+  42934 => 'ꞷ',
+  42936 => 'ꞹ',
+  42938 => 'ꞻ',
+  42940 => 'ꞽ',
+  42942 => 'ꞿ',
+  42946 => 'ꟃ',
+  42948 => 'ꞔ',
+  42949 => 'ʂ',
+  42950 => 'ᶎ',
+  42951 => 'ꟈ',
+  42953 => 'ꟊ',
+  42997 => 'ꟶ',
+  43000 => 'ħ',
+  43001 => 'œ',
+  43868 => 'ꜧ',
+  43869 => 'ꬷ',
+  43870 => 'ɫ',
+  43871 => 'ꭒ',
+  43881 => 'ʍ',
+  43888 => 'Ꭰ',
+  43889 => 'Ꭱ',
+  43890 => 'Ꭲ',
+  43891 => 'Ꭳ',
+  43892 => 'Ꭴ',
+  43893 => 'Ꭵ',
+  43894 => 'Ꭶ',
+  43895 => 'Ꭷ',
+  43896 => 'Ꭸ',
+  43897 => 'Ꭹ',
+  43898 => 'Ꭺ',
+  43899 => 'Ꭻ',
+  43900 => 'Ꭼ',
+  43901 => 'Ꭽ',
+  43902 => 'Ꭾ',
+  43903 => 'Ꭿ',
+  43904 => 'Ꮀ',
+  43905 => 'Ꮁ',
+  43906 => 'Ꮂ',
+  43907 => 'Ꮃ',
+  43908 => 'Ꮄ',
+  43909 => 'Ꮅ',
+  43910 => 'Ꮆ',
+  43911 => 'Ꮇ',
+  43912 => 'Ꮈ',
+  43913 => 'Ꮉ',
+  43914 => 'Ꮊ',
+  43915 => 'Ꮋ',
+  43916 => 'Ꮌ',
+  43917 => 'Ꮍ',
+  43918 => 'Ꮎ',
+  43919 => 'Ꮏ',
+  43920 => 'Ꮐ',
+  43921 => 'Ꮑ',
+  43922 => 'Ꮒ',
+  43923 => 'Ꮓ',
+  43924 => 'Ꮔ',
+  43925 => 'Ꮕ',
+  43926 => 'Ꮖ',
+  43927 => 'Ꮗ',
+  43928 => 'Ꮘ',
+  43929 => 'Ꮙ',
+  43930 => 'Ꮚ',
+  43931 => 'Ꮛ',
+  43932 => 'Ꮜ',
+  43933 => 'Ꮝ',
+  43934 => 'Ꮞ',
+  43935 => 'Ꮟ',
+  43936 => 'Ꮠ',
+  43937 => 'Ꮡ',
+  43938 => 'Ꮢ',
+  43939 => 'Ꮣ',
+  43940 => 'Ꮤ',
+  43941 => 'Ꮥ',
+  43942 => 'Ꮦ',
+  43943 => 'Ꮧ',
+  43944 => 'Ꮨ',
+  43945 => 'Ꮩ',
+  43946 => 'Ꮪ',
+  43947 => 'Ꮫ',
+  43948 => 'Ꮬ',
+  43949 => 'Ꮭ',
+  43950 => 'Ꮮ',
+  43951 => 'Ꮯ',
+  43952 => 'Ꮰ',
+  43953 => 'Ꮱ',
+  43954 => 'Ꮲ',
+  43955 => 'Ꮳ',
+  43956 => 'Ꮴ',
+  43957 => 'Ꮵ',
+  43958 => 'Ꮶ',
+  43959 => 'Ꮷ',
+  43960 => 'Ꮸ',
+  43961 => 'Ꮹ',
+  43962 => 'Ꮺ',
+  43963 => 'Ꮻ',
+  43964 => 'Ꮼ',
+  43965 => 'Ꮽ',
+  43966 => 'Ꮾ',
+  43967 => 'Ꮿ',
+  63744 => '豈',
+  63745 => '更',
+  63746 => '車',
+  63747 => '賈',
+  63748 => '滑',
+  63749 => '串',
+  63750 => '句',
+  63751 => '龜',
+  63752 => '龜',
+  63753 => '契',
+  63754 => '金',
+  63755 => '喇',
+  63756 => '奈',
+  63757 => '懶',
+  63758 => '癩',
+  63759 => '羅',
+  63760 => '蘿',
+  63761 => '螺',
+  63762 => '裸',
+  63763 => '邏',
+  63764 => '樂',
+  63765 => '洛',
+  63766 => '烙',
+  63767 => '珞',
+  63768 => '落',
+  63769 => '酪',
+  63770 => '駱',
+  63771 => '亂',
+  63772 => '卵',
+  63773 => '欄',
+  63774 => '爛',
+  63775 => '蘭',
+  63776 => '鸞',
+  63777 => '嵐',
+  63778 => '濫',
+  63779 => '藍',
+  63780 => '襤',
+  63781 => '拉',
+  63782 => '臘',
+  63783 => '蠟',
+  63784 => '廊',
+  63785 => '朗',
+  63786 => '浪',
+  63787 => '狼',
+  63788 => '郎',
+  63789 => '來',
+  63790 => '冷',
+  63791 => '勞',
+  63792 => '擄',
+  63793 => '櫓',
+  63794 => '爐',
+  63795 => '盧',
+  63796 => '老',
+  63797 => '蘆',
+  63798 => '虜',
+  63799 => '路',
+  63800 => '露',
+  63801 => '魯',
+  63802 => '鷺',
+  63803 => '碌',
+  63804 => '祿',
+  63805 => '綠',
+  63806 => '菉',
+  63807 => '錄',
+  63808 => '鹿',
+  63809 => '論',
+  63810 => '壟',
+  63811 => '弄',
+  63812 => '籠',
+  63813 => '聾',
+  63814 => '牢',
+  63815 => '磊',
+  63816 => '賂',
+  63817 => '雷',
+  63818 => '壘',
+  63819 => '屢',
+  63820 => '樓',
+  63821 => '淚',
+  63822 => '漏',
+  63823 => '累',
+  63824 => '縷',
+  63825 => '陋',
+  63826 => '勒',
+  63827 => '肋',
+  63828 => '凜',
+  63829 => '凌',
+  63830 => '稜',
+  63831 => '綾',
+  63832 => '菱',
+  63833 => '陵',
+  63834 => '讀',
+  63835 => '拏',
+  63836 => '樂',
+  63837 => '諾',
+  63838 => '丹',
+  63839 => '寧',
+  63840 => '怒',
+  63841 => '率',
+  63842 => '異',
+  63843 => '北',
+  63844 => '磻',
+  63845 => '便',
+  63846 => '復',
+  63847 => '不',
+  63848 => '泌',
+  63849 => '數',
+  63850 => '索',
+  63851 => '參',
+  63852 => '塞',
+  63853 => '省',
+  63854 => '葉',
+  63855 => '說',
+  63856 => '殺',
+  63857 => '辰',
+  63858 => '沈',
+  63859 => '拾',
+  63860 => '若',
+  63861 => '掠',
+  63862 => '略',
+  63863 => '亮',
+  63864 => '兩',
+  63865 => '凉',
+  63866 => '梁',
+  63867 => '糧',
+  63868 => '良',
+  63869 => '諒',
+  63870 => '量',
+  63871 => '勵',
+  63872 => '呂',
+  63873 => '女',
+  63874 => '廬',
+  63875 => '旅',
+  63876 => '濾',
+  63877 => '礪',
+  63878 => '閭',
+  63879 => '驪',
+  63880 => '麗',
+  63881 => '黎',
+  63882 => '力',
+  63883 => '曆',
+  63884 => '歷',
+  63885 => '轢',
+  63886 => '年',
+  63887 => '憐',
+  63888 => '戀',
+  63889 => '撚',
+  63890 => '漣',
+  63891 => '煉',
+  63892 => '璉',
+  63893 => '秊',
+  63894 => '練',
+  63895 => '聯',
+  63896 => '輦',
+  63897 => '蓮',
+  63898 => '連',
+  63899 => '鍊',
+  63900 => '列',
+  63901 => '劣',
+  63902 => '咽',
+  63903 => '烈',
+  63904 => '裂',
+  63905 => '說',
+  63906 => '廉',
+  63907 => '念',
+  63908 => '捻',
+  63909 => '殮',
+  63910 => '簾',
+  63911 => '獵',
+  63912 => '令',
+  63913 => '囹',
+  63914 => '寧',
+  63915 => '嶺',
+  63916 => '怜',
+  63917 => '玲',
+  63918 => '瑩',
+  63919 => '羚',
+  63920 => '聆',
+  63921 => '鈴',
+  63922 => '零',
+  63923 => '靈',
+  63924 => '領',
+  63925 => '例',
+  63926 => '禮',
+  63927 => '醴',
+  63928 => '隸',
+  63929 => '惡',
+  63930 => '了',
+  63931 => '僚',
+  63932 => '寮',
+  63933 => '尿',
+  63934 => '料',
+  63935 => '樂',
+  63936 => '燎',
+  63937 => '療',
+  63938 => '蓼',
+  63939 => '遼',
+  63940 => '龍',
+  63941 => '暈',
+  63942 => '阮',
+  63943 => '劉',
+  63944 => '杻',
+  63945 => '柳',
+  63946 => '流',
+  63947 => '溜',
+  63948 => '琉',
+  63949 => '留',
+  63950 => '硫',
+  63951 => '紐',
+  63952 => '類',
+  63953 => '六',
+  63954 => '戮',
+  63955 => '陸',
+  63956 => '倫',
+  63957 => '崙',
+  63958 => '淪',
+  63959 => '輪',
+  63960 => '律',
+  63961 => '慄',
+  63962 => '栗',
+  63963 => '率',
+  63964 => '隆',
+  63965 => '利',
+  63966 => '吏',
+  63967 => '履',
+  63968 => '易',
+  63969 => '李',
+  63970 => '梨',
+  63971 => '泥',
+  63972 => '理',
+  63973 => '痢',
+  63974 => '罹',
+  63975 => '裏',
+  63976 => '裡',
+  63977 => '里',
+  63978 => '離',
+  63979 => '匿',
+  63980 => '溺',
+  63981 => '吝',
+  63982 => '燐',
+  63983 => '璘',
+  63984 => '藺',
+  63985 => '隣',
+  63986 => '鱗',
+  63987 => '麟',
+  63988 => '林',
+  63989 => '淋',
+  63990 => '臨',
+  63991 => '立',
+  63992 => '笠',
+  63993 => '粒',
+  63994 => '狀',
+  63995 => '炙',
+  63996 => '識',
+  63997 => '什',
+  63998 => '茶',
+  63999 => '刺',
+  64000 => '切',
+  64001 => '度',
+  64002 => '拓',
+  64003 => '糖',
+  64004 => '宅',
+  64005 => '洞',
+  64006 => '暴',
+  64007 => '輻',
+  64008 => '行',
+  64009 => '降',
+  64010 => '見',
+  64011 => '廓',
+  64012 => '兀',
+  64013 => '嗀',
+  64016 => '塚',
+  64018 => '晴',
+  64021 => '凞',
+  64022 => '猪',
+  64023 => '益',
+  64024 => '礼',
+  64025 => '神',
+  64026 => '祥',
+  64027 => '福',
+  64028 => '靖',
+  64029 => '精',
+  64030 => '羽',
+  64032 => '蘒',
+  64034 => '諸',
+  64037 => '逸',
+  64038 => '都',
+  64042 => '飯',
+  64043 => '飼',
+  64044 => '館',
+  64045 => '鶴',
+  64046 => '郞',
+  64047 => '隷',
+  64048 => '侮',
+  64049 => '僧',
+  64050 => '免',
+  64051 => '勉',
+  64052 => '勤',
+  64053 => '卑',
+  64054 => '喝',
+  64055 => '嘆',
+  64056 => '器',
+  64057 => '塀',
+  64058 => '墨',
+  64059 => '層',
+  64060 => '屮',
+  64061 => '悔',
+  64062 => '慨',
+  64063 => '憎',
+  64064 => '懲',
+  64065 => '敏',
+  64066 => '既',
+  64067 => '暑',
+  64068 => '梅',
+  64069 => '海',
+  64070 => '渚',
+  64071 => '漢',
+  64072 => '煮',
+  64073 => '爫',
+  64074 => '琢',
+  64075 => '碑',
+  64076 => '社',
+  64077 => '祉',
+  64078 => '祈',
+  64079 => '祐',
+  64080 => '祖',
+  64081 => '祝',
+  64082 => '禍',
+  64083 => '禎',
+  64084 => '穀',
+  64085 => '突',
+  64086 => '節',
+  64087 => '練',
+  64088 => '縉',
+  64089 => '繁',
+  64090 => '署',
+  64091 => '者',
+  64092 => '臭',
+  64093 => '艹',
+  64094 => '艹',
+  64095 => '著',
+  64096 => '褐',
+  64097 => '視',
+  64098 => '謁',
+  64099 => '謹',
+  64100 => '賓',
+  64101 => '贈',
+  64102 => '辶',
+  64103 => '逸',
+  64104 => '難',
+  64105 => '響',
+  64106 => '頻',
+  64107 => '恵',
+  64108 => '𤋮',
+  64109 => '舘',
+  64112 => '並',
+  64113 => '况',
+  64114 => '全',
+  64115 => '侀',
+  64116 => '充',
+  64117 => '冀',
+  64118 => '勇',
+  64119 => '勺',
+  64120 => '喝',
+  64121 => '啕',
+  64122 => '喙',
+  64123 => '嗢',
+  64124 => '塚',
+  64125 => '墳',
+  64126 => '奄',
+  64127 => '奔',
+  64128 => '婢',
+  64129 => '嬨',
+  64130 => '廒',
+  64131 => '廙',
+  64132 => '彩',
+  64133 => '徭',
+  64134 => '惘',
+  64135 => '慎',
+  64136 => '愈',
+  64137 => '憎',
+  64138 => '慠',
+  64139 => '懲',
+  64140 => '戴',
+  64141 => '揄',
+  64142 => '搜',
+  64143 => '摒',
+  64144 => '敖',
+  64145 => '晴',
+  64146 => '朗',
+  64147 => '望',
+  64148 => '杖',
+  64149 => '歹',
+  64150 => '殺',
+  64151 => '流',
+  64152 => '滛',
+  64153 => '滋',
+  64154 => '漢',
+  64155 => '瀞',
+  64156 => '煮',
+  64157 => '瞧',
+  64158 => '爵',
+  64159 => '犯',
+  64160 => '猪',
+  64161 => '瑱',
+  64162 => '甆',
+  64163 => '画',
+  64164 => '瘝',
+  64165 => '瘟',
+  64166 => '益',
+  64167 => '盛',
+  64168 => '直',
+  64169 => '睊',
+  64170 => '着',
+  64171 => '磌',
+  64172 => '窱',
+  64173 => '節',
+  64174 => '类',
+  64175 => '絛',
+  64176 => '練',
+  64177 => '缾',
+  64178 => '者',
+  64179 => '荒',
+  64180 => '華',
+  64181 => '蝹',
+  64182 => '襁',
+  64183 => '覆',
+  64184 => '視',
+  64185 => '調',
+  64186 => '諸',
+  64187 => '請',
+  64188 => '謁',
+  64189 => '諾',
+  64190 => '諭',
+  64191 => '謹',
+  64192 => '變',
+  64193 => '贈',
+  64194 => '輸',
+  64195 => '遲',
+  64196 => '醙',
+  64197 => '鉶',
+  64198 => '陼',
+  64199 => '難',
+  64200 => '靖',
+  64201 => '韛',
+  64202 => '響',
+  64203 => '頋',
+  64204 => '頻',
+  64205 => '鬒',
+  64206 => '龜',
+  64207 => '𢡊',
+  64208 => '𢡄',
+  64209 => '𣏕',
+  64210 => '㮝',
+  64211 => '䀘',
+  64212 => '䀹',
+  64213 => '𥉉',
+  64214 => '𥳐',
+  64215 => '𧻓',
+  64216 => '齃',
+  64217 => '龎',
+  64256 => 'ff',
+  64257 => 'fi',
+  64258 => 'fl',
+  64259 => 'ffi',
+  64260 => 'ffl',
+  64261 => 'st',
+  64262 => 'st',
+  64275 => 'մն',
+  64276 => 'մե',
+  64277 => 'մի',
+  64278 => 'վն',
+  64279 => 'մխ',
+  64285 => 'יִ',
+  64287 => 'ײַ',
+  64288 => 'ע',
+  64289 => 'א',
+  64290 => 'ד',
+  64291 => 'ה',
+  64292 => 'כ',
+  64293 => 'ל',
+  64294 => 'ם',
+  64295 => 'ר',
+  64296 => 'ת',
+  64298 => 'שׁ',
+  64299 => 'שׂ',
+  64300 => 'שּׁ',
+  64301 => 'שּׂ',
+  64302 => 'אַ',
+  64303 => 'אָ',
+  64304 => 'אּ',
+  64305 => 'בּ',
+  64306 => 'גּ',
+  64307 => 'דּ',
+  64308 => 'הּ',
+  64309 => 'וּ',
+  64310 => 'זּ',
+  64312 => 'טּ',
+  64313 => 'יּ',
+  64314 => 'ךּ',
+  64315 => 'כּ',
+  64316 => 'לּ',
+  64318 => 'מּ',
+  64320 => 'נּ',
+  64321 => 'סּ',
+  64323 => 'ףּ',
+  64324 => 'פּ',
+  64326 => 'צּ',
+  64327 => 'קּ',
+  64328 => 'רּ',
+  64329 => 'שּ',
+  64330 => 'תּ',
+  64331 => 'וֹ',
+  64332 => 'בֿ',
+  64333 => 'כֿ',
+  64334 => 'פֿ',
+  64335 => 'אל',
+  64336 => 'ٱ',
+  64337 => 'ٱ',
+  64338 => 'ٻ',
+  64339 => 'ٻ',
+  64340 => 'ٻ',
+  64341 => 'ٻ',
+  64342 => 'پ',
+  64343 => 'پ',
+  64344 => 'پ',
+  64345 => 'پ',
+  64346 => 'ڀ',
+  64347 => 'ڀ',
+  64348 => 'ڀ',
+  64349 => 'ڀ',
+  64350 => 'ٺ',
+  64351 => 'ٺ',
+  64352 => 'ٺ',
+  64353 => 'ٺ',
+  64354 => 'ٿ',
+  64355 => 'ٿ',
+  64356 => 'ٿ',
+  64357 => 'ٿ',
+  64358 => 'ٹ',
+  64359 => 'ٹ',
+  64360 => 'ٹ',
+  64361 => 'ٹ',
+  64362 => 'ڤ',
+  64363 => 'ڤ',
+  64364 => 'ڤ',
+  64365 => 'ڤ',
+  64366 => 'ڦ',
+  64367 => 'ڦ',
+  64368 => 'ڦ',
+  64369 => 'ڦ',
+  64370 => 'ڄ',
+  64371 => 'ڄ',
+  64372 => 'ڄ',
+  64373 => 'ڄ',
+  64374 => 'ڃ',
+  64375 => 'ڃ',
+  64376 => 'ڃ',
+  64377 => 'ڃ',
+  64378 => 'چ',
+  64379 => 'چ',
+  64380 => 'چ',
+  64381 => 'چ',
+  64382 => 'ڇ',
+  64383 => 'ڇ',
+  64384 => 'ڇ',
+  64385 => 'ڇ',
+  64386 => 'ڍ',
+  64387 => 'ڍ',
+  64388 => 'ڌ',
+  64389 => 'ڌ',
+  64390 => 'ڎ',
+  64391 => 'ڎ',
+  64392 => 'ڈ',
+  64393 => 'ڈ',
+  64394 => 'ژ',
+  64395 => 'ژ',
+  64396 => 'ڑ',
+  64397 => 'ڑ',
+  64398 => 'ک',
+  64399 => 'ک',
+  64400 => 'ک',
+  64401 => 'ک',
+  64402 => 'گ',
+  64403 => 'گ',
+  64404 => 'گ',
+  64405 => 'گ',
+  64406 => 'ڳ',
+  64407 => 'ڳ',
+  64408 => 'ڳ',
+  64409 => 'ڳ',
+  64410 => 'ڱ',
+  64411 => 'ڱ',
+  64412 => 'ڱ',
+  64413 => 'ڱ',
+  64414 => 'ں',
+  64415 => 'ں',
+  64416 => 'ڻ',
+  64417 => 'ڻ',
+  64418 => 'ڻ',
+  64419 => 'ڻ',
+  64420 => 'ۀ',
+  64421 => 'ۀ',
+  64422 => 'ہ',
+  64423 => 'ہ',
+  64424 => 'ہ',
+  64425 => 'ہ',
+  64426 => 'ھ',
+  64427 => 'ھ',
+  64428 => 'ھ',
+  64429 => 'ھ',
+  64430 => 'ے',
+  64431 => 'ے',
+  64432 => 'ۓ',
+  64433 => 'ۓ',
+  64467 => 'ڭ',
+  64468 => 'ڭ',
+  64469 => 'ڭ',
+  64470 => 'ڭ',
+  64471 => 'ۇ',
+  64472 => 'ۇ',
+  64473 => 'ۆ',
+  64474 => 'ۆ',
+  64475 => 'ۈ',
+  64476 => 'ۈ',
+  64477 => 'ۇٴ',
+  64478 => 'ۋ',
+  64479 => 'ۋ',
+  64480 => 'ۅ',
+  64481 => 'ۅ',
+  64482 => 'ۉ',
+  64483 => 'ۉ',
+  64484 => 'ې',
+  64485 => 'ې',
+  64486 => 'ې',
+  64487 => 'ې',
+  64488 => 'ى',
+  64489 => 'ى',
+  64490 => 'ئا',
+  64491 => 'ئا',
+  64492 => 'ئە',
+  64493 => 'ئە',
+  64494 => 'ئو',
+  64495 => 'ئو',
+  64496 => 'ئۇ',
+  64497 => 'ئۇ',
+  64498 => 'ئۆ',
+  64499 => 'ئۆ',
+  64500 => 'ئۈ',
+  64501 => 'ئۈ',
+  64502 => 'ئې',
+  64503 => 'ئې',
+  64504 => 'ئې',
+  64505 => 'ئى',
+  64506 => 'ئى',
+  64507 => 'ئى',
+  64508 => 'ی',
+  64509 => 'ی',
+  64510 => 'ی',
+  64511 => 'ی',
+  64512 => 'ئج',
+  64513 => 'ئح',
+  64514 => 'ئم',
+  64515 => 'ئى',
+  64516 => 'ئي',
+  64517 => 'بج',
+  64518 => 'بح',
+  64519 => 'بخ',
+  64520 => 'بم',
+  64521 => 'بى',
+  64522 => 'بي',
+  64523 => 'تج',
+  64524 => 'تح',
+  64525 => 'تخ',
+  64526 => 'تم',
+  64527 => 'تى',
+  64528 => 'تي',
+  64529 => 'ثج',
+  64530 => 'ثم',
+  64531 => 'ثى',
+  64532 => 'ثي',
+  64533 => 'جح',
+  64534 => 'جم',
+  64535 => 'حج',
+  64536 => 'حم',
+  64537 => 'خج',
+  64538 => 'خح',
+  64539 => 'خم',
+  64540 => 'سج',
+  64541 => 'سح',
+  64542 => 'سخ',
+  64543 => 'سم',
+  64544 => 'صح',
+  64545 => 'صم',
+  64546 => 'ضج',
+  64547 => 'ضح',
+  64548 => 'ضخ',
+  64549 => 'ضم',
+  64550 => 'طح',
+  64551 => 'طم',
+  64552 => 'ظم',
+  64553 => 'عج',
+  64554 => 'عم',
+  64555 => 'غج',
+  64556 => 'غم',
+  64557 => 'فج',
+  64558 => 'فح',
+  64559 => 'فخ',
+  64560 => 'فم',
+  64561 => 'فى',
+  64562 => 'في',
+  64563 => 'قح',
+  64564 => 'قم',
+  64565 => 'قى',
+  64566 => 'قي',
+  64567 => 'كا',
+  64568 => 'كج',
+  64569 => 'كح',
+  64570 => 'كخ',
+  64571 => 'كل',
+  64572 => 'كم',
+  64573 => 'كى',
+  64574 => 'كي',
+  64575 => 'لج',
+  64576 => 'لح',
+  64577 => 'لخ',
+  64578 => 'لم',
+  64579 => 'لى',
+  64580 => 'لي',
+  64581 => 'مج',
+  64582 => 'مح',
+  64583 => 'مخ',
+  64584 => 'مم',
+  64585 => 'مى',
+  64586 => 'مي',
+  64587 => 'نج',
+  64588 => 'نح',
+  64589 => 'نخ',
+  64590 => 'نم',
+  64591 => 'نى',
+  64592 => 'ني',
+  64593 => 'هج',
+  64594 => 'هم',
+  64595 => 'هى',
+  64596 => 'هي',
+  64597 => 'يج',
+  64598 => 'يح',
+  64599 => 'يخ',
+  64600 => 'يم',
+  64601 => 'يى',
+  64602 => 'يي',
+  64603 => 'ذٰ',
+  64604 => 'رٰ',
+  64605 => 'ىٰ',
+  64612 => 'ئر',
+  64613 => 'ئز',
+  64614 => 'ئم',
+  64615 => 'ئن',
+  64616 => 'ئى',
+  64617 => 'ئي',
+  64618 => 'بر',
+  64619 => 'بز',
+  64620 => 'بم',
+  64621 => 'بن',
+  64622 => 'بى',
+  64623 => 'بي',
+  64624 => 'تر',
+  64625 => 'تز',
+  64626 => 'تم',
+  64627 => 'تن',
+  64628 => 'تى',
+  64629 => 'تي',
+  64630 => 'ثر',
+  64631 => 'ثز',
+  64632 => 'ثم',
+  64633 => 'ثن',
+  64634 => 'ثى',
+  64635 => 'ثي',
+  64636 => 'فى',
+  64637 => 'في',
+  64638 => 'قى',
+  64639 => 'قي',
+  64640 => 'كا',
+  64641 => 'كل',
+  64642 => 'كم',
+  64643 => 'كى',
+  64644 => 'كي',
+  64645 => 'لم',
+  64646 => 'لى',
+  64647 => 'لي',
+  64648 => 'ما',
+  64649 => 'مم',
+  64650 => 'نر',
+  64651 => 'نز',
+  64652 => 'نم',
+  64653 => 'نن',
+  64654 => 'نى',
+  64655 => 'ني',
+  64656 => 'ىٰ',
+  64657 => 'ير',
+  64658 => 'يز',
+  64659 => 'يم',
+  64660 => 'ين',
+  64661 => 'يى',
+  64662 => 'يي',
+  64663 => 'ئج',
+  64664 => 'ئح',
+  64665 => 'ئخ',
+  64666 => 'ئم',
+  64667 => 'ئه',
+  64668 => 'بج',
+  64669 => 'بح',
+  64670 => 'بخ',
+  64671 => 'بم',
+  64672 => 'به',
+  64673 => 'تج',
+  64674 => 'تح',
+  64675 => 'تخ',
+  64676 => 'تم',
+  64677 => 'ته',
+  64678 => 'ثم',
+  64679 => 'جح',
+  64680 => 'جم',
+  64681 => 'حج',
+  64682 => 'حم',
+  64683 => 'خج',
+  64684 => 'خم',
+  64685 => 'سج',
+  64686 => 'سح',
+  64687 => 'سخ',
+  64688 => 'سم',
+  64689 => 'صح',
+  64690 => 'صخ',
+  64691 => 'صم',
+  64692 => 'ضج',
+  64693 => 'ضح',
+  64694 => 'ضخ',
+  64695 => 'ضم',
+  64696 => 'طح',
+  64697 => 'ظم',
+  64698 => 'عج',
+  64699 => 'عم',
+  64700 => 'غج',
+  64701 => 'غم',
+  64702 => 'فج',
+  64703 => 'فح',
+  64704 => 'فخ',
+  64705 => 'فم',
+  64706 => 'قح',
+  64707 => 'قم',
+  64708 => 'كج',
+  64709 => 'كح',
+  64710 => 'كخ',
+  64711 => 'كل',
+  64712 => 'كم',
+  64713 => 'لج',
+  64714 => 'لح',
+  64715 => 'لخ',
+  64716 => 'لم',
+  64717 => 'له',
+  64718 => 'مج',
+  64719 => 'مح',
+  64720 => 'مخ',
+  64721 => 'مم',
+  64722 => 'نج',
+  64723 => 'نح',
+  64724 => 'نخ',
+  64725 => 'نم',
+  64726 => 'نه',
+  64727 => 'هج',
+  64728 => 'هم',
+  64729 => 'هٰ',
+  64730 => 'يج',
+  64731 => 'يح',
+  64732 => 'يخ',
+  64733 => 'يم',
+  64734 => 'يه',
+  64735 => 'ئم',
+  64736 => 'ئه',
+  64737 => 'بم',
+  64738 => 'به',
+  64739 => 'تم',
+  64740 => 'ته',
+  64741 => 'ثم',
+  64742 => 'ثه',
+  64743 => 'سم',
+  64744 => 'سه',
+  64745 => 'شم',
+  64746 => 'شه',
+  64747 => 'كل',
+  64748 => 'كم',
+  64749 => 'لم',
+  64750 => 'نم',
+  64751 => 'نه',
+  64752 => 'يم',
+  64753 => 'يه',
+  64754 => 'ـَّ',
+  64755 => 'ـُّ',
+  64756 => 'ـِّ',
+  64757 => 'طى',
+  64758 => 'طي',
+  64759 => 'عى',
+  64760 => 'عي',
+  64761 => 'غى',
+  64762 => 'غي',
+  64763 => 'سى',
+  64764 => 'سي',
+  64765 => 'شى',
+  64766 => 'شي',
+  64767 => 'حى',
+  64768 => 'حي',
+  64769 => 'جى',
+  64770 => 'جي',
+  64771 => 'خى',
+  64772 => 'خي',
+  64773 => 'صى',
+  64774 => 'صي',
+  64775 => 'ضى',
+  64776 => 'ضي',
+  64777 => 'شج',
+  64778 => 'شح',
+  64779 => 'شخ',
+  64780 => 'شم',
+  64781 => 'شر',
+  64782 => 'سر',
+  64783 => 'صر',
+  64784 => 'ضر',
+  64785 => 'طى',
+  64786 => 'طي',
+  64787 => 'عى',
+  64788 => 'عي',
+  64789 => 'غى',
+  64790 => 'غي',
+  64791 => 'سى',
+  64792 => 'سي',
+  64793 => 'شى',
+  64794 => 'شي',
+  64795 => 'حى',
+  64796 => 'حي',
+  64797 => 'جى',
+  64798 => 'جي',
+  64799 => 'خى',
+  64800 => 'خي',
+  64801 => 'صى',
+  64802 => 'صي',
+  64803 => 'ضى',
+  64804 => 'ضي',
+  64805 => 'شج',
+  64806 => 'شح',
+  64807 => 'شخ',
+  64808 => 'شم',
+  64809 => 'شر',
+  64810 => 'سر',
+  64811 => 'صر',
+  64812 => 'ضر',
+  64813 => 'شج',
+  64814 => 'شح',
+  64815 => 'شخ',
+  64816 => 'شم',
+  64817 => 'سه',
+  64818 => 'شه',
+  64819 => 'طم',
+  64820 => 'سج',
+  64821 => 'سح',
+  64822 => 'سخ',
+  64823 => 'شج',
+  64824 => 'شح',
+  64825 => 'شخ',
+  64826 => 'طم',
+  64827 => 'ظم',
+  64828 => 'اً',
+  64829 => 'اً',
+  64848 => 'تجم',
+  64849 => 'تحج',
+  64850 => 'تحج',
+  64851 => 'تحم',
+  64852 => 'تخم',
+  64853 => 'تمج',
+  64854 => 'تمح',
+  64855 => 'تمخ',
+  64856 => 'جمح',
+  64857 => 'جمح',
+  64858 => 'حمي',
+  64859 => 'حمى',
+  64860 => 'سحج',
+  64861 => 'سجح',
+  64862 => 'سجى',
+  64863 => 'سمح',
+  64864 => 'سمح',
+  64865 => 'سمج',
+  64866 => 'سمم',
+  64867 => 'سمم',
+  64868 => 'صحح',
+  64869 => 'صحح',
+  64870 => 'صمم',
+  64871 => 'شحم',
+  64872 => 'شحم',
+  64873 => 'شجي',
+  64874 => 'شمخ',
+  64875 => 'شمخ',
+  64876 => 'شمم',
+  64877 => 'شمم',
+  64878 => 'ضحى',
+  64879 => 'ضخم',
+  64880 => 'ضخم',
+  64881 => 'طمح',
+  64882 => 'طمح',
+  64883 => 'طمم',
+  64884 => 'طمي',
+  64885 => 'عجم',
+  64886 => 'عمم',
+  64887 => 'عمم',
+  64888 => 'عمى',
+  64889 => 'غمم',
+  64890 => 'غمي',
+  64891 => 'غمى',
+  64892 => 'فخم',
+  64893 => 'فخم',
+  64894 => 'قمح',
+  64895 => 'قمم',
+  64896 => 'لحم',
+  64897 => 'لحي',
+  64898 => 'لحى',
+  64899 => 'لجج',
+  64900 => 'لجج',
+  64901 => 'لخم',
+  64902 => 'لخم',
+  64903 => 'لمح',
+  64904 => 'لمح',
+  64905 => 'محج',
+  64906 => 'محم',
+  64907 => 'محي',
+  64908 => 'مجح',
+  64909 => 'مجم',
+  64910 => 'مخج',
+  64911 => 'مخم',
+  64914 => 'مجخ',
+  64915 => 'همج',
+  64916 => 'همم',
+  64917 => 'نحم',
+  64918 => 'نحى',
+  64919 => 'نجم',
+  64920 => 'نجم',
+  64921 => 'نجى',
+  64922 => 'نمي',
+  64923 => 'نمى',
+  64924 => 'يمم',
+  64925 => 'يمم',
+  64926 => 'بخي',
+  64927 => 'تجي',
+  64928 => 'تجى',
+  64929 => 'تخي',
+  64930 => 'تخى',
+  64931 => 'تمي',
+  64932 => 'تمى',
+  64933 => 'جمي',
+  64934 => 'جحى',
+  64935 => 'جمى',
+  64936 => 'سخى',
+  64937 => 'صحي',
+  64938 => 'شحي',
+  64939 => 'ضحي',
+  64940 => 'لجي',
+  64941 => 'لمي',
+  64942 => 'يحي',
+  64943 => 'يجي',
+  64944 => 'يمي',
+  64945 => 'ممي',
+  64946 => 'قمي',
+  64947 => 'نحي',
+  64948 => 'قمح',
+  64949 => 'لحم',
+  64950 => 'عمي',
+  64951 => 'كمي',
+  64952 => 'نجح',
+  64953 => 'مخي',
+  64954 => 'لجم',
+  64955 => 'كمم',
+  64956 => 'لجم',
+  64957 => 'نجح',
+  64958 => 'جحي',
+  64959 => 'حجي',
+  64960 => 'مجي',
+  64961 => 'فمي',
+  64962 => 'بحي',
+  64963 => 'كمم',
+  64964 => 'عجم',
+  64965 => 'صمم',
+  64966 => 'سخي',
+  64967 => 'نجي',
+  65008 => 'صلے',
+  65009 => 'قلے',
+  65010 => 'الله',
+  65011 => 'اكبر',
+  65012 => 'محمد',
+  65013 => 'صلعم',
+  65014 => 'رسول',
+  65015 => 'عليه',
+  65016 => 'وسلم',
+  65017 => 'صلى',
+  65020 => 'ریال',
+  65041 => '、',
+  65047 => '〖',
+  65048 => '〗',
+  65073 => '—',
+  65074 => '–',
+  65081 => '〔',
+  65082 => '〕',
+  65083 => '【',
+  65084 => '】',
+  65085 => '《',
+  65086 => '》',
+  65087 => '〈',
+  65088 => '〉',
+  65089 => '「',
+  65090 => '」',
+  65091 => '『',
+  65092 => '』',
+  65105 => '、',
+  65112 => '—',
+  65117 => '〔',
+  65118 => '〕',
+  65123 => '-',
+  65137 => 'ـً',
+  65143 => 'ـَ',
+  65145 => 'ـُ',
+  65147 => 'ـِ',
+  65149 => 'ـّ',
+  65151 => 'ـْ',
+  65152 => 'ء',
+  65153 => 'آ',
+  65154 => 'آ',
+  65155 => 'أ',
+  65156 => 'أ',
+  65157 => 'ؤ',
+  65158 => 'ؤ',
+  65159 => 'إ',
+  65160 => 'إ',
+  65161 => 'ئ',
+  65162 => 'ئ',
+  65163 => 'ئ',
+  65164 => 'ئ',
+  65165 => 'ا',
+  65166 => 'ا',
+  65167 => 'ب',
+  65168 => 'ب',
+  65169 => 'ب',
+  65170 => 'ب',
+  65171 => 'ة',
+  65172 => 'ة',
+  65173 => 'ت',
+  65174 => 'ت',
+  65175 => 'ت',
+  65176 => 'ت',
+  65177 => 'ث',
+  65178 => 'ث',
+  65179 => 'ث',
+  65180 => 'ث',
+  65181 => 'ج',
+  65182 => 'ج',
+  65183 => 'ج',
+  65184 => 'ج',
+  65185 => 'ح',
+  65186 => 'ح',
+  65187 => 'ح',
+  65188 => 'ح',
+  65189 => 'خ',
+  65190 => 'خ',
+  65191 => 'خ',
+  65192 => 'خ',
+  65193 => 'د',
+  65194 => 'د',
+  65195 => 'ذ',
+  65196 => 'ذ',
+  65197 => 'ر',
+  65198 => 'ر',
+  65199 => 'ز',
+  65200 => 'ز',
+  65201 => 'س',
+  65202 => 'س',
+  65203 => 'س',
+  65204 => 'س',
+  65205 => 'ش',
+  65206 => 'ش',
+  65207 => 'ش',
+  65208 => 'ش',
+  65209 => 'ص',
+  65210 => 'ص',
+  65211 => 'ص',
+  65212 => 'ص',
+  65213 => 'ض',
+  65214 => 'ض',
+  65215 => 'ض',
+  65216 => 'ض',
+  65217 => 'ط',
+  65218 => 'ط',
+  65219 => 'ط',
+  65220 => 'ط',
+  65221 => 'ظ',
+  65222 => 'ظ',
+  65223 => 'ظ',
+  65224 => 'ظ',
+  65225 => 'ع',
+  65226 => 'ع',
+  65227 => 'ع',
+  65228 => 'ع',
+  65229 => 'غ',
+  65230 => 'غ',
+  65231 => 'غ',
+  65232 => 'غ',
+  65233 => 'ف',
+  65234 => 'ف',
+  65235 => 'ف',
+  65236 => 'ف',
+  65237 => 'ق',
+  65238 => 'ق',
+  65239 => 'ق',
+  65240 => 'ق',
+  65241 => 'ك',
+  65242 => 'ك',
+  65243 => 'ك',
+  65244 => 'ك',
+  65245 => 'ل',
+  65246 => 'ل',
+  65247 => 'ل',
+  65248 => 'ل',
+  65249 => 'م',
+  65250 => 'م',
+  65251 => 'م',
+  65252 => 'م',
+  65253 => 'ن',
+  65254 => 'ن',
+  65255 => 'ن',
+  65256 => 'ن',
+  65257 => 'ه',
+  65258 => 'ه',
+  65259 => 'ه',
+  65260 => 'ه',
+  65261 => 'و',
+  65262 => 'و',
+  65263 => 'ى',
+  65264 => 'ى',
+  65265 => 'ي',
+  65266 => 'ي',
+  65267 => 'ي',
+  65268 => 'ي',
+  65269 => 'لآ',
+  65270 => 'لآ',
+  65271 => 'لأ',
+  65272 => 'لأ',
+  65273 => 'لإ',
+  65274 => 'لإ',
+  65275 => 'لا',
+  65276 => 'لا',
+  65293 => '-',
+  65294 => '.',
+  65296 => '0',
+  65297 => '1',
+  65298 => '2',
+  65299 => '3',
+  65300 => '4',
+  65301 => '5',
+  65302 => '6',
+  65303 => '7',
+  65304 => '8',
+  65305 => '9',
+  65313 => 'a',
+  65314 => 'b',
+  65315 => 'c',
+  65316 => 'd',
+  65317 => 'e',
+  65318 => 'f',
+  65319 => 'g',
+  65320 => 'h',
+  65321 => 'i',
+  65322 => 'j',
+  65323 => 'k',
+  65324 => 'l',
+  65325 => 'm',
+  65326 => 'n',
+  65327 => 'o',
+  65328 => 'p',
+  65329 => 'q',
+  65330 => 'r',
+  65331 => 's',
+  65332 => 't',
+  65333 => 'u',
+  65334 => 'v',
+  65335 => 'w',
+  65336 => 'x',
+  65337 => 'y',
+  65338 => 'z',
+  65345 => 'a',
+  65346 => 'b',
+  65347 => 'c',
+  65348 => 'd',
+  65349 => 'e',
+  65350 => 'f',
+  65351 => 'g',
+  65352 => 'h',
+  65353 => 'i',
+  65354 => 'j',
+  65355 => 'k',
+  65356 => 'l',
+  65357 => 'm',
+  65358 => 'n',
+  65359 => 'o',
+  65360 => 'p',
+  65361 => 'q',
+  65362 => 'r',
+  65363 => 's',
+  65364 => 't',
+  65365 => 'u',
+  65366 => 'v',
+  65367 => 'w',
+  65368 => 'x',
+  65369 => 'y',
+  65370 => 'z',
+  65375 => '⦅',
+  65376 => '⦆',
+  65377 => '.',
+  65378 => '「',
+  65379 => '」',
+  65380 => '、',
+  65381 => '・',
+  65382 => 'ヲ',
+  65383 => 'ァ',
+  65384 => 'ィ',
+  65385 => 'ゥ',
+  65386 => 'ェ',
+  65387 => 'ォ',
+  65388 => 'ャ',
+  65389 => 'ュ',
+  65390 => 'ョ',
+  65391 => 'ッ',
+  65392 => 'ー',
+  65393 => 'ア',
+  65394 => 'イ',
+  65395 => 'ウ',
+  65396 => 'エ',
+  65397 => 'オ',
+  65398 => 'カ',
+  65399 => 'キ',
+  65400 => 'ク',
+  65401 => 'ケ',
+  65402 => 'コ',
+  65403 => 'サ',
+  65404 => 'シ',
+  65405 => 'ス',
+  65406 => 'セ',
+  65407 => 'ソ',
+  65408 => 'タ',
+  65409 => 'チ',
+  65410 => 'ツ',
+  65411 => 'テ',
+  65412 => 'ト',
+  65413 => 'ナ',
+  65414 => 'ニ',
+  65415 => 'ヌ',
+  65416 => 'ネ',
+  65417 => 'ノ',
+  65418 => 'ハ',
+  65419 => 'ヒ',
+  65420 => 'フ',
+  65421 => 'ヘ',
+  65422 => 'ホ',
+  65423 => 'マ',
+  65424 => 'ミ',
+  65425 => 'ム',
+  65426 => 'メ',
+  65427 => 'モ',
+  65428 => 'ヤ',
+  65429 => 'ユ',
+  65430 => 'ヨ',
+  65431 => 'ラ',
+  65432 => 'リ',
+  65433 => 'ル',
+  65434 => 'レ',
+  65435 => 'ロ',
+  65436 => 'ワ',
+  65437 => 'ン',
+  65438 => '゙',
+  65439 => '゚',
+  65441 => 'ᄀ',
+  65442 => 'ᄁ',
+  65443 => 'ᆪ',
+  65444 => 'ᄂ',
+  65445 => 'ᆬ',
+  65446 => 'ᆭ',
+  65447 => 'ᄃ',
+  65448 => 'ᄄ',
+  65449 => 'ᄅ',
+  65450 => 'ᆰ',
+  65451 => 'ᆱ',
+  65452 => 'ᆲ',
+  65453 => 'ᆳ',
+  65454 => 'ᆴ',
+  65455 => 'ᆵ',
+  65456 => 'ᄚ',
+  65457 => 'ᄆ',
+  65458 => 'ᄇ',
+  65459 => 'ᄈ',
+  65460 => 'ᄡ',
+  65461 => 'ᄉ',
+  65462 => 'ᄊ',
+  65463 => 'ᄋ',
+  65464 => 'ᄌ',
+  65465 => 'ᄍ',
+  65466 => 'ᄎ',
+  65467 => 'ᄏ',
+  65468 => 'ᄐ',
+  65469 => 'ᄑ',
+  65470 => 'ᄒ',
+  65474 => 'ᅡ',
+  65475 => 'ᅢ',
+  65476 => 'ᅣ',
+  65477 => 'ᅤ',
+  65478 => 'ᅥ',
+  65479 => 'ᅦ',
+  65482 => 'ᅧ',
+  65483 => 'ᅨ',
+  65484 => 'ᅩ',
+  65485 => 'ᅪ',
+  65486 => 'ᅫ',
+  65487 => 'ᅬ',
+  65490 => 'ᅭ',
+  65491 => 'ᅮ',
+  65492 => 'ᅯ',
+  65493 => 'ᅰ',
+  65494 => 'ᅱ',
+  65495 => 'ᅲ',
+  65498 => 'ᅳ',
+  65499 => 'ᅴ',
+  65500 => 'ᅵ',
+  65504 => '¢',
+  65505 => '£',
+  65506 => '¬',
+  65508 => '¦',
+  65509 => '¥',
+  65510 => '₩',
+  65512 => '│',
+  65513 => '←',
+  65514 => '↑',
+  65515 => '→',
+  65516 => '↓',
+  65517 => '■',
+  65518 => '○',
+  66560 => '𐐨',
+  66561 => '𐐩',
+  66562 => '𐐪',
+  66563 => '𐐫',
+  66564 => '𐐬',
+  66565 => '𐐭',
+  66566 => '𐐮',
+  66567 => '𐐯',
+  66568 => '𐐰',
+  66569 => '𐐱',
+  66570 => '𐐲',
+  66571 => '𐐳',
+  66572 => '𐐴',
+  66573 => '𐐵',
+  66574 => '𐐶',
+  66575 => '𐐷',
+  66576 => '𐐸',
+  66577 => '𐐹',
+  66578 => '𐐺',
+  66579 => '𐐻',
+  66580 => '𐐼',
+  66581 => '𐐽',
+  66582 => '𐐾',
+  66583 => '𐐿',
+  66584 => '𐑀',
+  66585 => '𐑁',
+  66586 => '𐑂',
+  66587 => '𐑃',
+  66588 => '𐑄',
+  66589 => '𐑅',
+  66590 => '𐑆',
+  66591 => '𐑇',
+  66592 => '𐑈',
+  66593 => '𐑉',
+  66594 => '𐑊',
+  66595 => '𐑋',
+  66596 => '𐑌',
+  66597 => '𐑍',
+  66598 => '𐑎',
+  66599 => '𐑏',
+  66736 => '𐓘',
+  66737 => '𐓙',
+  66738 => '𐓚',
+  66739 => '𐓛',
+  66740 => '𐓜',
+  66741 => '𐓝',
+  66742 => '𐓞',
+  66743 => '𐓟',
+  66744 => '𐓠',
+  66745 => '𐓡',
+  66746 => '𐓢',
+  66747 => '𐓣',
+  66748 => '𐓤',
+  66749 => '𐓥',
+  66750 => '𐓦',
+  66751 => '𐓧',
+  66752 => '𐓨',
+  66753 => '𐓩',
+  66754 => '𐓪',
+  66755 => '𐓫',
+  66756 => '𐓬',
+  66757 => '𐓭',
+  66758 => '𐓮',
+  66759 => '𐓯',
+  66760 => '𐓰',
+  66761 => '𐓱',
+  66762 => '𐓲',
+  66763 => '𐓳',
+  66764 => '𐓴',
+  66765 => '𐓵',
+  66766 => '𐓶',
+  66767 => '𐓷',
+  66768 => '𐓸',
+  66769 => '𐓹',
+  66770 => '𐓺',
+  66771 => '𐓻',
+  68736 => '𐳀',
+  68737 => '𐳁',
+  68738 => '𐳂',
+  68739 => '𐳃',
+  68740 => '𐳄',
+  68741 => '𐳅',
+  68742 => '𐳆',
+  68743 => '𐳇',
+  68744 => '𐳈',
+  68745 => '𐳉',
+  68746 => '𐳊',
+  68747 => '𐳋',
+  68748 => '𐳌',
+  68749 => '𐳍',
+  68750 => '𐳎',
+  68751 => '𐳏',
+  68752 => '𐳐',
+  68753 => '𐳑',
+  68754 => '𐳒',
+  68755 => '𐳓',
+  68756 => '𐳔',
+  68757 => '𐳕',
+  68758 => '𐳖',
+  68759 => '𐳗',
+  68760 => '𐳘',
+  68761 => '𐳙',
+  68762 => '𐳚',
+  68763 => '𐳛',
+  68764 => '𐳜',
+  68765 => '𐳝',
+  68766 => '𐳞',
+  68767 => '𐳟',
+  68768 => '𐳠',
+  68769 => '𐳡',
+  68770 => '𐳢',
+  68771 => '𐳣',
+  68772 => '𐳤',
+  68773 => '𐳥',
+  68774 => '𐳦',
+  68775 => '𐳧',
+  68776 => '𐳨',
+  68777 => '𐳩',
+  68778 => '𐳪',
+  68779 => '𐳫',
+  68780 => '𐳬',
+  68781 => '𐳭',
+  68782 => '𐳮',
+  68783 => '𐳯',
+  68784 => '𐳰',
+  68785 => '𐳱',
+  68786 => '𐳲',
+  71840 => '𑣀',
+  71841 => '𑣁',
+  71842 => '𑣂',
+  71843 => '𑣃',
+  71844 => '𑣄',
+  71845 => '𑣅',
+  71846 => '𑣆',
+  71847 => '𑣇',
+  71848 => '𑣈',
+  71849 => '𑣉',
+  71850 => '𑣊',
+  71851 => '𑣋',
+  71852 => '𑣌',
+  71853 => '𑣍',
+  71854 => '𑣎',
+  71855 => '𑣏',
+  71856 => '𑣐',
+  71857 => '𑣑',
+  71858 => '𑣒',
+  71859 => '𑣓',
+  71860 => '𑣔',
+  71861 => '𑣕',
+  71862 => '𑣖',
+  71863 => '𑣗',
+  71864 => '𑣘',
+  71865 => '𑣙',
+  71866 => '𑣚',
+  71867 => '𑣛',
+  71868 => '𑣜',
+  71869 => '𑣝',
+  71870 => '𑣞',
+  71871 => '𑣟',
+  93760 => '𖹠',
+  93761 => '𖹡',
+  93762 => '𖹢',
+  93763 => '𖹣',
+  93764 => '𖹤',
+  93765 => '𖹥',
+  93766 => '𖹦',
+  93767 => '𖹧',
+  93768 => '𖹨',
+  93769 => '𖹩',
+  93770 => '𖹪',
+  93771 => '𖹫',
+  93772 => '𖹬',
+  93773 => '𖹭',
+  93774 => '𖹮',
+  93775 => '𖹯',
+  93776 => '𖹰',
+  93777 => '𖹱',
+  93778 => '𖹲',
+  93779 => '𖹳',
+  93780 => '𖹴',
+  93781 => '𖹵',
+  93782 => '𖹶',
+  93783 => '𖹷',
+  93784 => '𖹸',
+  93785 => '𖹹',
+  93786 => '𖹺',
+  93787 => '𖹻',
+  93788 => '𖹼',
+  93789 => '𖹽',
+  93790 => '𖹾',
+  93791 => '𖹿',
+  119134 => '𝅗𝅥',
+  119135 => '𝅘𝅥',
+  119136 => '𝅘𝅥𝅮',
+  119137 => '𝅘𝅥𝅯',
+  119138 => '𝅘𝅥𝅰',
+  119139 => '𝅘𝅥𝅱',
+  119140 => '𝅘𝅥𝅲',
+  119227 => '𝆹𝅥',
+  119228 => '𝆺𝅥',
+  119229 => '𝆹𝅥𝅮',
+  119230 => '𝆺𝅥𝅮',
+  119231 => '𝆹𝅥𝅯',
+  119232 => '𝆺𝅥𝅯',
+  119808 => 'a',
+  119809 => 'b',
+  119810 => 'c',
+  119811 => 'd',
+  119812 => 'e',
+  119813 => 'f',
+  119814 => 'g',
+  119815 => 'h',
+  119816 => 'i',
+  119817 => 'j',
+  119818 => 'k',
+  119819 => 'l',
+  119820 => 'm',
+  119821 => 'n',
+  119822 => 'o',
+  119823 => 'p',
+  119824 => 'q',
+  119825 => 'r',
+  119826 => 's',
+  119827 => 't',
+  119828 => 'u',
+  119829 => 'v',
+  119830 => 'w',
+  119831 => 'x',
+  119832 => 'y',
+  119833 => 'z',
+  119834 => 'a',
+  119835 => 'b',
+  119836 => 'c',
+  119837 => 'd',
+  119838 => 'e',
+  119839 => 'f',
+  119840 => 'g',
+  119841 => 'h',
+  119842 => 'i',
+  119843 => 'j',
+  119844 => 'k',
+  119845 => 'l',
+  119846 => 'm',
+  119847 => 'n',
+  119848 => 'o',
+  119849 => 'p',
+  119850 => 'q',
+  119851 => 'r',
+  119852 => 's',
+  119853 => 't',
+  119854 => 'u',
+  119855 => 'v',
+  119856 => 'w',
+  119857 => 'x',
+  119858 => 'y',
+  119859 => 'z',
+  119860 => 'a',
+  119861 => 'b',
+  119862 => 'c',
+  119863 => 'd',
+  119864 => 'e',
+  119865 => 'f',
+  119866 => 'g',
+  119867 => 'h',
+  119868 => 'i',
+  119869 => 'j',
+  119870 => 'k',
+  119871 => 'l',
+  119872 => 'm',
+  119873 => 'n',
+  119874 => 'o',
+  119875 => 'p',
+  119876 => 'q',
+  119877 => 'r',
+  119878 => 's',
+  119879 => 't',
+  119880 => 'u',
+  119881 => 'v',
+  119882 => 'w',
+  119883 => 'x',
+  119884 => 'y',
+  119885 => 'z',
+  119886 => 'a',
+  119887 => 'b',
+  119888 => 'c',
+  119889 => 'd',
+  119890 => 'e',
+  119891 => 'f',
+  119892 => 'g',
+  119894 => 'i',
+  119895 => 'j',
+  119896 => 'k',
+  119897 => 'l',
+  119898 => 'm',
+  119899 => 'n',
+  119900 => 'o',
+  119901 => 'p',
+  119902 => 'q',
+  119903 => 'r',
+  119904 => 's',
+  119905 => 't',
+  119906 => 'u',
+  119907 => 'v',
+  119908 => 'w',
+  119909 => 'x',
+  119910 => 'y',
+  119911 => 'z',
+  119912 => 'a',
+  119913 => 'b',
+  119914 => 'c',
+  119915 => 'd',
+  119916 => 'e',
+  119917 => 'f',
+  119918 => 'g',
+  119919 => 'h',
+  119920 => 'i',
+  119921 => 'j',
+  119922 => 'k',
+  119923 => 'l',
+  119924 => 'm',
+  119925 => 'n',
+  119926 => 'o',
+  119927 => 'p',
+  119928 => 'q',
+  119929 => 'r',
+  119930 => 's',
+  119931 => 't',
+  119932 => 'u',
+  119933 => 'v',
+  119934 => 'w',
+  119935 => 'x',
+  119936 => 'y',
+  119937 => 'z',
+  119938 => 'a',
+  119939 => 'b',
+  119940 => 'c',
+  119941 => 'd',
+  119942 => 'e',
+  119943 => 'f',
+  119944 => 'g',
+  119945 => 'h',
+  119946 => 'i',
+  119947 => 'j',
+  119948 => 'k',
+  119949 => 'l',
+  119950 => 'm',
+  119951 => 'n',
+  119952 => 'o',
+  119953 => 'p',
+  119954 => 'q',
+  119955 => 'r',
+  119956 => 's',
+  119957 => 't',
+  119958 => 'u',
+  119959 => 'v',
+  119960 => 'w',
+  119961 => 'x',
+  119962 => 'y',
+  119963 => 'z',
+  119964 => 'a',
+  119966 => 'c',
+  119967 => 'd',
+  119970 => 'g',
+  119973 => 'j',
+  119974 => 'k',
+  119977 => 'n',
+  119978 => 'o',
+  119979 => 'p',
+  119980 => 'q',
+  119982 => 's',
+  119983 => 't',
+  119984 => 'u',
+  119985 => 'v',
+  119986 => 'w',
+  119987 => 'x',
+  119988 => 'y',
+  119989 => 'z',
+  119990 => 'a',
+  119991 => 'b',
+  119992 => 'c',
+  119993 => 'd',
+  119995 => 'f',
+  119997 => 'h',
+  119998 => 'i',
+  119999 => 'j',
+  120000 => 'k',
+  120001 => 'l',
+  120002 => 'm',
+  120003 => 'n',
+  120005 => 'p',
+  120006 => 'q',
+  120007 => 'r',
+  120008 => 's',
+  120009 => 't',
+  120010 => 'u',
+  120011 => 'v',
+  120012 => 'w',
+  120013 => 'x',
+  120014 => 'y',
+  120015 => 'z',
+  120016 => 'a',
+  120017 => 'b',
+  120018 => 'c',
+  120019 => 'd',
+  120020 => 'e',
+  120021 => 'f',
+  120022 => 'g',
+  120023 => 'h',
+  120024 => 'i',
+  120025 => 'j',
+  120026 => 'k',
+  120027 => 'l',
+  120028 => 'm',
+  120029 => 'n',
+  120030 => 'o',
+  120031 => 'p',
+  120032 => 'q',
+  120033 => 'r',
+  120034 => 's',
+  120035 => 't',
+  120036 => 'u',
+  120037 => 'v',
+  120038 => 'w',
+  120039 => 'x',
+  120040 => 'y',
+  120041 => 'z',
+  120042 => 'a',
+  120043 => 'b',
+  120044 => 'c',
+  120045 => 'd',
+  120046 => 'e',
+  120047 => 'f',
+  120048 => 'g',
+  120049 => 'h',
+  120050 => 'i',
+  120051 => 'j',
+  120052 => 'k',
+  120053 => 'l',
+  120054 => 'm',
+  120055 => 'n',
+  120056 => 'o',
+  120057 => 'p',
+  120058 => 'q',
+  120059 => 'r',
+  120060 => 's',
+  120061 => 't',
+  120062 => 'u',
+  120063 => 'v',
+  120064 => 'w',
+  120065 => 'x',
+  120066 => 'y',
+  120067 => 'z',
+  120068 => 'a',
+  120069 => 'b',
+  120071 => 'd',
+  120072 => 'e',
+  120073 => 'f',
+  120074 => 'g',
+  120077 => 'j',
+  120078 => 'k',
+  120079 => 'l',
+  120080 => 'm',
+  120081 => 'n',
+  120082 => 'o',
+  120083 => 'p',
+  120084 => 'q',
+  120086 => 's',
+  120087 => 't',
+  120088 => 'u',
+  120089 => 'v',
+  120090 => 'w',
+  120091 => 'x',
+  120092 => 'y',
+  120094 => 'a',
+  120095 => 'b',
+  120096 => 'c',
+  120097 => 'd',
+  120098 => 'e',
+  120099 => 'f',
+  120100 => 'g',
+  120101 => 'h',
+  120102 => 'i',
+  120103 => 'j',
+  120104 => 'k',
+  120105 => 'l',
+  120106 => 'm',
+  120107 => 'n',
+  120108 => 'o',
+  120109 => 'p',
+  120110 => 'q',
+  120111 => 'r',
+  120112 => 's',
+  120113 => 't',
+  120114 => 'u',
+  120115 => 'v',
+  120116 => 'w',
+  120117 => 'x',
+  120118 => 'y',
+  120119 => 'z',
+  120120 => 'a',
+  120121 => 'b',
+  120123 => 'd',
+  120124 => 'e',
+  120125 => 'f',
+  120126 => 'g',
+  120128 => 'i',
+  120129 => 'j',
+  120130 => 'k',
+  120131 => 'l',
+  120132 => 'm',
+  120134 => 'o',
+  120138 => 's',
+  120139 => 't',
+  120140 => 'u',
+  120141 => 'v',
+  120142 => 'w',
+  120143 => 'x',
+  120144 => 'y',
+  120146 => 'a',
+  120147 => 'b',
+  120148 => 'c',
+  120149 => 'd',
+  120150 => 'e',
+  120151 => 'f',
+  120152 => 'g',
+  120153 => 'h',
+  120154 => 'i',
+  120155 => 'j',
+  120156 => 'k',
+  120157 => 'l',
+  120158 => 'm',
+  120159 => 'n',
+  120160 => 'o',
+  120161 => 'p',
+  120162 => 'q',
+  120163 => 'r',
+  120164 => 's',
+  120165 => 't',
+  120166 => 'u',
+  120167 => 'v',
+  120168 => 'w',
+  120169 => 'x',
+  120170 => 'y',
+  120171 => 'z',
+  120172 => 'a',
+  120173 => 'b',
+  120174 => 'c',
+  120175 => 'd',
+  120176 => 'e',
+  120177 => 'f',
+  120178 => 'g',
+  120179 => 'h',
+  120180 => 'i',
+  120181 => 'j',
+  120182 => 'k',
+  120183 => 'l',
+  120184 => 'm',
+  120185 => 'n',
+  120186 => 'o',
+  120187 => 'p',
+  120188 => 'q',
+  120189 => 'r',
+  120190 => 's',
+  120191 => 't',
+  120192 => 'u',
+  120193 => 'v',
+  120194 => 'w',
+  120195 => 'x',
+  120196 => 'y',
+  120197 => 'z',
+  120198 => 'a',
+  120199 => 'b',
+  120200 => 'c',
+  120201 => 'd',
+  120202 => 'e',
+  120203 => 'f',
+  120204 => 'g',
+  120205 => 'h',
+  120206 => 'i',
+  120207 => 'j',
+  120208 => 'k',
+  120209 => 'l',
+  120210 => 'm',
+  120211 => 'n',
+  120212 => 'o',
+  120213 => 'p',
+  120214 => 'q',
+  120215 => 'r',
+  120216 => 's',
+  120217 => 't',
+  120218 => 'u',
+  120219 => 'v',
+  120220 => 'w',
+  120221 => 'x',
+  120222 => 'y',
+  120223 => 'z',
+  120224 => 'a',
+  120225 => 'b',
+  120226 => 'c',
+  120227 => 'd',
+  120228 => 'e',
+  120229 => 'f',
+  120230 => 'g',
+  120231 => 'h',
+  120232 => 'i',
+  120233 => 'j',
+  120234 => 'k',
+  120235 => 'l',
+  120236 => 'm',
+  120237 => 'n',
+  120238 => 'o',
+  120239 => 'p',
+  120240 => 'q',
+  120241 => 'r',
+  120242 => 's',
+  120243 => 't',
+  120244 => 'u',
+  120245 => 'v',
+  120246 => 'w',
+  120247 => 'x',
+  120248 => 'y',
+  120249 => 'z',
+  120250 => 'a',
+  120251 => 'b',
+  120252 => 'c',
+  120253 => 'd',
+  120254 => 'e',
+  120255 => 'f',
+  120256 => 'g',
+  120257 => 'h',
+  120258 => 'i',
+  120259 => 'j',
+  120260 => 'k',
+  120261 => 'l',
+  120262 => 'm',
+  120263 => 'n',
+  120264 => 'o',
+  120265 => 'p',
+  120266 => 'q',
+  120267 => 'r',
+  120268 => 's',
+  120269 => 't',
+  120270 => 'u',
+  120271 => 'v',
+  120272 => 'w',
+  120273 => 'x',
+  120274 => 'y',
+  120275 => 'z',
+  120276 => 'a',
+  120277 => 'b',
+  120278 => 'c',
+  120279 => 'd',
+  120280 => 'e',
+  120281 => 'f',
+  120282 => 'g',
+  120283 => 'h',
+  120284 => 'i',
+  120285 => 'j',
+  120286 => 'k',
+  120287 => 'l',
+  120288 => 'm',
+  120289 => 'n',
+  120290 => 'o',
+  120291 => 'p',
+  120292 => 'q',
+  120293 => 'r',
+  120294 => 's',
+  120295 => 't',
+  120296 => 'u',
+  120297 => 'v',
+  120298 => 'w',
+  120299 => 'x',
+  120300 => 'y',
+  120301 => 'z',
+  120302 => 'a',
+  120303 => 'b',
+  120304 => 'c',
+  120305 => 'd',
+  120306 => 'e',
+  120307 => 'f',
+  120308 => 'g',
+  120309 => 'h',
+  120310 => 'i',
+  120311 => 'j',
+  120312 => 'k',
+  120313 => 'l',
+  120314 => 'm',
+  120315 => 'n',
+  120316 => 'o',
+  120317 => 'p',
+  120318 => 'q',
+  120319 => 'r',
+  120320 => 's',
+  120321 => 't',
+  120322 => 'u',
+  120323 => 'v',
+  120324 => 'w',
+  120325 => 'x',
+  120326 => 'y',
+  120327 => 'z',
+  120328 => 'a',
+  120329 => 'b',
+  120330 => 'c',
+  120331 => 'd',
+  120332 => 'e',
+  120333 => 'f',
+  120334 => 'g',
+  120335 => 'h',
+  120336 => 'i',
+  120337 => 'j',
+  120338 => 'k',
+  120339 => 'l',
+  120340 => 'm',
+  120341 => 'n',
+  120342 => 'o',
+  120343 => 'p',
+  120344 => 'q',
+  120345 => 'r',
+  120346 => 's',
+  120347 => 't',
+  120348 => 'u',
+  120349 => 'v',
+  120350 => 'w',
+  120351 => 'x',
+  120352 => 'y',
+  120353 => 'z',
+  120354 => 'a',
+  120355 => 'b',
+  120356 => 'c',
+  120357 => 'd',
+  120358 => 'e',
+  120359 => 'f',
+  120360 => 'g',
+  120361 => 'h',
+  120362 => 'i',
+  120363 => 'j',
+  120364 => 'k',
+  120365 => 'l',
+  120366 => 'm',
+  120367 => 'n',
+  120368 => 'o',
+  120369 => 'p',
+  120370 => 'q',
+  120371 => 'r',
+  120372 => 's',
+  120373 => 't',
+  120374 => 'u',
+  120375 => 'v',
+  120376 => 'w',
+  120377 => 'x',
+  120378 => 'y',
+  120379 => 'z',
+  120380 => 'a',
+  120381 => 'b',
+  120382 => 'c',
+  120383 => 'd',
+  120384 => 'e',
+  120385 => 'f',
+  120386 => 'g',
+  120387 => 'h',
+  120388 => 'i',
+  120389 => 'j',
+  120390 => 'k',
+  120391 => 'l',
+  120392 => 'm',
+  120393 => 'n',
+  120394 => 'o',
+  120395 => 'p',
+  120396 => 'q',
+  120397 => 'r',
+  120398 => 's',
+  120399 => 't',
+  120400 => 'u',
+  120401 => 'v',
+  120402 => 'w',
+  120403 => 'x',
+  120404 => 'y',
+  120405 => 'z',
+  120406 => 'a',
+  120407 => 'b',
+  120408 => 'c',
+  120409 => 'd',
+  120410 => 'e',
+  120411 => 'f',
+  120412 => 'g',
+  120413 => 'h',
+  120414 => 'i',
+  120415 => 'j',
+  120416 => 'k',
+  120417 => 'l',
+  120418 => 'm',
+  120419 => 'n',
+  120420 => 'o',
+  120421 => 'p',
+  120422 => 'q',
+  120423 => 'r',
+  120424 => 's',
+  120425 => 't',
+  120426 => 'u',
+  120427 => 'v',
+  120428 => 'w',
+  120429 => 'x',
+  120430 => 'y',
+  120431 => 'z',
+  120432 => 'a',
+  120433 => 'b',
+  120434 => 'c',
+  120435 => 'd',
+  120436 => 'e',
+  120437 => 'f',
+  120438 => 'g',
+  120439 => 'h',
+  120440 => 'i',
+  120441 => 'j',
+  120442 => 'k',
+  120443 => 'l',
+  120444 => 'm',
+  120445 => 'n',
+  120446 => 'o',
+  120447 => 'p',
+  120448 => 'q',
+  120449 => 'r',
+  120450 => 's',
+  120451 => 't',
+  120452 => 'u',
+  120453 => 'v',
+  120454 => 'w',
+  120455 => 'x',
+  120456 => 'y',
+  120457 => 'z',
+  120458 => 'a',
+  120459 => 'b',
+  120460 => 'c',
+  120461 => 'd',
+  120462 => 'e',
+  120463 => 'f',
+  120464 => 'g',
+  120465 => 'h',
+  120466 => 'i',
+  120467 => 'j',
+  120468 => 'k',
+  120469 => 'l',
+  120470 => 'm',
+  120471 => 'n',
+  120472 => 'o',
+  120473 => 'p',
+  120474 => 'q',
+  120475 => 'r',
+  120476 => 's',
+  120477 => 't',
+  120478 => 'u',
+  120479 => 'v',
+  120480 => 'w',
+  120481 => 'x',
+  120482 => 'y',
+  120483 => 'z',
+  120484 => 'ı',
+  120485 => 'ȷ',
+  120488 => 'α',
+  120489 => 'β',
+  120490 => 'γ',
+  120491 => 'δ',
+  120492 => 'ε',
+  120493 => 'ζ',
+  120494 => 'η',
+  120495 => 'θ',
+  120496 => 'ι',
+  120497 => 'κ',
+  120498 => 'λ',
+  120499 => 'μ',
+  120500 => 'ν',
+  120501 => 'ξ',
+  120502 => 'ο',
+  120503 => 'π',
+  120504 => 'ρ',
+  120505 => 'θ',
+  120506 => 'σ',
+  120507 => 'τ',
+  120508 => 'υ',
+  120509 => 'φ',
+  120510 => 'χ',
+  120511 => 'ψ',
+  120512 => 'ω',
+  120513 => '∇',
+  120514 => 'α',
+  120515 => 'β',
+  120516 => 'γ',
+  120517 => 'δ',
+  120518 => 'ε',
+  120519 => 'ζ',
+  120520 => 'η',
+  120521 => 'θ',
+  120522 => 'ι',
+  120523 => 'κ',
+  120524 => 'λ',
+  120525 => 'μ',
+  120526 => 'ν',
+  120527 => 'ξ',
+  120528 => 'ο',
+  120529 => 'π',
+  120530 => 'ρ',
+  120531 => 'σ',
+  120532 => 'σ',
+  120533 => 'τ',
+  120534 => 'υ',
+  120535 => 'φ',
+  120536 => 'χ',
+  120537 => 'ψ',
+  120538 => 'ω',
+  120539 => '∂',
+  120540 => 'ε',
+  120541 => 'θ',
+  120542 => 'κ',
+  120543 => 'φ',
+  120544 => 'ρ',
+  120545 => 'π',
+  120546 => 'α',
+  120547 => 'β',
+  120548 => 'γ',
+  120549 => 'δ',
+  120550 => 'ε',
+  120551 => 'ζ',
+  120552 => 'η',
+  120553 => 'θ',
+  120554 => 'ι',
+  120555 => 'κ',
+  120556 => 'λ',
+  120557 => 'μ',
+  120558 => 'ν',
+  120559 => 'ξ',
+  120560 => 'ο',
+  120561 => 'π',
+  120562 => 'ρ',
+  120563 => 'θ',
+  120564 => 'σ',
+  120565 => 'τ',
+  120566 => 'υ',
+  120567 => 'φ',
+  120568 => 'χ',
+  120569 => 'ψ',
+  120570 => 'ω',
+  120571 => '∇',
+  120572 => 'α',
+  120573 => 'β',
+  120574 => 'γ',
+  120575 => 'δ',
+  120576 => 'ε',
+  120577 => 'ζ',
+  120578 => 'η',
+  120579 => 'θ',
+  120580 => 'ι',
+  120581 => 'κ',
+  120582 => 'λ',
+  120583 => 'μ',
+  120584 => 'ν',
+  120585 => 'ξ',
+  120586 => 'ο',
+  120587 => 'π',
+  120588 => 'ρ',
+  120589 => 'σ',
+  120590 => 'σ',
+  120591 => 'τ',
+  120592 => 'υ',
+  120593 => 'φ',
+  120594 => 'χ',
+  120595 => 'ψ',
+  120596 => 'ω',
+  120597 => '∂',
+  120598 => 'ε',
+  120599 => 'θ',
+  120600 => 'κ',
+  120601 => 'φ',
+  120602 => 'ρ',
+  120603 => 'π',
+  120604 => 'α',
+  120605 => 'β',
+  120606 => 'γ',
+  120607 => 'δ',
+  120608 => 'ε',
+  120609 => 'ζ',
+  120610 => 'η',
+  120611 => 'θ',
+  120612 => 'ι',
+  120613 => 'κ',
+  120614 => 'λ',
+  120615 => 'μ',
+  120616 => 'ν',
+  120617 => 'ξ',
+  120618 => 'ο',
+  120619 => 'π',
+  120620 => 'ρ',
+  120621 => 'θ',
+  120622 => 'σ',
+  120623 => 'τ',
+  120624 => 'υ',
+  120625 => 'φ',
+  120626 => 'χ',
+  120627 => 'ψ',
+  120628 => 'ω',
+  120629 => '∇',
+  120630 => 'α',
+  120631 => 'β',
+  120632 => 'γ',
+  120633 => 'δ',
+  120634 => 'ε',
+  120635 => 'ζ',
+  120636 => 'η',
+  120637 => 'θ',
+  120638 => 'ι',
+  120639 => 'κ',
+  120640 => 'λ',
+  120641 => 'μ',
+  120642 => 'ν',
+  120643 => 'ξ',
+  120644 => 'ο',
+  120645 => 'π',
+  120646 => 'ρ',
+  120647 => 'σ',
+  120648 => 'σ',
+  120649 => 'τ',
+  120650 => 'υ',
+  120651 => 'φ',
+  120652 => 'χ',
+  120653 => 'ψ',
+  120654 => 'ω',
+  120655 => '∂',
+  120656 => 'ε',
+  120657 => 'θ',
+  120658 => 'κ',
+  120659 => 'φ',
+  120660 => 'ρ',
+  120661 => 'π',
+  120662 => 'α',
+  120663 => 'β',
+  120664 => 'γ',
+  120665 => 'δ',
+  120666 => 'ε',
+  120667 => 'ζ',
+  120668 => 'η',
+  120669 => 'θ',
+  120670 => 'ι',
+  120671 => 'κ',
+  120672 => 'λ',
+  120673 => 'μ',
+  120674 => 'ν',
+  120675 => 'ξ',
+  120676 => 'ο',
+  120677 => 'π',
+  120678 => 'ρ',
+  120679 => 'θ',
+  120680 => 'σ',
+  120681 => 'τ',
+  120682 => 'υ',
+  120683 => 'φ',
+  120684 => 'χ',
+  120685 => 'ψ',
+  120686 => 'ω',
+  120687 => '∇',
+  120688 => 'α',
+  120689 => 'β',
+  120690 => 'γ',
+  120691 => 'δ',
+  120692 => 'ε',
+  120693 => 'ζ',
+  120694 => 'η',
+  120695 => 'θ',
+  120696 => 'ι',
+  120697 => 'κ',
+  120698 => 'λ',
+  120699 => 'μ',
+  120700 => 'ν',
+  120701 => 'ξ',
+  120702 => 'ο',
+  120703 => 'π',
+  120704 => 'ρ',
+  120705 => 'σ',
+  120706 => 'σ',
+  120707 => 'τ',
+  120708 => 'υ',
+  120709 => 'φ',
+  120710 => 'χ',
+  120711 => 'ψ',
+  120712 => 'ω',
+  120713 => '∂',
+  120714 => 'ε',
+  120715 => 'θ',
+  120716 => 'κ',
+  120717 => 'φ',
+  120718 => 'ρ',
+  120719 => 'π',
+  120720 => 'α',
+  120721 => 'β',
+  120722 => 'γ',
+  120723 => 'δ',
+  120724 => 'ε',
+  120725 => 'ζ',
+  120726 => 'η',
+  120727 => 'θ',
+  120728 => 'ι',
+  120729 => 'κ',
+  120730 => 'λ',
+  120731 => 'μ',
+  120732 => 'ν',
+  120733 => 'ξ',
+  120734 => 'ο',
+  120735 => 'π',
+  120736 => 'ρ',
+  120737 => 'θ',
+  120738 => 'σ',
+  120739 => 'τ',
+  120740 => 'υ',
+  120741 => 'φ',
+  120742 => 'χ',
+  120743 => 'ψ',
+  120744 => 'ω',
+  120745 => '∇',
+  120746 => 'α',
+  120747 => 'β',
+  120748 => 'γ',
+  120749 => 'δ',
+  120750 => 'ε',
+  120751 => 'ζ',
+  120752 => 'η',
+  120753 => 'θ',
+  120754 => 'ι',
+  120755 => 'κ',
+  120756 => 'λ',
+  120757 => 'μ',
+  120758 => 'ν',
+  120759 => 'ξ',
+  120760 => 'ο',
+  120761 => 'π',
+  120762 => 'ρ',
+  120763 => 'σ',
+  120764 => 'σ',
+  120765 => 'τ',
+  120766 => 'υ',
+  120767 => 'φ',
+  120768 => 'χ',
+  120769 => 'ψ',
+  120770 => 'ω',
+  120771 => '∂',
+  120772 => 'ε',
+  120773 => 'θ',
+  120774 => 'κ',
+  120775 => 'φ',
+  120776 => 'ρ',
+  120777 => 'π',
+  120778 => 'ϝ',
+  120779 => 'ϝ',
+  120782 => '0',
+  120783 => '1',
+  120784 => '2',
+  120785 => '3',
+  120786 => '4',
+  120787 => '5',
+  120788 => '6',
+  120789 => '7',
+  120790 => '8',
+  120791 => '9',
+  120792 => '0',
+  120793 => '1',
+  120794 => '2',
+  120795 => '3',
+  120796 => '4',
+  120797 => '5',
+  120798 => '6',
+  120799 => '7',
+  120800 => '8',
+  120801 => '9',
+  120802 => '0',
+  120803 => '1',
+  120804 => '2',
+  120805 => '3',
+  120806 => '4',
+  120807 => '5',
+  120808 => '6',
+  120809 => '7',
+  120810 => '8',
+  120811 => '9',
+  120812 => '0',
+  120813 => '1',
+  120814 => '2',
+  120815 => '3',
+  120816 => '4',
+  120817 => '5',
+  120818 => '6',
+  120819 => '7',
+  120820 => '8',
+  120821 => '9',
+  120822 => '0',
+  120823 => '1',
+  120824 => '2',
+  120825 => '3',
+  120826 => '4',
+  120827 => '5',
+  120828 => '6',
+  120829 => '7',
+  120830 => '8',
+  120831 => '9',
+  125184 => '𞤢',
+  125185 => '𞤣',
+  125186 => '𞤤',
+  125187 => '𞤥',
+  125188 => '𞤦',
+  125189 => '𞤧',
+  125190 => '𞤨',
+  125191 => '𞤩',
+  125192 => '𞤪',
+  125193 => '𞤫',
+  125194 => '𞤬',
+  125195 => '𞤭',
+  125196 => '𞤮',
+  125197 => '𞤯',
+  125198 => '𞤰',
+  125199 => '𞤱',
+  125200 => '𞤲',
+  125201 => '𞤳',
+  125202 => '𞤴',
+  125203 => '𞤵',
+  125204 => '𞤶',
+  125205 => '𞤷',
+  125206 => '𞤸',
+  125207 => '𞤹',
+  125208 => '𞤺',
+  125209 => '𞤻',
+  125210 => '𞤼',
+  125211 => '𞤽',
+  125212 => '𞤾',
+  125213 => '𞤿',
+  125214 => '𞥀',
+  125215 => '𞥁',
+  125216 => '𞥂',
+  125217 => '𞥃',
+  126464 => 'ا',
+  126465 => 'ب',
+  126466 => 'ج',
+  126467 => 'د',
+  126469 => 'و',
+  126470 => 'ز',
+  126471 => 'ح',
+  126472 => 'ط',
+  126473 => 'ي',
+  126474 => 'ك',
+  126475 => 'ل',
+  126476 => 'م',
+  126477 => 'ن',
+  126478 => 'س',
+  126479 => 'ع',
+  126480 => 'ف',
+  126481 => 'ص',
+  126482 => 'ق',
+  126483 => 'ر',
+  126484 => 'ش',
+  126485 => 'ت',
+  126486 => 'ث',
+  126487 => 'خ',
+  126488 => 'ذ',
+  126489 => 'ض',
+  126490 => 'ظ',
+  126491 => 'غ',
+  126492 => 'ٮ',
+  126493 => 'ں',
+  126494 => 'ڡ',
+  126495 => 'ٯ',
+  126497 => 'ب',
+  126498 => 'ج',
+  126500 => 'ه',
+  126503 => 'ح',
+  126505 => 'ي',
+  126506 => 'ك',
+  126507 => 'ل',
+  126508 => 'م',
+  126509 => 'ن',
+  126510 => 'س',
+  126511 => 'ع',
+  126512 => 'ف',
+  126513 => 'ص',
+  126514 => 'ق',
+  126516 => 'ش',
+  126517 => 'ت',
+  126518 => 'ث',
+  126519 => 'خ',
+  126521 => 'ض',
+  126523 => 'غ',
+  126530 => 'ج',
+  126535 => 'ح',
+  126537 => 'ي',
+  126539 => 'ل',
+  126541 => 'ن',
+  126542 => 'س',
+  126543 => 'ع',
+  126545 => 'ص',
+  126546 => 'ق',
+  126548 => 'ش',
+  126551 => 'خ',
+  126553 => 'ض',
+  126555 => 'غ',
+  126557 => 'ں',
+  126559 => 'ٯ',
+  126561 => 'ب',
+  126562 => 'ج',
+  126564 => 'ه',
+  126567 => 'ح',
+  126568 => 'ط',
+  126569 => 'ي',
+  126570 => 'ك',
+  126572 => 'م',
+  126573 => 'ن',
+  126574 => 'س',
+  126575 => 'ع',
+  126576 => 'ف',
+  126577 => 'ص',
+  126578 => 'ق',
+  126580 => 'ش',
+  126581 => 'ت',
+  126582 => 'ث',
+  126583 => 'خ',
+  126585 => 'ض',
+  126586 => 'ظ',
+  126587 => 'غ',
+  126588 => 'ٮ',
+  126590 => 'ڡ',
+  126592 => 'ا',
+  126593 => 'ب',
+  126594 => 'ج',
+  126595 => 'د',
+  126596 => 'ه',
+  126597 => 'و',
+  126598 => 'ز',
+  126599 => 'ح',
+  126600 => 'ط',
+  126601 => 'ي',
+  126603 => 'ل',
+  126604 => 'م',
+  126605 => 'ن',
+  126606 => 'س',
+  126607 => 'ع',
+  126608 => 'ف',
+  126609 => 'ص',
+  126610 => 'ق',
+  126611 => 'ر',
+  126612 => 'ش',
+  126613 => 'ت',
+  126614 => 'ث',
+  126615 => 'خ',
+  126616 => 'ذ',
+  126617 => 'ض',
+  126618 => 'ظ',
+  126619 => 'غ',
+  126625 => 'ب',
+  126626 => 'ج',
+  126627 => 'د',
+  126629 => 'و',
+  126630 => 'ز',
+  126631 => 'ح',
+  126632 => 'ط',
+  126633 => 'ي',
+  126635 => 'ل',
+  126636 => 'م',
+  126637 => 'ن',
+  126638 => 'س',
+  126639 => 'ع',
+  126640 => 'ف',
+  126641 => 'ص',
+  126642 => 'ق',
+  126643 => 'ر',
+  126644 => 'ش',
+  126645 => 'ت',
+  126646 => 'ث',
+  126647 => 'خ',
+  126648 => 'ذ',
+  126649 => 'ض',
+  126650 => 'ظ',
+  126651 => 'غ',
+  127274 => '〔s〕',
+  127275 => 'c',
+  127276 => 'r',
+  127277 => 'cd',
+  127278 => 'wz',
+  127280 => 'a',
+  127281 => 'b',
+  127282 => 'c',
+  127283 => 'd',
+  127284 => 'e',
+  127285 => 'f',
+  127286 => 'g',
+  127287 => 'h',
+  127288 => 'i',
+  127289 => 'j',
+  127290 => 'k',
+  127291 => 'l',
+  127292 => 'm',
+  127293 => 'n',
+  127294 => 'o',
+  127295 => 'p',
+  127296 => 'q',
+  127297 => 'r',
+  127298 => 's',
+  127299 => 't',
+  127300 => 'u',
+  127301 => 'v',
+  127302 => 'w',
+  127303 => 'x',
+  127304 => 'y',
+  127305 => 'z',
+  127306 => 'hv',
+  127307 => 'mv',
+  127308 => 'sd',
+  127309 => 'ss',
+  127310 => 'ppv',
+  127311 => 'wc',
+  127338 => 'mc',
+  127339 => 'md',
+  127340 => 'mr',
+  127376 => 'dj',
+  127488 => 'ほか',
+  127489 => 'ココ',
+  127490 => 'サ',
+  127504 => '手',
+  127505 => '字',
+  127506 => '双',
+  127507 => 'デ',
+  127508 => '二',
+  127509 => '多',
+  127510 => '解',
+  127511 => '天',
+  127512 => '交',
+  127513 => '映',
+  127514 => '無',
+  127515 => '料',
+  127516 => '前',
+  127517 => '後',
+  127518 => '再',
+  127519 => '新',
+  127520 => '初',
+  127521 => '終',
+  127522 => '生',
+  127523 => '販',
+  127524 => '声',
+  127525 => '吹',
+  127526 => '演',
+  127527 => '投',
+  127528 => '捕',
+  127529 => '一',
+  127530 => '三',
+  127531 => '遊',
+  127532 => '左',
+  127533 => '中',
+  127534 => '右',
+  127535 => '指',
+  127536 => '走',
+  127537 => '打',
+  127538 => '禁',
+  127539 => '空',
+  127540 => '合',
+  127541 => '満',
+  127542 => '有',
+  127543 => '月',
+  127544 => '申',
+  127545 => '割',
+  127546 => '営',
+  127547 => '配',
+  127552 => '〔本〕',
+  127553 => '〔三〕',
+  127554 => '〔二〕',
+  127555 => '〔安〕',
+  127556 => '〔点〕',
+  127557 => '〔打〕',
+  127558 => '〔盗〕',
+  127559 => '〔勝〕',
+  127560 => '〔敗〕',
+  127568 => '得',
+  127569 => '可',
+  130032 => '0',
+  130033 => '1',
+  130034 => '2',
+  130035 => '3',
+  130036 => '4',
+  130037 => '5',
+  130038 => '6',
+  130039 => '7',
+  130040 => '8',
+  130041 => '9',
+  194560 => '丽',
+  194561 => '丸',
+  194562 => '乁',
+  194563 => '𠄢',
+  194564 => '你',
+  194565 => '侮',
+  194566 => '侻',
+  194567 => '倂',
+  194568 => '偺',
+  194569 => '備',
+  194570 => '僧',
+  194571 => '像',
+  194572 => '㒞',
+  194573 => '𠘺',
+  194574 => '免',
+  194575 => '兔',
+  194576 => '兤',
+  194577 => '具',
+  194578 => '𠔜',
+  194579 => '㒹',
+  194580 => '內',
+  194581 => '再',
+  194582 => '𠕋',
+  194583 => '冗',
+  194584 => '冤',
+  194585 => '仌',
+  194586 => '冬',
+  194587 => '况',
+  194588 => '𩇟',
+  194589 => '凵',
+  194590 => '刃',
+  194591 => '㓟',
+  194592 => '刻',
+  194593 => '剆',
+  194594 => '割',
+  194595 => '剷',
+  194596 => '㔕',
+  194597 => '勇',
+  194598 => '勉',
+  194599 => '勤',
+  194600 => '勺',
+  194601 => '包',
+  194602 => '匆',
+  194603 => '北',
+  194604 => '卉',
+  194605 => '卑',
+  194606 => '博',
+  194607 => '即',
+  194608 => '卽',
+  194609 => '卿',
+  194610 => '卿',
+  194611 => '卿',
+  194612 => '𠨬',
+  194613 => '灰',
+  194614 => '及',
+  194615 => '叟',
+  194616 => '𠭣',
+  194617 => '叫',
+  194618 => '叱',
+  194619 => '吆',
+  194620 => '咞',
+  194621 => '吸',
+  194622 => '呈',
+  194623 => '周',
+  194624 => '咢',
+  194625 => '哶',
+  194626 => '唐',
+  194627 => '啓',
+  194628 => '啣',
+  194629 => '善',
+  194630 => '善',
+  194631 => '喙',
+  194632 => '喫',
+  194633 => '喳',
+  194634 => '嗂',
+  194635 => '圖',
+  194636 => '嘆',
+  194637 => '圗',
+  194638 => '噑',
+  194639 => '噴',
+  194640 => '切',
+  194641 => '壮',
+  194642 => '城',
+  194643 => '埴',
+  194644 => '堍',
+  194645 => '型',
+  194646 => '堲',
+  194647 => '報',
+  194648 => '墬',
+  194649 => '𡓤',
+  194650 => '売',
+  194651 => '壷',
+  194652 => '夆',
+  194653 => '多',
+  194654 => '夢',
+  194655 => '奢',
+  194656 => '𡚨',
+  194657 => '𡛪',
+  194658 => '姬',
+  194659 => '娛',
+  194660 => '娧',
+  194661 => '姘',
+  194662 => '婦',
+  194663 => '㛮',
+  194665 => '嬈',
+  194666 => '嬾',
+  194667 => '嬾',
+  194668 => '𡧈',
+  194669 => '寃',
+  194670 => '寘',
+  194671 => '寧',
+  194672 => '寳',
+  194673 => '𡬘',
+  194674 => '寿',
+  194675 => '将',
+  194677 => '尢',
+  194678 => '㞁',
+  194679 => '屠',
+  194680 => '屮',
+  194681 => '峀',
+  194682 => '岍',
+  194683 => '𡷤',
+  194684 => '嵃',
+  194685 => '𡷦',
+  194686 => '嵮',
+  194687 => '嵫',
+  194688 => '嵼',
+  194689 => '巡',
+  194690 => '巢',
+  194691 => '㠯',
+  194692 => '巽',
+  194693 => '帨',
+  194694 => '帽',
+  194695 => '幩',
+  194696 => '㡢',
+  194697 => '𢆃',
+  194698 => '㡼',
+  194699 => '庰',
+  194700 => '庳',
+  194701 => '庶',
+  194702 => '廊',
+  194703 => '𪎒',
+  194704 => '廾',
+  194705 => '𢌱',
+  194706 => '𢌱',
+  194707 => '舁',
+  194708 => '弢',
+  194709 => '弢',
+  194710 => '㣇',
+  194711 => '𣊸',
+  194712 => '𦇚',
+  194713 => '形',
+  194714 => '彫',
+  194715 => '㣣',
+  194716 => '徚',
+  194717 => '忍',
+  194718 => '志',
+  194719 => '忹',
+  194720 => '悁',
+  194721 => '㤺',
+  194722 => '㤜',
+  194723 => '悔',
+  194724 => '𢛔',
+  194725 => '惇',
+  194726 => '慈',
+  194727 => '慌',
+  194728 => '慎',
+  194729 => '慌',
+  194730 => '慺',
+  194731 => '憎',
+  194732 => '憲',
+  194733 => '憤',
+  194734 => '憯',
+  194735 => '懞',
+  194736 => '懲',
+  194737 => '懶',
+  194738 => '成',
+  194739 => '戛',
+  194740 => '扝',
+  194741 => '抱',
+  194742 => '拔',
+  194743 => '捐',
+  194744 => '𢬌',
+  194745 => '挽',
+  194746 => '拼',
+  194747 => '捨',
+  194748 => '掃',
+  194749 => '揤',
+  194750 => '𢯱',
+  194751 => '搢',
+  194752 => '揅',
+  194753 => '掩',
+  194754 => '㨮',
+  194755 => '摩',
+  194756 => '摾',
+  194757 => '撝',
+  194758 => '摷',
+  194759 => '㩬',
+  194760 => '敏',
+  194761 => '敬',
+  194762 => '𣀊',
+  194763 => '旣',
+  194764 => '書',
+  194765 => '晉',
+  194766 => '㬙',
+  194767 => '暑',
+  194768 => '㬈',
+  194769 => '㫤',
+  194770 => '冒',
+  194771 => '冕',
+  194772 => '最',
+  194773 => '暜',
+  194774 => '肭',
+  194775 => '䏙',
+  194776 => '朗',
+  194777 => '望',
+  194778 => '朡',
+  194779 => '杞',
+  194780 => '杓',
+  194781 => '𣏃',
+  194782 => '㭉',
+  194783 => '柺',
+  194784 => '枅',
+  194785 => '桒',
+  194786 => '梅',
+  194787 => '𣑭',
+  194788 => '梎',
+  194789 => '栟',
+  194790 => '椔',
+  194791 => '㮝',
+  194792 => '楂',
+  194793 => '榣',
+  194794 => '槪',
+  194795 => '檨',
+  194796 => '𣚣',
+  194797 => '櫛',
+  194798 => '㰘',
+  194799 => '次',
+  194800 => '𣢧',
+  194801 => '歔',
+  194802 => '㱎',
+  194803 => '歲',
+  194804 => '殟',
+  194805 => '殺',
+  194806 => '殻',
+  194807 => '𣪍',
+  194808 => '𡴋',
+  194809 => '𣫺',
+  194810 => '汎',
+  194811 => '𣲼',
+  194812 => '沿',
+  194813 => '泍',
+  194814 => '汧',
+  194815 => '洖',
+  194816 => '派',
+  194817 => '海',
+  194818 => '流',
+  194819 => '浩',
+  194820 => '浸',
+  194821 => '涅',
+  194822 => '𣴞',
+  194823 => '洴',
+  194824 => '港',
+  194825 => '湮',
+  194826 => '㴳',
+  194827 => '滋',
+  194828 => '滇',
+  194829 => '𣻑',
+  194830 => '淹',
+  194831 => '潮',
+  194832 => '𣽞',
+  194833 => '𣾎',
+  194834 => '濆',
+  194835 => '瀹',
+  194836 => '瀞',
+  194837 => '瀛',
+  194838 => '㶖',
+  194839 => '灊',
+  194840 => '災',
+  194841 => '灷',
+  194842 => '炭',
+  194843 => '𠔥',
+  194844 => '煅',
+  194845 => '𤉣',
+  194846 => '熜',
+  194848 => '爨',
+  194849 => '爵',
+  194850 => '牐',
+  194851 => '𤘈',
+  194852 => '犀',
+  194853 => '犕',
+  194854 => '𤜵',
+  194855 => '𤠔',
+  194856 => '獺',
+  194857 => '王',
+  194858 => '㺬',
+  194859 => '玥',
+  194860 => '㺸',
+  194861 => '㺸',
+  194862 => '瑇',
+  194863 => '瑜',
+  194864 => '瑱',
+  194865 => '璅',
+  194866 => '瓊',
+  194867 => '㼛',
+  194868 => '甤',
+  194869 => '𤰶',
+  194870 => '甾',
+  194871 => '𤲒',
+  194872 => '異',
+  194873 => '𢆟',
+  194874 => '瘐',
+  194875 => '𤾡',
+  194876 => '𤾸',
+  194877 => '𥁄',
+  194878 => '㿼',
+  194879 => '䀈',
+  194880 => '直',
+  194881 => '𥃳',
+  194882 => '𥃲',
+  194883 => '𥄙',
+  194884 => '𥄳',
+  194885 => '眞',
+  194886 => '真',
+  194887 => '真',
+  194888 => '睊',
+  194889 => '䀹',
+  194890 => '瞋',
+  194891 => '䁆',
+  194892 => '䂖',
+  194893 => '𥐝',
+  194894 => '硎',
+  194895 => '碌',
+  194896 => '磌',
+  194897 => '䃣',
+  194898 => '𥘦',
+  194899 => '祖',
+  194900 => '𥚚',
+  194901 => '𥛅',
+  194902 => '福',
+  194903 => '秫',
+  194904 => '䄯',
+  194905 => '穀',
+  194906 => '穊',
+  194907 => '穏',
+  194908 => '𥥼',
+  194909 => '𥪧',
+  194910 => '𥪧',
+  194912 => '䈂',
+  194913 => '𥮫',
+  194914 => '篆',
+  194915 => '築',
+  194916 => '䈧',
+  194917 => '𥲀',
+  194918 => '糒',
+  194919 => '䊠',
+  194920 => '糨',
+  194921 => '糣',
+  194922 => '紀',
+  194923 => '𥾆',
+  194924 => '絣',
+  194925 => '䌁',
+  194926 => '緇',
+  194927 => '縂',
+  194928 => '繅',
+  194929 => '䌴',
+  194930 => '𦈨',
+  194931 => '𦉇',
+  194932 => '䍙',
+  194933 => '𦋙',
+  194934 => '罺',
+  194935 => '𦌾',
+  194936 => '羕',
+  194937 => '翺',
+  194938 => '者',
+  194939 => '𦓚',
+  194940 => '𦔣',
+  194941 => '聠',
+  194942 => '𦖨',
+  194943 => '聰',
+  194944 => '𣍟',
+  194945 => '䏕',
+  194946 => '育',
+  194947 => '脃',
+  194948 => '䐋',
+  194949 => '脾',
+  194950 => '媵',
+  194951 => '𦞧',
+  194952 => '𦞵',
+  194953 => '𣎓',
+  194954 => '𣎜',
+  194955 => '舁',
+  194956 => '舄',
+  194957 => '辞',
+  194958 => '䑫',
+  194959 => '芑',
+  194960 => '芋',
+  194961 => '芝',
+  194962 => '劳',
+  194963 => '花',
+  194964 => '芳',
+  194965 => '芽',
+  194966 => '苦',
+  194967 => '𦬼',
+  194968 => '若',
+  194969 => '茝',
+  194970 => '荣',
+  194971 => '莭',
+  194972 => '茣',
+  194973 => '莽',
+  194974 => '菧',
+  194975 => '著',
+  194976 => '荓',
+  194977 => '菊',
+  194978 => '菌',
+  194979 => '菜',
+  194980 => '𦰶',
+  194981 => '𦵫',
+  194982 => '𦳕',
+  194983 => '䔫',
+  194984 => '蓱',
+  194985 => '蓳',
+  194986 => '蔖',
+  194987 => '𧏊',
+  194988 => '蕤',
+  194989 => '𦼬',
+  194990 => '䕝',
+  194991 => '䕡',
+  194992 => '𦾱',
+  194993 => '𧃒',
+  194994 => '䕫',
+  194995 => '虐',
+  194996 => '虜',
+  194997 => '虧',
+  194998 => '虩',
+  194999 => '蚩',
+  195000 => '蚈',
+  195001 => '蜎',
+  195002 => '蛢',
+  195003 => '蝹',
+  195004 => '蜨',
+  195005 => '蝫',
+  195006 => '螆',
+  195008 => '蟡',
+  195009 => '蠁',
+  195010 => '䗹',
+  195011 => '衠',
+  195012 => '衣',
+  195013 => '𧙧',
+  195014 => '裗',
+  195015 => '裞',
+  195016 => '䘵',
+  195017 => '裺',
+  195018 => '㒻',
+  195019 => '𧢮',
+  195020 => '𧥦',
+  195021 => '䚾',
+  195022 => '䛇',
+  195023 => '誠',
+  195024 => '諭',
+  195025 => '變',
+  195026 => '豕',
+  195027 => '𧲨',
+  195028 => '貫',
+  195029 => '賁',
+  195030 => '贛',
+  195031 => '起',
+  195032 => '𧼯',
+  195033 => '𠠄',
+  195034 => '跋',
+  195035 => '趼',
+  195036 => '跰',
+  195037 => '𠣞',
+  195038 => '軔',
+  195039 => '輸',
+  195040 => '𨗒',
+  195041 => '𨗭',
+  195042 => '邔',
+  195043 => '郱',
+  195044 => '鄑',
+  195045 => '𨜮',
+  195046 => '鄛',
+  195047 => '鈸',
+  195048 => '鋗',
+  195049 => '鋘',
+  195050 => '鉼',
+  195051 => '鏹',
+  195052 => '鐕',
+  195053 => '𨯺',
+  195054 => '開',
+  195055 => '䦕',
+  195056 => '閷',
+  195057 => '𨵷',
+  195058 => '䧦',
+  195059 => '雃',
+  195060 => '嶲',
+  195061 => '霣',
+  195062 => '𩅅',
+  195063 => '𩈚',
+  195064 => '䩮',
+  195065 => '䩶',
+  195066 => '韠',
+  195067 => '𩐊',
+  195068 => '䪲',
+  195069 => '𩒖',
+  195070 => '頋',
+  195071 => '頋',
+  195072 => '頩',
+  195073 => '𩖶',
+  195074 => '飢',
+  195075 => '䬳',
+  195076 => '餩',
+  195077 => '馧',
+  195078 => '駂',
+  195079 => '駾',
+  195080 => '䯎',
+  195081 => '𩬰',
+  195082 => '鬒',
+  195083 => '鱀',
+  195084 => '鳽',
+  195085 => '䳎',
+  195086 => '䳭',
+  195087 => '鵧',
+  195088 => '𪃎',
+  195089 => '䳸',
+  195090 => '𪄅',
+  195091 => '𪈎',
+  195092 => '𪊑',
+  195093 => '麻',
+  195094 => '䵖',
+  195095 => '黹',
+  195096 => '黾',
+  195097 => '鼅',
+  195098 => '鼏',
+  195099 => '鼖',
+  195100 => '鼻',
+  195101 => '𪘀',
+);
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/Regex.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/Regex.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/Regex.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/Regex.php	(date 1725846310000)
@@ -0,0 +1,33 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Polyfill\Intl\Idn\Resources\unidata;
+
+/**
+ * @internal
+ */
+final class Regex
+{
+    const COMBINING_MARK = '/^[\x{0300}-\x{036F}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{0591}-\x{05BD}\x{05BF}\x{05C1}-\x{05C2}\x{05C4}-\x{05C5}\x{05C7}\x{0610}-\x{061A}\x{064B}-\x{065F}\x{0670}\x{06D6}-\x{06DC}\x{06DF}-\x{06E4}\x{06E7}-\x{06E8}\x{06EA}-\x{06ED}\x{0711}\x{0730}-\x{074A}\x{07A6}-\x{07B0}\x{07EB}-\x{07F3}\x{07FD}\x{0816}-\x{0819}\x{081B}-\x{0823}\x{0825}-\x{0827}\x{0829}-\x{082D}\x{0859}-\x{085B}\x{08D3}-\x{08E1}\x{08E3}-\x{0902}\x{0903}\x{093A}\x{093B}\x{093C}\x{093E}-\x{0940}\x{0941}-\x{0948}\x{0949}-\x{094C}\x{094D}\x{094E}-\x{094F}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0981}\x{0982}-\x{0983}\x{09BC}\x{09BE}-\x{09C0}\x{09C1}-\x{09C4}\x{09C7}-\x{09C8}\x{09CB}-\x{09CC}\x{09CD}\x{09D7}\x{09E2}-\x{09E3}\x{09FE}\x{0A01}-\x{0A02}\x{0A03}\x{0A3C}\x{0A3E}-\x{0A40}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0A83}\x{0ABC}\x{0ABE}-\x{0AC0}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0AC9}\x{0ACB}-\x{0ACC}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B02}-\x{0B03}\x{0B3C}\x{0B3E}\x{0B3F}\x{0B40}\x{0B41}-\x{0B44}\x{0B47}-\x{0B48}\x{0B4B}-\x{0B4C}\x{0B4D}\x{0B55}-\x{0B56}\x{0B57}\x{0B62}-\x{0B63}\x{0B82}\x{0BBE}-\x{0BBF}\x{0BC0}\x{0BC1}-\x{0BC2}\x{0BC6}-\x{0BC8}\x{0BCA}-\x{0BCC}\x{0BCD}\x{0BD7}\x{0C00}\x{0C01}-\x{0C03}\x{0C04}\x{0C3E}-\x{0C40}\x{0C41}-\x{0C44}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C81}\x{0C82}-\x{0C83}\x{0CBC}\x{0CBE}\x{0CBF}\x{0CC0}-\x{0CC4}\x{0CC6}\x{0CC7}-\x{0CC8}\x{0CCA}-\x{0CCB}\x{0CCC}-\x{0CCD}\x{0CD5}-\x{0CD6}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D02}-\x{0D03}\x{0D3B}-\x{0D3C}\x{0D3E}-\x{0D40}\x{0D41}-\x{0D44}\x{0D46}-\x{0D48}\x{0D4A}-\x{0D4C}\x{0D4D}\x{0D57}\x{0D62}-\x{0D63}\x{0D81}\x{0D82}-\x{0D83}\x{0DCA}\x{0DCF}-\x{0DD1}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0DD8}-\x{0DDF}\x{0DF2}-\x{0DF3}\x{0E31}\x{0E34}-\x{0E3A}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EBC}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F3E}-\x{0F3F}\x{0F71}-\x{0F7E}\x{0F7F}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102B}-\x{102C}\x{102D}-\x{1030}\x{1031}\x{1032}-\x{1037}\x{1038}\x{1039}-\x{103A}\x{103B}-\x{103C}\x{103D}-\x{103E}\x{1056}-\x{1057}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1062}-\x{1064}\x{1067}-\x{106D}\x{1071}-\x{1074}\x{1082}\x{1083}-\x{1084}\x{1085}-\x{1086}\x{1087}-\x{108C}\x{108D}\x{108F}\x{109A}-\x{109C}\x{109D}\x{135D}-\x{135F}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B6}\x{17B7}-\x{17BD}\x{17BE}-\x{17C5}\x{17C6}\x{17C7}-\x{17C8}\x{17C9}-\x{17D3}\x{17DD}\x{180B}-\x{180D}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1923}-\x{1926}\x{1927}-\x{1928}\x{1929}-\x{192B}\x{1930}-\x{1931}\x{1932}\x{1933}-\x{1938}\x{1939}-\x{193B}\x{1A17}-\x{1A18}\x{1A19}-\x{1A1A}\x{1A1B}\x{1A55}\x{1A56}\x{1A57}\x{1A58}-\x{1A5E}\x{1A60}\x{1A61}\x{1A62}\x{1A63}-\x{1A64}\x{1A65}-\x{1A6C}\x{1A6D}-\x{1A72}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1ABF}-\x{1AC0}\x{1B00}-\x{1B03}\x{1B04}\x{1B34}\x{1B35}\x{1B36}-\x{1B3A}\x{1B3B}\x{1B3C}\x{1B3D}-\x{1B41}\x{1B42}\x{1B43}-\x{1B44}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1B82}\x{1BA1}\x{1BA2}-\x{1BA5}\x{1BA6}-\x{1BA7}\x{1BA8}-\x{1BA9}\x{1BAA}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE7}\x{1BE8}-\x{1BE9}\x{1BEA}-\x{1BEC}\x{1BED}\x{1BEE}\x{1BEF}-\x{1BF1}\x{1BF2}-\x{1BF3}\x{1C24}-\x{1C2B}\x{1C2C}-\x{1C33}\x{1C34}-\x{1C35}\x{1C36}-\x{1C37}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE1}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF7}\x{1CF8}-\x{1CF9}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2CEF}-\x{2CF1}\x{2D7F}\x{2DE0}-\x{2DFF}\x{302A}-\x{302D}\x{302E}-\x{302F}\x{3099}-\x{309A}\x{A66F}\x{A670}-\x{A672}\x{A674}-\x{A67D}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A802}\x{A806}\x{A80B}\x{A823}-\x{A824}\x{A825}-\x{A826}\x{A827}\x{A82C}\x{A880}-\x{A881}\x{A8B4}-\x{A8C3}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A952}-\x{A953}\x{A980}-\x{A982}\x{A983}\x{A9B3}\x{A9B4}-\x{A9B5}\x{A9B6}-\x{A9B9}\x{A9BA}-\x{A9BB}\x{A9BC}-\x{A9BD}\x{A9BE}-\x{A9C0}\x{A9E5}\x{AA29}-\x{AA2E}\x{AA2F}-\x{AA30}\x{AA31}-\x{AA32}\x{AA33}-\x{AA34}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA4D}\x{AA7B}\x{AA7C}\x{AA7D}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AAEB}\x{AAEC}-\x{AAED}\x{AAEE}-\x{AAEF}\x{AAF5}\x{AAF6}\x{ABE3}-\x{ABE4}\x{ABE5}\x{ABE6}-\x{ABE7}\x{ABE8}\x{ABE9}-\x{ABEA}\x{ABEC}\x{ABED}\x{FB1E}\x{FE00}-\x{FE0F}\x{FE20}-\x{FE2F}\x{101FD}\x{102E0}\x{10376}-\x{1037A}\x{10A01}-\x{10A03}\x{10A05}-\x{10A06}\x{10A0C}-\x{10A0F}\x{10A38}-\x{10A3A}\x{10A3F}\x{10AE5}-\x{10AE6}\x{10D24}-\x{10D27}\x{10EAB}-\x{10EAC}\x{10F46}-\x{10F50}\x{11000}\x{11001}\x{11002}\x{11038}-\x{11046}\x{1107F}-\x{11081}\x{11082}\x{110B0}-\x{110B2}\x{110B3}-\x{110B6}\x{110B7}-\x{110B8}\x{110B9}-\x{110BA}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112C}\x{1112D}-\x{11134}\x{11145}-\x{11146}\x{11173}\x{11180}-\x{11181}\x{11182}\x{111B3}-\x{111B5}\x{111B6}-\x{111BE}\x{111BF}-\x{111C0}\x{111C9}-\x{111CC}\x{111CE}\x{111CF}\x{1122C}-\x{1122E}\x{1122F}-\x{11231}\x{11232}-\x{11233}\x{11234}\x{11235}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E0}-\x{112E2}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{11302}-\x{11303}\x{1133B}-\x{1133C}\x{1133E}-\x{1133F}\x{11340}\x{11341}-\x{11344}\x{11347}-\x{11348}\x{1134B}-\x{1134D}\x{11357}\x{11362}-\x{11363}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11435}-\x{11437}\x{11438}-\x{1143F}\x{11440}-\x{11441}\x{11442}-\x{11444}\x{11445}\x{11446}\x{1145E}\x{114B0}-\x{114B2}\x{114B3}-\x{114B8}\x{114B9}\x{114BA}\x{114BB}-\x{114BE}\x{114BF}-\x{114C0}\x{114C1}\x{114C2}-\x{114C3}\x{115AF}-\x{115B1}\x{115B2}-\x{115B5}\x{115B8}-\x{115BB}\x{115BC}-\x{115BD}\x{115BE}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11630}-\x{11632}\x{11633}-\x{1163A}\x{1163B}-\x{1163C}\x{1163D}\x{1163E}\x{1163F}-\x{11640}\x{116AB}\x{116AC}\x{116AD}\x{116AE}-\x{116AF}\x{116B0}-\x{116B5}\x{116B6}\x{116B7}\x{1171D}-\x{1171F}\x{11720}-\x{11721}\x{11722}-\x{11725}\x{11726}\x{11727}-\x{1172B}\x{1182C}-\x{1182E}\x{1182F}-\x{11837}\x{11838}\x{11839}-\x{1183A}\x{11930}-\x{11935}\x{11937}-\x{11938}\x{1193B}-\x{1193C}\x{1193D}\x{1193E}\x{11940}\x{11942}\x{11943}\x{119D1}-\x{119D3}\x{119D4}-\x{119D7}\x{119DA}-\x{119DB}\x{119DC}-\x{119DF}\x{119E0}\x{119E4}\x{11A01}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A39}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A57}-\x{11A58}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A97}\x{11A98}-\x{11A99}\x{11C2F}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C3E}\x{11C3F}\x{11C92}-\x{11CA7}\x{11CA9}\x{11CAA}-\x{11CB0}\x{11CB1}\x{11CB2}-\x{11CB3}\x{11CB4}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D8A}-\x{11D8E}\x{11D90}-\x{11D91}\x{11D93}-\x{11D94}\x{11D95}\x{11D96}\x{11D97}\x{11EF3}-\x{11EF4}\x{11EF5}-\x{11EF6}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16F4F}\x{16F51}-\x{16F87}\x{16F8F}-\x{16F92}\x{16FE4}\x{16FF0}-\x{16FF1}\x{1BC9D}-\x{1BC9E}\x{1D165}-\x{1D166}\x{1D167}-\x{1D169}\x{1D16D}-\x{1D172}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D242}-\x{1D244}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E130}-\x{1E136}\x{1E2EC}-\x{1E2EF}\x{1E8D0}-\x{1E8D6}\x{1E944}-\x{1E94A}\x{E0100}-\x{E01EF}]/u';
+
+    const RTL_LABEL = '/[\x{0590}\x{05BE}\x{05C0}\x{05C3}\x{05C6}\x{05C8}-\x{05CF}\x{05D0}-\x{05EA}\x{05EB}-\x{05EE}\x{05EF}-\x{05F2}\x{05F3}-\x{05F4}\x{05F5}-\x{05FF}\x{0600}-\x{0605}\x{0608}\x{060B}\x{060D}\x{061B}\x{061C}\x{061D}\x{061E}-\x{061F}\x{0620}-\x{063F}\x{0640}\x{0641}-\x{064A}\x{0660}-\x{0669}\x{066B}-\x{066C}\x{066D}\x{066E}-\x{066F}\x{0671}-\x{06D3}\x{06D4}\x{06D5}\x{06DD}\x{06E5}-\x{06E6}\x{06EE}-\x{06EF}\x{06FA}-\x{06FC}\x{06FD}-\x{06FE}\x{06FF}\x{0700}-\x{070D}\x{070E}\x{070F}\x{0710}\x{0712}-\x{072F}\x{074B}-\x{074C}\x{074D}-\x{07A5}\x{07B1}\x{07B2}-\x{07BF}\x{07C0}-\x{07C9}\x{07CA}-\x{07EA}\x{07F4}-\x{07F5}\x{07FA}\x{07FB}-\x{07FC}\x{07FE}-\x{07FF}\x{0800}-\x{0815}\x{081A}\x{0824}\x{0828}\x{082E}-\x{082F}\x{0830}-\x{083E}\x{083F}\x{0840}-\x{0858}\x{085C}-\x{085D}\x{085E}\x{085F}\x{0860}-\x{086A}\x{086B}-\x{086F}\x{0870}-\x{089F}\x{08A0}-\x{08B4}\x{08B5}\x{08B6}-\x{08C7}\x{08C8}-\x{08D2}\x{08E2}\x{200F}\x{FB1D}\x{FB1F}-\x{FB28}\x{FB2A}-\x{FB36}\x{FB37}\x{FB38}-\x{FB3C}\x{FB3D}\x{FB3E}\x{FB3F}\x{FB40}-\x{FB41}\x{FB42}\x{FB43}-\x{FB44}\x{FB45}\x{FB46}-\x{FB4F}\x{FB50}-\x{FBB1}\x{FBB2}-\x{FBC1}\x{FBC2}-\x{FBD2}\x{FBD3}-\x{FD3D}\x{FD40}-\x{FD4F}\x{FD50}-\x{FD8F}\x{FD90}-\x{FD91}\x{FD92}-\x{FDC7}\x{FDC8}-\x{FDCF}\x{FDF0}-\x{FDFB}\x{FDFC}\x{FDFE}-\x{FDFF}\x{FE70}-\x{FE74}\x{FE75}\x{FE76}-\x{FEFC}\x{FEFD}-\x{FEFE}\x{10800}-\x{10805}\x{10806}-\x{10807}\x{10808}\x{10809}\x{1080A}-\x{10835}\x{10836}\x{10837}-\x{10838}\x{10839}-\x{1083B}\x{1083C}\x{1083D}-\x{1083E}\x{1083F}-\x{10855}\x{10856}\x{10857}\x{10858}-\x{1085F}\x{10860}-\x{10876}\x{10877}-\x{10878}\x{10879}-\x{1087F}\x{10880}-\x{1089E}\x{1089F}-\x{108A6}\x{108A7}-\x{108AF}\x{108B0}-\x{108DF}\x{108E0}-\x{108F2}\x{108F3}\x{108F4}-\x{108F5}\x{108F6}-\x{108FA}\x{108FB}-\x{108FF}\x{10900}-\x{10915}\x{10916}-\x{1091B}\x{1091C}-\x{1091E}\x{10920}-\x{10939}\x{1093A}-\x{1093E}\x{1093F}\x{10940}-\x{1097F}\x{10980}-\x{109B7}\x{109B8}-\x{109BB}\x{109BC}-\x{109BD}\x{109BE}-\x{109BF}\x{109C0}-\x{109CF}\x{109D0}-\x{109D1}\x{109D2}-\x{109FF}\x{10A00}\x{10A04}\x{10A07}-\x{10A0B}\x{10A10}-\x{10A13}\x{10A14}\x{10A15}-\x{10A17}\x{10A18}\x{10A19}-\x{10A35}\x{10A36}-\x{10A37}\x{10A3B}-\x{10A3E}\x{10A40}-\x{10A48}\x{10A49}-\x{10A4F}\x{10A50}-\x{10A58}\x{10A59}-\x{10A5F}\x{10A60}-\x{10A7C}\x{10A7D}-\x{10A7E}\x{10A7F}\x{10A80}-\x{10A9C}\x{10A9D}-\x{10A9F}\x{10AA0}-\x{10ABF}\x{10AC0}-\x{10AC7}\x{10AC8}\x{10AC9}-\x{10AE4}\x{10AE7}-\x{10AEA}\x{10AEB}-\x{10AEF}\x{10AF0}-\x{10AF6}\x{10AF7}-\x{10AFF}\x{10B00}-\x{10B35}\x{10B36}-\x{10B38}\x{10B40}-\x{10B55}\x{10B56}-\x{10B57}\x{10B58}-\x{10B5F}\x{10B60}-\x{10B72}\x{10B73}-\x{10B77}\x{10B78}-\x{10B7F}\x{10B80}-\x{10B91}\x{10B92}-\x{10B98}\x{10B99}-\x{10B9C}\x{10B9D}-\x{10BA8}\x{10BA9}-\x{10BAF}\x{10BB0}-\x{10BFF}\x{10C00}-\x{10C48}\x{10C49}-\x{10C7F}\x{10C80}-\x{10CB2}\x{10CB3}-\x{10CBF}\x{10CC0}-\x{10CF2}\x{10CF3}-\x{10CF9}\x{10CFA}-\x{10CFF}\x{10D00}-\x{10D23}\x{10D28}-\x{10D2F}\x{10D30}-\x{10D39}\x{10D3A}-\x{10D3F}\x{10D40}-\x{10E5F}\x{10E60}-\x{10E7E}\x{10E7F}\x{10E80}-\x{10EA9}\x{10EAA}\x{10EAD}\x{10EAE}-\x{10EAF}\x{10EB0}-\x{10EB1}\x{10EB2}-\x{10EFF}\x{10F00}-\x{10F1C}\x{10F1D}-\x{10F26}\x{10F27}\x{10F28}-\x{10F2F}\x{10F30}-\x{10F45}\x{10F51}-\x{10F54}\x{10F55}-\x{10F59}\x{10F5A}-\x{10F6F}\x{10F70}-\x{10FAF}\x{10FB0}-\x{10FC4}\x{10FC5}-\x{10FCB}\x{10FCC}-\x{10FDF}\x{10FE0}-\x{10FF6}\x{10FF7}-\x{10FFF}\x{1E800}-\x{1E8C4}\x{1E8C5}-\x{1E8C6}\x{1E8C7}-\x{1E8CF}\x{1E8D7}-\x{1E8FF}\x{1E900}-\x{1E943}\x{1E94B}\x{1E94C}-\x{1E94F}\x{1E950}-\x{1E959}\x{1E95A}-\x{1E95D}\x{1E95E}-\x{1E95F}\x{1E960}-\x{1EC6F}\x{1EC70}\x{1EC71}-\x{1ECAB}\x{1ECAC}\x{1ECAD}-\x{1ECAF}\x{1ECB0}\x{1ECB1}-\x{1ECB4}\x{1ECB5}-\x{1ECBF}\x{1ECC0}-\x{1ECFF}\x{1ED00}\x{1ED01}-\x{1ED2D}\x{1ED2E}\x{1ED2F}-\x{1ED3D}\x{1ED3E}-\x{1ED4F}\x{1ED50}-\x{1EDFF}\x{1EE00}-\x{1EE03}\x{1EE04}\x{1EE05}-\x{1EE1F}\x{1EE20}\x{1EE21}-\x{1EE22}\x{1EE23}\x{1EE24}\x{1EE25}-\x{1EE26}\x{1EE27}\x{1EE28}\x{1EE29}-\x{1EE32}\x{1EE33}\x{1EE34}-\x{1EE37}\x{1EE38}\x{1EE39}\x{1EE3A}\x{1EE3B}\x{1EE3C}-\x{1EE41}\x{1EE42}\x{1EE43}-\x{1EE46}\x{1EE47}\x{1EE48}\x{1EE49}\x{1EE4A}\x{1EE4B}\x{1EE4C}\x{1EE4D}-\x{1EE4F}\x{1EE50}\x{1EE51}-\x{1EE52}\x{1EE53}\x{1EE54}\x{1EE55}-\x{1EE56}\x{1EE57}\x{1EE58}\x{1EE59}\x{1EE5A}\x{1EE5B}\x{1EE5C}\x{1EE5D}\x{1EE5E}\x{1EE5F}\x{1EE60}\x{1EE61}-\x{1EE62}\x{1EE63}\x{1EE64}\x{1EE65}-\x{1EE66}\x{1EE67}-\x{1EE6A}\x{1EE6B}\x{1EE6C}-\x{1EE72}\x{1EE73}\x{1EE74}-\x{1EE77}\x{1EE78}\x{1EE79}-\x{1EE7C}\x{1EE7D}\x{1EE7E}\x{1EE7F}\x{1EE80}-\x{1EE89}\x{1EE8A}\x{1EE8B}-\x{1EE9B}\x{1EE9C}-\x{1EEA0}\x{1EEA1}-\x{1EEA3}\x{1EEA4}\x{1EEA5}-\x{1EEA9}\x{1EEAA}\x{1EEAB}-\x{1EEBB}\x{1EEBC}-\x{1EEEF}\x{1EEF2}-\x{1EEFF}\x{1EF00}-\x{1EFFF}]/u';
+
+    const BIDI_STEP_1_LTR = '/^[^\x{0000}-\x{0008}\x{0009}\x{000A}\x{000B}\x{000C}\x{000D}\x{000E}-\x{001B}\x{001C}-\x{001E}\x{001F}\x{0020}\x{0021}-\x{0022}\x{0023}\x{0024}\x{0025}\x{0026}-\x{0027}\x{0028}\x{0029}\x{002A}\x{002B}\x{002C}\x{002D}\x{002E}-\x{002F}\x{0030}-\x{0039}\x{003A}\x{003B}\x{003C}-\x{003E}\x{003F}-\x{0040}\x{005B}\x{005C}\x{005D}\x{005E}\x{005F}\x{0060}\x{007B}\x{007C}\x{007D}\x{007E}\x{007F}-\x{0084}\x{0085}\x{0086}-\x{009F}\x{00A0}\x{00A1}\x{00A2}-\x{00A5}\x{00A6}\x{00A7}\x{00A8}\x{00A9}\x{00AB}\x{00AC}\x{00AD}\x{00AE}\x{00AF}\x{00B0}\x{00B1}\x{00B2}-\x{00B3}\x{00B4}\x{00B6}-\x{00B7}\x{00B8}\x{00B9}\x{00BB}\x{00BC}-\x{00BE}\x{00BF}\x{00D7}\x{00F7}\x{02B9}-\x{02BA}\x{02C2}-\x{02C5}\x{02C6}-\x{02CF}\x{02D2}-\x{02DF}\x{02E5}-\x{02EB}\x{02EC}\x{02ED}\x{02EF}-\x{02FF}\x{0300}-\x{036F}\x{0374}\x{0375}\x{037E}\x{0384}-\x{0385}\x{0387}\x{03F6}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{058A}\x{058D}-\x{058E}\x{058F}\x{0590}\x{0591}-\x{05BD}\x{05BE}\x{05BF}\x{05C0}\x{05C1}-\x{05C2}\x{05C3}\x{05C4}-\x{05C5}\x{05C6}\x{05C7}\x{05C8}-\x{05CF}\x{05D0}-\x{05EA}\x{05EB}-\x{05EE}\x{05EF}-\x{05F2}\x{05F3}-\x{05F4}\x{05F5}-\x{05FF}\x{0600}-\x{0605}\x{0606}-\x{0607}\x{0608}\x{0609}-\x{060A}\x{060B}\x{060C}\x{060D}\x{060E}-\x{060F}\x{0610}-\x{061A}\x{061B}\x{061C}\x{061D}\x{061E}-\x{061F}\x{0620}-\x{063F}\x{0640}\x{0641}-\x{064A}\x{064B}-\x{065F}\x{0660}-\x{0669}\x{066A}\x{066B}-\x{066C}\x{066D}\x{066E}-\x{066F}\x{0670}\x{0671}-\x{06D3}\x{06D4}\x{06D5}\x{06D6}-\x{06DC}\x{06DD}\x{06DE}\x{06DF}-\x{06E4}\x{06E5}-\x{06E6}\x{06E7}-\x{06E8}\x{06E9}\x{06EA}-\x{06ED}\x{06EE}-\x{06EF}\x{06F0}-\x{06F9}\x{06FA}-\x{06FC}\x{06FD}-\x{06FE}\x{06FF}\x{0700}-\x{070D}\x{070E}\x{070F}\x{0710}\x{0711}\x{0712}-\x{072F}\x{0730}-\x{074A}\x{074B}-\x{074C}\x{074D}-\x{07A5}\x{07A6}-\x{07B0}\x{07B1}\x{07B2}-\x{07BF}\x{07C0}-\x{07C9}\x{07CA}-\x{07EA}\x{07EB}-\x{07F3}\x{07F4}-\x{07F5}\x{07F6}\x{07F7}-\x{07F9}\x{07FA}\x{07FB}-\x{07FC}\x{07FD}\x{07FE}-\x{07FF}\x{0800}-\x{0815}\x{0816}-\x{0819}\x{081A}\x{081B}-\x{0823}\x{0824}\x{0825}-\x{0827}\x{0828}\x{0829}-\x{082D}\x{082E}-\x{082F}\x{0830}-\x{083E}\x{083F}\x{0840}-\x{0858}\x{0859}-\x{085B}\x{085C}-\x{085D}\x{085E}\x{085F}\x{0860}-\x{086A}\x{086B}-\x{086F}\x{0870}-\x{089F}\x{08A0}-\x{08B4}\x{08B5}\x{08B6}-\x{08C7}\x{08C8}-\x{08D2}\x{08D3}-\x{08E1}\x{08E2}\x{08E3}-\x{0902}\x{093A}\x{093C}\x{0941}-\x{0948}\x{094D}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0981}\x{09BC}\x{09C1}-\x{09C4}\x{09CD}\x{09E2}-\x{09E3}\x{09F2}-\x{09F3}\x{09FB}\x{09FE}\x{0A01}-\x{0A02}\x{0A3C}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0ABC}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AF1}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B3C}\x{0B3F}\x{0B41}-\x{0B44}\x{0B4D}\x{0B55}-\x{0B56}\x{0B62}-\x{0B63}\x{0B82}\x{0BC0}\x{0BCD}\x{0BF3}-\x{0BF8}\x{0BF9}\x{0BFA}\x{0C00}\x{0C04}\x{0C3E}-\x{0C40}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C78}-\x{0C7E}\x{0C81}\x{0CBC}\x{0CCC}-\x{0CCD}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D3B}-\x{0D3C}\x{0D41}-\x{0D44}\x{0D4D}\x{0D62}-\x{0D63}\x{0D81}\x{0DCA}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0E31}\x{0E34}-\x{0E3A}\x{0E3F}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EBC}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F3A}\x{0F3B}\x{0F3C}\x{0F3D}\x{0F71}-\x{0F7E}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102D}-\x{1030}\x{1032}-\x{1037}\x{1039}-\x{103A}\x{103D}-\x{103E}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1071}-\x{1074}\x{1082}\x{1085}-\x{1086}\x{108D}\x{109D}\x{135D}-\x{135F}\x{1390}-\x{1399}\x{1400}\x{1680}\x{169B}\x{169C}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B7}-\x{17BD}\x{17C6}\x{17C9}-\x{17D3}\x{17DB}\x{17DD}\x{17F0}-\x{17F9}\x{1800}-\x{1805}\x{1806}\x{1807}-\x{180A}\x{180B}-\x{180D}\x{180E}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1927}-\x{1928}\x{1932}\x{1939}-\x{193B}\x{1940}\x{1944}-\x{1945}\x{19DE}-\x{19FF}\x{1A17}-\x{1A18}\x{1A1B}\x{1A56}\x{1A58}-\x{1A5E}\x{1A60}\x{1A62}\x{1A65}-\x{1A6C}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1ABF}-\x{1AC0}\x{1B00}-\x{1B03}\x{1B34}\x{1B36}-\x{1B3A}\x{1B3C}\x{1B42}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1BA2}-\x{1BA5}\x{1BA8}-\x{1BA9}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE8}-\x{1BE9}\x{1BED}\x{1BEF}-\x{1BF1}\x{1C2C}-\x{1C33}\x{1C36}-\x{1C37}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF8}-\x{1CF9}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{1FBD}\x{1FBF}-\x{1FC1}\x{1FCD}-\x{1FCF}\x{1FDD}-\x{1FDF}\x{1FED}-\x{1FEF}\x{1FFD}-\x{1FFE}\x{2000}-\x{200A}\x{200B}-\x{200D}\x{200F}\x{2010}-\x{2015}\x{2016}-\x{2017}\x{2018}\x{2019}\x{201A}\x{201B}-\x{201C}\x{201D}\x{201E}\x{201F}\x{2020}-\x{2027}\x{2028}\x{2029}\x{202A}\x{202B}\x{202C}\x{202D}\x{202E}\x{202F}\x{2030}-\x{2034}\x{2035}-\x{2038}\x{2039}\x{203A}\x{203B}-\x{203E}\x{203F}-\x{2040}\x{2041}-\x{2043}\x{2044}\x{2045}\x{2046}\x{2047}-\x{2051}\x{2052}\x{2053}\x{2054}\x{2055}-\x{205E}\x{205F}\x{2060}-\x{2064}\x{2065}\x{2066}\x{2067}\x{2068}\x{2069}\x{206A}-\x{206F}\x{2070}\x{2074}-\x{2079}\x{207A}-\x{207B}\x{207C}\x{207D}\x{207E}\x{2080}-\x{2089}\x{208A}-\x{208B}\x{208C}\x{208D}\x{208E}\x{20A0}-\x{20BF}\x{20C0}-\x{20CF}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2100}-\x{2101}\x{2103}-\x{2106}\x{2108}-\x{2109}\x{2114}\x{2116}-\x{2117}\x{2118}\x{211E}-\x{2123}\x{2125}\x{2127}\x{2129}\x{212E}\x{213A}-\x{213B}\x{2140}-\x{2144}\x{214A}\x{214B}\x{214C}-\x{214D}\x{2150}-\x{215F}\x{2189}\x{218A}-\x{218B}\x{2190}-\x{2194}\x{2195}-\x{2199}\x{219A}-\x{219B}\x{219C}-\x{219F}\x{21A0}\x{21A1}-\x{21A2}\x{21A3}\x{21A4}-\x{21A5}\x{21A6}\x{21A7}-\x{21AD}\x{21AE}\x{21AF}-\x{21CD}\x{21CE}-\x{21CF}\x{21D0}-\x{21D1}\x{21D2}\x{21D3}\x{21D4}\x{21D5}-\x{21F3}\x{21F4}-\x{2211}\x{2212}\x{2213}\x{2214}-\x{22FF}\x{2300}-\x{2307}\x{2308}\x{2309}\x{230A}\x{230B}\x{230C}-\x{231F}\x{2320}-\x{2321}\x{2322}-\x{2328}\x{2329}\x{232A}\x{232B}-\x{2335}\x{237B}\x{237C}\x{237D}-\x{2394}\x{2396}-\x{239A}\x{239B}-\x{23B3}\x{23B4}-\x{23DB}\x{23DC}-\x{23E1}\x{23E2}-\x{2426}\x{2440}-\x{244A}\x{2460}-\x{2487}\x{2488}-\x{249B}\x{24EA}-\x{24FF}\x{2500}-\x{25B6}\x{25B7}\x{25B8}-\x{25C0}\x{25C1}\x{25C2}-\x{25F7}\x{25F8}-\x{25FF}\x{2600}-\x{266E}\x{266F}\x{2670}-\x{26AB}\x{26AD}-\x{2767}\x{2768}\x{2769}\x{276A}\x{276B}\x{276C}\x{276D}\x{276E}\x{276F}\x{2770}\x{2771}\x{2772}\x{2773}\x{2774}\x{2775}\x{2776}-\x{2793}\x{2794}-\x{27BF}\x{27C0}-\x{27C4}\x{27C5}\x{27C6}\x{27C7}-\x{27E5}\x{27E6}\x{27E7}\x{27E8}\x{27E9}\x{27EA}\x{27EB}\x{27EC}\x{27ED}\x{27EE}\x{27EF}\x{27F0}-\x{27FF}\x{2900}-\x{2982}\x{2983}\x{2984}\x{2985}\x{2986}\x{2987}\x{2988}\x{2989}\x{298A}\x{298B}\x{298C}\x{298D}\x{298E}\x{298F}\x{2990}\x{2991}\x{2992}\x{2993}\x{2994}\x{2995}\x{2996}\x{2997}\x{2998}\x{2999}-\x{29D7}\x{29D8}\x{29D9}\x{29DA}\x{29DB}\x{29DC}-\x{29FB}\x{29FC}\x{29FD}\x{29FE}-\x{2AFF}\x{2B00}-\x{2B2F}\x{2B30}-\x{2B44}\x{2B45}-\x{2B46}\x{2B47}-\x{2B4C}\x{2B4D}-\x{2B73}\x{2B76}-\x{2B95}\x{2B97}-\x{2BFF}\x{2CE5}-\x{2CEA}\x{2CEF}-\x{2CF1}\x{2CF9}-\x{2CFC}\x{2CFD}\x{2CFE}-\x{2CFF}\x{2D7F}\x{2DE0}-\x{2DFF}\x{2E00}-\x{2E01}\x{2E02}\x{2E03}\x{2E04}\x{2E05}\x{2E06}-\x{2E08}\x{2E09}\x{2E0A}\x{2E0B}\x{2E0C}\x{2E0D}\x{2E0E}-\x{2E16}\x{2E17}\x{2E18}-\x{2E19}\x{2E1A}\x{2E1B}\x{2E1C}\x{2E1D}\x{2E1E}-\x{2E1F}\x{2E20}\x{2E21}\x{2E22}\x{2E23}\x{2E24}\x{2E25}\x{2E26}\x{2E27}\x{2E28}\x{2E29}\x{2E2A}-\x{2E2E}\x{2E2F}\x{2E30}-\x{2E39}\x{2E3A}-\x{2E3B}\x{2E3C}-\x{2E3F}\x{2E40}\x{2E41}\x{2E42}\x{2E43}-\x{2E4F}\x{2E50}-\x{2E51}\x{2E52}\x{2E80}-\x{2E99}\x{2E9B}-\x{2EF3}\x{2F00}-\x{2FD5}\x{2FF0}-\x{2FFB}\x{3000}\x{3001}-\x{3003}\x{3004}\x{3008}\x{3009}\x{300A}\x{300B}\x{300C}\x{300D}\x{300E}\x{300F}\x{3010}\x{3011}\x{3012}-\x{3013}\x{3014}\x{3015}\x{3016}\x{3017}\x{3018}\x{3019}\x{301A}\x{301B}\x{301C}\x{301D}\x{301E}-\x{301F}\x{3020}\x{302A}-\x{302D}\x{3030}\x{3036}-\x{3037}\x{303D}\x{303E}-\x{303F}\x{3099}-\x{309A}\x{309B}-\x{309C}\x{30A0}\x{30FB}\x{31C0}-\x{31E3}\x{321D}-\x{321E}\x{3250}\x{3251}-\x{325F}\x{327C}-\x{327E}\x{32B1}-\x{32BF}\x{32CC}-\x{32CF}\x{3377}-\x{337A}\x{33DE}-\x{33DF}\x{33FF}\x{4DC0}-\x{4DFF}\x{A490}-\x{A4C6}\x{A60D}-\x{A60F}\x{A66F}\x{A670}-\x{A672}\x{A673}\x{A674}-\x{A67D}\x{A67E}\x{A67F}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A700}-\x{A716}\x{A717}-\x{A71F}\x{A720}-\x{A721}\x{A788}\x{A802}\x{A806}\x{A80B}\x{A825}-\x{A826}\x{A828}-\x{A82B}\x{A82C}\x{A838}\x{A839}\x{A874}-\x{A877}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A980}-\x{A982}\x{A9B3}\x{A9B6}-\x{A9B9}\x{A9BC}-\x{A9BD}\x{A9E5}\x{AA29}-\x{AA2E}\x{AA31}-\x{AA32}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA7C}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AAEC}-\x{AAED}\x{AAF6}\x{AB6A}-\x{AB6B}\x{ABE5}\x{ABE8}\x{ABED}\x{FB1D}\x{FB1E}\x{FB1F}-\x{FB28}\x{FB29}\x{FB2A}-\x{FB36}\x{FB37}\x{FB38}-\x{FB3C}\x{FB3D}\x{FB3E}\x{FB3F}\x{FB40}-\x{FB41}\x{FB42}\x{FB43}-\x{FB44}\x{FB45}\x{FB46}-\x{FB4F}\x{FB50}-\x{FBB1}\x{FBB2}-\x{FBC1}\x{FBC2}-\x{FBD2}\x{FBD3}-\x{FD3D}\x{FD3E}\x{FD3F}\x{FD40}-\x{FD4F}\x{FD50}-\x{FD8F}\x{FD90}-\x{FD91}\x{FD92}-\x{FDC7}\x{FDC8}-\x{FDCF}\x{FDD0}-\x{FDEF}\x{FDF0}-\x{FDFB}\x{FDFC}\x{FDFD}\x{FDFE}-\x{FDFF}\x{FE00}-\x{FE0F}\x{FE10}-\x{FE16}\x{FE17}\x{FE18}\x{FE19}\x{FE20}-\x{FE2F}\x{FE30}\x{FE31}-\x{FE32}\x{FE33}-\x{FE34}\x{FE35}\x{FE36}\x{FE37}\x{FE38}\x{FE39}\x{FE3A}\x{FE3B}\x{FE3C}\x{FE3D}\x{FE3E}\x{FE3F}\x{FE40}\x{FE41}\x{FE42}\x{FE43}\x{FE44}\x{FE45}-\x{FE46}\x{FE47}\x{FE48}\x{FE49}-\x{FE4C}\x{FE4D}-\x{FE4F}\x{FE50}\x{FE51}\x{FE52}\x{FE54}\x{FE55}\x{FE56}-\x{FE57}\x{FE58}\x{FE59}\x{FE5A}\x{FE5B}\x{FE5C}\x{FE5D}\x{FE5E}\x{FE5F}\x{FE60}-\x{FE61}\x{FE62}\x{FE63}\x{FE64}-\x{FE66}\x{FE68}\x{FE69}\x{FE6A}\x{FE6B}\x{FE70}-\x{FE74}\x{FE75}\x{FE76}-\x{FEFC}\x{FEFD}-\x{FEFE}\x{FEFF}\x{FF01}-\x{FF02}\x{FF03}\x{FF04}\x{FF05}\x{FF06}-\x{FF07}\x{FF08}\x{FF09}\x{FF0A}\x{FF0B}\x{FF0C}\x{FF0D}\x{FF0E}-\x{FF0F}\x{FF10}-\x{FF19}\x{FF1A}\x{FF1B}\x{FF1C}-\x{FF1E}\x{FF1F}-\x{FF20}\x{FF3B}\x{FF3C}\x{FF3D}\x{FF3E}\x{FF3F}\x{FF40}\x{FF5B}\x{FF5C}\x{FF5D}\x{FF5E}\x{FF5F}\x{FF60}\x{FF61}\x{FF62}\x{FF63}\x{FF64}-\x{FF65}\x{FFE0}-\x{FFE1}\x{FFE2}\x{FFE3}\x{FFE4}\x{FFE5}-\x{FFE6}\x{FFE8}\x{FFE9}-\x{FFEC}\x{FFED}-\x{FFEE}\x{FFF0}-\x{FFF8}\x{FFF9}-\x{FFFB}\x{FFFC}-\x{FFFD}\x{FFFE}-\x{FFFF}\x{10101}\x{10140}-\x{10174}\x{10175}-\x{10178}\x{10179}-\x{10189}\x{1018A}-\x{1018B}\x{1018C}\x{10190}-\x{1019C}\x{101A0}\x{101FD}\x{102E0}\x{102E1}-\x{102FB}\x{10376}-\x{1037A}\x{10800}-\x{10805}\x{10806}-\x{10807}\x{10808}\x{10809}\x{1080A}-\x{10835}\x{10836}\x{10837}-\x{10838}\x{10839}-\x{1083B}\x{1083C}\x{1083D}-\x{1083E}\x{1083F}-\x{10855}\x{10856}\x{10857}\x{10858}-\x{1085F}\x{10860}-\x{10876}\x{10877}-\x{10878}\x{10879}-\x{1087F}\x{10880}-\x{1089E}\x{1089F}-\x{108A6}\x{108A7}-\x{108AF}\x{108B0}-\x{108DF}\x{108E0}-\x{108F2}\x{108F3}\x{108F4}-\x{108F5}\x{108F6}-\x{108FA}\x{108FB}-\x{108FF}\x{10900}-\x{10915}\x{10916}-\x{1091B}\x{1091C}-\x{1091E}\x{1091F}\x{10920}-\x{10939}\x{1093A}-\x{1093E}\x{1093F}\x{10940}-\x{1097F}\x{10980}-\x{109B7}\x{109B8}-\x{109BB}\x{109BC}-\x{109BD}\x{109BE}-\x{109BF}\x{109C0}-\x{109CF}\x{109D0}-\x{109D1}\x{109D2}-\x{109FF}\x{10A00}\x{10A01}-\x{10A03}\x{10A04}\x{10A05}-\x{10A06}\x{10A07}-\x{10A0B}\x{10A0C}-\x{10A0F}\x{10A10}-\x{10A13}\x{10A14}\x{10A15}-\x{10A17}\x{10A18}\x{10A19}-\x{10A35}\x{10A36}-\x{10A37}\x{10A38}-\x{10A3A}\x{10A3B}-\x{10A3E}\x{10A3F}\x{10A40}-\x{10A48}\x{10A49}-\x{10A4F}\x{10A50}-\x{10A58}\x{10A59}-\x{10A5F}\x{10A60}-\x{10A7C}\x{10A7D}-\x{10A7E}\x{10A7F}\x{10A80}-\x{10A9C}\x{10A9D}-\x{10A9F}\x{10AA0}-\x{10ABF}\x{10AC0}-\x{10AC7}\x{10AC8}\x{10AC9}-\x{10AE4}\x{10AE5}-\x{10AE6}\x{10AE7}-\x{10AEA}\x{10AEB}-\x{10AEF}\x{10AF0}-\x{10AF6}\x{10AF7}-\x{10AFF}\x{10B00}-\x{10B35}\x{10B36}-\x{10B38}\x{10B39}-\x{10B3F}\x{10B40}-\x{10B55}\x{10B56}-\x{10B57}\x{10B58}-\x{10B5F}\x{10B60}-\x{10B72}\x{10B73}-\x{10B77}\x{10B78}-\x{10B7F}\x{10B80}-\x{10B91}\x{10B92}-\x{10B98}\x{10B99}-\x{10B9C}\x{10B9D}-\x{10BA8}\x{10BA9}-\x{10BAF}\x{10BB0}-\x{10BFF}\x{10C00}-\x{10C48}\x{10C49}-\x{10C7F}\x{10C80}-\x{10CB2}\x{10CB3}-\x{10CBF}\x{10CC0}-\x{10CF2}\x{10CF3}-\x{10CF9}\x{10CFA}-\x{10CFF}\x{10D00}-\x{10D23}\x{10D24}-\x{10D27}\x{10D28}-\x{10D2F}\x{10D30}-\x{10D39}\x{10D3A}-\x{10D3F}\x{10D40}-\x{10E5F}\x{10E60}-\x{10E7E}\x{10E7F}\x{10E80}-\x{10EA9}\x{10EAA}\x{10EAB}-\x{10EAC}\x{10EAD}\x{10EAE}-\x{10EAF}\x{10EB0}-\x{10EB1}\x{10EB2}-\x{10EFF}\x{10F00}-\x{10F1C}\x{10F1D}-\x{10F26}\x{10F27}\x{10F28}-\x{10F2F}\x{10F30}-\x{10F45}\x{10F46}-\x{10F50}\x{10F51}-\x{10F54}\x{10F55}-\x{10F59}\x{10F5A}-\x{10F6F}\x{10F70}-\x{10FAF}\x{10FB0}-\x{10FC4}\x{10FC5}-\x{10FCB}\x{10FCC}-\x{10FDF}\x{10FE0}-\x{10FF6}\x{10FF7}-\x{10FFF}\x{11001}\x{11038}-\x{11046}\x{11052}-\x{11065}\x{1107F}-\x{11081}\x{110B3}-\x{110B6}\x{110B9}-\x{110BA}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112D}-\x{11134}\x{11173}\x{11180}-\x{11181}\x{111B6}-\x{111BE}\x{111C9}-\x{111CC}\x{111CF}\x{1122F}-\x{11231}\x{11234}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{1133B}-\x{1133C}\x{11340}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11438}-\x{1143F}\x{11442}-\x{11444}\x{11446}\x{1145E}\x{114B3}-\x{114B8}\x{114BA}\x{114BF}-\x{114C0}\x{114C2}-\x{114C3}\x{115B2}-\x{115B5}\x{115BC}-\x{115BD}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11633}-\x{1163A}\x{1163D}\x{1163F}-\x{11640}\x{11660}-\x{1166C}\x{116AB}\x{116AD}\x{116B0}-\x{116B5}\x{116B7}\x{1171D}-\x{1171F}\x{11722}-\x{11725}\x{11727}-\x{1172B}\x{1182F}-\x{11837}\x{11839}-\x{1183A}\x{1193B}-\x{1193C}\x{1193E}\x{11943}\x{119D4}-\x{119D7}\x{119DA}-\x{119DB}\x{119E0}\x{11A01}-\x{11A06}\x{11A09}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A98}-\x{11A99}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C92}-\x{11CA7}\x{11CAA}-\x{11CB0}\x{11CB2}-\x{11CB3}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D90}-\x{11D91}\x{11D95}\x{11D97}\x{11EF3}-\x{11EF4}\x{11FD5}-\x{11FDC}\x{11FDD}-\x{11FE0}\x{11FE1}-\x{11FF1}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16F4F}\x{16F8F}-\x{16F92}\x{16FE2}\x{16FE4}\x{1BC9D}-\x{1BC9E}\x{1BCA0}-\x{1BCA3}\x{1D167}-\x{1D169}\x{1D173}-\x{1D17A}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D200}-\x{1D241}\x{1D242}-\x{1D244}\x{1D245}\x{1D300}-\x{1D356}\x{1D6DB}\x{1D715}\x{1D74F}\x{1D789}\x{1D7C3}\x{1D7CE}-\x{1D7FF}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E130}-\x{1E136}\x{1E2EC}-\x{1E2EF}\x{1E2FF}\x{1E800}-\x{1E8C4}\x{1E8C5}-\x{1E8C6}\x{1E8C7}-\x{1E8CF}\x{1E8D0}-\x{1E8D6}\x{1E8D7}-\x{1E8FF}\x{1E900}-\x{1E943}\x{1E944}-\x{1E94A}\x{1E94B}\x{1E94C}-\x{1E94F}\x{1E950}-\x{1E959}\x{1E95A}-\x{1E95D}\x{1E95E}-\x{1E95F}\x{1E960}-\x{1EC6F}\x{1EC70}\x{1EC71}-\x{1ECAB}\x{1ECAC}\x{1ECAD}-\x{1ECAF}\x{1ECB0}\x{1ECB1}-\x{1ECB4}\x{1ECB5}-\x{1ECBF}\x{1ECC0}-\x{1ECFF}\x{1ED00}\x{1ED01}-\x{1ED2D}\x{1ED2E}\x{1ED2F}-\x{1ED3D}\x{1ED3E}-\x{1ED4F}\x{1ED50}-\x{1EDFF}\x{1EE00}-\x{1EE03}\x{1EE04}\x{1EE05}-\x{1EE1F}\x{1EE20}\x{1EE21}-\x{1EE22}\x{1EE23}\x{1EE24}\x{1EE25}-\x{1EE26}\x{1EE27}\x{1EE28}\x{1EE29}-\x{1EE32}\x{1EE33}\x{1EE34}-\x{1EE37}\x{1EE38}\x{1EE39}\x{1EE3A}\x{1EE3B}\x{1EE3C}-\x{1EE41}\x{1EE42}\x{1EE43}-\x{1EE46}\x{1EE47}\x{1EE48}\x{1EE49}\x{1EE4A}\x{1EE4B}\x{1EE4C}\x{1EE4D}-\x{1EE4F}\x{1EE50}\x{1EE51}-\x{1EE52}\x{1EE53}\x{1EE54}\x{1EE55}-\x{1EE56}\x{1EE57}\x{1EE58}\x{1EE59}\x{1EE5A}\x{1EE5B}\x{1EE5C}\x{1EE5D}\x{1EE5E}\x{1EE5F}\x{1EE60}\x{1EE61}-\x{1EE62}\x{1EE63}\x{1EE64}\x{1EE65}-\x{1EE66}\x{1EE67}-\x{1EE6A}\x{1EE6B}\x{1EE6C}-\x{1EE72}\x{1EE73}\x{1EE74}-\x{1EE77}\x{1EE78}\x{1EE79}-\x{1EE7C}\x{1EE7D}\x{1EE7E}\x{1EE7F}\x{1EE80}-\x{1EE89}\x{1EE8A}\x{1EE8B}-\x{1EE9B}\x{1EE9C}-\x{1EEA0}\x{1EEA1}-\x{1EEA3}\x{1EEA4}\x{1EEA5}-\x{1EEA9}\x{1EEAA}\x{1EEAB}-\x{1EEBB}\x{1EEBC}-\x{1EEEF}\x{1EEF0}-\x{1EEF1}\x{1EEF2}-\x{1EEFF}\x{1EF00}-\x{1EFFF}\x{1F000}-\x{1F02B}\x{1F030}-\x{1F093}\x{1F0A0}-\x{1F0AE}\x{1F0B1}-\x{1F0BF}\x{1F0C1}-\x{1F0CF}\x{1F0D1}-\x{1F0F5}\x{1F100}-\x{1F10A}\x{1F10B}-\x{1F10C}\x{1F10D}-\x{1F10F}\x{1F12F}\x{1F16A}-\x{1F16F}\x{1F1AD}\x{1F260}-\x{1F265}\x{1F300}-\x{1F3FA}\x{1F3FB}-\x{1F3FF}\x{1F400}-\x{1F6D7}\x{1F6E0}-\x{1F6EC}\x{1F6F0}-\x{1F6FC}\x{1F700}-\x{1F773}\x{1F780}-\x{1F7D8}\x{1F7E0}-\x{1F7EB}\x{1F800}-\x{1F80B}\x{1F810}-\x{1F847}\x{1F850}-\x{1F859}\x{1F860}-\x{1F887}\x{1F890}-\x{1F8AD}\x{1F8B0}-\x{1F8B1}\x{1F900}-\x{1F978}\x{1F97A}-\x{1F9CB}\x{1F9CD}-\x{1FA53}\x{1FA60}-\x{1FA6D}\x{1FA70}-\x{1FA74}\x{1FA78}-\x{1FA7A}\x{1FA80}-\x{1FA86}\x{1FA90}-\x{1FAA8}\x{1FAB0}-\x{1FAB6}\x{1FAC0}-\x{1FAC2}\x{1FAD0}-\x{1FAD6}\x{1FB00}-\x{1FB92}\x{1FB94}-\x{1FBCA}\x{1FBF0}-\x{1FBF9}\x{1FFFE}-\x{1FFFF}\x{2FFFE}-\x{2FFFF}\x{3FFFE}-\x{3FFFF}\x{4FFFE}-\x{4FFFF}\x{5FFFE}-\x{5FFFF}\x{6FFFE}-\x{6FFFF}\x{7FFFE}-\x{7FFFF}\x{8FFFE}-\x{8FFFF}\x{9FFFE}-\x{9FFFF}\x{AFFFE}-\x{AFFFF}\x{BFFFE}-\x{BFFFF}\x{CFFFE}-\x{CFFFF}\x{DFFFE}-\x{E0000}\x{E0001}\x{E0002}-\x{E001F}\x{E0020}-\x{E007F}\x{E0080}-\x{E00FF}\x{E0100}-\x{E01EF}\x{E01F0}-\x{E0FFF}\x{EFFFE}-\x{EFFFF}\x{FFFFE}-\x{FFFFF}\x{10FFFE}-\x{10FFFF}]/u';
+    const BIDI_STEP_1_RTL = '/^[\x{0590}\x{05BE}\x{05C0}\x{05C3}\x{05C6}\x{05C8}-\x{05CF}\x{05D0}-\x{05EA}\x{05EB}-\x{05EE}\x{05EF}-\x{05F2}\x{05F3}-\x{05F4}\x{05F5}-\x{05FF}\x{0608}\x{060B}\x{060D}\x{061B}\x{061C}\x{061D}\x{061E}-\x{061F}\x{0620}-\x{063F}\x{0640}\x{0641}-\x{064A}\x{066D}\x{066E}-\x{066F}\x{0671}-\x{06D3}\x{06D4}\x{06D5}\x{06E5}-\x{06E6}\x{06EE}-\x{06EF}\x{06FA}-\x{06FC}\x{06FD}-\x{06FE}\x{06FF}\x{0700}-\x{070D}\x{070E}\x{070F}\x{0710}\x{0712}-\x{072F}\x{074B}-\x{074C}\x{074D}-\x{07A5}\x{07B1}\x{07B2}-\x{07BF}\x{07C0}-\x{07C9}\x{07CA}-\x{07EA}\x{07F4}-\x{07F5}\x{07FA}\x{07FB}-\x{07FC}\x{07FE}-\x{07FF}\x{0800}-\x{0815}\x{081A}\x{0824}\x{0828}\x{082E}-\x{082F}\x{0830}-\x{083E}\x{083F}\x{0840}-\x{0858}\x{085C}-\x{085D}\x{085E}\x{085F}\x{0860}-\x{086A}\x{086B}-\x{086F}\x{0870}-\x{089F}\x{08A0}-\x{08B4}\x{08B5}\x{08B6}-\x{08C7}\x{08C8}-\x{08D2}\x{200F}\x{FB1D}\x{FB1F}-\x{FB28}\x{FB2A}-\x{FB36}\x{FB37}\x{FB38}-\x{FB3C}\x{FB3D}\x{FB3E}\x{FB3F}\x{FB40}-\x{FB41}\x{FB42}\x{FB43}-\x{FB44}\x{FB45}\x{FB46}-\x{FB4F}\x{FB50}-\x{FBB1}\x{FBB2}-\x{FBC1}\x{FBC2}-\x{FBD2}\x{FBD3}-\x{FD3D}\x{FD40}-\x{FD4F}\x{FD50}-\x{FD8F}\x{FD90}-\x{FD91}\x{FD92}-\x{FDC7}\x{FDC8}-\x{FDCF}\x{FDF0}-\x{FDFB}\x{FDFC}\x{FDFE}-\x{FDFF}\x{FE70}-\x{FE74}\x{FE75}\x{FE76}-\x{FEFC}\x{FEFD}-\x{FEFE}\x{10800}-\x{10805}\x{10806}-\x{10807}\x{10808}\x{10809}\x{1080A}-\x{10835}\x{10836}\x{10837}-\x{10838}\x{10839}-\x{1083B}\x{1083C}\x{1083D}-\x{1083E}\x{1083F}-\x{10855}\x{10856}\x{10857}\x{10858}-\x{1085F}\x{10860}-\x{10876}\x{10877}-\x{10878}\x{10879}-\x{1087F}\x{10880}-\x{1089E}\x{1089F}-\x{108A6}\x{108A7}-\x{108AF}\x{108B0}-\x{108DF}\x{108E0}-\x{108F2}\x{108F3}\x{108F4}-\x{108F5}\x{108F6}-\x{108FA}\x{108FB}-\x{108FF}\x{10900}-\x{10915}\x{10916}-\x{1091B}\x{1091C}-\x{1091E}\x{10920}-\x{10939}\x{1093A}-\x{1093E}\x{1093F}\x{10940}-\x{1097F}\x{10980}-\x{109B7}\x{109B8}-\x{109BB}\x{109BC}-\x{109BD}\x{109BE}-\x{109BF}\x{109C0}-\x{109CF}\x{109D0}-\x{109D1}\x{109D2}-\x{109FF}\x{10A00}\x{10A04}\x{10A07}-\x{10A0B}\x{10A10}-\x{10A13}\x{10A14}\x{10A15}-\x{10A17}\x{10A18}\x{10A19}-\x{10A35}\x{10A36}-\x{10A37}\x{10A3B}-\x{10A3E}\x{10A40}-\x{10A48}\x{10A49}-\x{10A4F}\x{10A50}-\x{10A58}\x{10A59}-\x{10A5F}\x{10A60}-\x{10A7C}\x{10A7D}-\x{10A7E}\x{10A7F}\x{10A80}-\x{10A9C}\x{10A9D}-\x{10A9F}\x{10AA0}-\x{10ABF}\x{10AC0}-\x{10AC7}\x{10AC8}\x{10AC9}-\x{10AE4}\x{10AE7}-\x{10AEA}\x{10AEB}-\x{10AEF}\x{10AF0}-\x{10AF6}\x{10AF7}-\x{10AFF}\x{10B00}-\x{10B35}\x{10B36}-\x{10B38}\x{10B40}-\x{10B55}\x{10B56}-\x{10B57}\x{10B58}-\x{10B5F}\x{10B60}-\x{10B72}\x{10B73}-\x{10B77}\x{10B78}-\x{10B7F}\x{10B80}-\x{10B91}\x{10B92}-\x{10B98}\x{10B99}-\x{10B9C}\x{10B9D}-\x{10BA8}\x{10BA9}-\x{10BAF}\x{10BB0}-\x{10BFF}\x{10C00}-\x{10C48}\x{10C49}-\x{10C7F}\x{10C80}-\x{10CB2}\x{10CB3}-\x{10CBF}\x{10CC0}-\x{10CF2}\x{10CF3}-\x{10CF9}\x{10CFA}-\x{10CFF}\x{10D00}-\x{10D23}\x{10D28}-\x{10D2F}\x{10D3A}-\x{10D3F}\x{10D40}-\x{10E5F}\x{10E7F}\x{10E80}-\x{10EA9}\x{10EAA}\x{10EAD}\x{10EAE}-\x{10EAF}\x{10EB0}-\x{10EB1}\x{10EB2}-\x{10EFF}\x{10F00}-\x{10F1C}\x{10F1D}-\x{10F26}\x{10F27}\x{10F28}-\x{10F2F}\x{10F30}-\x{10F45}\x{10F51}-\x{10F54}\x{10F55}-\x{10F59}\x{10F5A}-\x{10F6F}\x{10F70}-\x{10FAF}\x{10FB0}-\x{10FC4}\x{10FC5}-\x{10FCB}\x{10FCC}-\x{10FDF}\x{10FE0}-\x{10FF6}\x{10FF7}-\x{10FFF}\x{1E800}-\x{1E8C4}\x{1E8C5}-\x{1E8C6}\x{1E8C7}-\x{1E8CF}\x{1E8D7}-\x{1E8FF}\x{1E900}-\x{1E943}\x{1E94B}\x{1E94C}-\x{1E94F}\x{1E950}-\x{1E959}\x{1E95A}-\x{1E95D}\x{1E95E}-\x{1E95F}\x{1E960}-\x{1EC6F}\x{1EC70}\x{1EC71}-\x{1ECAB}\x{1ECAC}\x{1ECAD}-\x{1ECAF}\x{1ECB0}\x{1ECB1}-\x{1ECB4}\x{1ECB5}-\x{1ECBF}\x{1ECC0}-\x{1ECFF}\x{1ED00}\x{1ED01}-\x{1ED2D}\x{1ED2E}\x{1ED2F}-\x{1ED3D}\x{1ED3E}-\x{1ED4F}\x{1ED50}-\x{1EDFF}\x{1EE00}-\x{1EE03}\x{1EE04}\x{1EE05}-\x{1EE1F}\x{1EE20}\x{1EE21}-\x{1EE22}\x{1EE23}\x{1EE24}\x{1EE25}-\x{1EE26}\x{1EE27}\x{1EE28}\x{1EE29}-\x{1EE32}\x{1EE33}\x{1EE34}-\x{1EE37}\x{1EE38}\x{1EE39}\x{1EE3A}\x{1EE3B}\x{1EE3C}-\x{1EE41}\x{1EE42}\x{1EE43}-\x{1EE46}\x{1EE47}\x{1EE48}\x{1EE49}\x{1EE4A}\x{1EE4B}\x{1EE4C}\x{1EE4D}-\x{1EE4F}\x{1EE50}\x{1EE51}-\x{1EE52}\x{1EE53}\x{1EE54}\x{1EE55}-\x{1EE56}\x{1EE57}\x{1EE58}\x{1EE59}\x{1EE5A}\x{1EE5B}\x{1EE5C}\x{1EE5D}\x{1EE5E}\x{1EE5F}\x{1EE60}\x{1EE61}-\x{1EE62}\x{1EE63}\x{1EE64}\x{1EE65}-\x{1EE66}\x{1EE67}-\x{1EE6A}\x{1EE6B}\x{1EE6C}-\x{1EE72}\x{1EE73}\x{1EE74}-\x{1EE77}\x{1EE78}\x{1EE79}-\x{1EE7C}\x{1EE7D}\x{1EE7E}\x{1EE7F}\x{1EE80}-\x{1EE89}\x{1EE8A}\x{1EE8B}-\x{1EE9B}\x{1EE9C}-\x{1EEA0}\x{1EEA1}-\x{1EEA3}\x{1EEA4}\x{1EEA5}-\x{1EEA9}\x{1EEAA}\x{1EEAB}-\x{1EEBB}\x{1EEBC}-\x{1EEEF}\x{1EEF2}-\x{1EEFF}\x{1EF00}-\x{1EFFF}]/u';
+    const BIDI_STEP_2 = '/[^\x{0000}-\x{0008}\x{000E}-\x{001B}\x{0021}-\x{0022}\x{0023}\x{0024}\x{0025}\x{0026}-\x{0027}\x{0028}\x{0029}\x{002A}\x{002B}\x{002C}\x{002D}\x{002E}-\x{002F}\x{0030}-\x{0039}\x{003A}\x{003B}\x{003C}-\x{003E}\x{003F}-\x{0040}\x{005B}\x{005C}\x{005D}\x{005E}\x{005F}\x{0060}\x{007B}\x{007C}\x{007D}\x{007E}\x{007F}-\x{0084}\x{0086}-\x{009F}\x{00A0}\x{00A1}\x{00A2}-\x{00A5}\x{00A6}\x{00A7}\x{00A8}\x{00A9}\x{00AB}\x{00AC}\x{00AD}\x{00AE}\x{00AF}\x{00B0}\x{00B1}\x{00B2}-\x{00B3}\x{00B4}\x{00B6}-\x{00B7}\x{00B8}\x{00B9}\x{00BB}\x{00BC}-\x{00BE}\x{00BF}\x{00D7}\x{00F7}\x{02B9}-\x{02BA}\x{02C2}-\x{02C5}\x{02C6}-\x{02CF}\x{02D2}-\x{02DF}\x{02E5}-\x{02EB}\x{02EC}\x{02ED}\x{02EF}-\x{02FF}\x{0300}-\x{036F}\x{0374}\x{0375}\x{037E}\x{0384}-\x{0385}\x{0387}\x{03F6}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{058A}\x{058D}-\x{058E}\x{058F}\x{0590}\x{0591}-\x{05BD}\x{05BE}\x{05BF}\x{05C0}\x{05C1}-\x{05C2}\x{05C3}\x{05C4}-\x{05C5}\x{05C6}\x{05C7}\x{05C8}-\x{05CF}\x{05D0}-\x{05EA}\x{05EB}-\x{05EE}\x{05EF}-\x{05F2}\x{05F3}-\x{05F4}\x{05F5}-\x{05FF}\x{0600}-\x{0605}\x{0606}-\x{0607}\x{0608}\x{0609}-\x{060A}\x{060B}\x{060C}\x{060D}\x{060E}-\x{060F}\x{0610}-\x{061A}\x{061B}\x{061C}\x{061D}\x{061E}-\x{061F}\x{0620}-\x{063F}\x{0640}\x{0641}-\x{064A}\x{064B}-\x{065F}\x{0660}-\x{0669}\x{066A}\x{066B}-\x{066C}\x{066D}\x{066E}-\x{066F}\x{0670}\x{0671}-\x{06D3}\x{06D4}\x{06D5}\x{06D6}-\x{06DC}\x{06DD}\x{06DE}\x{06DF}-\x{06E4}\x{06E5}-\x{06E6}\x{06E7}-\x{06E8}\x{06E9}\x{06EA}-\x{06ED}\x{06EE}-\x{06EF}\x{06F0}-\x{06F9}\x{06FA}-\x{06FC}\x{06FD}-\x{06FE}\x{06FF}\x{0700}-\x{070D}\x{070E}\x{070F}\x{0710}\x{0711}\x{0712}-\x{072F}\x{0730}-\x{074A}\x{074B}-\x{074C}\x{074D}-\x{07A5}\x{07A6}-\x{07B0}\x{07B1}\x{07B2}-\x{07BF}\x{07C0}-\x{07C9}\x{07CA}-\x{07EA}\x{07EB}-\x{07F3}\x{07F4}-\x{07F5}\x{07F6}\x{07F7}-\x{07F9}\x{07FA}\x{07FB}-\x{07FC}\x{07FD}\x{07FE}-\x{07FF}\x{0800}-\x{0815}\x{0816}-\x{0819}\x{081A}\x{081B}-\x{0823}\x{0824}\x{0825}-\x{0827}\x{0828}\x{0829}-\x{082D}\x{082E}-\x{082F}\x{0830}-\x{083E}\x{083F}\x{0840}-\x{0858}\x{0859}-\x{085B}\x{085C}-\x{085D}\x{085E}\x{085F}\x{0860}-\x{086A}\x{086B}-\x{086F}\x{0870}-\x{089F}\x{08A0}-\x{08B4}\x{08B5}\x{08B6}-\x{08C7}\x{08C8}-\x{08D2}\x{08D3}-\x{08E1}\x{08E2}\x{08E3}-\x{0902}\x{093A}\x{093C}\x{0941}-\x{0948}\x{094D}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0981}\x{09BC}\x{09C1}-\x{09C4}\x{09CD}\x{09E2}-\x{09E3}\x{09F2}-\x{09F3}\x{09FB}\x{09FE}\x{0A01}-\x{0A02}\x{0A3C}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0ABC}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AF1}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B3C}\x{0B3F}\x{0B41}-\x{0B44}\x{0B4D}\x{0B55}-\x{0B56}\x{0B62}-\x{0B63}\x{0B82}\x{0BC0}\x{0BCD}\x{0BF3}-\x{0BF8}\x{0BF9}\x{0BFA}\x{0C00}\x{0C04}\x{0C3E}-\x{0C40}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C78}-\x{0C7E}\x{0C81}\x{0CBC}\x{0CCC}-\x{0CCD}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D3B}-\x{0D3C}\x{0D41}-\x{0D44}\x{0D4D}\x{0D62}-\x{0D63}\x{0D81}\x{0DCA}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0E31}\x{0E34}-\x{0E3A}\x{0E3F}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EBC}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F3A}\x{0F3B}\x{0F3C}\x{0F3D}\x{0F71}-\x{0F7E}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102D}-\x{1030}\x{1032}-\x{1037}\x{1039}-\x{103A}\x{103D}-\x{103E}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1071}-\x{1074}\x{1082}\x{1085}-\x{1086}\x{108D}\x{109D}\x{135D}-\x{135F}\x{1390}-\x{1399}\x{1400}\x{169B}\x{169C}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B7}-\x{17BD}\x{17C6}\x{17C9}-\x{17D3}\x{17DB}\x{17DD}\x{17F0}-\x{17F9}\x{1800}-\x{1805}\x{1806}\x{1807}-\x{180A}\x{180B}-\x{180D}\x{180E}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1927}-\x{1928}\x{1932}\x{1939}-\x{193B}\x{1940}\x{1944}-\x{1945}\x{19DE}-\x{19FF}\x{1A17}-\x{1A18}\x{1A1B}\x{1A56}\x{1A58}-\x{1A5E}\x{1A60}\x{1A62}\x{1A65}-\x{1A6C}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1ABF}-\x{1AC0}\x{1B00}-\x{1B03}\x{1B34}\x{1B36}-\x{1B3A}\x{1B3C}\x{1B42}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1BA2}-\x{1BA5}\x{1BA8}-\x{1BA9}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE8}-\x{1BE9}\x{1BED}\x{1BEF}-\x{1BF1}\x{1C2C}-\x{1C33}\x{1C36}-\x{1C37}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF8}-\x{1CF9}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{1FBD}\x{1FBF}-\x{1FC1}\x{1FCD}-\x{1FCF}\x{1FDD}-\x{1FDF}\x{1FED}-\x{1FEF}\x{1FFD}-\x{1FFE}\x{200B}-\x{200D}\x{200F}\x{2010}-\x{2015}\x{2016}-\x{2017}\x{2018}\x{2019}\x{201A}\x{201B}-\x{201C}\x{201D}\x{201E}\x{201F}\x{2020}-\x{2027}\x{202F}\x{2030}-\x{2034}\x{2035}-\x{2038}\x{2039}\x{203A}\x{203B}-\x{203E}\x{203F}-\x{2040}\x{2041}-\x{2043}\x{2044}\x{2045}\x{2046}\x{2047}-\x{2051}\x{2052}\x{2053}\x{2054}\x{2055}-\x{205E}\x{2060}-\x{2064}\x{2065}\x{206A}-\x{206F}\x{2070}\x{2074}-\x{2079}\x{207A}-\x{207B}\x{207C}\x{207D}\x{207E}\x{2080}-\x{2089}\x{208A}-\x{208B}\x{208C}\x{208D}\x{208E}\x{20A0}-\x{20BF}\x{20C0}-\x{20CF}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2100}-\x{2101}\x{2103}-\x{2106}\x{2108}-\x{2109}\x{2114}\x{2116}-\x{2117}\x{2118}\x{211E}-\x{2123}\x{2125}\x{2127}\x{2129}\x{212E}\x{213A}-\x{213B}\x{2140}-\x{2144}\x{214A}\x{214B}\x{214C}-\x{214D}\x{2150}-\x{215F}\x{2189}\x{218A}-\x{218B}\x{2190}-\x{2194}\x{2195}-\x{2199}\x{219A}-\x{219B}\x{219C}-\x{219F}\x{21A0}\x{21A1}-\x{21A2}\x{21A3}\x{21A4}-\x{21A5}\x{21A6}\x{21A7}-\x{21AD}\x{21AE}\x{21AF}-\x{21CD}\x{21CE}-\x{21CF}\x{21D0}-\x{21D1}\x{21D2}\x{21D3}\x{21D4}\x{21D5}-\x{21F3}\x{21F4}-\x{2211}\x{2212}\x{2213}\x{2214}-\x{22FF}\x{2300}-\x{2307}\x{2308}\x{2309}\x{230A}\x{230B}\x{230C}-\x{231F}\x{2320}-\x{2321}\x{2322}-\x{2328}\x{2329}\x{232A}\x{232B}-\x{2335}\x{237B}\x{237C}\x{237D}-\x{2394}\x{2396}-\x{239A}\x{239B}-\x{23B3}\x{23B4}-\x{23DB}\x{23DC}-\x{23E1}\x{23E2}-\x{2426}\x{2440}-\x{244A}\x{2460}-\x{2487}\x{2488}-\x{249B}\x{24EA}-\x{24FF}\x{2500}-\x{25B6}\x{25B7}\x{25B8}-\x{25C0}\x{25C1}\x{25C2}-\x{25F7}\x{25F8}-\x{25FF}\x{2600}-\x{266E}\x{266F}\x{2670}-\x{26AB}\x{26AD}-\x{2767}\x{2768}\x{2769}\x{276A}\x{276B}\x{276C}\x{276D}\x{276E}\x{276F}\x{2770}\x{2771}\x{2772}\x{2773}\x{2774}\x{2775}\x{2776}-\x{2793}\x{2794}-\x{27BF}\x{27C0}-\x{27C4}\x{27C5}\x{27C6}\x{27C7}-\x{27E5}\x{27E6}\x{27E7}\x{27E8}\x{27E9}\x{27EA}\x{27EB}\x{27EC}\x{27ED}\x{27EE}\x{27EF}\x{27F0}-\x{27FF}\x{2900}-\x{2982}\x{2983}\x{2984}\x{2985}\x{2986}\x{2987}\x{2988}\x{2989}\x{298A}\x{298B}\x{298C}\x{298D}\x{298E}\x{298F}\x{2990}\x{2991}\x{2992}\x{2993}\x{2994}\x{2995}\x{2996}\x{2997}\x{2998}\x{2999}-\x{29D7}\x{29D8}\x{29D9}\x{29DA}\x{29DB}\x{29DC}-\x{29FB}\x{29FC}\x{29FD}\x{29FE}-\x{2AFF}\x{2B00}-\x{2B2F}\x{2B30}-\x{2B44}\x{2B45}-\x{2B46}\x{2B47}-\x{2B4C}\x{2B4D}-\x{2B73}\x{2B76}-\x{2B95}\x{2B97}-\x{2BFF}\x{2CE5}-\x{2CEA}\x{2CEF}-\x{2CF1}\x{2CF9}-\x{2CFC}\x{2CFD}\x{2CFE}-\x{2CFF}\x{2D7F}\x{2DE0}-\x{2DFF}\x{2E00}-\x{2E01}\x{2E02}\x{2E03}\x{2E04}\x{2E05}\x{2E06}-\x{2E08}\x{2E09}\x{2E0A}\x{2E0B}\x{2E0C}\x{2E0D}\x{2E0E}-\x{2E16}\x{2E17}\x{2E18}-\x{2E19}\x{2E1A}\x{2E1B}\x{2E1C}\x{2E1D}\x{2E1E}-\x{2E1F}\x{2E20}\x{2E21}\x{2E22}\x{2E23}\x{2E24}\x{2E25}\x{2E26}\x{2E27}\x{2E28}\x{2E29}\x{2E2A}-\x{2E2E}\x{2E2F}\x{2E30}-\x{2E39}\x{2E3A}-\x{2E3B}\x{2E3C}-\x{2E3F}\x{2E40}\x{2E41}\x{2E42}\x{2E43}-\x{2E4F}\x{2E50}-\x{2E51}\x{2E52}\x{2E80}-\x{2E99}\x{2E9B}-\x{2EF3}\x{2F00}-\x{2FD5}\x{2FF0}-\x{2FFB}\x{3001}-\x{3003}\x{3004}\x{3008}\x{3009}\x{300A}\x{300B}\x{300C}\x{300D}\x{300E}\x{300F}\x{3010}\x{3011}\x{3012}-\x{3013}\x{3014}\x{3015}\x{3016}\x{3017}\x{3018}\x{3019}\x{301A}\x{301B}\x{301C}\x{301D}\x{301E}-\x{301F}\x{3020}\x{302A}-\x{302D}\x{3030}\x{3036}-\x{3037}\x{303D}\x{303E}-\x{303F}\x{3099}-\x{309A}\x{309B}-\x{309C}\x{30A0}\x{30FB}\x{31C0}-\x{31E3}\x{321D}-\x{321E}\x{3250}\x{3251}-\x{325F}\x{327C}-\x{327E}\x{32B1}-\x{32BF}\x{32CC}-\x{32CF}\x{3377}-\x{337A}\x{33DE}-\x{33DF}\x{33FF}\x{4DC0}-\x{4DFF}\x{A490}-\x{A4C6}\x{A60D}-\x{A60F}\x{A66F}\x{A670}-\x{A672}\x{A673}\x{A674}-\x{A67D}\x{A67E}\x{A67F}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A700}-\x{A716}\x{A717}-\x{A71F}\x{A720}-\x{A721}\x{A788}\x{A802}\x{A806}\x{A80B}\x{A825}-\x{A826}\x{A828}-\x{A82B}\x{A82C}\x{A838}\x{A839}\x{A874}-\x{A877}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A980}-\x{A982}\x{A9B3}\x{A9B6}-\x{A9B9}\x{A9BC}-\x{A9BD}\x{A9E5}\x{AA29}-\x{AA2E}\x{AA31}-\x{AA32}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA7C}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AAEC}-\x{AAED}\x{AAF6}\x{AB6A}-\x{AB6B}\x{ABE5}\x{ABE8}\x{ABED}\x{FB1D}\x{FB1E}\x{FB1F}-\x{FB28}\x{FB29}\x{FB2A}-\x{FB36}\x{FB37}\x{FB38}-\x{FB3C}\x{FB3D}\x{FB3E}\x{FB3F}\x{FB40}-\x{FB41}\x{FB42}\x{FB43}-\x{FB44}\x{FB45}\x{FB46}-\x{FB4F}\x{FB50}-\x{FBB1}\x{FBB2}-\x{FBC1}\x{FBC2}-\x{FBD2}\x{FBD3}-\x{FD3D}\x{FD3E}\x{FD3F}\x{FD40}-\x{FD4F}\x{FD50}-\x{FD8F}\x{FD90}-\x{FD91}\x{FD92}-\x{FDC7}\x{FDC8}-\x{FDCF}\x{FDD0}-\x{FDEF}\x{FDF0}-\x{FDFB}\x{FDFC}\x{FDFD}\x{FDFE}-\x{FDFF}\x{FE00}-\x{FE0F}\x{FE10}-\x{FE16}\x{FE17}\x{FE18}\x{FE19}\x{FE20}-\x{FE2F}\x{FE30}\x{FE31}-\x{FE32}\x{FE33}-\x{FE34}\x{FE35}\x{FE36}\x{FE37}\x{FE38}\x{FE39}\x{FE3A}\x{FE3B}\x{FE3C}\x{FE3D}\x{FE3E}\x{FE3F}\x{FE40}\x{FE41}\x{FE42}\x{FE43}\x{FE44}\x{FE45}-\x{FE46}\x{FE47}\x{FE48}\x{FE49}-\x{FE4C}\x{FE4D}-\x{FE4F}\x{FE50}\x{FE51}\x{FE52}\x{FE54}\x{FE55}\x{FE56}-\x{FE57}\x{FE58}\x{FE59}\x{FE5A}\x{FE5B}\x{FE5C}\x{FE5D}\x{FE5E}\x{FE5F}\x{FE60}-\x{FE61}\x{FE62}\x{FE63}\x{FE64}-\x{FE66}\x{FE68}\x{FE69}\x{FE6A}\x{FE6B}\x{FE70}-\x{FE74}\x{FE75}\x{FE76}-\x{FEFC}\x{FEFD}-\x{FEFE}\x{FEFF}\x{FF01}-\x{FF02}\x{FF03}\x{FF04}\x{FF05}\x{FF06}-\x{FF07}\x{FF08}\x{FF09}\x{FF0A}\x{FF0B}\x{FF0C}\x{FF0D}\x{FF0E}-\x{FF0F}\x{FF10}-\x{FF19}\x{FF1A}\x{FF1B}\x{FF1C}-\x{FF1E}\x{FF1F}-\x{FF20}\x{FF3B}\x{FF3C}\x{FF3D}\x{FF3E}\x{FF3F}\x{FF40}\x{FF5B}\x{FF5C}\x{FF5D}\x{FF5E}\x{FF5F}\x{FF60}\x{FF61}\x{FF62}\x{FF63}\x{FF64}-\x{FF65}\x{FFE0}-\x{FFE1}\x{FFE2}\x{FFE3}\x{FFE4}\x{FFE5}-\x{FFE6}\x{FFE8}\x{FFE9}-\x{FFEC}\x{FFED}-\x{FFEE}\x{FFF0}-\x{FFF8}\x{FFF9}-\x{FFFB}\x{FFFC}-\x{FFFD}\x{FFFE}-\x{FFFF}\x{10101}\x{10140}-\x{10174}\x{10175}-\x{10178}\x{10179}-\x{10189}\x{1018A}-\x{1018B}\x{1018C}\x{10190}-\x{1019C}\x{101A0}\x{101FD}\x{102E0}\x{102E1}-\x{102FB}\x{10376}-\x{1037A}\x{10800}-\x{10805}\x{10806}-\x{10807}\x{10808}\x{10809}\x{1080A}-\x{10835}\x{10836}\x{10837}-\x{10838}\x{10839}-\x{1083B}\x{1083C}\x{1083D}-\x{1083E}\x{1083F}-\x{10855}\x{10856}\x{10857}\x{10858}-\x{1085F}\x{10860}-\x{10876}\x{10877}-\x{10878}\x{10879}-\x{1087F}\x{10880}-\x{1089E}\x{1089F}-\x{108A6}\x{108A7}-\x{108AF}\x{108B0}-\x{108DF}\x{108E0}-\x{108F2}\x{108F3}\x{108F4}-\x{108F5}\x{108F6}-\x{108FA}\x{108FB}-\x{108FF}\x{10900}-\x{10915}\x{10916}-\x{1091B}\x{1091C}-\x{1091E}\x{1091F}\x{10920}-\x{10939}\x{1093A}-\x{1093E}\x{1093F}\x{10940}-\x{1097F}\x{10980}-\x{109B7}\x{109B8}-\x{109BB}\x{109BC}-\x{109BD}\x{109BE}-\x{109BF}\x{109C0}-\x{109CF}\x{109D0}-\x{109D1}\x{109D2}-\x{109FF}\x{10A00}\x{10A01}-\x{10A03}\x{10A04}\x{10A05}-\x{10A06}\x{10A07}-\x{10A0B}\x{10A0C}-\x{10A0F}\x{10A10}-\x{10A13}\x{10A14}\x{10A15}-\x{10A17}\x{10A18}\x{10A19}-\x{10A35}\x{10A36}-\x{10A37}\x{10A38}-\x{10A3A}\x{10A3B}-\x{10A3E}\x{10A3F}\x{10A40}-\x{10A48}\x{10A49}-\x{10A4F}\x{10A50}-\x{10A58}\x{10A59}-\x{10A5F}\x{10A60}-\x{10A7C}\x{10A7D}-\x{10A7E}\x{10A7F}\x{10A80}-\x{10A9C}\x{10A9D}-\x{10A9F}\x{10AA0}-\x{10ABF}\x{10AC0}-\x{10AC7}\x{10AC8}\x{10AC9}-\x{10AE4}\x{10AE5}-\x{10AE6}\x{10AE7}-\x{10AEA}\x{10AEB}-\x{10AEF}\x{10AF0}-\x{10AF6}\x{10AF7}-\x{10AFF}\x{10B00}-\x{10B35}\x{10B36}-\x{10B38}\x{10B39}-\x{10B3F}\x{10B40}-\x{10B55}\x{10B56}-\x{10B57}\x{10B58}-\x{10B5F}\x{10B60}-\x{10B72}\x{10B73}-\x{10B77}\x{10B78}-\x{10B7F}\x{10B80}-\x{10B91}\x{10B92}-\x{10B98}\x{10B99}-\x{10B9C}\x{10B9D}-\x{10BA8}\x{10BA9}-\x{10BAF}\x{10BB0}-\x{10BFF}\x{10C00}-\x{10C48}\x{10C49}-\x{10C7F}\x{10C80}-\x{10CB2}\x{10CB3}-\x{10CBF}\x{10CC0}-\x{10CF2}\x{10CF3}-\x{10CF9}\x{10CFA}-\x{10CFF}\x{10D00}-\x{10D23}\x{10D24}-\x{10D27}\x{10D28}-\x{10D2F}\x{10D30}-\x{10D39}\x{10D3A}-\x{10D3F}\x{10D40}-\x{10E5F}\x{10E60}-\x{10E7E}\x{10E7F}\x{10E80}-\x{10EA9}\x{10EAA}\x{10EAB}-\x{10EAC}\x{10EAD}\x{10EAE}-\x{10EAF}\x{10EB0}-\x{10EB1}\x{10EB2}-\x{10EFF}\x{10F00}-\x{10F1C}\x{10F1D}-\x{10F26}\x{10F27}\x{10F28}-\x{10F2F}\x{10F30}-\x{10F45}\x{10F46}-\x{10F50}\x{10F51}-\x{10F54}\x{10F55}-\x{10F59}\x{10F5A}-\x{10F6F}\x{10F70}-\x{10FAF}\x{10FB0}-\x{10FC4}\x{10FC5}-\x{10FCB}\x{10FCC}-\x{10FDF}\x{10FE0}-\x{10FF6}\x{10FF7}-\x{10FFF}\x{11001}\x{11038}-\x{11046}\x{11052}-\x{11065}\x{1107F}-\x{11081}\x{110B3}-\x{110B6}\x{110B9}-\x{110BA}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112D}-\x{11134}\x{11173}\x{11180}-\x{11181}\x{111B6}-\x{111BE}\x{111C9}-\x{111CC}\x{111CF}\x{1122F}-\x{11231}\x{11234}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{1133B}-\x{1133C}\x{11340}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11438}-\x{1143F}\x{11442}-\x{11444}\x{11446}\x{1145E}\x{114B3}-\x{114B8}\x{114BA}\x{114BF}-\x{114C0}\x{114C2}-\x{114C3}\x{115B2}-\x{115B5}\x{115BC}-\x{115BD}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11633}-\x{1163A}\x{1163D}\x{1163F}-\x{11640}\x{11660}-\x{1166C}\x{116AB}\x{116AD}\x{116B0}-\x{116B5}\x{116B7}\x{1171D}-\x{1171F}\x{11722}-\x{11725}\x{11727}-\x{1172B}\x{1182F}-\x{11837}\x{11839}-\x{1183A}\x{1193B}-\x{1193C}\x{1193E}\x{11943}\x{119D4}-\x{119D7}\x{119DA}-\x{119DB}\x{119E0}\x{11A01}-\x{11A06}\x{11A09}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A98}-\x{11A99}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C92}-\x{11CA7}\x{11CAA}-\x{11CB0}\x{11CB2}-\x{11CB3}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D90}-\x{11D91}\x{11D95}\x{11D97}\x{11EF3}-\x{11EF4}\x{11FD5}-\x{11FDC}\x{11FDD}-\x{11FE0}\x{11FE1}-\x{11FF1}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16F4F}\x{16F8F}-\x{16F92}\x{16FE2}\x{16FE4}\x{1BC9D}-\x{1BC9E}\x{1BCA0}-\x{1BCA3}\x{1D167}-\x{1D169}\x{1D173}-\x{1D17A}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D200}-\x{1D241}\x{1D242}-\x{1D244}\x{1D245}\x{1D300}-\x{1D356}\x{1D6DB}\x{1D715}\x{1D74F}\x{1D789}\x{1D7C3}\x{1D7CE}-\x{1D7FF}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E130}-\x{1E136}\x{1E2EC}-\x{1E2EF}\x{1E2FF}\x{1E800}-\x{1E8C4}\x{1E8C5}-\x{1E8C6}\x{1E8C7}-\x{1E8CF}\x{1E8D0}-\x{1E8D6}\x{1E8D7}-\x{1E8FF}\x{1E900}-\x{1E943}\x{1E944}-\x{1E94A}\x{1E94B}\x{1E94C}-\x{1E94F}\x{1E950}-\x{1E959}\x{1E95A}-\x{1E95D}\x{1E95E}-\x{1E95F}\x{1E960}-\x{1EC6F}\x{1EC70}\x{1EC71}-\x{1ECAB}\x{1ECAC}\x{1ECAD}-\x{1ECAF}\x{1ECB0}\x{1ECB1}-\x{1ECB4}\x{1ECB5}-\x{1ECBF}\x{1ECC0}-\x{1ECFF}\x{1ED00}\x{1ED01}-\x{1ED2D}\x{1ED2E}\x{1ED2F}-\x{1ED3D}\x{1ED3E}-\x{1ED4F}\x{1ED50}-\x{1EDFF}\x{1EE00}-\x{1EE03}\x{1EE04}\x{1EE05}-\x{1EE1F}\x{1EE20}\x{1EE21}-\x{1EE22}\x{1EE23}\x{1EE24}\x{1EE25}-\x{1EE26}\x{1EE27}\x{1EE28}\x{1EE29}-\x{1EE32}\x{1EE33}\x{1EE34}-\x{1EE37}\x{1EE38}\x{1EE39}\x{1EE3A}\x{1EE3B}\x{1EE3C}-\x{1EE41}\x{1EE42}\x{1EE43}-\x{1EE46}\x{1EE47}\x{1EE48}\x{1EE49}\x{1EE4A}\x{1EE4B}\x{1EE4C}\x{1EE4D}-\x{1EE4F}\x{1EE50}\x{1EE51}-\x{1EE52}\x{1EE53}\x{1EE54}\x{1EE55}-\x{1EE56}\x{1EE57}\x{1EE58}\x{1EE59}\x{1EE5A}\x{1EE5B}\x{1EE5C}\x{1EE5D}\x{1EE5E}\x{1EE5F}\x{1EE60}\x{1EE61}-\x{1EE62}\x{1EE63}\x{1EE64}\x{1EE65}-\x{1EE66}\x{1EE67}-\x{1EE6A}\x{1EE6B}\x{1EE6C}-\x{1EE72}\x{1EE73}\x{1EE74}-\x{1EE77}\x{1EE78}\x{1EE79}-\x{1EE7C}\x{1EE7D}\x{1EE7E}\x{1EE7F}\x{1EE80}-\x{1EE89}\x{1EE8A}\x{1EE8B}-\x{1EE9B}\x{1EE9C}-\x{1EEA0}\x{1EEA1}-\x{1EEA3}\x{1EEA4}\x{1EEA5}-\x{1EEA9}\x{1EEAA}\x{1EEAB}-\x{1EEBB}\x{1EEBC}-\x{1EEEF}\x{1EEF0}-\x{1EEF1}\x{1EEF2}-\x{1EEFF}\x{1EF00}-\x{1EFFF}\x{1F000}-\x{1F02B}\x{1F030}-\x{1F093}\x{1F0A0}-\x{1F0AE}\x{1F0B1}-\x{1F0BF}\x{1F0C1}-\x{1F0CF}\x{1F0D1}-\x{1F0F5}\x{1F100}-\x{1F10A}\x{1F10B}-\x{1F10C}\x{1F10D}-\x{1F10F}\x{1F12F}\x{1F16A}-\x{1F16F}\x{1F1AD}\x{1F260}-\x{1F265}\x{1F300}-\x{1F3FA}\x{1F3FB}-\x{1F3FF}\x{1F400}-\x{1F6D7}\x{1F6E0}-\x{1F6EC}\x{1F6F0}-\x{1F6FC}\x{1F700}-\x{1F773}\x{1F780}-\x{1F7D8}\x{1F7E0}-\x{1F7EB}\x{1F800}-\x{1F80B}\x{1F810}-\x{1F847}\x{1F850}-\x{1F859}\x{1F860}-\x{1F887}\x{1F890}-\x{1F8AD}\x{1F8B0}-\x{1F8B1}\x{1F900}-\x{1F978}\x{1F97A}-\x{1F9CB}\x{1F9CD}-\x{1FA53}\x{1FA60}-\x{1FA6D}\x{1FA70}-\x{1FA74}\x{1FA78}-\x{1FA7A}\x{1FA80}-\x{1FA86}\x{1FA90}-\x{1FAA8}\x{1FAB0}-\x{1FAB6}\x{1FAC0}-\x{1FAC2}\x{1FAD0}-\x{1FAD6}\x{1FB00}-\x{1FB92}\x{1FB94}-\x{1FBCA}\x{1FBF0}-\x{1FBF9}\x{1FFFE}-\x{1FFFF}\x{2FFFE}-\x{2FFFF}\x{3FFFE}-\x{3FFFF}\x{4FFFE}-\x{4FFFF}\x{5FFFE}-\x{5FFFF}\x{6FFFE}-\x{6FFFF}\x{7FFFE}-\x{7FFFF}\x{8FFFE}-\x{8FFFF}\x{9FFFE}-\x{9FFFF}\x{AFFFE}-\x{AFFFF}\x{BFFFE}-\x{BFFFF}\x{CFFFE}-\x{CFFFF}\x{DFFFE}-\x{E0000}\x{E0001}\x{E0002}-\x{E001F}\x{E0020}-\x{E007F}\x{E0080}-\x{E00FF}\x{E0100}-\x{E01EF}\x{E01F0}-\x{E0FFF}\x{EFFFE}-\x{EFFFF}\x{FFFFE}-\x{FFFFF}\x{10FFFE}-\x{10FFFF}]/u';
+    const BIDI_STEP_3 = '/[\x{0030}-\x{0039}\x{00B2}-\x{00B3}\x{00B9}\x{0590}\x{05BE}\x{05C0}\x{05C3}\x{05C6}\x{05C8}-\x{05CF}\x{05D0}-\x{05EA}\x{05EB}-\x{05EE}\x{05EF}-\x{05F2}\x{05F3}-\x{05F4}\x{05F5}-\x{05FF}\x{0600}-\x{0605}\x{0608}\x{060B}\x{060D}\x{061B}\x{061C}\x{061D}\x{061E}-\x{061F}\x{0620}-\x{063F}\x{0640}\x{0641}-\x{064A}\x{0660}-\x{0669}\x{066B}-\x{066C}\x{066D}\x{066E}-\x{066F}\x{0671}-\x{06D3}\x{06D4}\x{06D5}\x{06DD}\x{06E5}-\x{06E6}\x{06EE}-\x{06EF}\x{06F0}-\x{06F9}\x{06FA}-\x{06FC}\x{06FD}-\x{06FE}\x{06FF}\x{0700}-\x{070D}\x{070E}\x{070F}\x{0710}\x{0712}-\x{072F}\x{074B}-\x{074C}\x{074D}-\x{07A5}\x{07B1}\x{07B2}-\x{07BF}\x{07C0}-\x{07C9}\x{07CA}-\x{07EA}\x{07F4}-\x{07F5}\x{07FA}\x{07FB}-\x{07FC}\x{07FE}-\x{07FF}\x{0800}-\x{0815}\x{081A}\x{0824}\x{0828}\x{082E}-\x{082F}\x{0830}-\x{083E}\x{083F}\x{0840}-\x{0858}\x{085C}-\x{085D}\x{085E}\x{085F}\x{0860}-\x{086A}\x{086B}-\x{086F}\x{0870}-\x{089F}\x{08A0}-\x{08B4}\x{08B5}\x{08B6}-\x{08C7}\x{08C8}-\x{08D2}\x{08E2}\x{200F}\x{2070}\x{2074}-\x{2079}\x{2080}-\x{2089}\x{2488}-\x{249B}\x{FB1D}\x{FB1F}-\x{FB28}\x{FB2A}-\x{FB36}\x{FB37}\x{FB38}-\x{FB3C}\x{FB3D}\x{FB3E}\x{FB3F}\x{FB40}-\x{FB41}\x{FB42}\x{FB43}-\x{FB44}\x{FB45}\x{FB46}-\x{FB4F}\x{FB50}-\x{FBB1}\x{FBB2}-\x{FBC1}\x{FBC2}-\x{FBD2}\x{FBD3}-\x{FD3D}\x{FD40}-\x{FD4F}\x{FD50}-\x{FD8F}\x{FD90}-\x{FD91}\x{FD92}-\x{FDC7}\x{FDC8}-\x{FDCF}\x{FDF0}-\x{FDFB}\x{FDFC}\x{FDFE}-\x{FDFF}\x{FE70}-\x{FE74}\x{FE75}\x{FE76}-\x{FEFC}\x{FEFD}-\x{FEFE}\x{FF10}-\x{FF19}\x{102E1}-\x{102FB}\x{10800}-\x{10805}\x{10806}-\x{10807}\x{10808}\x{10809}\x{1080A}-\x{10835}\x{10836}\x{10837}-\x{10838}\x{10839}-\x{1083B}\x{1083C}\x{1083D}-\x{1083E}\x{1083F}-\x{10855}\x{10856}\x{10857}\x{10858}-\x{1085F}\x{10860}-\x{10876}\x{10877}-\x{10878}\x{10879}-\x{1087F}\x{10880}-\x{1089E}\x{1089F}-\x{108A6}\x{108A7}-\x{108AF}\x{108B0}-\x{108DF}\x{108E0}-\x{108F2}\x{108F3}\x{108F4}-\x{108F5}\x{108F6}-\x{108FA}\x{108FB}-\x{108FF}\x{10900}-\x{10915}\x{10916}-\x{1091B}\x{1091C}-\x{1091E}\x{10920}-\x{10939}\x{1093A}-\x{1093E}\x{1093F}\x{10940}-\x{1097F}\x{10980}-\x{109B7}\x{109B8}-\x{109BB}\x{109BC}-\x{109BD}\x{109BE}-\x{109BF}\x{109C0}-\x{109CF}\x{109D0}-\x{109D1}\x{109D2}-\x{109FF}\x{10A00}\x{10A04}\x{10A07}-\x{10A0B}\x{10A10}-\x{10A13}\x{10A14}\x{10A15}-\x{10A17}\x{10A18}\x{10A19}-\x{10A35}\x{10A36}-\x{10A37}\x{10A3B}-\x{10A3E}\x{10A40}-\x{10A48}\x{10A49}-\x{10A4F}\x{10A50}-\x{10A58}\x{10A59}-\x{10A5F}\x{10A60}-\x{10A7C}\x{10A7D}-\x{10A7E}\x{10A7F}\x{10A80}-\x{10A9C}\x{10A9D}-\x{10A9F}\x{10AA0}-\x{10ABF}\x{10AC0}-\x{10AC7}\x{10AC8}\x{10AC9}-\x{10AE4}\x{10AE7}-\x{10AEA}\x{10AEB}-\x{10AEF}\x{10AF0}-\x{10AF6}\x{10AF7}-\x{10AFF}\x{10B00}-\x{10B35}\x{10B36}-\x{10B38}\x{10B40}-\x{10B55}\x{10B56}-\x{10B57}\x{10B58}-\x{10B5F}\x{10B60}-\x{10B72}\x{10B73}-\x{10B77}\x{10B78}-\x{10B7F}\x{10B80}-\x{10B91}\x{10B92}-\x{10B98}\x{10B99}-\x{10B9C}\x{10B9D}-\x{10BA8}\x{10BA9}-\x{10BAF}\x{10BB0}-\x{10BFF}\x{10C00}-\x{10C48}\x{10C49}-\x{10C7F}\x{10C80}-\x{10CB2}\x{10CB3}-\x{10CBF}\x{10CC0}-\x{10CF2}\x{10CF3}-\x{10CF9}\x{10CFA}-\x{10CFF}\x{10D00}-\x{10D23}\x{10D28}-\x{10D2F}\x{10D30}-\x{10D39}\x{10D3A}-\x{10D3F}\x{10D40}-\x{10E5F}\x{10E60}-\x{10E7E}\x{10E7F}\x{10E80}-\x{10EA9}\x{10EAA}\x{10EAD}\x{10EAE}-\x{10EAF}\x{10EB0}-\x{10EB1}\x{10EB2}-\x{10EFF}\x{10F00}-\x{10F1C}\x{10F1D}-\x{10F26}\x{10F27}\x{10F28}-\x{10F2F}\x{10F30}-\x{10F45}\x{10F51}-\x{10F54}\x{10F55}-\x{10F59}\x{10F5A}-\x{10F6F}\x{10F70}-\x{10FAF}\x{10FB0}-\x{10FC4}\x{10FC5}-\x{10FCB}\x{10FCC}-\x{10FDF}\x{10FE0}-\x{10FF6}\x{10FF7}-\x{10FFF}\x{1D7CE}-\x{1D7FF}\x{1E800}-\x{1E8C4}\x{1E8C5}-\x{1E8C6}\x{1E8C7}-\x{1E8CF}\x{1E8D7}-\x{1E8FF}\x{1E900}-\x{1E943}\x{1E94B}\x{1E94C}-\x{1E94F}\x{1E950}-\x{1E959}\x{1E95A}-\x{1E95D}\x{1E95E}-\x{1E95F}\x{1E960}-\x{1EC6F}\x{1EC70}\x{1EC71}-\x{1ECAB}\x{1ECAC}\x{1ECAD}-\x{1ECAF}\x{1ECB0}\x{1ECB1}-\x{1ECB4}\x{1ECB5}-\x{1ECBF}\x{1ECC0}-\x{1ECFF}\x{1ED00}\x{1ED01}-\x{1ED2D}\x{1ED2E}\x{1ED2F}-\x{1ED3D}\x{1ED3E}-\x{1ED4F}\x{1ED50}-\x{1EDFF}\x{1EE00}-\x{1EE03}\x{1EE04}\x{1EE05}-\x{1EE1F}\x{1EE20}\x{1EE21}-\x{1EE22}\x{1EE23}\x{1EE24}\x{1EE25}-\x{1EE26}\x{1EE27}\x{1EE28}\x{1EE29}-\x{1EE32}\x{1EE33}\x{1EE34}-\x{1EE37}\x{1EE38}\x{1EE39}\x{1EE3A}\x{1EE3B}\x{1EE3C}-\x{1EE41}\x{1EE42}\x{1EE43}-\x{1EE46}\x{1EE47}\x{1EE48}\x{1EE49}\x{1EE4A}\x{1EE4B}\x{1EE4C}\x{1EE4D}-\x{1EE4F}\x{1EE50}\x{1EE51}-\x{1EE52}\x{1EE53}\x{1EE54}\x{1EE55}-\x{1EE56}\x{1EE57}\x{1EE58}\x{1EE59}\x{1EE5A}\x{1EE5B}\x{1EE5C}\x{1EE5D}\x{1EE5E}\x{1EE5F}\x{1EE60}\x{1EE61}-\x{1EE62}\x{1EE63}\x{1EE64}\x{1EE65}-\x{1EE66}\x{1EE67}-\x{1EE6A}\x{1EE6B}\x{1EE6C}-\x{1EE72}\x{1EE73}\x{1EE74}-\x{1EE77}\x{1EE78}\x{1EE79}-\x{1EE7C}\x{1EE7D}\x{1EE7E}\x{1EE7F}\x{1EE80}-\x{1EE89}\x{1EE8A}\x{1EE8B}-\x{1EE9B}\x{1EE9C}-\x{1EEA0}\x{1EEA1}-\x{1EEA3}\x{1EEA4}\x{1EEA5}-\x{1EEA9}\x{1EEAA}\x{1EEAB}-\x{1EEBB}\x{1EEBC}-\x{1EEEF}\x{1EEF2}-\x{1EEFF}\x{1EF00}-\x{1EFFF}\x{1F100}-\x{1F10A}\x{1FBF0}-\x{1FBF9}][\x{0300}-\x{036F}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{0591}-\x{05BD}\x{05BF}\x{05C1}-\x{05C2}\x{05C4}-\x{05C5}\x{05C7}\x{0610}-\x{061A}\x{064B}-\x{065F}\x{0670}\x{06D6}-\x{06DC}\x{06DF}-\x{06E4}\x{06E7}-\x{06E8}\x{06EA}-\x{06ED}\x{0711}\x{0730}-\x{074A}\x{07A6}-\x{07B0}\x{07EB}-\x{07F3}\x{07FD}\x{0816}-\x{0819}\x{081B}-\x{0823}\x{0825}-\x{0827}\x{0829}-\x{082D}\x{0859}-\x{085B}\x{08D3}-\x{08E1}\x{08E3}-\x{0902}\x{093A}\x{093C}\x{0941}-\x{0948}\x{094D}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0981}\x{09BC}\x{09C1}-\x{09C4}\x{09CD}\x{09E2}-\x{09E3}\x{09FE}\x{0A01}-\x{0A02}\x{0A3C}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0ABC}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B3C}\x{0B3F}\x{0B41}-\x{0B44}\x{0B4D}\x{0B55}-\x{0B56}\x{0B62}-\x{0B63}\x{0B82}\x{0BC0}\x{0BCD}\x{0C00}\x{0C04}\x{0C3E}-\x{0C40}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C81}\x{0CBC}\x{0CCC}-\x{0CCD}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D3B}-\x{0D3C}\x{0D41}-\x{0D44}\x{0D4D}\x{0D62}-\x{0D63}\x{0D81}\x{0DCA}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0E31}\x{0E34}-\x{0E3A}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EBC}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F71}-\x{0F7E}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102D}-\x{1030}\x{1032}-\x{1037}\x{1039}-\x{103A}\x{103D}-\x{103E}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1071}-\x{1074}\x{1082}\x{1085}-\x{1086}\x{108D}\x{109D}\x{135D}-\x{135F}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B7}-\x{17BD}\x{17C6}\x{17C9}-\x{17D3}\x{17DD}\x{180B}-\x{180D}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1927}-\x{1928}\x{1932}\x{1939}-\x{193B}\x{1A17}-\x{1A18}\x{1A1B}\x{1A56}\x{1A58}-\x{1A5E}\x{1A60}\x{1A62}\x{1A65}-\x{1A6C}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1ABF}-\x{1AC0}\x{1B00}-\x{1B03}\x{1B34}\x{1B36}-\x{1B3A}\x{1B3C}\x{1B42}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1BA2}-\x{1BA5}\x{1BA8}-\x{1BA9}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE8}-\x{1BE9}\x{1BED}\x{1BEF}-\x{1BF1}\x{1C2C}-\x{1C33}\x{1C36}-\x{1C37}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF8}-\x{1CF9}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2CEF}-\x{2CF1}\x{2D7F}\x{2DE0}-\x{2DFF}\x{302A}-\x{302D}\x{3099}-\x{309A}\x{A66F}\x{A670}-\x{A672}\x{A674}-\x{A67D}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A802}\x{A806}\x{A80B}\x{A825}-\x{A826}\x{A82C}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A980}-\x{A982}\x{A9B3}\x{A9B6}-\x{A9B9}\x{A9BC}-\x{A9BD}\x{A9E5}\x{AA29}-\x{AA2E}\x{AA31}-\x{AA32}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA7C}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AAEC}-\x{AAED}\x{AAF6}\x{ABE5}\x{ABE8}\x{ABED}\x{FB1E}\x{FE00}-\x{FE0F}\x{FE20}-\x{FE2F}\x{101FD}\x{102E0}\x{10376}-\x{1037A}\x{10A01}-\x{10A03}\x{10A05}-\x{10A06}\x{10A0C}-\x{10A0F}\x{10A38}-\x{10A3A}\x{10A3F}\x{10AE5}-\x{10AE6}\x{10D24}-\x{10D27}\x{10EAB}-\x{10EAC}\x{10F46}-\x{10F50}\x{11001}\x{11038}-\x{11046}\x{1107F}-\x{11081}\x{110B3}-\x{110B6}\x{110B9}-\x{110BA}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112D}-\x{11134}\x{11173}\x{11180}-\x{11181}\x{111B6}-\x{111BE}\x{111C9}-\x{111CC}\x{111CF}\x{1122F}-\x{11231}\x{11234}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{1133B}-\x{1133C}\x{11340}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11438}-\x{1143F}\x{11442}-\x{11444}\x{11446}\x{1145E}\x{114B3}-\x{114B8}\x{114BA}\x{114BF}-\x{114C0}\x{114C2}-\x{114C3}\x{115B2}-\x{115B5}\x{115BC}-\x{115BD}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11633}-\x{1163A}\x{1163D}\x{1163F}-\x{11640}\x{116AB}\x{116AD}\x{116B0}-\x{116B5}\x{116B7}\x{1171D}-\x{1171F}\x{11722}-\x{11725}\x{11727}-\x{1172B}\x{1182F}-\x{11837}\x{11839}-\x{1183A}\x{1193B}-\x{1193C}\x{1193E}\x{11943}\x{119D4}-\x{119D7}\x{119DA}-\x{119DB}\x{119E0}\x{11A01}-\x{11A06}\x{11A09}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A98}-\x{11A99}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C92}-\x{11CA7}\x{11CAA}-\x{11CB0}\x{11CB2}-\x{11CB3}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D90}-\x{11D91}\x{11D95}\x{11D97}\x{11EF3}-\x{11EF4}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16F4F}\x{16F8F}-\x{16F92}\x{16FE4}\x{1BC9D}-\x{1BC9E}\x{1D167}-\x{1D169}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D242}-\x{1D244}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E130}-\x{1E136}\x{1E2EC}-\x{1E2EF}\x{1E8D0}-\x{1E8D6}\x{1E944}-\x{1E94A}\x{E0100}-\x{E01EF}]*$/u';
+    const BIDI_STEP_4_AN = '/[\x{0600}-\x{0605}\x{0660}-\x{0669}\x{066B}-\x{066C}\x{06DD}\x{08E2}\x{10D30}-\x{10D39}\x{10E60}-\x{10E7E}]/u';
+    const BIDI_STEP_4_EN = '/[\x{0030}-\x{0039}\x{00B2}-\x{00B3}\x{00B9}\x{06F0}-\x{06F9}\x{2070}\x{2074}-\x{2079}\x{2080}-\x{2089}\x{2488}-\x{249B}\x{FF10}-\x{FF19}\x{102E1}-\x{102FB}\x{1D7CE}-\x{1D7FF}\x{1F100}-\x{1F10A}\x{1FBF0}-\x{1FBF9}]/u';
+    const BIDI_STEP_5 = '/[\x{0009}\x{000A}\x{000B}\x{000C}\x{000D}\x{001C}-\x{001E}\x{001F}\x{0020}\x{0085}\x{0590}\x{05BE}\x{05C0}\x{05C3}\x{05C6}\x{05C8}-\x{05CF}\x{05D0}-\x{05EA}\x{05EB}-\x{05EE}\x{05EF}-\x{05F2}\x{05F3}-\x{05F4}\x{05F5}-\x{05FF}\x{0600}-\x{0605}\x{0608}\x{060B}\x{060D}\x{061B}\x{061C}\x{061D}\x{061E}-\x{061F}\x{0620}-\x{063F}\x{0640}\x{0641}-\x{064A}\x{0660}-\x{0669}\x{066B}-\x{066C}\x{066D}\x{066E}-\x{066F}\x{0671}-\x{06D3}\x{06D4}\x{06D5}\x{06DD}\x{06E5}-\x{06E6}\x{06EE}-\x{06EF}\x{06FA}-\x{06FC}\x{06FD}-\x{06FE}\x{06FF}\x{0700}-\x{070D}\x{070E}\x{070F}\x{0710}\x{0712}-\x{072F}\x{074B}-\x{074C}\x{074D}-\x{07A5}\x{07B1}\x{07B2}-\x{07BF}\x{07C0}-\x{07C9}\x{07CA}-\x{07EA}\x{07F4}-\x{07F5}\x{07FA}\x{07FB}-\x{07FC}\x{07FE}-\x{07FF}\x{0800}-\x{0815}\x{081A}\x{0824}\x{0828}\x{082E}-\x{082F}\x{0830}-\x{083E}\x{083F}\x{0840}-\x{0858}\x{085C}-\x{085D}\x{085E}\x{085F}\x{0860}-\x{086A}\x{086B}-\x{086F}\x{0870}-\x{089F}\x{08A0}-\x{08B4}\x{08B5}\x{08B6}-\x{08C7}\x{08C8}-\x{08D2}\x{08E2}\x{1680}\x{2000}-\x{200A}\x{200F}\x{2028}\x{2029}\x{202A}\x{202B}\x{202C}\x{202D}\x{202E}\x{205F}\x{2066}\x{2067}\x{2068}\x{2069}\x{3000}\x{FB1D}\x{FB1F}-\x{FB28}\x{FB2A}-\x{FB36}\x{FB37}\x{FB38}-\x{FB3C}\x{FB3D}\x{FB3E}\x{FB3F}\x{FB40}-\x{FB41}\x{FB42}\x{FB43}-\x{FB44}\x{FB45}\x{FB46}-\x{FB4F}\x{FB50}-\x{FBB1}\x{FBB2}-\x{FBC1}\x{FBC2}-\x{FBD2}\x{FBD3}-\x{FD3D}\x{FD40}-\x{FD4F}\x{FD50}-\x{FD8F}\x{FD90}-\x{FD91}\x{FD92}-\x{FDC7}\x{FDC8}-\x{FDCF}\x{FDF0}-\x{FDFB}\x{FDFC}\x{FDFE}-\x{FDFF}\x{FE70}-\x{FE74}\x{FE75}\x{FE76}-\x{FEFC}\x{FEFD}-\x{FEFE}\x{10800}-\x{10805}\x{10806}-\x{10807}\x{10808}\x{10809}\x{1080A}-\x{10835}\x{10836}\x{10837}-\x{10838}\x{10839}-\x{1083B}\x{1083C}\x{1083D}-\x{1083E}\x{1083F}-\x{10855}\x{10856}\x{10857}\x{10858}-\x{1085F}\x{10860}-\x{10876}\x{10877}-\x{10878}\x{10879}-\x{1087F}\x{10880}-\x{1089E}\x{1089F}-\x{108A6}\x{108A7}-\x{108AF}\x{108B0}-\x{108DF}\x{108E0}-\x{108F2}\x{108F3}\x{108F4}-\x{108F5}\x{108F6}-\x{108FA}\x{108FB}-\x{108FF}\x{10900}-\x{10915}\x{10916}-\x{1091B}\x{1091C}-\x{1091E}\x{10920}-\x{10939}\x{1093A}-\x{1093E}\x{1093F}\x{10940}-\x{1097F}\x{10980}-\x{109B7}\x{109B8}-\x{109BB}\x{109BC}-\x{109BD}\x{109BE}-\x{109BF}\x{109C0}-\x{109CF}\x{109D0}-\x{109D1}\x{109D2}-\x{109FF}\x{10A00}\x{10A04}\x{10A07}-\x{10A0B}\x{10A10}-\x{10A13}\x{10A14}\x{10A15}-\x{10A17}\x{10A18}\x{10A19}-\x{10A35}\x{10A36}-\x{10A37}\x{10A3B}-\x{10A3E}\x{10A40}-\x{10A48}\x{10A49}-\x{10A4F}\x{10A50}-\x{10A58}\x{10A59}-\x{10A5F}\x{10A60}-\x{10A7C}\x{10A7D}-\x{10A7E}\x{10A7F}\x{10A80}-\x{10A9C}\x{10A9D}-\x{10A9F}\x{10AA0}-\x{10ABF}\x{10AC0}-\x{10AC7}\x{10AC8}\x{10AC9}-\x{10AE4}\x{10AE7}-\x{10AEA}\x{10AEB}-\x{10AEF}\x{10AF0}-\x{10AF6}\x{10AF7}-\x{10AFF}\x{10B00}-\x{10B35}\x{10B36}-\x{10B38}\x{10B40}-\x{10B55}\x{10B56}-\x{10B57}\x{10B58}-\x{10B5F}\x{10B60}-\x{10B72}\x{10B73}-\x{10B77}\x{10B78}-\x{10B7F}\x{10B80}-\x{10B91}\x{10B92}-\x{10B98}\x{10B99}-\x{10B9C}\x{10B9D}-\x{10BA8}\x{10BA9}-\x{10BAF}\x{10BB0}-\x{10BFF}\x{10C00}-\x{10C48}\x{10C49}-\x{10C7F}\x{10C80}-\x{10CB2}\x{10CB3}-\x{10CBF}\x{10CC0}-\x{10CF2}\x{10CF3}-\x{10CF9}\x{10CFA}-\x{10CFF}\x{10D00}-\x{10D23}\x{10D28}-\x{10D2F}\x{10D30}-\x{10D39}\x{10D3A}-\x{10D3F}\x{10D40}-\x{10E5F}\x{10E60}-\x{10E7E}\x{10E7F}\x{10E80}-\x{10EA9}\x{10EAA}\x{10EAD}\x{10EAE}-\x{10EAF}\x{10EB0}-\x{10EB1}\x{10EB2}-\x{10EFF}\x{10F00}-\x{10F1C}\x{10F1D}-\x{10F26}\x{10F27}\x{10F28}-\x{10F2F}\x{10F30}-\x{10F45}\x{10F51}-\x{10F54}\x{10F55}-\x{10F59}\x{10F5A}-\x{10F6F}\x{10F70}-\x{10FAF}\x{10FB0}-\x{10FC4}\x{10FC5}-\x{10FCB}\x{10FCC}-\x{10FDF}\x{10FE0}-\x{10FF6}\x{10FF7}-\x{10FFF}\x{1E800}-\x{1E8C4}\x{1E8C5}-\x{1E8C6}\x{1E8C7}-\x{1E8CF}\x{1E8D7}-\x{1E8FF}\x{1E900}-\x{1E943}\x{1E94B}\x{1E94C}-\x{1E94F}\x{1E950}-\x{1E959}\x{1E95A}-\x{1E95D}\x{1E95E}-\x{1E95F}\x{1E960}-\x{1EC6F}\x{1EC70}\x{1EC71}-\x{1ECAB}\x{1ECAC}\x{1ECAD}-\x{1ECAF}\x{1ECB0}\x{1ECB1}-\x{1ECB4}\x{1ECB5}-\x{1ECBF}\x{1ECC0}-\x{1ECFF}\x{1ED00}\x{1ED01}-\x{1ED2D}\x{1ED2E}\x{1ED2F}-\x{1ED3D}\x{1ED3E}-\x{1ED4F}\x{1ED50}-\x{1EDFF}\x{1EE00}-\x{1EE03}\x{1EE04}\x{1EE05}-\x{1EE1F}\x{1EE20}\x{1EE21}-\x{1EE22}\x{1EE23}\x{1EE24}\x{1EE25}-\x{1EE26}\x{1EE27}\x{1EE28}\x{1EE29}-\x{1EE32}\x{1EE33}\x{1EE34}-\x{1EE37}\x{1EE38}\x{1EE39}\x{1EE3A}\x{1EE3B}\x{1EE3C}-\x{1EE41}\x{1EE42}\x{1EE43}-\x{1EE46}\x{1EE47}\x{1EE48}\x{1EE49}\x{1EE4A}\x{1EE4B}\x{1EE4C}\x{1EE4D}-\x{1EE4F}\x{1EE50}\x{1EE51}-\x{1EE52}\x{1EE53}\x{1EE54}\x{1EE55}-\x{1EE56}\x{1EE57}\x{1EE58}\x{1EE59}\x{1EE5A}\x{1EE5B}\x{1EE5C}\x{1EE5D}\x{1EE5E}\x{1EE5F}\x{1EE60}\x{1EE61}-\x{1EE62}\x{1EE63}\x{1EE64}\x{1EE65}-\x{1EE66}\x{1EE67}-\x{1EE6A}\x{1EE6B}\x{1EE6C}-\x{1EE72}\x{1EE73}\x{1EE74}-\x{1EE77}\x{1EE78}\x{1EE79}-\x{1EE7C}\x{1EE7D}\x{1EE7E}\x{1EE7F}\x{1EE80}-\x{1EE89}\x{1EE8A}\x{1EE8B}-\x{1EE9B}\x{1EE9C}-\x{1EEA0}\x{1EEA1}-\x{1EEA3}\x{1EEA4}\x{1EEA5}-\x{1EEA9}\x{1EEAA}\x{1EEAB}-\x{1EEBB}\x{1EEBC}-\x{1EEEF}\x{1EEF2}-\x{1EEFF}\x{1EF00}-\x{1EFFF}]/u';
+    const BIDI_STEP_6 = '/[^\x{0000}-\x{0008}\x{0009}\x{000A}\x{000B}\x{000C}\x{000D}\x{000E}-\x{001B}\x{001C}-\x{001E}\x{001F}\x{0020}\x{0021}-\x{0022}\x{0023}\x{0024}\x{0025}\x{0026}-\x{0027}\x{0028}\x{0029}\x{002A}\x{002B}\x{002C}\x{002D}\x{002E}-\x{002F}\x{003A}\x{003B}\x{003C}-\x{003E}\x{003F}-\x{0040}\x{005B}\x{005C}\x{005D}\x{005E}\x{005F}\x{0060}\x{007B}\x{007C}\x{007D}\x{007E}\x{007F}-\x{0084}\x{0085}\x{0086}-\x{009F}\x{00A0}\x{00A1}\x{00A2}-\x{00A5}\x{00A6}\x{00A7}\x{00A8}\x{00A9}\x{00AB}\x{00AC}\x{00AD}\x{00AE}\x{00AF}\x{00B0}\x{00B1}\x{00B4}\x{00B6}-\x{00B7}\x{00B8}\x{00BB}\x{00BC}-\x{00BE}\x{00BF}\x{00D7}\x{00F7}\x{02B9}-\x{02BA}\x{02C2}-\x{02C5}\x{02C6}-\x{02CF}\x{02D2}-\x{02DF}\x{02E5}-\x{02EB}\x{02EC}\x{02ED}\x{02EF}-\x{02FF}\x{0300}-\x{036F}\x{0374}\x{0375}\x{037E}\x{0384}-\x{0385}\x{0387}\x{03F6}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{058A}\x{058D}-\x{058E}\x{058F}\x{0590}\x{0591}-\x{05BD}\x{05BE}\x{05BF}\x{05C0}\x{05C1}-\x{05C2}\x{05C3}\x{05C4}-\x{05C5}\x{05C6}\x{05C7}\x{05C8}-\x{05CF}\x{05D0}-\x{05EA}\x{05EB}-\x{05EE}\x{05EF}-\x{05F2}\x{05F3}-\x{05F4}\x{05F5}-\x{05FF}\x{0600}-\x{0605}\x{0606}-\x{0607}\x{0608}\x{0609}-\x{060A}\x{060B}\x{060C}\x{060D}\x{060E}-\x{060F}\x{0610}-\x{061A}\x{061B}\x{061C}\x{061D}\x{061E}-\x{061F}\x{0620}-\x{063F}\x{0640}\x{0641}-\x{064A}\x{064B}-\x{065F}\x{0660}-\x{0669}\x{066A}\x{066B}-\x{066C}\x{066D}\x{066E}-\x{066F}\x{0670}\x{0671}-\x{06D3}\x{06D4}\x{06D5}\x{06D6}-\x{06DC}\x{06DD}\x{06DE}\x{06DF}-\x{06E4}\x{06E5}-\x{06E6}\x{06E7}-\x{06E8}\x{06E9}\x{06EA}-\x{06ED}\x{06EE}-\x{06EF}\x{06FA}-\x{06FC}\x{06FD}-\x{06FE}\x{06FF}\x{0700}-\x{070D}\x{070E}\x{070F}\x{0710}\x{0711}\x{0712}-\x{072F}\x{0730}-\x{074A}\x{074B}-\x{074C}\x{074D}-\x{07A5}\x{07A6}-\x{07B0}\x{07B1}\x{07B2}-\x{07BF}\x{07C0}-\x{07C9}\x{07CA}-\x{07EA}\x{07EB}-\x{07F3}\x{07F4}-\x{07F5}\x{07F6}\x{07F7}-\x{07F9}\x{07FA}\x{07FB}-\x{07FC}\x{07FD}\x{07FE}-\x{07FF}\x{0800}-\x{0815}\x{0816}-\x{0819}\x{081A}\x{081B}-\x{0823}\x{0824}\x{0825}-\x{0827}\x{0828}\x{0829}-\x{082D}\x{082E}-\x{082F}\x{0830}-\x{083E}\x{083F}\x{0840}-\x{0858}\x{0859}-\x{085B}\x{085C}-\x{085D}\x{085E}\x{085F}\x{0860}-\x{086A}\x{086B}-\x{086F}\x{0870}-\x{089F}\x{08A0}-\x{08B4}\x{08B5}\x{08B6}-\x{08C7}\x{08C8}-\x{08D2}\x{08D3}-\x{08E1}\x{08E2}\x{08E3}-\x{0902}\x{093A}\x{093C}\x{0941}-\x{0948}\x{094D}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0981}\x{09BC}\x{09C1}-\x{09C4}\x{09CD}\x{09E2}-\x{09E3}\x{09F2}-\x{09F3}\x{09FB}\x{09FE}\x{0A01}-\x{0A02}\x{0A3C}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0ABC}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AF1}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B3C}\x{0B3F}\x{0B41}-\x{0B44}\x{0B4D}\x{0B55}-\x{0B56}\x{0B62}-\x{0B63}\x{0B82}\x{0BC0}\x{0BCD}\x{0BF3}-\x{0BF8}\x{0BF9}\x{0BFA}\x{0C00}\x{0C04}\x{0C3E}-\x{0C40}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C78}-\x{0C7E}\x{0C81}\x{0CBC}\x{0CCC}-\x{0CCD}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D3B}-\x{0D3C}\x{0D41}-\x{0D44}\x{0D4D}\x{0D62}-\x{0D63}\x{0D81}\x{0DCA}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0E31}\x{0E34}-\x{0E3A}\x{0E3F}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EBC}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F3A}\x{0F3B}\x{0F3C}\x{0F3D}\x{0F71}-\x{0F7E}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102D}-\x{1030}\x{1032}-\x{1037}\x{1039}-\x{103A}\x{103D}-\x{103E}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1071}-\x{1074}\x{1082}\x{1085}-\x{1086}\x{108D}\x{109D}\x{135D}-\x{135F}\x{1390}-\x{1399}\x{1400}\x{1680}\x{169B}\x{169C}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B7}-\x{17BD}\x{17C6}\x{17C9}-\x{17D3}\x{17DB}\x{17DD}\x{17F0}-\x{17F9}\x{1800}-\x{1805}\x{1806}\x{1807}-\x{180A}\x{180B}-\x{180D}\x{180E}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1927}-\x{1928}\x{1932}\x{1939}-\x{193B}\x{1940}\x{1944}-\x{1945}\x{19DE}-\x{19FF}\x{1A17}-\x{1A18}\x{1A1B}\x{1A56}\x{1A58}-\x{1A5E}\x{1A60}\x{1A62}\x{1A65}-\x{1A6C}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1ABF}-\x{1AC0}\x{1B00}-\x{1B03}\x{1B34}\x{1B36}-\x{1B3A}\x{1B3C}\x{1B42}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1BA2}-\x{1BA5}\x{1BA8}-\x{1BA9}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE8}-\x{1BE9}\x{1BED}\x{1BEF}-\x{1BF1}\x{1C2C}-\x{1C33}\x{1C36}-\x{1C37}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF8}-\x{1CF9}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{1FBD}\x{1FBF}-\x{1FC1}\x{1FCD}-\x{1FCF}\x{1FDD}-\x{1FDF}\x{1FED}-\x{1FEF}\x{1FFD}-\x{1FFE}\x{2000}-\x{200A}\x{200B}-\x{200D}\x{200F}\x{2010}-\x{2015}\x{2016}-\x{2017}\x{2018}\x{2019}\x{201A}\x{201B}-\x{201C}\x{201D}\x{201E}\x{201F}\x{2020}-\x{2027}\x{2028}\x{2029}\x{202A}\x{202B}\x{202C}\x{202D}\x{202E}\x{202F}\x{2030}-\x{2034}\x{2035}-\x{2038}\x{2039}\x{203A}\x{203B}-\x{203E}\x{203F}-\x{2040}\x{2041}-\x{2043}\x{2044}\x{2045}\x{2046}\x{2047}-\x{2051}\x{2052}\x{2053}\x{2054}\x{2055}-\x{205E}\x{205F}\x{2060}-\x{2064}\x{2065}\x{2066}\x{2067}\x{2068}\x{2069}\x{206A}-\x{206F}\x{207A}-\x{207B}\x{207C}\x{207D}\x{207E}\x{208A}-\x{208B}\x{208C}\x{208D}\x{208E}\x{20A0}-\x{20BF}\x{20C0}-\x{20CF}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2100}-\x{2101}\x{2103}-\x{2106}\x{2108}-\x{2109}\x{2114}\x{2116}-\x{2117}\x{2118}\x{211E}-\x{2123}\x{2125}\x{2127}\x{2129}\x{212E}\x{213A}-\x{213B}\x{2140}-\x{2144}\x{214A}\x{214B}\x{214C}-\x{214D}\x{2150}-\x{215F}\x{2189}\x{218A}-\x{218B}\x{2190}-\x{2194}\x{2195}-\x{2199}\x{219A}-\x{219B}\x{219C}-\x{219F}\x{21A0}\x{21A1}-\x{21A2}\x{21A3}\x{21A4}-\x{21A5}\x{21A6}\x{21A7}-\x{21AD}\x{21AE}\x{21AF}-\x{21CD}\x{21CE}-\x{21CF}\x{21D0}-\x{21D1}\x{21D2}\x{21D3}\x{21D4}\x{21D5}-\x{21F3}\x{21F4}-\x{2211}\x{2212}\x{2213}\x{2214}-\x{22FF}\x{2300}-\x{2307}\x{2308}\x{2309}\x{230A}\x{230B}\x{230C}-\x{231F}\x{2320}-\x{2321}\x{2322}-\x{2328}\x{2329}\x{232A}\x{232B}-\x{2335}\x{237B}\x{237C}\x{237D}-\x{2394}\x{2396}-\x{239A}\x{239B}-\x{23B3}\x{23B4}-\x{23DB}\x{23DC}-\x{23E1}\x{23E2}-\x{2426}\x{2440}-\x{244A}\x{2460}-\x{2487}\x{24EA}-\x{24FF}\x{2500}-\x{25B6}\x{25B7}\x{25B8}-\x{25C0}\x{25C1}\x{25C2}-\x{25F7}\x{25F8}-\x{25FF}\x{2600}-\x{266E}\x{266F}\x{2670}-\x{26AB}\x{26AD}-\x{2767}\x{2768}\x{2769}\x{276A}\x{276B}\x{276C}\x{276D}\x{276E}\x{276F}\x{2770}\x{2771}\x{2772}\x{2773}\x{2774}\x{2775}\x{2776}-\x{2793}\x{2794}-\x{27BF}\x{27C0}-\x{27C4}\x{27C5}\x{27C6}\x{27C7}-\x{27E5}\x{27E6}\x{27E7}\x{27E8}\x{27E9}\x{27EA}\x{27EB}\x{27EC}\x{27ED}\x{27EE}\x{27EF}\x{27F0}-\x{27FF}\x{2900}-\x{2982}\x{2983}\x{2984}\x{2985}\x{2986}\x{2987}\x{2988}\x{2989}\x{298A}\x{298B}\x{298C}\x{298D}\x{298E}\x{298F}\x{2990}\x{2991}\x{2992}\x{2993}\x{2994}\x{2995}\x{2996}\x{2997}\x{2998}\x{2999}-\x{29D7}\x{29D8}\x{29D9}\x{29DA}\x{29DB}\x{29DC}-\x{29FB}\x{29FC}\x{29FD}\x{29FE}-\x{2AFF}\x{2B00}-\x{2B2F}\x{2B30}-\x{2B44}\x{2B45}-\x{2B46}\x{2B47}-\x{2B4C}\x{2B4D}-\x{2B73}\x{2B76}-\x{2B95}\x{2B97}-\x{2BFF}\x{2CE5}-\x{2CEA}\x{2CEF}-\x{2CF1}\x{2CF9}-\x{2CFC}\x{2CFD}\x{2CFE}-\x{2CFF}\x{2D7F}\x{2DE0}-\x{2DFF}\x{2E00}-\x{2E01}\x{2E02}\x{2E03}\x{2E04}\x{2E05}\x{2E06}-\x{2E08}\x{2E09}\x{2E0A}\x{2E0B}\x{2E0C}\x{2E0D}\x{2E0E}-\x{2E16}\x{2E17}\x{2E18}-\x{2E19}\x{2E1A}\x{2E1B}\x{2E1C}\x{2E1D}\x{2E1E}-\x{2E1F}\x{2E20}\x{2E21}\x{2E22}\x{2E23}\x{2E24}\x{2E25}\x{2E26}\x{2E27}\x{2E28}\x{2E29}\x{2E2A}-\x{2E2E}\x{2E2F}\x{2E30}-\x{2E39}\x{2E3A}-\x{2E3B}\x{2E3C}-\x{2E3F}\x{2E40}\x{2E41}\x{2E42}\x{2E43}-\x{2E4F}\x{2E50}-\x{2E51}\x{2E52}\x{2E80}-\x{2E99}\x{2E9B}-\x{2EF3}\x{2F00}-\x{2FD5}\x{2FF0}-\x{2FFB}\x{3000}\x{3001}-\x{3003}\x{3004}\x{3008}\x{3009}\x{300A}\x{300B}\x{300C}\x{300D}\x{300E}\x{300F}\x{3010}\x{3011}\x{3012}-\x{3013}\x{3014}\x{3015}\x{3016}\x{3017}\x{3018}\x{3019}\x{301A}\x{301B}\x{301C}\x{301D}\x{301E}-\x{301F}\x{3020}\x{302A}-\x{302D}\x{3030}\x{3036}-\x{3037}\x{303D}\x{303E}-\x{303F}\x{3099}-\x{309A}\x{309B}-\x{309C}\x{30A0}\x{30FB}\x{31C0}-\x{31E3}\x{321D}-\x{321E}\x{3250}\x{3251}-\x{325F}\x{327C}-\x{327E}\x{32B1}-\x{32BF}\x{32CC}-\x{32CF}\x{3377}-\x{337A}\x{33DE}-\x{33DF}\x{33FF}\x{4DC0}-\x{4DFF}\x{A490}-\x{A4C6}\x{A60D}-\x{A60F}\x{A66F}\x{A670}-\x{A672}\x{A673}\x{A674}-\x{A67D}\x{A67E}\x{A67F}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A700}-\x{A716}\x{A717}-\x{A71F}\x{A720}-\x{A721}\x{A788}\x{A802}\x{A806}\x{A80B}\x{A825}-\x{A826}\x{A828}-\x{A82B}\x{A82C}\x{A838}\x{A839}\x{A874}-\x{A877}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A980}-\x{A982}\x{A9B3}\x{A9B6}-\x{A9B9}\x{A9BC}-\x{A9BD}\x{A9E5}\x{AA29}-\x{AA2E}\x{AA31}-\x{AA32}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA7C}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AAEC}-\x{AAED}\x{AAF6}\x{AB6A}-\x{AB6B}\x{ABE5}\x{ABE8}\x{ABED}\x{FB1D}\x{FB1E}\x{FB1F}-\x{FB28}\x{FB29}\x{FB2A}-\x{FB36}\x{FB37}\x{FB38}-\x{FB3C}\x{FB3D}\x{FB3E}\x{FB3F}\x{FB40}-\x{FB41}\x{FB42}\x{FB43}-\x{FB44}\x{FB45}\x{FB46}-\x{FB4F}\x{FB50}-\x{FBB1}\x{FBB2}-\x{FBC1}\x{FBC2}-\x{FBD2}\x{FBD3}-\x{FD3D}\x{FD3E}\x{FD3F}\x{FD40}-\x{FD4F}\x{FD50}-\x{FD8F}\x{FD90}-\x{FD91}\x{FD92}-\x{FDC7}\x{FDC8}-\x{FDCF}\x{FDD0}-\x{FDEF}\x{FDF0}-\x{FDFB}\x{FDFC}\x{FDFD}\x{FDFE}-\x{FDFF}\x{FE00}-\x{FE0F}\x{FE10}-\x{FE16}\x{FE17}\x{FE18}\x{FE19}\x{FE20}-\x{FE2F}\x{FE30}\x{FE31}-\x{FE32}\x{FE33}-\x{FE34}\x{FE35}\x{FE36}\x{FE37}\x{FE38}\x{FE39}\x{FE3A}\x{FE3B}\x{FE3C}\x{FE3D}\x{FE3E}\x{FE3F}\x{FE40}\x{FE41}\x{FE42}\x{FE43}\x{FE44}\x{FE45}-\x{FE46}\x{FE47}\x{FE48}\x{FE49}-\x{FE4C}\x{FE4D}-\x{FE4F}\x{FE50}\x{FE51}\x{FE52}\x{FE54}\x{FE55}\x{FE56}-\x{FE57}\x{FE58}\x{FE59}\x{FE5A}\x{FE5B}\x{FE5C}\x{FE5D}\x{FE5E}\x{FE5F}\x{FE60}-\x{FE61}\x{FE62}\x{FE63}\x{FE64}-\x{FE66}\x{FE68}\x{FE69}\x{FE6A}\x{FE6B}\x{FE70}-\x{FE74}\x{FE75}\x{FE76}-\x{FEFC}\x{FEFD}-\x{FEFE}\x{FEFF}\x{FF01}-\x{FF02}\x{FF03}\x{FF04}\x{FF05}\x{FF06}-\x{FF07}\x{FF08}\x{FF09}\x{FF0A}\x{FF0B}\x{FF0C}\x{FF0D}\x{FF0E}-\x{FF0F}\x{FF1A}\x{FF1B}\x{FF1C}-\x{FF1E}\x{FF1F}-\x{FF20}\x{FF3B}\x{FF3C}\x{FF3D}\x{FF3E}\x{FF3F}\x{FF40}\x{FF5B}\x{FF5C}\x{FF5D}\x{FF5E}\x{FF5F}\x{FF60}\x{FF61}\x{FF62}\x{FF63}\x{FF64}-\x{FF65}\x{FFE0}-\x{FFE1}\x{FFE2}\x{FFE3}\x{FFE4}\x{FFE5}-\x{FFE6}\x{FFE8}\x{FFE9}-\x{FFEC}\x{FFED}-\x{FFEE}\x{FFF0}-\x{FFF8}\x{FFF9}-\x{FFFB}\x{FFFC}-\x{FFFD}\x{FFFE}-\x{FFFF}\x{10101}\x{10140}-\x{10174}\x{10175}-\x{10178}\x{10179}-\x{10189}\x{1018A}-\x{1018B}\x{1018C}\x{10190}-\x{1019C}\x{101A0}\x{101FD}\x{102E0}\x{10376}-\x{1037A}\x{10800}-\x{10805}\x{10806}-\x{10807}\x{10808}\x{10809}\x{1080A}-\x{10835}\x{10836}\x{10837}-\x{10838}\x{10839}-\x{1083B}\x{1083C}\x{1083D}-\x{1083E}\x{1083F}-\x{10855}\x{10856}\x{10857}\x{10858}-\x{1085F}\x{10860}-\x{10876}\x{10877}-\x{10878}\x{10879}-\x{1087F}\x{10880}-\x{1089E}\x{1089F}-\x{108A6}\x{108A7}-\x{108AF}\x{108B0}-\x{108DF}\x{108E0}-\x{108F2}\x{108F3}\x{108F4}-\x{108F5}\x{108F6}-\x{108FA}\x{108FB}-\x{108FF}\x{10900}-\x{10915}\x{10916}-\x{1091B}\x{1091C}-\x{1091E}\x{1091F}\x{10920}-\x{10939}\x{1093A}-\x{1093E}\x{1093F}\x{10940}-\x{1097F}\x{10980}-\x{109B7}\x{109B8}-\x{109BB}\x{109BC}-\x{109BD}\x{109BE}-\x{109BF}\x{109C0}-\x{109CF}\x{109D0}-\x{109D1}\x{109D2}-\x{109FF}\x{10A00}\x{10A01}-\x{10A03}\x{10A04}\x{10A05}-\x{10A06}\x{10A07}-\x{10A0B}\x{10A0C}-\x{10A0F}\x{10A10}-\x{10A13}\x{10A14}\x{10A15}-\x{10A17}\x{10A18}\x{10A19}-\x{10A35}\x{10A36}-\x{10A37}\x{10A38}-\x{10A3A}\x{10A3B}-\x{10A3E}\x{10A3F}\x{10A40}-\x{10A48}\x{10A49}-\x{10A4F}\x{10A50}-\x{10A58}\x{10A59}-\x{10A5F}\x{10A60}-\x{10A7C}\x{10A7D}-\x{10A7E}\x{10A7F}\x{10A80}-\x{10A9C}\x{10A9D}-\x{10A9F}\x{10AA0}-\x{10ABF}\x{10AC0}-\x{10AC7}\x{10AC8}\x{10AC9}-\x{10AE4}\x{10AE5}-\x{10AE6}\x{10AE7}-\x{10AEA}\x{10AEB}-\x{10AEF}\x{10AF0}-\x{10AF6}\x{10AF7}-\x{10AFF}\x{10B00}-\x{10B35}\x{10B36}-\x{10B38}\x{10B39}-\x{10B3F}\x{10B40}-\x{10B55}\x{10B56}-\x{10B57}\x{10B58}-\x{10B5F}\x{10B60}-\x{10B72}\x{10B73}-\x{10B77}\x{10B78}-\x{10B7F}\x{10B80}-\x{10B91}\x{10B92}-\x{10B98}\x{10B99}-\x{10B9C}\x{10B9D}-\x{10BA8}\x{10BA9}-\x{10BAF}\x{10BB0}-\x{10BFF}\x{10C00}-\x{10C48}\x{10C49}-\x{10C7F}\x{10C80}-\x{10CB2}\x{10CB3}-\x{10CBF}\x{10CC0}-\x{10CF2}\x{10CF3}-\x{10CF9}\x{10CFA}-\x{10CFF}\x{10D00}-\x{10D23}\x{10D24}-\x{10D27}\x{10D28}-\x{10D2F}\x{10D30}-\x{10D39}\x{10D3A}-\x{10D3F}\x{10D40}-\x{10E5F}\x{10E60}-\x{10E7E}\x{10E7F}\x{10E80}-\x{10EA9}\x{10EAA}\x{10EAB}-\x{10EAC}\x{10EAD}\x{10EAE}-\x{10EAF}\x{10EB0}-\x{10EB1}\x{10EB2}-\x{10EFF}\x{10F00}-\x{10F1C}\x{10F1D}-\x{10F26}\x{10F27}\x{10F28}-\x{10F2F}\x{10F30}-\x{10F45}\x{10F46}-\x{10F50}\x{10F51}-\x{10F54}\x{10F55}-\x{10F59}\x{10F5A}-\x{10F6F}\x{10F70}-\x{10FAF}\x{10FB0}-\x{10FC4}\x{10FC5}-\x{10FCB}\x{10FCC}-\x{10FDF}\x{10FE0}-\x{10FF6}\x{10FF7}-\x{10FFF}\x{11001}\x{11038}-\x{11046}\x{11052}-\x{11065}\x{1107F}-\x{11081}\x{110B3}-\x{110B6}\x{110B9}-\x{110BA}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112D}-\x{11134}\x{11173}\x{11180}-\x{11181}\x{111B6}-\x{111BE}\x{111C9}-\x{111CC}\x{111CF}\x{1122F}-\x{11231}\x{11234}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{1133B}-\x{1133C}\x{11340}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11438}-\x{1143F}\x{11442}-\x{11444}\x{11446}\x{1145E}\x{114B3}-\x{114B8}\x{114BA}\x{114BF}-\x{114C0}\x{114C2}-\x{114C3}\x{115B2}-\x{115B5}\x{115BC}-\x{115BD}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11633}-\x{1163A}\x{1163D}\x{1163F}-\x{11640}\x{11660}-\x{1166C}\x{116AB}\x{116AD}\x{116B0}-\x{116B5}\x{116B7}\x{1171D}-\x{1171F}\x{11722}-\x{11725}\x{11727}-\x{1172B}\x{1182F}-\x{11837}\x{11839}-\x{1183A}\x{1193B}-\x{1193C}\x{1193E}\x{11943}\x{119D4}-\x{119D7}\x{119DA}-\x{119DB}\x{119E0}\x{11A01}-\x{11A06}\x{11A09}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A98}-\x{11A99}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C92}-\x{11CA7}\x{11CAA}-\x{11CB0}\x{11CB2}-\x{11CB3}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D90}-\x{11D91}\x{11D95}\x{11D97}\x{11EF3}-\x{11EF4}\x{11FD5}-\x{11FDC}\x{11FDD}-\x{11FE0}\x{11FE1}-\x{11FF1}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16F4F}\x{16F8F}-\x{16F92}\x{16FE2}\x{16FE4}\x{1BC9D}-\x{1BC9E}\x{1BCA0}-\x{1BCA3}\x{1D167}-\x{1D169}\x{1D173}-\x{1D17A}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D200}-\x{1D241}\x{1D242}-\x{1D244}\x{1D245}\x{1D300}-\x{1D356}\x{1D6DB}\x{1D715}\x{1D74F}\x{1D789}\x{1D7C3}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E130}-\x{1E136}\x{1E2EC}-\x{1E2EF}\x{1E2FF}\x{1E800}-\x{1E8C4}\x{1E8C5}-\x{1E8C6}\x{1E8C7}-\x{1E8CF}\x{1E8D0}-\x{1E8D6}\x{1E8D7}-\x{1E8FF}\x{1E900}-\x{1E943}\x{1E944}-\x{1E94A}\x{1E94B}\x{1E94C}-\x{1E94F}\x{1E950}-\x{1E959}\x{1E95A}-\x{1E95D}\x{1E95E}-\x{1E95F}\x{1E960}-\x{1EC6F}\x{1EC70}\x{1EC71}-\x{1ECAB}\x{1ECAC}\x{1ECAD}-\x{1ECAF}\x{1ECB0}\x{1ECB1}-\x{1ECB4}\x{1ECB5}-\x{1ECBF}\x{1ECC0}-\x{1ECFF}\x{1ED00}\x{1ED01}-\x{1ED2D}\x{1ED2E}\x{1ED2F}-\x{1ED3D}\x{1ED3E}-\x{1ED4F}\x{1ED50}-\x{1EDFF}\x{1EE00}-\x{1EE03}\x{1EE04}\x{1EE05}-\x{1EE1F}\x{1EE20}\x{1EE21}-\x{1EE22}\x{1EE23}\x{1EE24}\x{1EE25}-\x{1EE26}\x{1EE27}\x{1EE28}\x{1EE29}-\x{1EE32}\x{1EE33}\x{1EE34}-\x{1EE37}\x{1EE38}\x{1EE39}\x{1EE3A}\x{1EE3B}\x{1EE3C}-\x{1EE41}\x{1EE42}\x{1EE43}-\x{1EE46}\x{1EE47}\x{1EE48}\x{1EE49}\x{1EE4A}\x{1EE4B}\x{1EE4C}\x{1EE4D}-\x{1EE4F}\x{1EE50}\x{1EE51}-\x{1EE52}\x{1EE53}\x{1EE54}\x{1EE55}-\x{1EE56}\x{1EE57}\x{1EE58}\x{1EE59}\x{1EE5A}\x{1EE5B}\x{1EE5C}\x{1EE5D}\x{1EE5E}\x{1EE5F}\x{1EE60}\x{1EE61}-\x{1EE62}\x{1EE63}\x{1EE64}\x{1EE65}-\x{1EE66}\x{1EE67}-\x{1EE6A}\x{1EE6B}\x{1EE6C}-\x{1EE72}\x{1EE73}\x{1EE74}-\x{1EE77}\x{1EE78}\x{1EE79}-\x{1EE7C}\x{1EE7D}\x{1EE7E}\x{1EE7F}\x{1EE80}-\x{1EE89}\x{1EE8A}\x{1EE8B}-\x{1EE9B}\x{1EE9C}-\x{1EEA0}\x{1EEA1}-\x{1EEA3}\x{1EEA4}\x{1EEA5}-\x{1EEA9}\x{1EEAA}\x{1EEAB}-\x{1EEBB}\x{1EEBC}-\x{1EEEF}\x{1EEF0}-\x{1EEF1}\x{1EEF2}-\x{1EEFF}\x{1EF00}-\x{1EFFF}\x{1F000}-\x{1F02B}\x{1F030}-\x{1F093}\x{1F0A0}-\x{1F0AE}\x{1F0B1}-\x{1F0BF}\x{1F0C1}-\x{1F0CF}\x{1F0D1}-\x{1F0F5}\x{1F10B}-\x{1F10C}\x{1F10D}-\x{1F10F}\x{1F12F}\x{1F16A}-\x{1F16F}\x{1F1AD}\x{1F260}-\x{1F265}\x{1F300}-\x{1F3FA}\x{1F3FB}-\x{1F3FF}\x{1F400}-\x{1F6D7}\x{1F6E0}-\x{1F6EC}\x{1F6F0}-\x{1F6FC}\x{1F700}-\x{1F773}\x{1F780}-\x{1F7D8}\x{1F7E0}-\x{1F7EB}\x{1F800}-\x{1F80B}\x{1F810}-\x{1F847}\x{1F850}-\x{1F859}\x{1F860}-\x{1F887}\x{1F890}-\x{1F8AD}\x{1F8B0}-\x{1F8B1}\x{1F900}-\x{1F978}\x{1F97A}-\x{1F9CB}\x{1F9CD}-\x{1FA53}\x{1FA60}-\x{1FA6D}\x{1FA70}-\x{1FA74}\x{1FA78}-\x{1FA7A}\x{1FA80}-\x{1FA86}\x{1FA90}-\x{1FAA8}\x{1FAB0}-\x{1FAB6}\x{1FAC0}-\x{1FAC2}\x{1FAD0}-\x{1FAD6}\x{1FB00}-\x{1FB92}\x{1FB94}-\x{1FBCA}\x{1FFFE}-\x{1FFFF}\x{2FFFE}-\x{2FFFF}\x{3FFFE}-\x{3FFFF}\x{4FFFE}-\x{4FFFF}\x{5FFFE}-\x{5FFFF}\x{6FFFE}-\x{6FFFF}\x{7FFFE}-\x{7FFFF}\x{8FFFE}-\x{8FFFF}\x{9FFFE}-\x{9FFFF}\x{AFFFE}-\x{AFFFF}\x{BFFFE}-\x{BFFFF}\x{CFFFE}-\x{CFFFF}\x{DFFFE}-\x{E0000}\x{E0001}\x{E0002}-\x{E001F}\x{E0020}-\x{E007F}\x{E0080}-\x{E00FF}\x{E0100}-\x{E01EF}\x{E01F0}-\x{E0FFF}\x{EFFFE}-\x{EFFFF}\x{FFFFE}-\x{FFFFF}\x{10FFFE}-\x{10FFFF}][\x{0300}-\x{036F}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{0591}-\x{05BD}\x{05BF}\x{05C1}-\x{05C2}\x{05C4}-\x{05C5}\x{05C7}\x{0610}-\x{061A}\x{064B}-\x{065F}\x{0670}\x{06D6}-\x{06DC}\x{06DF}-\x{06E4}\x{06E7}-\x{06E8}\x{06EA}-\x{06ED}\x{0711}\x{0730}-\x{074A}\x{07A6}-\x{07B0}\x{07EB}-\x{07F3}\x{07FD}\x{0816}-\x{0819}\x{081B}-\x{0823}\x{0825}-\x{0827}\x{0829}-\x{082D}\x{0859}-\x{085B}\x{08D3}-\x{08E1}\x{08E3}-\x{0902}\x{093A}\x{093C}\x{0941}-\x{0948}\x{094D}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0981}\x{09BC}\x{09C1}-\x{09C4}\x{09CD}\x{09E2}-\x{09E3}\x{09FE}\x{0A01}-\x{0A02}\x{0A3C}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0ABC}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B3C}\x{0B3F}\x{0B41}-\x{0B44}\x{0B4D}\x{0B55}-\x{0B56}\x{0B62}-\x{0B63}\x{0B82}\x{0BC0}\x{0BCD}\x{0C00}\x{0C04}\x{0C3E}-\x{0C40}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C81}\x{0CBC}\x{0CCC}-\x{0CCD}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D3B}-\x{0D3C}\x{0D41}-\x{0D44}\x{0D4D}\x{0D62}-\x{0D63}\x{0D81}\x{0DCA}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0E31}\x{0E34}-\x{0E3A}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EBC}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F71}-\x{0F7E}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102D}-\x{1030}\x{1032}-\x{1037}\x{1039}-\x{103A}\x{103D}-\x{103E}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1071}-\x{1074}\x{1082}\x{1085}-\x{1086}\x{108D}\x{109D}\x{135D}-\x{135F}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B7}-\x{17BD}\x{17C6}\x{17C9}-\x{17D3}\x{17DD}\x{180B}-\x{180D}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1927}-\x{1928}\x{1932}\x{1939}-\x{193B}\x{1A17}-\x{1A18}\x{1A1B}\x{1A56}\x{1A58}-\x{1A5E}\x{1A60}\x{1A62}\x{1A65}-\x{1A6C}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1ABF}-\x{1AC0}\x{1B00}-\x{1B03}\x{1B34}\x{1B36}-\x{1B3A}\x{1B3C}\x{1B42}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1BA2}-\x{1BA5}\x{1BA8}-\x{1BA9}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE8}-\x{1BE9}\x{1BED}\x{1BEF}-\x{1BF1}\x{1C2C}-\x{1C33}\x{1C36}-\x{1C37}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF8}-\x{1CF9}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2CEF}-\x{2CF1}\x{2D7F}\x{2DE0}-\x{2DFF}\x{302A}-\x{302D}\x{3099}-\x{309A}\x{A66F}\x{A670}-\x{A672}\x{A674}-\x{A67D}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A802}\x{A806}\x{A80B}\x{A825}-\x{A826}\x{A82C}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A980}-\x{A982}\x{A9B3}\x{A9B6}-\x{A9B9}\x{A9BC}-\x{A9BD}\x{A9E5}\x{AA29}-\x{AA2E}\x{AA31}-\x{AA32}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA7C}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AAEC}-\x{AAED}\x{AAF6}\x{ABE5}\x{ABE8}\x{ABED}\x{FB1E}\x{FE00}-\x{FE0F}\x{FE20}-\x{FE2F}\x{101FD}\x{102E0}\x{10376}-\x{1037A}\x{10A01}-\x{10A03}\x{10A05}-\x{10A06}\x{10A0C}-\x{10A0F}\x{10A38}-\x{10A3A}\x{10A3F}\x{10AE5}-\x{10AE6}\x{10D24}-\x{10D27}\x{10EAB}-\x{10EAC}\x{10F46}-\x{10F50}\x{11001}\x{11038}-\x{11046}\x{1107F}-\x{11081}\x{110B3}-\x{110B6}\x{110B9}-\x{110BA}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112D}-\x{11134}\x{11173}\x{11180}-\x{11181}\x{111B6}-\x{111BE}\x{111C9}-\x{111CC}\x{111CF}\x{1122F}-\x{11231}\x{11234}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{1133B}-\x{1133C}\x{11340}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11438}-\x{1143F}\x{11442}-\x{11444}\x{11446}\x{1145E}\x{114B3}-\x{114B8}\x{114BA}\x{114BF}-\x{114C0}\x{114C2}-\x{114C3}\x{115B2}-\x{115B5}\x{115BC}-\x{115BD}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11633}-\x{1163A}\x{1163D}\x{1163F}-\x{11640}\x{116AB}\x{116AD}\x{116B0}-\x{116B5}\x{116B7}\x{1171D}-\x{1171F}\x{11722}-\x{11725}\x{11727}-\x{1172B}\x{1182F}-\x{11837}\x{11839}-\x{1183A}\x{1193B}-\x{1193C}\x{1193E}\x{11943}\x{119D4}-\x{119D7}\x{119DA}-\x{119DB}\x{119E0}\x{11A01}-\x{11A06}\x{11A09}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A98}-\x{11A99}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C92}-\x{11CA7}\x{11CAA}-\x{11CB0}\x{11CB2}-\x{11CB3}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D90}-\x{11D91}\x{11D95}\x{11D97}\x{11EF3}-\x{11EF4}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16F4F}\x{16F8F}-\x{16F92}\x{16FE4}\x{1BC9D}-\x{1BC9E}\x{1D167}-\x{1D169}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D242}-\x{1D244}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E130}-\x{1E136}\x{1E2EC}-\x{1E2EF}\x{1E8D0}-\x{1E8D6}\x{1E944}-\x{1E94A}\x{E0100}-\x{E01EF}]*$/u';
+
+    const ZWNJ = '/([\x{A872}\x{10ACD}\x{10AD7}\x{10D00}\x{10FCB}\x{0620}\x{0626}\x{0628}\x{062A}-\x{062E}\x{0633}-\x{063F}\x{0641}-\x{0647}\x{0649}-\x{064A}\x{066E}-\x{066F}\x{0678}-\x{0687}\x{069A}-\x{06BF}\x{06C1}-\x{06C2}\x{06CC}\x{06CE}\x{06D0}-\x{06D1}\x{06FA}-\x{06FC}\x{06FF}\x{0712}-\x{0714}\x{071A}-\x{071D}\x{071F}-\x{0727}\x{0729}\x{072B}\x{072D}-\x{072E}\x{074E}-\x{0758}\x{075C}-\x{076A}\x{076D}-\x{0770}\x{0772}\x{0775}-\x{0777}\x{077A}-\x{077F}\x{07CA}-\x{07EA}\x{0841}-\x{0845}\x{0848}\x{084A}-\x{0853}\x{0855}\x{0860}\x{0862}-\x{0865}\x{0868}\x{08A0}-\x{08A9}\x{08AF}-\x{08B0}\x{08B3}-\x{08B4}\x{08B6}-\x{08B8}\x{08BA}-\x{08C7}\x{1807}\x{1820}-\x{1842}\x{1843}\x{1844}-\x{1878}\x{1887}-\x{18A8}\x{18AA}\x{A840}-\x{A871}\x{10AC0}-\x{10AC4}\x{10AD3}-\x{10AD6}\x{10AD8}-\x{10ADC}\x{10ADE}-\x{10AE0}\x{10AEB}-\x{10AEE}\x{10B80}\x{10B82}\x{10B86}-\x{10B88}\x{10B8A}-\x{10B8B}\x{10B8D}\x{10B90}\x{10BAD}-\x{10BAE}\x{10D01}-\x{10D21}\x{10D23}\x{10F30}-\x{10F32}\x{10F34}-\x{10F44}\x{10F51}-\x{10F53}\x{10FB0}\x{10FB2}-\x{10FB3}\x{10FB8}\x{10FBB}-\x{10FBC}\x{10FBE}-\x{10FBF}\x{10FC1}\x{10FC4}\x{10FCA}\x{1E900}-\x{1E943}][\x{00AD}\x{0300}-\x{036F}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{0591}-\x{05BD}\x{05BF}\x{05C1}-\x{05C2}\x{05C4}-\x{05C5}\x{05C7}\x{0610}-\x{061A}\x{061C}\x{064B}-\x{065F}\x{0670}\x{06D6}-\x{06DC}\x{06DF}-\x{06E4}\x{06E7}-\x{06E8}\x{06EA}-\x{06ED}\x{070F}\x{0711}\x{0730}-\x{074A}\x{07A6}-\x{07B0}\x{07EB}-\x{07F3}\x{07FD}\x{0816}-\x{0819}\x{081B}-\x{0823}\x{0825}-\x{0827}\x{0829}-\x{082D}\x{0859}-\x{085B}\x{08D3}-\x{08E1}\x{08E3}-\x{0902}\x{093A}\x{093C}\x{0941}-\x{0948}\x{094D}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0981}\x{09BC}\x{09C1}-\x{09C4}\x{09CD}\x{09E2}-\x{09E3}\x{09FE}\x{0A01}-\x{0A02}\x{0A3C}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0ABC}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B3C}\x{0B3F}\x{0B41}-\x{0B44}\x{0B4D}\x{0B55}-\x{0B56}\x{0B62}-\x{0B63}\x{0B82}\x{0BC0}\x{0BCD}\x{0C00}\x{0C04}\x{0C3E}-\x{0C40}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C81}\x{0CBC}\x{0CBF}\x{0CC6}\x{0CCC}-\x{0CCD}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D3B}-\x{0D3C}\x{0D41}-\x{0D44}\x{0D4D}\x{0D62}-\x{0D63}\x{0D81}\x{0DCA}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0E31}\x{0E34}-\x{0E3A}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EBC}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F71}-\x{0F7E}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102D}-\x{1030}\x{1032}-\x{1037}\x{1039}-\x{103A}\x{103D}-\x{103E}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1071}-\x{1074}\x{1082}\x{1085}-\x{1086}\x{108D}\x{109D}\x{135D}-\x{135F}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B7}-\x{17BD}\x{17C6}\x{17C9}-\x{17D3}\x{17DD}\x{180B}-\x{180D}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1927}-\x{1928}\x{1932}\x{1939}-\x{193B}\x{1A17}-\x{1A18}\x{1A1B}\x{1A56}\x{1A58}-\x{1A5E}\x{1A60}\x{1A62}\x{1A65}-\x{1A6C}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1ABF}-\x{1AC0}\x{1B00}-\x{1B03}\x{1B34}\x{1B36}-\x{1B3A}\x{1B3C}\x{1B42}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1BA2}-\x{1BA5}\x{1BA8}-\x{1BA9}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE8}-\x{1BE9}\x{1BED}\x{1BEF}-\x{1BF1}\x{1C2C}-\x{1C33}\x{1C36}-\x{1C37}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF8}-\x{1CF9}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{200B}\x{200E}-\x{200F}\x{202A}-\x{202E}\x{2060}-\x{2064}\x{206A}-\x{206F}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2CEF}-\x{2CF1}\x{2D7F}\x{2DE0}-\x{2DFF}\x{302A}-\x{302D}\x{3099}-\x{309A}\x{A66F}\x{A670}-\x{A672}\x{A674}-\x{A67D}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A802}\x{A806}\x{A80B}\x{A825}-\x{A826}\x{A82C}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A980}-\x{A982}\x{A9B3}\x{A9B6}-\x{A9B9}\x{A9BC}-\x{A9BD}\x{A9E5}\x{AA29}-\x{AA2E}\x{AA31}-\x{AA32}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA7C}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AAEC}-\x{AAED}\x{AAF6}\x{ABE5}\x{ABE8}\x{ABED}\x{FB1E}\x{FE00}-\x{FE0F}\x{FE20}-\x{FE2F}\x{FEFF}\x{FFF9}-\x{FFFB}\x{101FD}\x{102E0}\x{10376}-\x{1037A}\x{10A01}-\x{10A03}\x{10A05}-\x{10A06}\x{10A0C}-\x{10A0F}\x{10A38}-\x{10A3A}\x{10A3F}\x{10AE5}-\x{10AE6}\x{10D24}-\x{10D27}\x{10EAB}-\x{10EAC}\x{10F46}-\x{10F50}\x{11001}\x{11038}-\x{11046}\x{1107F}-\x{11081}\x{110B3}-\x{110B6}\x{110B9}-\x{110BA}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112D}-\x{11134}\x{11173}\x{11180}-\x{11181}\x{111B6}-\x{111BE}\x{111C9}-\x{111CC}\x{111CF}\x{1122F}-\x{11231}\x{11234}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{1133B}-\x{1133C}\x{11340}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11438}-\x{1143F}\x{11442}-\x{11444}\x{11446}\x{1145E}\x{114B3}-\x{114B8}\x{114BA}\x{114BF}-\x{114C0}\x{114C2}-\x{114C3}\x{115B2}-\x{115B5}\x{115BC}-\x{115BD}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11633}-\x{1163A}\x{1163D}\x{1163F}-\x{11640}\x{116AB}\x{116AD}\x{116B0}-\x{116B5}\x{116B7}\x{1171D}-\x{1171F}\x{11722}-\x{11725}\x{11727}-\x{1172B}\x{1182F}-\x{11837}\x{11839}-\x{1183A}\x{1193B}-\x{1193C}\x{1193E}\x{11943}\x{119D4}-\x{119D7}\x{119DA}-\x{119DB}\x{119E0}\x{11A01}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A98}-\x{11A99}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C3F}\x{11C92}-\x{11CA7}\x{11CAA}-\x{11CB0}\x{11CB2}-\x{11CB3}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D90}-\x{11D91}\x{11D95}\x{11D97}\x{11EF3}-\x{11EF4}\x{13430}-\x{13438}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16F4F}\x{16F8F}-\x{16F92}\x{16FE4}\x{1BC9D}-\x{1BC9E}\x{1BCA0}-\x{1BCA3}\x{1D167}-\x{1D169}\x{1D173}-\x{1D17A}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D242}-\x{1D244}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E130}-\x{1E136}\x{1E2EC}-\x{1E2EF}\x{1E8D0}-\x{1E8D6}\x{1E944}-\x{1E94A}\x{1E94B}\x{E0001}\x{E0020}-\x{E007F}\x{E0100}-\x{E01EF}]*\x{200C}[\x{00AD}\x{0300}-\x{036F}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{0591}-\x{05BD}\x{05BF}\x{05C1}-\x{05C2}\x{05C4}-\x{05C5}\x{05C7}\x{0610}-\x{061A}\x{061C}\x{064B}-\x{065F}\x{0670}\x{06D6}-\x{06DC}\x{06DF}-\x{06E4}\x{06E7}-\x{06E8}\x{06EA}-\x{06ED}\x{070F}\x{0711}\x{0730}-\x{074A}\x{07A6}-\x{07B0}\x{07EB}-\x{07F3}\x{07FD}\x{0816}-\x{0819}\x{081B}-\x{0823}\x{0825}-\x{0827}\x{0829}-\x{082D}\x{0859}-\x{085B}\x{08D3}-\x{08E1}\x{08E3}-\x{0902}\x{093A}\x{093C}\x{0941}-\x{0948}\x{094D}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0981}\x{09BC}\x{09C1}-\x{09C4}\x{09CD}\x{09E2}-\x{09E3}\x{09FE}\x{0A01}-\x{0A02}\x{0A3C}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0ABC}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B3C}\x{0B3F}\x{0B41}-\x{0B44}\x{0B4D}\x{0B55}-\x{0B56}\x{0B62}-\x{0B63}\x{0B82}\x{0BC0}\x{0BCD}\x{0C00}\x{0C04}\x{0C3E}-\x{0C40}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C81}\x{0CBC}\x{0CBF}\x{0CC6}\x{0CCC}-\x{0CCD}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D3B}-\x{0D3C}\x{0D41}-\x{0D44}\x{0D4D}\x{0D62}-\x{0D63}\x{0D81}\x{0DCA}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0E31}\x{0E34}-\x{0E3A}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EBC}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F71}-\x{0F7E}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102D}-\x{1030}\x{1032}-\x{1037}\x{1039}-\x{103A}\x{103D}-\x{103E}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1071}-\x{1074}\x{1082}\x{1085}-\x{1086}\x{108D}\x{109D}\x{135D}-\x{135F}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B7}-\x{17BD}\x{17C6}\x{17C9}-\x{17D3}\x{17DD}\x{180B}-\x{180D}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1927}-\x{1928}\x{1932}\x{1939}-\x{193B}\x{1A17}-\x{1A18}\x{1A1B}\x{1A56}\x{1A58}-\x{1A5E}\x{1A60}\x{1A62}\x{1A65}-\x{1A6C}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1ABF}-\x{1AC0}\x{1B00}-\x{1B03}\x{1B34}\x{1B36}-\x{1B3A}\x{1B3C}\x{1B42}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1BA2}-\x{1BA5}\x{1BA8}-\x{1BA9}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE8}-\x{1BE9}\x{1BED}\x{1BEF}-\x{1BF1}\x{1C2C}-\x{1C33}\x{1C36}-\x{1C37}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF8}-\x{1CF9}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{200B}\x{200E}-\x{200F}\x{202A}-\x{202E}\x{2060}-\x{2064}\x{206A}-\x{206F}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2CEF}-\x{2CF1}\x{2D7F}\x{2DE0}-\x{2DFF}\x{302A}-\x{302D}\x{3099}-\x{309A}\x{A66F}\x{A670}-\x{A672}\x{A674}-\x{A67D}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A802}\x{A806}\x{A80B}\x{A825}-\x{A826}\x{A82C}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A980}-\x{A982}\x{A9B3}\x{A9B6}-\x{A9B9}\x{A9BC}-\x{A9BD}\x{A9E5}\x{AA29}-\x{AA2E}\x{AA31}-\x{AA32}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA7C}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AAEC}-\x{AAED}\x{AAF6}\x{ABE5}\x{ABE8}\x{ABED}\x{FB1E}\x{FE00}-\x{FE0F}\x{FE20}-\x{FE2F}\x{FEFF}\x{FFF9}-\x{FFFB}\x{101FD}\x{102E0}\x{10376}-\x{1037A}\x{10A01}-\x{10A03}\x{10A05}-\x{10A06}\x{10A0C}-\x{10A0F}\x{10A38}-\x{10A3A}\x{10A3F}\x{10AE5}-\x{10AE6}\x{10D24}-\x{10D27}\x{10EAB}-\x{10EAC}\x{10F46}-\x{10F50}\x{11001}\x{11038}-\x{11046}\x{1107F}-\x{11081}\x{110B3}-\x{110B6}\x{110B9}-\x{110BA}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112D}-\x{11134}\x{11173}\x{11180}-\x{11181}\x{111B6}-\x{111BE}\x{111C9}-\x{111CC}\x{111CF}\x{1122F}-\x{11231}\x{11234}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{1133B}-\x{1133C}\x{11340}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11438}-\x{1143F}\x{11442}-\x{11444}\x{11446}\x{1145E}\x{114B3}-\x{114B8}\x{114BA}\x{114BF}-\x{114C0}\x{114C2}-\x{114C3}\x{115B2}-\x{115B5}\x{115BC}-\x{115BD}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11633}-\x{1163A}\x{1163D}\x{1163F}-\x{11640}\x{116AB}\x{116AD}\x{116B0}-\x{116B5}\x{116B7}\x{1171D}-\x{1171F}\x{11722}-\x{11725}\x{11727}-\x{1172B}\x{1182F}-\x{11837}\x{11839}-\x{1183A}\x{1193B}-\x{1193C}\x{1193E}\x{11943}\x{119D4}-\x{119D7}\x{119DA}-\x{119DB}\x{119E0}\x{11A01}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A98}-\x{11A99}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C3F}\x{11C92}-\x{11CA7}\x{11CAA}-\x{11CB0}\x{11CB2}-\x{11CB3}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D90}-\x{11D91}\x{11D95}\x{11D97}\x{11EF3}-\x{11EF4}\x{13430}-\x{13438}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16F4F}\x{16F8F}-\x{16F92}\x{16FE4}\x{1BC9D}-\x{1BC9E}\x{1BCA0}-\x{1BCA3}\x{1D167}-\x{1D169}\x{1D173}-\x{1D17A}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D242}-\x{1D244}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E130}-\x{1E136}\x{1E2EC}-\x{1E2EF}\x{1E8D0}-\x{1E8D6}\x{1E944}-\x{1E94A}\x{1E94B}\x{E0001}\x{E0020}-\x{E007F}\x{E0100}-\x{E01EF}]*)[\x{0622}-\x{0625}\x{0627}\x{0629}\x{062F}-\x{0632}\x{0648}\x{0671}-\x{0673}\x{0675}-\x{0677}\x{0688}-\x{0699}\x{06C0}\x{06C3}-\x{06CB}\x{06CD}\x{06CF}\x{06D2}-\x{06D3}\x{06D5}\x{06EE}-\x{06EF}\x{0710}\x{0715}-\x{0719}\x{071E}\x{0728}\x{072A}\x{072C}\x{072F}\x{074D}\x{0759}-\x{075B}\x{076B}-\x{076C}\x{0771}\x{0773}-\x{0774}\x{0778}-\x{0779}\x{0840}\x{0846}-\x{0847}\x{0849}\x{0854}\x{0856}-\x{0858}\x{0867}\x{0869}-\x{086A}\x{08AA}-\x{08AC}\x{08AE}\x{08B1}-\x{08B2}\x{08B9}\x{10AC5}\x{10AC7}\x{10AC9}-\x{10ACA}\x{10ACE}-\x{10AD2}\x{10ADD}\x{10AE1}\x{10AE4}\x{10AEF}\x{10B81}\x{10B83}-\x{10B85}\x{10B89}\x{10B8C}\x{10B8E}-\x{10B8F}\x{10B91}\x{10BA9}-\x{10BAC}\x{10D22}\x{10F33}\x{10F54}\x{10FB4}-\x{10FB6}\x{10FB9}-\x{10FBA}\x{10FBD}\x{10FC2}-\x{10FC3}\x{10FC9}\x{0620}\x{0626}\x{0628}\x{062A}-\x{062E}\x{0633}-\x{063F}\x{0641}-\x{0647}\x{0649}-\x{064A}\x{066E}-\x{066F}\x{0678}-\x{0687}\x{069A}-\x{06BF}\x{06C1}-\x{06C2}\x{06CC}\x{06CE}\x{06D0}-\x{06D1}\x{06FA}-\x{06FC}\x{06FF}\x{0712}-\x{0714}\x{071A}-\x{071D}\x{071F}-\x{0727}\x{0729}\x{072B}\x{072D}-\x{072E}\x{074E}-\x{0758}\x{075C}-\x{076A}\x{076D}-\x{0770}\x{0772}\x{0775}-\x{0777}\x{077A}-\x{077F}\x{07CA}-\x{07EA}\x{0841}-\x{0845}\x{0848}\x{084A}-\x{0853}\x{0855}\x{0860}\x{0862}-\x{0865}\x{0868}\x{08A0}-\x{08A9}\x{08AF}-\x{08B0}\x{08B3}-\x{08B4}\x{08B6}-\x{08B8}\x{08BA}-\x{08C7}\x{1807}\x{1820}-\x{1842}\x{1843}\x{1844}-\x{1878}\x{1887}-\x{18A8}\x{18AA}\x{A840}-\x{A871}\x{10AC0}-\x{10AC4}\x{10AD3}-\x{10AD6}\x{10AD8}-\x{10ADC}\x{10ADE}-\x{10AE0}\x{10AEB}-\x{10AEE}\x{10B80}\x{10B82}\x{10B86}-\x{10B88}\x{10B8A}-\x{10B8B}\x{10B8D}\x{10B90}\x{10BAD}-\x{10BAE}\x{10D01}-\x{10D21}\x{10D23}\x{10F30}-\x{10F32}\x{10F34}-\x{10F44}\x{10F51}-\x{10F53}\x{10FB0}\x{10FB2}-\x{10FB3}\x{10FB8}\x{10FBB}-\x{10FBC}\x{10FBE}-\x{10FBF}\x{10FC1}\x{10FC4}\x{10FCA}\x{1E900}-\x{1E943}]/u';
+}
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/virama.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/virama.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/virama.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/virama.php	(date 1725846310000)
@@ -0,0 +1,65 @@
+<?php
+
+return array (
+  2381 => 9,
+  2509 => 9,
+  2637 => 9,
+  2765 => 9,
+  2893 => 9,
+  3021 => 9,
+  3149 => 9,
+  3277 => 9,
+  3387 => 9,
+  3388 => 9,
+  3405 => 9,
+  3530 => 9,
+  3642 => 9,
+  3770 => 9,
+  3972 => 9,
+  4153 => 9,
+  4154 => 9,
+  5908 => 9,
+  5940 => 9,
+  6098 => 9,
+  6752 => 9,
+  6980 => 9,
+  7082 => 9,
+  7083 => 9,
+  7154 => 9,
+  7155 => 9,
+  11647 => 9,
+  43014 => 9,
+  43052 => 9,
+  43204 => 9,
+  43347 => 9,
+  43456 => 9,
+  43766 => 9,
+  44013 => 9,
+  68159 => 9,
+  69702 => 9,
+  69759 => 9,
+  69817 => 9,
+  69939 => 9,
+  69940 => 9,
+  70080 => 9,
+  70197 => 9,
+  70378 => 9,
+  70477 => 9,
+  70722 => 9,
+  70850 => 9,
+  71103 => 9,
+  71231 => 9,
+  71350 => 9,
+  71467 => 9,
+  71737 => 9,
+  71997 => 9,
+  71998 => 9,
+  72160 => 9,
+  72244 => 9,
+  72263 => 9,
+  72345 => 9,
+  72767 => 9,
+  73028 => 9,
+  73029 => 9,
+  73111 => 9,
+);
Index: vendor/symfony/polyfill-intl-normalizer/Resources/stubs/Normalizer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/Resources/stubs/Normalizer.php b/vendor/symfony/polyfill-intl-normalizer/Resources/stubs/Normalizer.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/Resources/stubs/Normalizer.php	(date 1725846310000)
@@ -0,0 +1,17 @@
+<?php
+
+class Normalizer extends Symfony\Polyfill\Intl\Normalizer\Normalizer
+{
+    /**
+     * @deprecated since ICU 56 and removed in PHP 8
+     */
+    public const NONE = 2;
+    public const FORM_D = 4;
+    public const FORM_KD = 8;
+    public const FORM_C = 16;
+    public const FORM_KC = 32;
+    public const NFD = 4;
+    public const NFKD = 8;
+    public const NFC = 16;
+    public const NFKC = 32;
+}
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/DisallowedRanges.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/DisallowedRanges.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/DisallowedRanges.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/DisallowedRanges.php	(date 1725846310000)
@@ -0,0 +1,384 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Polyfill\Intl\Idn\Resources\unidata;
+
+/**
+ * @internal
+ */
+final class DisallowedRanges
+{
+    /**
+     * @param int $codePoint
+     *
+     * @return bool
+     */
+    public static function inRange($codePoint)
+    {
+        if ($codePoint >= 128 && $codePoint <= 159) {
+            return true;
+        }
+
+        if ($codePoint >= 2155 && $codePoint <= 2207) {
+            return true;
+        }
+
+        if ($codePoint >= 3676 && $codePoint <= 3712) {
+            return true;
+        }
+
+        if ($codePoint >= 3808 && $codePoint <= 3839) {
+            return true;
+        }
+
+        if ($codePoint >= 4059 && $codePoint <= 4095) {
+            return true;
+        }
+
+        if ($codePoint >= 4256 && $codePoint <= 4293) {
+            return true;
+        }
+
+        if ($codePoint >= 6849 && $codePoint <= 6911) {
+            return true;
+        }
+
+        if ($codePoint >= 11859 && $codePoint <= 11903) {
+            return true;
+        }
+
+        if ($codePoint >= 42955 && $codePoint <= 42996) {
+            return true;
+        }
+
+        if ($codePoint >= 55296 && $codePoint <= 57343) {
+            return true;
+        }
+
+        if ($codePoint >= 57344 && $codePoint <= 63743) {
+            return true;
+        }
+
+        if ($codePoint >= 64218 && $codePoint <= 64255) {
+            return true;
+        }
+
+        if ($codePoint >= 64976 && $codePoint <= 65007) {
+            return true;
+        }
+
+        if ($codePoint >= 65630 && $codePoint <= 65663) {
+            return true;
+        }
+
+        if ($codePoint >= 65953 && $codePoint <= 65999) {
+            return true;
+        }
+
+        if ($codePoint >= 66046 && $codePoint <= 66175) {
+            return true;
+        }
+
+        if ($codePoint >= 66518 && $codePoint <= 66559) {
+            return true;
+        }
+
+        if ($codePoint >= 66928 && $codePoint <= 67071) {
+            return true;
+        }
+
+        if ($codePoint >= 67432 && $codePoint <= 67583) {
+            return true;
+        }
+
+        if ($codePoint >= 67760 && $codePoint <= 67807) {
+            return true;
+        }
+
+        if ($codePoint >= 67904 && $codePoint <= 67967) {
+            return true;
+        }
+
+        if ($codePoint >= 68256 && $codePoint <= 68287) {
+            return true;
+        }
+
+        if ($codePoint >= 68528 && $codePoint <= 68607) {
+            return true;
+        }
+
+        if ($codePoint >= 68681 && $codePoint <= 68735) {
+            return true;
+        }
+
+        if ($codePoint >= 68922 && $codePoint <= 69215) {
+            return true;
+        }
+
+        if ($codePoint >= 69298 && $codePoint <= 69375) {
+            return true;
+        }
+
+        if ($codePoint >= 69466 && $codePoint <= 69551) {
+            return true;
+        }
+
+        if ($codePoint >= 70207 && $codePoint <= 70271) {
+            return true;
+        }
+
+        if ($codePoint >= 70517 && $codePoint <= 70655) {
+            return true;
+        }
+
+        if ($codePoint >= 70874 && $codePoint <= 71039) {
+            return true;
+        }
+
+        if ($codePoint >= 71134 && $codePoint <= 71167) {
+            return true;
+        }
+
+        if ($codePoint >= 71370 && $codePoint <= 71423) {
+            return true;
+        }
+
+        if ($codePoint >= 71488 && $codePoint <= 71679) {
+            return true;
+        }
+
+        if ($codePoint >= 71740 && $codePoint <= 71839) {
+            return true;
+        }
+
+        if ($codePoint >= 72026 && $codePoint <= 72095) {
+            return true;
+        }
+
+        if ($codePoint >= 72441 && $codePoint <= 72703) {
+            return true;
+        }
+
+        if ($codePoint >= 72887 && $codePoint <= 72959) {
+            return true;
+        }
+
+        if ($codePoint >= 73130 && $codePoint <= 73439) {
+            return true;
+        }
+
+        if ($codePoint >= 73465 && $codePoint <= 73647) {
+            return true;
+        }
+
+        if ($codePoint >= 74650 && $codePoint <= 74751) {
+            return true;
+        }
+
+        if ($codePoint >= 75076 && $codePoint <= 77823) {
+            return true;
+        }
+
+        if ($codePoint >= 78905 && $codePoint <= 82943) {
+            return true;
+        }
+
+        if ($codePoint >= 83527 && $codePoint <= 92159) {
+            return true;
+        }
+
+        if ($codePoint >= 92784 && $codePoint <= 92879) {
+            return true;
+        }
+
+        if ($codePoint >= 93072 && $codePoint <= 93759) {
+            return true;
+        }
+
+        if ($codePoint >= 93851 && $codePoint <= 93951) {
+            return true;
+        }
+
+        if ($codePoint >= 94112 && $codePoint <= 94175) {
+            return true;
+        }
+
+        if ($codePoint >= 101590 && $codePoint <= 101631) {
+            return true;
+        }
+
+        if ($codePoint >= 101641 && $codePoint <= 110591) {
+            return true;
+        }
+
+        if ($codePoint >= 110879 && $codePoint <= 110927) {
+            return true;
+        }
+
+        if ($codePoint >= 111356 && $codePoint <= 113663) {
+            return true;
+        }
+
+        if ($codePoint >= 113828 && $codePoint <= 118783) {
+            return true;
+        }
+
+        if ($codePoint >= 119366 && $codePoint <= 119519) {
+            return true;
+        }
+
+        if ($codePoint >= 119673 && $codePoint <= 119807) {
+            return true;
+        }
+
+        if ($codePoint >= 121520 && $codePoint <= 122879) {
+            return true;
+        }
+
+        if ($codePoint >= 122923 && $codePoint <= 123135) {
+            return true;
+        }
+
+        if ($codePoint >= 123216 && $codePoint <= 123583) {
+            return true;
+        }
+
+        if ($codePoint >= 123648 && $codePoint <= 124927) {
+            return true;
+        }
+
+        if ($codePoint >= 125143 && $codePoint <= 125183) {
+            return true;
+        }
+
+        if ($codePoint >= 125280 && $codePoint <= 126064) {
+            return true;
+        }
+
+        if ($codePoint >= 126133 && $codePoint <= 126208) {
+            return true;
+        }
+
+        if ($codePoint >= 126270 && $codePoint <= 126463) {
+            return true;
+        }
+
+        if ($codePoint >= 126652 && $codePoint <= 126703) {
+            return true;
+        }
+
+        if ($codePoint >= 126706 && $codePoint <= 126975) {
+            return true;
+        }
+
+        if ($codePoint >= 127406 && $codePoint <= 127461) {
+            return true;
+        }
+
+        if ($codePoint >= 127590 && $codePoint <= 127743) {
+            return true;
+        }
+
+        if ($codePoint >= 129202 && $codePoint <= 129279) {
+            return true;
+        }
+
+        if ($codePoint >= 129751 && $codePoint <= 129791) {
+            return true;
+        }
+
+        if ($codePoint >= 129995 && $codePoint <= 130031) {
+            return true;
+        }
+
+        if ($codePoint >= 130042 && $codePoint <= 131069) {
+            return true;
+        }
+
+        if ($codePoint >= 173790 && $codePoint <= 173823) {
+            return true;
+        }
+
+        if ($codePoint >= 191457 && $codePoint <= 194559) {
+            return true;
+        }
+
+        if ($codePoint >= 195102 && $codePoint <= 196605) {
+            return true;
+        }
+
+        if ($codePoint >= 201547 && $codePoint <= 262141) {
+            return true;
+        }
+
+        if ($codePoint >= 262144 && $codePoint <= 327677) {
+            return true;
+        }
+
+        if ($codePoint >= 327680 && $codePoint <= 393213) {
+            return true;
+        }
+
+        if ($codePoint >= 393216 && $codePoint <= 458749) {
+            return true;
+        }
+
+        if ($codePoint >= 458752 && $codePoint <= 524285) {
+            return true;
+        }
+
+        if ($codePoint >= 524288 && $codePoint <= 589821) {
+            return true;
+        }
+
+        if ($codePoint >= 589824 && $codePoint <= 655357) {
+            return true;
+        }
+
+        if ($codePoint >= 655360 && $codePoint <= 720893) {
+            return true;
+        }
+
+        if ($codePoint >= 720896 && $codePoint <= 786429) {
+            return true;
+        }
+
+        if ($codePoint >= 786432 && $codePoint <= 851965) {
+            return true;
+        }
+
+        if ($codePoint >= 851968 && $codePoint <= 917501) {
+            return true;
+        }
+
+        if ($codePoint >= 917536 && $codePoint <= 917631) {
+            return true;
+        }
+
+        if ($codePoint >= 917632 && $codePoint <= 917759) {
+            return true;
+        }
+
+        if ($codePoint >= 918000 && $codePoint <= 983037) {
+            return true;
+        }
+
+        if ($codePoint >= 983040 && $codePoint <= 1048573) {
+            return true;
+        }
+
+        if ($codePoint >= 1048576 && $codePoint <= 1114109) {
+            return true;
+        }
+
+        return false;
+    }
+}
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed_STD3_mapped.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed_STD3_mapped.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed_STD3_mapped.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed_STD3_mapped.php	(date 1725846310000)
@@ -0,0 +1,308 @@
+<?php
+
+return array (
+  160 => ' ',
+  168 => ' ̈',
+  175 => ' ̄',
+  180 => ' ́',
+  184 => ' ̧',
+  728 => ' ̆',
+  729 => ' ̇',
+  730 => ' ̊',
+  731 => ' ̨',
+  732 => ' ̃',
+  733 => ' ̋',
+  890 => ' ι',
+  894 => ';',
+  900 => ' ́',
+  901 => ' ̈́',
+  8125 => ' ̓',
+  8127 => ' ̓',
+  8128 => ' ͂',
+  8129 => ' ̈͂',
+  8141 => ' ̓̀',
+  8142 => ' ̓́',
+  8143 => ' ̓͂',
+  8157 => ' ̔̀',
+  8158 => ' ̔́',
+  8159 => ' ̔͂',
+  8173 => ' ̈̀',
+  8174 => ' ̈́',
+  8175 => '`',
+  8189 => ' ́',
+  8190 => ' ̔',
+  8192 => ' ',
+  8193 => ' ',
+  8194 => ' ',
+  8195 => ' ',
+  8196 => ' ',
+  8197 => ' ',
+  8198 => ' ',
+  8199 => ' ',
+  8200 => ' ',
+  8201 => ' ',
+  8202 => ' ',
+  8215 => ' ̳',
+  8239 => ' ',
+  8252 => '!!',
+  8254 => ' ̅',
+  8263 => '??',
+  8264 => '?!',
+  8265 => '!?',
+  8287 => ' ',
+  8314 => '+',
+  8316 => '=',
+  8317 => '(',
+  8318 => ')',
+  8330 => '+',
+  8332 => '=',
+  8333 => '(',
+  8334 => ')',
+  8448 => 'a/c',
+  8449 => 'a/s',
+  8453 => 'c/o',
+  8454 => 'c/u',
+  9332 => '(1)',
+  9333 => '(2)',
+  9334 => '(3)',
+  9335 => '(4)',
+  9336 => '(5)',
+  9337 => '(6)',
+  9338 => '(7)',
+  9339 => '(8)',
+  9340 => '(9)',
+  9341 => '(10)',
+  9342 => '(11)',
+  9343 => '(12)',
+  9344 => '(13)',
+  9345 => '(14)',
+  9346 => '(15)',
+  9347 => '(16)',
+  9348 => '(17)',
+  9349 => '(18)',
+  9350 => '(19)',
+  9351 => '(20)',
+  9372 => '(a)',
+  9373 => '(b)',
+  9374 => '(c)',
+  9375 => '(d)',
+  9376 => '(e)',
+  9377 => '(f)',
+  9378 => '(g)',
+  9379 => '(h)',
+  9380 => '(i)',
+  9381 => '(j)',
+  9382 => '(k)',
+  9383 => '(l)',
+  9384 => '(m)',
+  9385 => '(n)',
+  9386 => '(o)',
+  9387 => '(p)',
+  9388 => '(q)',
+  9389 => '(r)',
+  9390 => '(s)',
+  9391 => '(t)',
+  9392 => '(u)',
+  9393 => '(v)',
+  9394 => '(w)',
+  9395 => '(x)',
+  9396 => '(y)',
+  9397 => '(z)',
+  10868 => '::=',
+  10869 => '==',
+  10870 => '===',
+  12288 => ' ',
+  12443 => ' ゙',
+  12444 => ' ゚',
+  12800 => '(ᄀ)',
+  12801 => '(ᄂ)',
+  12802 => '(ᄃ)',
+  12803 => '(ᄅ)',
+  12804 => '(ᄆ)',
+  12805 => '(ᄇ)',
+  12806 => '(ᄉ)',
+  12807 => '(ᄋ)',
+  12808 => '(ᄌ)',
+  12809 => '(ᄎ)',
+  12810 => '(ᄏ)',
+  12811 => '(ᄐ)',
+  12812 => '(ᄑ)',
+  12813 => '(ᄒ)',
+  12814 => '(가)',
+  12815 => '(나)',
+  12816 => '(다)',
+  12817 => '(라)',
+  12818 => '(마)',
+  12819 => '(바)',
+  12820 => '(사)',
+  12821 => '(아)',
+  12822 => '(자)',
+  12823 => '(차)',
+  12824 => '(카)',
+  12825 => '(타)',
+  12826 => '(파)',
+  12827 => '(하)',
+  12828 => '(주)',
+  12829 => '(오전)',
+  12830 => '(오후)',
+  12832 => '(一)',
+  12833 => '(二)',
+  12834 => '(三)',
+  12835 => '(四)',
+  12836 => '(五)',
+  12837 => '(六)',
+  12838 => '(七)',
+  12839 => '(八)',
+  12840 => '(九)',
+  12841 => '(十)',
+  12842 => '(月)',
+  12843 => '(火)',
+  12844 => '(水)',
+  12845 => '(木)',
+  12846 => '(金)',
+  12847 => '(土)',
+  12848 => '(日)',
+  12849 => '(株)',
+  12850 => '(有)',
+  12851 => '(社)',
+  12852 => '(名)',
+  12853 => '(特)',
+  12854 => '(財)',
+  12855 => '(祝)',
+  12856 => '(労)',
+  12857 => '(代)',
+  12858 => '(呼)',
+  12859 => '(学)',
+  12860 => '(監)',
+  12861 => '(企)',
+  12862 => '(資)',
+  12863 => '(協)',
+  12864 => '(祭)',
+  12865 => '(休)',
+  12866 => '(自)',
+  12867 => '(至)',
+  64297 => '+',
+  64606 => ' ٌّ',
+  64607 => ' ٍّ',
+  64608 => ' َّ',
+  64609 => ' ُّ',
+  64610 => ' ِّ',
+  64611 => ' ّٰ',
+  65018 => 'صلى الله عليه وسلم',
+  65019 => 'جل جلاله',
+  65040 => ',',
+  65043 => ':',
+  65044 => ';',
+  65045 => '!',
+  65046 => '?',
+  65075 => '_',
+  65076 => '_',
+  65077 => '(',
+  65078 => ')',
+  65079 => '{',
+  65080 => '}',
+  65095 => '[',
+  65096 => ']',
+  65097 => ' ̅',
+  65098 => ' ̅',
+  65099 => ' ̅',
+  65100 => ' ̅',
+  65101 => '_',
+  65102 => '_',
+  65103 => '_',
+  65104 => ',',
+  65108 => ';',
+  65109 => ':',
+  65110 => '?',
+  65111 => '!',
+  65113 => '(',
+  65114 => ')',
+  65115 => '{',
+  65116 => '}',
+  65119 => '#',
+  65120 => '&',
+  65121 => '*',
+  65122 => '+',
+  65124 => '<',
+  65125 => '>',
+  65126 => '=',
+  65128 => '\\',
+  65129 => '$',
+  65130 => '%',
+  65131 => '@',
+  65136 => ' ً',
+  65138 => ' ٌ',
+  65140 => ' ٍ',
+  65142 => ' َ',
+  65144 => ' ُ',
+  65146 => ' ِ',
+  65148 => ' ّ',
+  65150 => ' ْ',
+  65281 => '!',
+  65282 => '"',
+  65283 => '#',
+  65284 => '$',
+  65285 => '%',
+  65286 => '&',
+  65287 => '\'',
+  65288 => '(',
+  65289 => ')',
+  65290 => '*',
+  65291 => '+',
+  65292 => ',',
+  65295 => '/',
+  65306 => ':',
+  65307 => ';',
+  65308 => '<',
+  65309 => '=',
+  65310 => '>',
+  65311 => '?',
+  65312 => '@',
+  65339 => '[',
+  65340 => '\\',
+  65341 => ']',
+  65342 => '^',
+  65343 => '_',
+  65344 => '`',
+  65371 => '{',
+  65372 => '|',
+  65373 => '}',
+  65374 => '~',
+  65507 => ' ̄',
+  127233 => '0,',
+  127234 => '1,',
+  127235 => '2,',
+  127236 => '3,',
+  127237 => '4,',
+  127238 => '5,',
+  127239 => '6,',
+  127240 => '7,',
+  127241 => '8,',
+  127242 => '9,',
+  127248 => '(a)',
+  127249 => '(b)',
+  127250 => '(c)',
+  127251 => '(d)',
+  127252 => '(e)',
+  127253 => '(f)',
+  127254 => '(g)',
+  127255 => '(h)',
+  127256 => '(i)',
+  127257 => '(j)',
+  127258 => '(k)',
+  127259 => '(l)',
+  127260 => '(m)',
+  127261 => '(n)',
+  127262 => '(o)',
+  127263 => '(p)',
+  127264 => '(q)',
+  127265 => '(r)',
+  127266 => '(s)',
+  127267 => '(t)',
+  127268 => '(u)',
+  127269 => '(v)',
+  127270 => '(w)',
+  127271 => '(x)',
+  127272 => '(y)',
+  127273 => '(z)',
+);
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed_STD3_valid.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed_STD3_valid.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed_STD3_valid.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/disallowed_STD3_valid.php	(date 1725846310000)
@@ -0,0 +1,71 @@
+<?php
+
+return array (
+  0 => true,
+  1 => true,
+  2 => true,
+  3 => true,
+  4 => true,
+  5 => true,
+  6 => true,
+  7 => true,
+  8 => true,
+  9 => true,
+  10 => true,
+  11 => true,
+  12 => true,
+  13 => true,
+  14 => true,
+  15 => true,
+  16 => true,
+  17 => true,
+  18 => true,
+  19 => true,
+  20 => true,
+  21 => true,
+  22 => true,
+  23 => true,
+  24 => true,
+  25 => true,
+  26 => true,
+  27 => true,
+  28 => true,
+  29 => true,
+  30 => true,
+  31 => true,
+  32 => true,
+  33 => true,
+  34 => true,
+  35 => true,
+  36 => true,
+  37 => true,
+  38 => true,
+  39 => true,
+  40 => true,
+  41 => true,
+  42 => true,
+  43 => true,
+  44 => true,
+  47 => true,
+  58 => true,
+  59 => true,
+  60 => true,
+  61 => true,
+  62 => true,
+  63 => true,
+  64 => true,
+  91 => true,
+  92 => true,
+  93 => true,
+  94 => true,
+  95 => true,
+  96 => true,
+  123 => true,
+  124 => true,
+  125 => true,
+  126 => true,
+  127 => true,
+  8800 => true,
+  8814 => true,
+  8815 => true,
+);
Index: vendor/symfony/polyfill-intl-idn/Resources/unidata/ignored.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-idn/Resources/unidata/ignored.php b/vendor/symfony/polyfill-intl-idn/Resources/unidata/ignored.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-idn/Resources/unidata/ignored.php	(date 1725846310000)
@@ -0,0 +1,273 @@
+<?php
+
+return array (
+  173 => true,
+  847 => true,
+  6155 => true,
+  6156 => true,
+  6157 => true,
+  8203 => true,
+  8288 => true,
+  8292 => true,
+  65024 => true,
+  65025 => true,
+  65026 => true,
+  65027 => true,
+  65028 => true,
+  65029 => true,
+  65030 => true,
+  65031 => true,
+  65032 => true,
+  65033 => true,
+  65034 => true,
+  65035 => true,
+  65036 => true,
+  65037 => true,
+  65038 => true,
+  65039 => true,
+  65279 => true,
+  113824 => true,
+  113825 => true,
+  113826 => true,
+  113827 => true,
+  917760 => true,
+  917761 => true,
+  917762 => true,
+  917763 => true,
+  917764 => true,
+  917765 => true,
+  917766 => true,
+  917767 => true,
+  917768 => true,
+  917769 => true,
+  917770 => true,
+  917771 => true,
+  917772 => true,
+  917773 => true,
+  917774 => true,
+  917775 => true,
+  917776 => true,
+  917777 => true,
+  917778 => true,
+  917779 => true,
+  917780 => true,
+  917781 => true,
+  917782 => true,
+  917783 => true,
+  917784 => true,
+  917785 => true,
+  917786 => true,
+  917787 => true,
+  917788 => true,
+  917789 => true,
+  917790 => true,
+  917791 => true,
+  917792 => true,
+  917793 => true,
+  917794 => true,
+  917795 => true,
+  917796 => true,
+  917797 => true,
+  917798 => true,
+  917799 => true,
+  917800 => true,
+  917801 => true,
+  917802 => true,
+  917803 => true,
+  917804 => true,
+  917805 => true,
+  917806 => true,
+  917807 => true,
+  917808 => true,
+  917809 => true,
+  917810 => true,
+  917811 => true,
+  917812 => true,
+  917813 => true,
+  917814 => true,
+  917815 => true,
+  917816 => true,
+  917817 => true,
+  917818 => true,
+  917819 => true,
+  917820 => true,
+  917821 => true,
+  917822 => true,
+  917823 => true,
+  917824 => true,
+  917825 => true,
+  917826 => true,
+  917827 => true,
+  917828 => true,
+  917829 => true,
+  917830 => true,
+  917831 => true,
+  917832 => true,
+  917833 => true,
+  917834 => true,
+  917835 => true,
+  917836 => true,
+  917837 => true,
+  917838 => true,
+  917839 => true,
+  917840 => true,
+  917841 => true,
+  917842 => true,
+  917843 => true,
+  917844 => true,
+  917845 => true,
+  917846 => true,
+  917847 => true,
+  917848 => true,
+  917849 => true,
+  917850 => true,
+  917851 => true,
+  917852 => true,
+  917853 => true,
+  917854 => true,
+  917855 => true,
+  917856 => true,
+  917857 => true,
+  917858 => true,
+  917859 => true,
+  917860 => true,
+  917861 => true,
+  917862 => true,
+  917863 => true,
+  917864 => true,
+  917865 => true,
+  917866 => true,
+  917867 => true,
+  917868 => true,
+  917869 => true,
+  917870 => true,
+  917871 => true,
+  917872 => true,
+  917873 => true,
+  917874 => true,
+  917875 => true,
+  917876 => true,
+  917877 => true,
+  917878 => true,
+  917879 => true,
+  917880 => true,
+  917881 => true,
+  917882 => true,
+  917883 => true,
+  917884 => true,
+  917885 => true,
+  917886 => true,
+  917887 => true,
+  917888 => true,
+  917889 => true,
+  917890 => true,
+  917891 => true,
+  917892 => true,
+  917893 => true,
+  917894 => true,
+  917895 => true,
+  917896 => true,
+  917897 => true,
+  917898 => true,
+  917899 => true,
+  917900 => true,
+  917901 => true,
+  917902 => true,
+  917903 => true,
+  917904 => true,
+  917905 => true,
+  917906 => true,
+  917907 => true,
+  917908 => true,
+  917909 => true,
+  917910 => true,
+  917911 => true,
+  917912 => true,
+  917913 => true,
+  917914 => true,
+  917915 => true,
+  917916 => true,
+  917917 => true,
+  917918 => true,
+  917919 => true,
+  917920 => true,
+  917921 => true,
+  917922 => true,
+  917923 => true,
+  917924 => true,
+  917925 => true,
+  917926 => true,
+  917927 => true,
+  917928 => true,
+  917929 => true,
+  917930 => true,
+  917931 => true,
+  917932 => true,
+  917933 => true,
+  917934 => true,
+  917935 => true,
+  917936 => true,
+  917937 => true,
+  917938 => true,
+  917939 => true,
+  917940 => true,
+  917941 => true,
+  917942 => true,
+  917943 => true,
+  917944 => true,
+  917945 => true,
+  917946 => true,
+  917947 => true,
+  917948 => true,
+  917949 => true,
+  917950 => true,
+  917951 => true,
+  917952 => true,
+  917953 => true,
+  917954 => true,
+  917955 => true,
+  917956 => true,
+  917957 => true,
+  917958 => true,
+  917959 => true,
+  917960 => true,
+  917961 => true,
+  917962 => true,
+  917963 => true,
+  917964 => true,
+  917965 => true,
+  917966 => true,
+  917967 => true,
+  917968 => true,
+  917969 => true,
+  917970 => true,
+  917971 => true,
+  917972 => true,
+  917973 => true,
+  917974 => true,
+  917975 => true,
+  917976 => true,
+  917977 => true,
+  917978 => true,
+  917979 => true,
+  917980 => true,
+  917981 => true,
+  917982 => true,
+  917983 => true,
+  917984 => true,
+  917985 => true,
+  917986 => true,
+  917987 => true,
+  917988 => true,
+  917989 => true,
+  917990 => true,
+  917991 => true,
+  917992 => true,
+  917993 => true,
+  917994 => true,
+  917995 => true,
+  917996 => true,
+  917997 => true,
+  917998 => true,
+  917999 => true,
+);
Index: vendor/symfony/polyfill-intl-normalizer/Resources/unidata/canonicalComposition.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/canonicalComposition.php b/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/canonicalComposition.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/canonicalComposition.php	(date 1725846310000)
@@ -0,0 +1,945 @@
+<?php
+
+return array (
+  'À' => 'À',
+  'Á' => 'Á',
+  'Â' => 'Â',
+  'Ã' => 'Ã',
+  'Ä' => 'Ä',
+  'Å' => 'Å',
+  'Ç' => 'Ç',
+  'È' => 'È',
+  'É' => 'É',
+  'Ê' => 'Ê',
+  'Ë' => 'Ë',
+  'Ì' => 'Ì',
+  'Í' => 'Í',
+  'Î' => 'Î',
+  'Ï' => 'Ï',
+  'Ñ' => 'Ñ',
+  'Ò' => 'Ò',
+  'Ó' => 'Ó',
+  'Ô' => 'Ô',
+  'Õ' => 'Õ',
+  'Ö' => 'Ö',
+  'Ù' => 'Ù',
+  'Ú' => 'Ú',
+  'Û' => 'Û',
+  'Ü' => 'Ü',
+  'Ý' => 'Ý',
+  'à' => 'à',
+  'á' => 'á',
+  'â' => 'â',
+  'ã' => 'ã',
+  'ä' => 'ä',
+  'å' => 'å',
+  'ç' => 'ç',
+  'è' => 'è',
+  'é' => 'é',
+  'ê' => 'ê',
+  'ë' => 'ë',
+  'ì' => 'ì',
+  'í' => 'í',
+  'î' => 'î',
+  'ï' => 'ï',
+  'ñ' => 'ñ',
+  'ò' => 'ò',
+  'ó' => 'ó',
+  'ô' => 'ô',
+  'õ' => 'õ',
+  'ö' => 'ö',
+  'ù' => 'ù',
+  'ú' => 'ú',
+  'û' => 'û',
+  'ü' => 'ü',
+  'ý' => 'ý',
+  'ÿ' => 'ÿ',
+  'Ā' => 'Ā',
+  'ā' => 'ā',
+  'Ă' => 'Ă',
+  'ă' => 'ă',
+  'Ą' => 'Ą',
+  'ą' => 'ą',
+  'Ć' => 'Ć',
+  'ć' => 'ć',
+  'Ĉ' => 'Ĉ',
+  'ĉ' => 'ĉ',
+  'Ċ' => 'Ċ',
+  'ċ' => 'ċ',
+  'Č' => 'Č',
+  'č' => 'č',
+  'Ď' => 'Ď',
+  'ď' => 'ď',
+  'Ē' => 'Ē',
+  'ē' => 'ē',
+  'Ĕ' => 'Ĕ',
+  'ĕ' => 'ĕ',
+  'Ė' => 'Ė',
+  'ė' => 'ė',
+  'Ę' => 'Ę',
+  'ę' => 'ę',
+  'Ě' => 'Ě',
+  'ě' => 'ě',
+  'Ĝ' => 'Ĝ',
+  'ĝ' => 'ĝ',
+  'Ğ' => 'Ğ',
+  'ğ' => 'ğ',
+  'Ġ' => 'Ġ',
+  'ġ' => 'ġ',
+  'Ģ' => 'Ģ',
+  'ģ' => 'ģ',
+  'Ĥ' => 'Ĥ',
+  'ĥ' => 'ĥ',
+  'Ĩ' => 'Ĩ',
+  'ĩ' => 'ĩ',
+  'Ī' => 'Ī',
+  'ī' => 'ī',
+  'Ĭ' => 'Ĭ',
+  'ĭ' => 'ĭ',
+  'Į' => 'Į',
+  'į' => 'į',
+  'İ' => 'İ',
+  'Ĵ' => 'Ĵ',
+  'ĵ' => 'ĵ',
+  'Ķ' => 'Ķ',
+  'ķ' => 'ķ',
+  'Ĺ' => 'Ĺ',
+  'ĺ' => 'ĺ',
+  'Ļ' => 'Ļ',
+  'ļ' => 'ļ',
+  'Ľ' => 'Ľ',
+  'ľ' => 'ľ',
+  'Ń' => 'Ń',
+  'ń' => 'ń',
+  'Ņ' => 'Ņ',
+  'ņ' => 'ņ',
+  'Ň' => 'Ň',
+  'ň' => 'ň',
+  'Ō' => 'Ō',
+  'ō' => 'ō',
+  'Ŏ' => 'Ŏ',
+  'ŏ' => 'ŏ',
+  'Ő' => 'Ő',
+  'ő' => 'ő',
+  'Ŕ' => 'Ŕ',
+  'ŕ' => 'ŕ',
+  'Ŗ' => 'Ŗ',
+  'ŗ' => 'ŗ',
+  'Ř' => 'Ř',
+  'ř' => 'ř',
+  'Ś' => 'Ś',
+  'ś' => 'ś',
+  'Ŝ' => 'Ŝ',
+  'ŝ' => 'ŝ',
+  'Ş' => 'Ş',
+  'ş' => 'ş',
+  'Š' => 'Š',
+  'š' => 'š',
+  'Ţ' => 'Ţ',
+  'ţ' => 'ţ',
+  'Ť' => 'Ť',
+  'ť' => 'ť',
+  'Ũ' => 'Ũ',
+  'ũ' => 'ũ',
+  'Ū' => 'Ū',
+  'ū' => 'ū',
+  'Ŭ' => 'Ŭ',
+  'ŭ' => 'ŭ',
+  'Ů' => 'Ů',
+  'ů' => 'ů',
+  'Ű' => 'Ű',
+  'ű' => 'ű',
+  'Ų' => 'Ų',
+  'ų' => 'ų',
+  'Ŵ' => 'Ŵ',
+  'ŵ' => 'ŵ',
+  'Ŷ' => 'Ŷ',
+  'ŷ' => 'ŷ',
+  'Ÿ' => 'Ÿ',
+  'Ź' => 'Ź',
+  'ź' => 'ź',
+  'Ż' => 'Ż',
+  'ż' => 'ż',
+  'Ž' => 'Ž',
+  'ž' => 'ž',
+  'Ơ' => 'Ơ',
+  'ơ' => 'ơ',
+  'Ư' => 'Ư',
+  'ư' => 'ư',
+  'Ǎ' => 'Ǎ',
+  'ǎ' => 'ǎ',
+  'Ǐ' => 'Ǐ',
+  'ǐ' => 'ǐ',
+  'Ǒ' => 'Ǒ',
+  'ǒ' => 'ǒ',
+  'Ǔ' => 'Ǔ',
+  'ǔ' => 'ǔ',
+  'Ǖ' => 'Ǖ',
+  'ǖ' => 'ǖ',
+  'Ǘ' => 'Ǘ',
+  'ǘ' => 'ǘ',
+  'Ǚ' => 'Ǚ',
+  'ǚ' => 'ǚ',
+  'Ǜ' => 'Ǜ',
+  'ǜ' => 'ǜ',
+  'Ǟ' => 'Ǟ',
+  'ǟ' => 'ǟ',
+  'Ǡ' => 'Ǡ',
+  'ǡ' => 'ǡ',
+  'Ǣ' => 'Ǣ',
+  'ǣ' => 'ǣ',
+  'Ǧ' => 'Ǧ',
+  'ǧ' => 'ǧ',
+  'Ǩ' => 'Ǩ',
+  'ǩ' => 'ǩ',
+  'Ǫ' => 'Ǫ',
+  'ǫ' => 'ǫ',
+  'Ǭ' => 'Ǭ',
+  'ǭ' => 'ǭ',
+  'Ǯ' => 'Ǯ',
+  'ǯ' => 'ǯ',
+  'ǰ' => 'ǰ',
+  'Ǵ' => 'Ǵ',
+  'ǵ' => 'ǵ',
+  'Ǹ' => 'Ǹ',
+  'ǹ' => 'ǹ',
+  'Ǻ' => 'Ǻ',
+  'ǻ' => 'ǻ',
+  'Ǽ' => 'Ǽ',
+  'ǽ' => 'ǽ',
+  'Ǿ' => 'Ǿ',
+  'ǿ' => 'ǿ',
+  'Ȁ' => 'Ȁ',
+  'ȁ' => 'ȁ',
+  'Ȃ' => 'Ȃ',
+  'ȃ' => 'ȃ',
+  'Ȅ' => 'Ȅ',
+  'ȅ' => 'ȅ',
+  'Ȇ' => 'Ȇ',
+  'ȇ' => 'ȇ',
+  'Ȉ' => 'Ȉ',
+  'ȉ' => 'ȉ',
+  'Ȋ' => 'Ȋ',
+  'ȋ' => 'ȋ',
+  'Ȍ' => 'Ȍ',
+  'ȍ' => 'ȍ',
+  'Ȏ' => 'Ȏ',
+  'ȏ' => 'ȏ',
+  'Ȑ' => 'Ȑ',
+  'ȑ' => 'ȑ',
+  'Ȓ' => 'Ȓ',
+  'ȓ' => 'ȓ',
+  'Ȕ' => 'Ȕ',
+  'ȕ' => 'ȕ',
+  'Ȗ' => 'Ȗ',
+  'ȗ' => 'ȗ',
+  'Ș' => 'Ș',
+  'ș' => 'ș',
+  'Ț' => 'Ț',
+  'ț' => 'ț',
+  'Ȟ' => 'Ȟ',
+  'ȟ' => 'ȟ',
+  'Ȧ' => 'Ȧ',
+  'ȧ' => 'ȧ',
+  'Ȩ' => 'Ȩ',
+  'ȩ' => 'ȩ',
+  'Ȫ' => 'Ȫ',
+  'ȫ' => 'ȫ',
+  'Ȭ' => 'Ȭ',
+  'ȭ' => 'ȭ',
+  'Ȯ' => 'Ȯ',
+  'ȯ' => 'ȯ',
+  'Ȱ' => 'Ȱ',
+  'ȱ' => 'ȱ',
+  'Ȳ' => 'Ȳ',
+  'ȳ' => 'ȳ',
+  '΅' => '΅',
+  'Ά' => 'Ά',
+  'Έ' => 'Έ',
+  'Ή' => 'Ή',
+  'Ί' => 'Ί',
+  'Ό' => 'Ό',
+  'Ύ' => 'Ύ',
+  'Ώ' => 'Ώ',
+  'ΐ' => 'ΐ',
+  'Ϊ' => 'Ϊ',
+  'Ϋ' => 'Ϋ',
+  'ά' => 'ά',
+  'έ' => 'έ',
+  'ή' => 'ή',
+  'ί' => 'ί',
+  'ΰ' => 'ΰ',
+  'ϊ' => 'ϊ',
+  'ϋ' => 'ϋ',
+  'ό' => 'ό',
+  'ύ' => 'ύ',
+  'ώ' => 'ώ',
+  'ϓ' => 'ϓ',
+  'ϔ' => 'ϔ',
+  'Ѐ' => 'Ѐ',
+  'Ё' => 'Ё',
+  'Ѓ' => 'Ѓ',
+  'Ї' => 'Ї',
+  'Ќ' => 'Ќ',
+  'Ѝ' => 'Ѝ',
+  'Ў' => 'Ў',
+  'Й' => 'Й',
+  'й' => 'й',
+  'ѐ' => 'ѐ',
+  'ё' => 'ё',
+  'ѓ' => 'ѓ',
+  'ї' => 'ї',
+  'ќ' => 'ќ',
+  'ѝ' => 'ѝ',
+  'ў' => 'ў',
+  'Ѷ' => 'Ѷ',
+  'ѷ' => 'ѷ',
+  'Ӂ' => 'Ӂ',
+  'ӂ' => 'ӂ',
+  'Ӑ' => 'Ӑ',
+  'ӑ' => 'ӑ',
+  'Ӓ' => 'Ӓ',
+  'ӓ' => 'ӓ',
+  'Ӗ' => 'Ӗ',
+  'ӗ' => 'ӗ',
+  'Ӛ' => 'Ӛ',
+  'ӛ' => 'ӛ',
+  'Ӝ' => 'Ӝ',
+  'ӝ' => 'ӝ',
+  'Ӟ' => 'Ӟ',
+  'ӟ' => 'ӟ',
+  'Ӣ' => 'Ӣ',
+  'ӣ' => 'ӣ',
+  'Ӥ' => 'Ӥ',
+  'ӥ' => 'ӥ',
+  'Ӧ' => 'Ӧ',
+  'ӧ' => 'ӧ',
+  'Ӫ' => 'Ӫ',
+  'ӫ' => 'ӫ',
+  'Ӭ' => 'Ӭ',
+  'ӭ' => 'ӭ',
+  'Ӯ' => 'Ӯ',
+  'ӯ' => 'ӯ',
+  'Ӱ' => 'Ӱ',
+  'ӱ' => 'ӱ',
+  'Ӳ' => 'Ӳ',
+  'ӳ' => 'ӳ',
+  'Ӵ' => 'Ӵ',
+  'ӵ' => 'ӵ',
+  'Ӹ' => 'Ӹ',
+  'ӹ' => 'ӹ',
+  'آ' => 'آ',
+  'أ' => 'أ',
+  'ؤ' => 'ؤ',
+  'إ' => 'إ',
+  'ئ' => 'ئ',
+  'ۀ' => 'ۀ',
+  'ۂ' => 'ۂ',
+  'ۓ' => 'ۓ',
+  'ऩ' => 'ऩ',
+  'ऱ' => 'ऱ',
+  'ऴ' => 'ऴ',
+  'ো' => 'ো',
+  'ৌ' => 'ৌ',
+  'ୈ' => 'ୈ',
+  'ୋ' => 'ୋ',
+  'ୌ' => 'ୌ',
+  'ஔ' => 'ஔ',
+  'ொ' => 'ொ',
+  'ோ' => 'ோ',
+  'ௌ' => 'ௌ',
+  'ై' => 'ై',
+  'ೀ' => 'ೀ',
+  'ೇ' => 'ೇ',
+  'ೈ' => 'ೈ',
+  'ೊ' => 'ೊ',
+  'ೋ' => 'ೋ',
+  'ൊ' => 'ൊ',
+  'ോ' => 'ോ',
+  'ൌ' => 'ൌ',
+  'ේ' => 'ේ',
+  'ො' => 'ො',
+  'ෝ' => 'ෝ',
+  'ෞ' => 'ෞ',
+  'ဦ' => 'ဦ',
+  'ᬆ' => 'ᬆ',
+  'ᬈ' => 'ᬈ',
+  'ᬊ' => 'ᬊ',
+  'ᬌ' => 'ᬌ',
+  'ᬎ' => 'ᬎ',
+  'ᬒ' => 'ᬒ',
+  'ᬻ' => 'ᬻ',
+  'ᬽ' => 'ᬽ',
+  'ᭀ' => 'ᭀ',
+  'ᭁ' => 'ᭁ',
+  'ᭃ' => 'ᭃ',
+  'Ḁ' => 'Ḁ',
+  'ḁ' => 'ḁ',
+  'Ḃ' => 'Ḃ',
+  'ḃ' => 'ḃ',
+  'Ḅ' => 'Ḅ',
+  'ḅ' => 'ḅ',
+  'Ḇ' => 'Ḇ',
+  'ḇ' => 'ḇ',
+  'Ḉ' => 'Ḉ',
+  'ḉ' => 'ḉ',
+  'Ḋ' => 'Ḋ',
+  'ḋ' => 'ḋ',
+  'Ḍ' => 'Ḍ',
+  'ḍ' => 'ḍ',
+  'Ḏ' => 'Ḏ',
+  'ḏ' => 'ḏ',
+  'Ḑ' => 'Ḑ',
+  'ḑ' => 'ḑ',
+  'Ḓ' => 'Ḓ',
+  'ḓ' => 'ḓ',
+  'Ḕ' => 'Ḕ',
+  'ḕ' => 'ḕ',
+  'Ḗ' => 'Ḗ',
+  'ḗ' => 'ḗ',
+  'Ḙ' => 'Ḙ',
+  'ḙ' => 'ḙ',
+  'Ḛ' => 'Ḛ',
+  'ḛ' => 'ḛ',
+  'Ḝ' => 'Ḝ',
+  'ḝ' => 'ḝ',
+  'Ḟ' => 'Ḟ',
+  'ḟ' => 'ḟ',
+  'Ḡ' => 'Ḡ',
+  'ḡ' => 'ḡ',
+  'Ḣ' => 'Ḣ',
+  'ḣ' => 'ḣ',
+  'Ḥ' => 'Ḥ',
+  'ḥ' => 'ḥ',
+  'Ḧ' => 'Ḧ',
+  'ḧ' => 'ḧ',
+  'Ḩ' => 'Ḩ',
+  'ḩ' => 'ḩ',
+  'Ḫ' => 'Ḫ',
+  'ḫ' => 'ḫ',
+  'Ḭ' => 'Ḭ',
+  'ḭ' => 'ḭ',
+  'Ḯ' => 'Ḯ',
+  'ḯ' => 'ḯ',
+  'Ḱ' => 'Ḱ',
+  'ḱ' => 'ḱ',
+  'Ḳ' => 'Ḳ',
+  'ḳ' => 'ḳ',
+  'Ḵ' => 'Ḵ',
+  'ḵ' => 'ḵ',
+  'Ḷ' => 'Ḷ',
+  'ḷ' => 'ḷ',
+  'Ḹ' => 'Ḹ',
+  'ḹ' => 'ḹ',
+  'Ḻ' => 'Ḻ',
+  'ḻ' => 'ḻ',
+  'Ḽ' => 'Ḽ',
+  'ḽ' => 'ḽ',
+  'Ḿ' => 'Ḿ',
+  'ḿ' => 'ḿ',
+  'Ṁ' => 'Ṁ',
+  'ṁ' => 'ṁ',
+  'Ṃ' => 'Ṃ',
+  'ṃ' => 'ṃ',
+  'Ṅ' => 'Ṅ',
+  'ṅ' => 'ṅ',
+  'Ṇ' => 'Ṇ',
+  'ṇ' => 'ṇ',
+  'Ṉ' => 'Ṉ',
+  'ṉ' => 'ṉ',
+  'Ṋ' => 'Ṋ',
+  'ṋ' => 'ṋ',
+  'Ṍ' => 'Ṍ',
+  'ṍ' => 'ṍ',
+  'Ṏ' => 'Ṏ',
+  'ṏ' => 'ṏ',
+  'Ṑ' => 'Ṑ',
+  'ṑ' => 'ṑ',
+  'Ṓ' => 'Ṓ',
+  'ṓ' => 'ṓ',
+  'Ṕ' => 'Ṕ',
+  'ṕ' => 'ṕ',
+  'Ṗ' => 'Ṗ',
+  'ṗ' => 'ṗ',
+  'Ṙ' => 'Ṙ',
+  'ṙ' => 'ṙ',
+  'Ṛ' => 'Ṛ',
+  'ṛ' => 'ṛ',
+  'Ṝ' => 'Ṝ',
+  'ṝ' => 'ṝ',
+  'Ṟ' => 'Ṟ',
+  'ṟ' => 'ṟ',
+  'Ṡ' => 'Ṡ',
+  'ṡ' => 'ṡ',
+  'Ṣ' => 'Ṣ',
+  'ṣ' => 'ṣ',
+  'Ṥ' => 'Ṥ',
+  'ṥ' => 'ṥ',
+  'Ṧ' => 'Ṧ',
+  'ṧ' => 'ṧ',
+  'Ṩ' => 'Ṩ',
+  'ṩ' => 'ṩ',
+  'Ṫ' => 'Ṫ',
+  'ṫ' => 'ṫ',
+  'Ṭ' => 'Ṭ',
+  'ṭ' => 'ṭ',
+  'Ṯ' => 'Ṯ',
+  'ṯ' => 'ṯ',
+  'Ṱ' => 'Ṱ',
+  'ṱ' => 'ṱ',
+  'Ṳ' => 'Ṳ',
+  'ṳ' => 'ṳ',
+  'Ṵ' => 'Ṵ',
+  'ṵ' => 'ṵ',
+  'Ṷ' => 'Ṷ',
+  'ṷ' => 'ṷ',
+  'Ṹ' => 'Ṹ',
+  'ṹ' => 'ṹ',
+  'Ṻ' => 'Ṻ',
+  'ṻ' => 'ṻ',
+  'Ṽ' => 'Ṽ',
+  'ṽ' => 'ṽ',
+  'Ṿ' => 'Ṿ',
+  'ṿ' => 'ṿ',
+  'Ẁ' => 'Ẁ',
+  'ẁ' => 'ẁ',
+  'Ẃ' => 'Ẃ',
+  'ẃ' => 'ẃ',
+  'Ẅ' => 'Ẅ',
+  'ẅ' => 'ẅ',
+  'Ẇ' => 'Ẇ',
+  'ẇ' => 'ẇ',
+  'Ẉ' => 'Ẉ',
+  'ẉ' => 'ẉ',
+  'Ẋ' => 'Ẋ',
+  'ẋ' => 'ẋ',
+  'Ẍ' => 'Ẍ',
+  'ẍ' => 'ẍ',
+  'Ẏ' => 'Ẏ',
+  'ẏ' => 'ẏ',
+  'Ẑ' => 'Ẑ',
+  'ẑ' => 'ẑ',
+  'Ẓ' => 'Ẓ',
+  'ẓ' => 'ẓ',
+  'Ẕ' => 'Ẕ',
+  'ẕ' => 'ẕ',
+  'ẖ' => 'ẖ',
+  'ẗ' => 'ẗ',
+  'ẘ' => 'ẘ',
+  'ẙ' => 'ẙ',
+  'ẛ' => 'ẛ',
+  'Ạ' => 'Ạ',
+  'ạ' => 'ạ',
+  'Ả' => 'Ả',
+  'ả' => 'ả',
+  'Ấ' => 'Ấ',
+  'ấ' => 'ấ',
+  'Ầ' => 'Ầ',
+  'ầ' => 'ầ',
+  'Ẩ' => 'Ẩ',
+  'ẩ' => 'ẩ',
+  'Ẫ' => 'Ẫ',
+  'ẫ' => 'ẫ',
+  'Ậ' => 'Ậ',
+  'ậ' => 'ậ',
+  'Ắ' => 'Ắ',
+  'ắ' => 'ắ',
+  'Ằ' => 'Ằ',
+  'ằ' => 'ằ',
+  'Ẳ' => 'Ẳ',
+  'ẳ' => 'ẳ',
+  'Ẵ' => 'Ẵ',
+  'ẵ' => 'ẵ',
+  'Ặ' => 'Ặ',
+  'ặ' => 'ặ',
+  'Ẹ' => 'Ẹ',
+  'ẹ' => 'ẹ',
+  'Ẻ' => 'Ẻ',
+  'ẻ' => 'ẻ',
+  'Ẽ' => 'Ẽ',
+  'ẽ' => 'ẽ',
+  'Ế' => 'Ế',
+  'ế' => 'ế',
+  'Ề' => 'Ề',
+  'ề' => 'ề',
+  'Ể' => 'Ể',
+  'ể' => 'ể',
+  'Ễ' => 'Ễ',
+  'ễ' => 'ễ',
+  'Ệ' => 'Ệ',
+  'ệ' => 'ệ',
+  'Ỉ' => 'Ỉ',
+  'ỉ' => 'ỉ',
+  'Ị' => 'Ị',
+  'ị' => 'ị',
+  'Ọ' => 'Ọ',
+  'ọ' => 'ọ',
+  'Ỏ' => 'Ỏ',
+  'ỏ' => 'ỏ',
+  'Ố' => 'Ố',
+  'ố' => 'ố',
+  'Ồ' => 'Ồ',
+  'ồ' => 'ồ',
+  'Ổ' => 'Ổ',
+  'ổ' => 'ổ',
+  'Ỗ' => 'Ỗ',
+  'ỗ' => 'ỗ',
+  'Ộ' => 'Ộ',
+  'ộ' => 'ộ',
+  'Ớ' => 'Ớ',
+  'ớ' => 'ớ',
+  'Ờ' => 'Ờ',
+  'ờ' => 'ờ',
+  'Ở' => 'Ở',
+  'ở' => 'ở',
+  'Ỡ' => 'Ỡ',
+  'ỡ' => 'ỡ',
+  'Ợ' => 'Ợ',
+  'ợ' => 'ợ',
+  'Ụ' => 'Ụ',
+  'ụ' => 'ụ',
+  'Ủ' => 'Ủ',
+  'ủ' => 'ủ',
+  'Ứ' => 'Ứ',
+  'ứ' => 'ứ',
+  'Ừ' => 'Ừ',
+  'ừ' => 'ừ',
+  'Ử' => 'Ử',
+  'ử' => 'ử',
+  'Ữ' => 'Ữ',
+  'ữ' => 'ữ',
+  'Ự' => 'Ự',
+  'ự' => 'ự',
+  'Ỳ' => 'Ỳ',
+  'ỳ' => 'ỳ',
+  'Ỵ' => 'Ỵ',
+  'ỵ' => 'ỵ',
+  'Ỷ' => 'Ỷ',
+  'ỷ' => 'ỷ',
+  'Ỹ' => 'Ỹ',
+  'ỹ' => 'ỹ',
+  'ἀ' => 'ἀ',
+  'ἁ' => 'ἁ',
+  'ἂ' => 'ἂ',
+  'ἃ' => 'ἃ',
+  'ἄ' => 'ἄ',
+  'ἅ' => 'ἅ',
+  'ἆ' => 'ἆ',
+  'ἇ' => 'ἇ',
+  'Ἀ' => 'Ἀ',
+  'Ἁ' => 'Ἁ',
+  'Ἂ' => 'Ἂ',
+  'Ἃ' => 'Ἃ',
+  'Ἄ' => 'Ἄ',
+  'Ἅ' => 'Ἅ',
+  'Ἆ' => 'Ἆ',
+  'Ἇ' => 'Ἇ',
+  'ἐ' => 'ἐ',
+  'ἑ' => 'ἑ',
+  'ἒ' => 'ἒ',
+  'ἓ' => 'ἓ',
+  'ἔ' => 'ἔ',
+  'ἕ' => 'ἕ',
+  'Ἐ' => 'Ἐ',
+  'Ἑ' => 'Ἑ',
+  'Ἒ' => 'Ἒ',
+  'Ἓ' => 'Ἓ',
+  'Ἔ' => 'Ἔ',
+  'Ἕ' => 'Ἕ',
+  'ἠ' => 'ἠ',
+  'ἡ' => 'ἡ',
+  'ἢ' => 'ἢ',
+  'ἣ' => 'ἣ',
+  'ἤ' => 'ἤ',
+  'ἥ' => 'ἥ',
+  'ἦ' => 'ἦ',
+  'ἧ' => 'ἧ',
+  'Ἠ' => 'Ἠ',
+  'Ἡ' => 'Ἡ',
+  'Ἢ' => 'Ἢ',
+  'Ἣ' => 'Ἣ',
+  'Ἤ' => 'Ἤ',
+  'Ἥ' => 'Ἥ',
+  'Ἦ' => 'Ἦ',
+  'Ἧ' => 'Ἧ',
+  'ἰ' => 'ἰ',
+  'ἱ' => 'ἱ',
+  'ἲ' => 'ἲ',
+  'ἳ' => 'ἳ',
+  'ἴ' => 'ἴ',
+  'ἵ' => 'ἵ',
+  'ἶ' => 'ἶ',
+  'ἷ' => 'ἷ',
+  'Ἰ' => 'Ἰ',
+  'Ἱ' => 'Ἱ',
+  'Ἲ' => 'Ἲ',
+  'Ἳ' => 'Ἳ',
+  'Ἴ' => 'Ἴ',
+  'Ἵ' => 'Ἵ',
+  'Ἶ' => 'Ἶ',
+  'Ἷ' => 'Ἷ',
+  'ὀ' => 'ὀ',
+  'ὁ' => 'ὁ',
+  'ὂ' => 'ὂ',
+  'ὃ' => 'ὃ',
+  'ὄ' => 'ὄ',
+  'ὅ' => 'ὅ',
+  'Ὀ' => 'Ὀ',
+  'Ὁ' => 'Ὁ',
+  'Ὂ' => 'Ὂ',
+  'Ὃ' => 'Ὃ',
+  'Ὄ' => 'Ὄ',
+  'Ὅ' => 'Ὅ',
+  'ὐ' => 'ὐ',
+  'ὑ' => 'ὑ',
+  'ὒ' => 'ὒ',
+  'ὓ' => 'ὓ',
+  'ὔ' => 'ὔ',
+  'ὕ' => 'ὕ',
+  'ὖ' => 'ὖ',
+  'ὗ' => 'ὗ',
+  'Ὑ' => 'Ὑ',
+  'Ὓ' => 'Ὓ',
+  'Ὕ' => 'Ὕ',
+  'Ὗ' => 'Ὗ',
+  'ὠ' => 'ὠ',
+  'ὡ' => 'ὡ',
+  'ὢ' => 'ὢ',
+  'ὣ' => 'ὣ',
+  'ὤ' => 'ὤ',
+  'ὥ' => 'ὥ',
+  'ὦ' => 'ὦ',
+  'ὧ' => 'ὧ',
+  'Ὠ' => 'Ὠ',
+  'Ὡ' => 'Ὡ',
+  'Ὢ' => 'Ὢ',
+  'Ὣ' => 'Ὣ',
+  'Ὤ' => 'Ὤ',
+  'Ὥ' => 'Ὥ',
+  'Ὦ' => 'Ὦ',
+  'Ὧ' => 'Ὧ',
+  'ὰ' => 'ὰ',
+  'ὲ' => 'ὲ',
+  'ὴ' => 'ὴ',
+  'ὶ' => 'ὶ',
+  'ὸ' => 'ὸ',
+  'ὺ' => 'ὺ',
+  'ὼ' => 'ὼ',
+  'ᾀ' => 'ᾀ',
+  'ᾁ' => 'ᾁ',
+  'ᾂ' => 'ᾂ',
+  'ᾃ' => 'ᾃ',
+  'ᾄ' => 'ᾄ',
+  'ᾅ' => 'ᾅ',
+  'ᾆ' => 'ᾆ',
+  'ᾇ' => 'ᾇ',
+  'ᾈ' => 'ᾈ',
+  'ᾉ' => 'ᾉ',
+  'ᾊ' => 'ᾊ',
+  'ᾋ' => 'ᾋ',
+  'ᾌ' => 'ᾌ',
+  'ᾍ' => 'ᾍ',
+  'ᾎ' => 'ᾎ',
+  'ᾏ' => 'ᾏ',
+  'ᾐ' => 'ᾐ',
+  'ᾑ' => 'ᾑ',
+  'ᾒ' => 'ᾒ',
+  'ᾓ' => 'ᾓ',
+  'ᾔ' => 'ᾔ',
+  'ᾕ' => 'ᾕ',
+  'ᾖ' => 'ᾖ',
+  'ᾗ' => 'ᾗ',
+  'ᾘ' => 'ᾘ',
+  'ᾙ' => 'ᾙ',
+  'ᾚ' => 'ᾚ',
+  'ᾛ' => 'ᾛ',
+  'ᾜ' => 'ᾜ',
+  'ᾝ' => 'ᾝ',
+  'ᾞ' => 'ᾞ',
+  'ᾟ' => 'ᾟ',
+  'ᾠ' => 'ᾠ',
+  'ᾡ' => 'ᾡ',
+  'ᾢ' => 'ᾢ',
+  'ᾣ' => 'ᾣ',
+  'ᾤ' => 'ᾤ',
+  'ᾥ' => 'ᾥ',
+  'ᾦ' => 'ᾦ',
+  'ᾧ' => 'ᾧ',
+  'ᾨ' => 'ᾨ',
+  'ᾩ' => 'ᾩ',
+  'ᾪ' => 'ᾪ',
+  'ᾫ' => 'ᾫ',
+  'ᾬ' => 'ᾬ',
+  'ᾭ' => 'ᾭ',
+  'ᾮ' => 'ᾮ',
+  'ᾯ' => 'ᾯ',
+  'ᾰ' => 'ᾰ',
+  'ᾱ' => 'ᾱ',
+  'ᾲ' => 'ᾲ',
+  'ᾳ' => 'ᾳ',
+  'ᾴ' => 'ᾴ',
+  'ᾶ' => 'ᾶ',
+  'ᾷ' => 'ᾷ',
+  'Ᾰ' => 'Ᾰ',
+  'Ᾱ' => 'Ᾱ',
+  'Ὰ' => 'Ὰ',
+  'ᾼ' => 'ᾼ',
+  '῁' => '῁',
+  'ῂ' => 'ῂ',
+  'ῃ' => 'ῃ',
+  'ῄ' => 'ῄ',
+  'ῆ' => 'ῆ',
+  'ῇ' => 'ῇ',
+  'Ὲ' => 'Ὲ',
+  'Ὴ' => 'Ὴ',
+  'ῌ' => 'ῌ',
+  '῍' => '῍',
+  '῎' => '῎',
+  '῏' => '῏',
+  'ῐ' => 'ῐ',
+  'ῑ' => 'ῑ',
+  'ῒ' => 'ῒ',
+  'ῖ' => 'ῖ',
+  'ῗ' => 'ῗ',
+  'Ῐ' => 'Ῐ',
+  'Ῑ' => 'Ῑ',
+  'Ὶ' => 'Ὶ',
+  '῝' => '῝',
+  '῞' => '῞',
+  '῟' => '῟',
+  'ῠ' => 'ῠ',
+  'ῡ' => 'ῡ',
+  'ῢ' => 'ῢ',
+  'ῤ' => 'ῤ',
+  'ῥ' => 'ῥ',
+  'ῦ' => 'ῦ',
+  'ῧ' => 'ῧ',
+  'Ῠ' => 'Ῠ',
+  'Ῡ' => 'Ῡ',
+  'Ὺ' => 'Ὺ',
+  'Ῥ' => 'Ῥ',
+  '῭' => '῭',
+  'ῲ' => 'ῲ',
+  'ῳ' => 'ῳ',
+  'ῴ' => 'ῴ',
+  'ῶ' => 'ῶ',
+  'ῷ' => 'ῷ',
+  'Ὸ' => 'Ὸ',
+  'Ὼ' => 'Ὼ',
+  'ῼ' => 'ῼ',
+  '↚' => '↚',
+  '↛' => '↛',
+  '↮' => '↮',
+  '⇍' => '⇍',
+  '⇎' => '⇎',
+  '⇏' => '⇏',
+  '∄' => '∄',
+  '∉' => '∉',
+  '∌' => '∌',
+  '∤' => '∤',
+  '∦' => '∦',
+  '≁' => '≁',
+  '≄' => '≄',
+  '≇' => '≇',
+  '≉' => '≉',
+  '≠' => '≠',
+  '≢' => '≢',
+  '≭' => '≭',
+  '≮' => '≮',
+  '≯' => '≯',
+  '≰' => '≰',
+  '≱' => '≱',
+  '≴' => '≴',
+  '≵' => '≵',
+  '≸' => '≸',
+  '≹' => '≹',
+  '⊀' => '⊀',
+  '⊁' => '⊁',
+  '⊄' => '⊄',
+  '⊅' => '⊅',
+  '⊈' => '⊈',
+  '⊉' => '⊉',
+  '⊬' => '⊬',
+  '⊭' => '⊭',
+  '⊮' => '⊮',
+  '⊯' => '⊯',
+  '⋠' => '⋠',
+  '⋡' => '⋡',
+  '⋢' => '⋢',
+  '⋣' => '⋣',
+  '⋪' => '⋪',
+  '⋫' => '⋫',
+  '⋬' => '⋬',
+  '⋭' => '⋭',
+  'が' => 'が',
+  'ぎ' => 'ぎ',
+  'ぐ' => 'ぐ',
+  'げ' => 'げ',
+  'ご' => 'ご',
+  'ざ' => 'ざ',
+  'じ' => 'じ',
+  'ず' => 'ず',
+  'ぜ' => 'ぜ',
+  'ぞ' => 'ぞ',
+  'だ' => 'だ',
+  'ぢ' => 'ぢ',
+  'づ' => 'づ',
+  'で' => 'で',
+  'ど' => 'ど',
+  'ば' => 'ば',
+  'ぱ' => 'ぱ',
+  'び' => 'び',
+  'ぴ' => 'ぴ',
+  'ぶ' => 'ぶ',
+  'ぷ' => 'ぷ',
+  'べ' => 'べ',
+  'ぺ' => 'ぺ',
+  'ぼ' => 'ぼ',
+  'ぽ' => 'ぽ',
+  'ゔ' => 'ゔ',
+  'ゞ' => 'ゞ',
+  'ガ' => 'ガ',
+  'ギ' => 'ギ',
+  'グ' => 'グ',
+  'ゲ' => 'ゲ',
+  'ゴ' => 'ゴ',
+  'ザ' => 'ザ',
+  'ジ' => 'ジ',
+  'ズ' => 'ズ',
+  'ゼ' => 'ゼ',
+  'ゾ' => 'ゾ',
+  'ダ' => 'ダ',
+  'ヂ' => 'ヂ',
+  'ヅ' => 'ヅ',
+  'デ' => 'デ',
+  'ド' => 'ド',
+  'バ' => 'バ',
+  'パ' => 'パ',
+  'ビ' => 'ビ',
+  'ピ' => 'ピ',
+  'ブ' => 'ブ',
+  'プ' => 'プ',
+  'ベ' => 'ベ',
+  'ペ' => 'ペ',
+  'ボ' => 'ボ',
+  'ポ' => 'ポ',
+  'ヴ' => 'ヴ',
+  'ヷ' => 'ヷ',
+  'ヸ' => 'ヸ',
+  'ヹ' => 'ヹ',
+  'ヺ' => 'ヺ',
+  'ヾ' => 'ヾ',
+  '𑂚' => '𑂚',
+  '𑂜' => '𑂜',
+  '𑂫' => '𑂫',
+  '𑄮' => '𑄮',
+  '𑄯' => '𑄯',
+  '𑍋' => '𑍋',
+  '𑍌' => '𑍌',
+  '𑒻' => '𑒻',
+  '𑒼' => '𑒼',
+  '𑒾' => '𑒾',
+  '𑖺' => '𑖺',
+  '𑖻' => '𑖻',
+  '𑤸' => '𑤸',
+);
Index: vendor/symfony/polyfill-intl-normalizer/Resources/unidata/canonicalDecomposition.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/canonicalDecomposition.php b/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/canonicalDecomposition.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/canonicalDecomposition.php	(date 1725846310000)
@@ -0,0 +1,2065 @@
+<?php
+
+return array (
+  'À' => 'À',
+  'Á' => 'Á',
+  'Â' => 'Â',
+  'Ã' => 'Ã',
+  'Ä' => 'Ä',
+  'Å' => 'Å',
+  'Ç' => 'Ç',
+  'È' => 'È',
+  'É' => 'É',
+  'Ê' => 'Ê',
+  'Ë' => 'Ë',
+  'Ì' => 'Ì',
+  'Í' => 'Í',
+  'Î' => 'Î',
+  'Ï' => 'Ï',
+  'Ñ' => 'Ñ',
+  'Ò' => 'Ò',
+  'Ó' => 'Ó',
+  'Ô' => 'Ô',
+  'Õ' => 'Õ',
+  'Ö' => 'Ö',
+  'Ù' => 'Ù',
+  'Ú' => 'Ú',
+  'Û' => 'Û',
+  'Ü' => 'Ü',
+  'Ý' => 'Ý',
+  'à' => 'à',
+  'á' => 'á',
+  'â' => 'â',
+  'ã' => 'ã',
+  'ä' => 'ä',
+  'å' => 'å',
+  'ç' => 'ç',
+  'è' => 'è',
+  'é' => 'é',
+  'ê' => 'ê',
+  'ë' => 'ë',
+  'ì' => 'ì',
+  'í' => 'í',
+  'î' => 'î',
+  'ï' => 'ï',
+  'ñ' => 'ñ',
+  'ò' => 'ò',
+  'ó' => 'ó',
+  'ô' => 'ô',
+  'õ' => 'õ',
+  'ö' => 'ö',
+  'ù' => 'ù',
+  'ú' => 'ú',
+  'û' => 'û',
+  'ü' => 'ü',
+  'ý' => 'ý',
+  'ÿ' => 'ÿ',
+  'Ā' => 'Ā',
+  'ā' => 'ā',
+  'Ă' => 'Ă',
+  'ă' => 'ă',
+  'Ą' => 'Ą',
+  'ą' => 'ą',
+  'Ć' => 'Ć',
+  'ć' => 'ć',
+  'Ĉ' => 'Ĉ',
+  'ĉ' => 'ĉ',
+  'Ċ' => 'Ċ',
+  'ċ' => 'ċ',
+  'Č' => 'Č',
+  'č' => 'č',
+  'Ď' => 'Ď',
+  'ď' => 'ď',
+  'Ē' => 'Ē',
+  'ē' => 'ē',
+  'Ĕ' => 'Ĕ',
+  'ĕ' => 'ĕ',
+  'Ė' => 'Ė',
+  'ė' => 'ė',
+  'Ę' => 'Ę',
+  'ę' => 'ę',
+  'Ě' => 'Ě',
+  'ě' => 'ě',
+  'Ĝ' => 'Ĝ',
+  'ĝ' => 'ĝ',
+  'Ğ' => 'Ğ',
+  'ğ' => 'ğ',
+  'Ġ' => 'Ġ',
+  'ġ' => 'ġ',
+  'Ģ' => 'Ģ',
+  'ģ' => 'ģ',
+  'Ĥ' => 'Ĥ',
+  'ĥ' => 'ĥ',
+  'Ĩ' => 'Ĩ',
+  'ĩ' => 'ĩ',
+  'Ī' => 'Ī',
+  'ī' => 'ī',
+  'Ĭ' => 'Ĭ',
+  'ĭ' => 'ĭ',
+  'Į' => 'Į',
+  'į' => 'į',
+  'İ' => 'İ',
+  'Ĵ' => 'Ĵ',
+  'ĵ' => 'ĵ',
+  'Ķ' => 'Ķ',
+  'ķ' => 'ķ',
+  'Ĺ' => 'Ĺ',
+  'ĺ' => 'ĺ',
+  'Ļ' => 'Ļ',
+  'ļ' => 'ļ',
+  'Ľ' => 'Ľ',
+  'ľ' => 'ľ',
+  'Ń' => 'Ń',
+  'ń' => 'ń',
+  'Ņ' => 'Ņ',
+  'ņ' => 'ņ',
+  'Ň' => 'Ň',
+  'ň' => 'ň',
+  'Ō' => 'Ō',
+  'ō' => 'ō',
+  'Ŏ' => 'Ŏ',
+  'ŏ' => 'ŏ',
+  'Ő' => 'Ő',
+  'ő' => 'ő',
+  'Ŕ' => 'Ŕ',
+  'ŕ' => 'ŕ',
+  'Ŗ' => 'Ŗ',
+  'ŗ' => 'ŗ',
+  'Ř' => 'Ř',
+  'ř' => 'ř',
+  'Ś' => 'Ś',
+  'ś' => 'ś',
+  'Ŝ' => 'Ŝ',
+  'ŝ' => 'ŝ',
+  'Ş' => 'Ş',
+  'ş' => 'ş',
+  'Š' => 'Š',
+  'š' => 'š',
+  'Ţ' => 'Ţ',
+  'ţ' => 'ţ',
+  'Ť' => 'Ť',
+  'ť' => 'ť',
+  'Ũ' => 'Ũ',
+  'ũ' => 'ũ',
+  'Ū' => 'Ū',
+  'ū' => 'ū',
+  'Ŭ' => 'Ŭ',
+  'ŭ' => 'ŭ',
+  'Ů' => 'Ů',
+  'ů' => 'ů',
+  'Ű' => 'Ű',
+  'ű' => 'ű',
+  'Ų' => 'Ų',
+  'ų' => 'ų',
+  'Ŵ' => 'Ŵ',
+  'ŵ' => 'ŵ',
+  'Ŷ' => 'Ŷ',
+  'ŷ' => 'ŷ',
+  'Ÿ' => 'Ÿ',
+  'Ź' => 'Ź',
+  'ź' => 'ź',
+  'Ż' => 'Ż',
+  'ż' => 'ż',
+  'Ž' => 'Ž',
+  'ž' => 'ž',
+  'Ơ' => 'Ơ',
+  'ơ' => 'ơ',
+  'Ư' => 'Ư',
+  'ư' => 'ư',
+  'Ǎ' => 'Ǎ',
+  'ǎ' => 'ǎ',
+  'Ǐ' => 'Ǐ',
+  'ǐ' => 'ǐ',
+  'Ǒ' => 'Ǒ',
+  'ǒ' => 'ǒ',
+  'Ǔ' => 'Ǔ',
+  'ǔ' => 'ǔ',
+  'Ǖ' => 'Ǖ',
+  'ǖ' => 'ǖ',
+  'Ǘ' => 'Ǘ',
+  'ǘ' => 'ǘ',
+  'Ǚ' => 'Ǚ',
+  'ǚ' => 'ǚ',
+  'Ǜ' => 'Ǜ',
+  'ǜ' => 'ǜ',
+  'Ǟ' => 'Ǟ',
+  'ǟ' => 'ǟ',
+  'Ǡ' => 'Ǡ',
+  'ǡ' => 'ǡ',
+  'Ǣ' => 'Ǣ',
+  'ǣ' => 'ǣ',
+  'Ǧ' => 'Ǧ',
+  'ǧ' => 'ǧ',
+  'Ǩ' => 'Ǩ',
+  'ǩ' => 'ǩ',
+  'Ǫ' => 'Ǫ',
+  'ǫ' => 'ǫ',
+  'Ǭ' => 'Ǭ',
+  'ǭ' => 'ǭ',
+  'Ǯ' => 'Ǯ',
+  'ǯ' => 'ǯ',
+  'ǰ' => 'ǰ',
+  'Ǵ' => 'Ǵ',
+  'ǵ' => 'ǵ',
+  'Ǹ' => 'Ǹ',
+  'ǹ' => 'ǹ',
+  'Ǻ' => 'Ǻ',
+  'ǻ' => 'ǻ',
+  'Ǽ' => 'Ǽ',
+  'ǽ' => 'ǽ',
+  'Ǿ' => 'Ǿ',
+  'ǿ' => 'ǿ',
+  'Ȁ' => 'Ȁ',
+  'ȁ' => 'ȁ',
+  'Ȃ' => 'Ȃ',
+  'ȃ' => 'ȃ',
+  'Ȅ' => 'Ȅ',
+  'ȅ' => 'ȅ',
+  'Ȇ' => 'Ȇ',
+  'ȇ' => 'ȇ',
+  'Ȉ' => 'Ȉ',
+  'ȉ' => 'ȉ',
+  'Ȋ' => 'Ȋ',
+  'ȋ' => 'ȋ',
+  'Ȍ' => 'Ȍ',
+  'ȍ' => 'ȍ',
+  'Ȏ' => 'Ȏ',
+  'ȏ' => 'ȏ',
+  'Ȑ' => 'Ȑ',
+  'ȑ' => 'ȑ',
+  'Ȓ' => 'Ȓ',
+  'ȓ' => 'ȓ',
+  'Ȕ' => 'Ȕ',
+  'ȕ' => 'ȕ',
+  'Ȗ' => 'Ȗ',
+  'ȗ' => 'ȗ',
+  'Ș' => 'Ș',
+  'ș' => 'ș',
+  'Ț' => 'Ț',
+  'ț' => 'ț',
+  'Ȟ' => 'Ȟ',
+  'ȟ' => 'ȟ',
+  'Ȧ' => 'Ȧ',
+  'ȧ' => 'ȧ',
+  'Ȩ' => 'Ȩ',
+  'ȩ' => 'ȩ',
+  'Ȫ' => 'Ȫ',
+  'ȫ' => 'ȫ',
+  'Ȭ' => 'Ȭ',
+  'ȭ' => 'ȭ',
+  'Ȯ' => 'Ȯ',
+  'ȯ' => 'ȯ',
+  'Ȱ' => 'Ȱ',
+  'ȱ' => 'ȱ',
+  'Ȳ' => 'Ȳ',
+  'ȳ' => 'ȳ',
+  '̀' => '̀',
+  '́' => '́',
+  '̓' => '̓',
+  '̈́' => '̈́',
+  'ʹ' => 'ʹ',
+  ';' => ';',
+  '΅' => '΅',
+  'Ά' => 'Ά',
+  '·' => '·',
+  'Έ' => 'Έ',
+  'Ή' => 'Ή',
+  'Ί' => 'Ί',
+  'Ό' => 'Ό',
+  'Ύ' => 'Ύ',
+  'Ώ' => 'Ώ',
+  'ΐ' => 'ΐ',
+  'Ϊ' => 'Ϊ',
+  'Ϋ' => 'Ϋ',
+  'ά' => 'ά',
+  'έ' => 'έ',
+  'ή' => 'ή',
+  'ί' => 'ί',
+  'ΰ' => 'ΰ',
+  'ϊ' => 'ϊ',
+  'ϋ' => 'ϋ',
+  'ό' => 'ό',
+  'ύ' => 'ύ',
+  'ώ' => 'ώ',
+  'ϓ' => 'ϓ',
+  'ϔ' => 'ϔ',
+  'Ѐ' => 'Ѐ',
+  'Ё' => 'Ё',
+  'Ѓ' => 'Ѓ',
+  'Ї' => 'Ї',
+  'Ќ' => 'Ќ',
+  'Ѝ' => 'Ѝ',
+  'Ў' => 'Ў',
+  'Й' => 'Й',
+  'й' => 'й',
+  'ѐ' => 'ѐ',
+  'ё' => 'ё',
+  'ѓ' => 'ѓ',
+  'ї' => 'ї',
+  'ќ' => 'ќ',
+  'ѝ' => 'ѝ',
+  'ў' => 'ў',
+  'Ѷ' => 'Ѷ',
+  'ѷ' => 'ѷ',
+  'Ӂ' => 'Ӂ',
+  'ӂ' => 'ӂ',
+  'Ӑ' => 'Ӑ',
+  'ӑ' => 'ӑ',
+  'Ӓ' => 'Ӓ',
+  'ӓ' => 'ӓ',
+  'Ӗ' => 'Ӗ',
+  'ӗ' => 'ӗ',
+  'Ӛ' => 'Ӛ',
+  'ӛ' => 'ӛ',
+  'Ӝ' => 'Ӝ',
+  'ӝ' => 'ӝ',
+  'Ӟ' => 'Ӟ',
+  'ӟ' => 'ӟ',
+  'Ӣ' => 'Ӣ',
+  'ӣ' => 'ӣ',
+  'Ӥ' => 'Ӥ',
+  'ӥ' => 'ӥ',
+  'Ӧ' => 'Ӧ',
+  'ӧ' => 'ӧ',
+  'Ӫ' => 'Ӫ',
+  'ӫ' => 'ӫ',
+  'Ӭ' => 'Ӭ',
+  'ӭ' => 'ӭ',
+  'Ӯ' => 'Ӯ',
+  'ӯ' => 'ӯ',
+  'Ӱ' => 'Ӱ',
+  'ӱ' => 'ӱ',
+  'Ӳ' => 'Ӳ',
+  'ӳ' => 'ӳ',
+  'Ӵ' => 'Ӵ',
+  'ӵ' => 'ӵ',
+  'Ӹ' => 'Ӹ',
+  'ӹ' => 'ӹ',
+  'آ' => 'آ',
+  'أ' => 'أ',
+  'ؤ' => 'ؤ',
+  'إ' => 'إ',
+  'ئ' => 'ئ',
+  'ۀ' => 'ۀ',
+  'ۂ' => 'ۂ',
+  'ۓ' => 'ۓ',
+  'ऩ' => 'ऩ',
+  'ऱ' => 'ऱ',
+  'ऴ' => 'ऴ',
+  'क़' => 'क़',
+  'ख़' => 'ख़',
+  'ग़' => 'ग़',
+  'ज़' => 'ज़',
+  'ड़' => 'ड़',
+  'ढ़' => 'ढ़',
+  'फ़' => 'फ़',
+  'य़' => 'य़',
+  'ো' => 'ো',
+  'ৌ' => 'ৌ',
+  'ড়' => 'ড়',
+  'ঢ়' => 'ঢ়',
+  'য়' => 'য়',
+  'ਲ਼' => 'ਲ਼',
+  'ਸ਼' => 'ਸ਼',
+  'ਖ਼' => 'ਖ਼',
+  'ਗ਼' => 'ਗ਼',
+  'ਜ਼' => 'ਜ਼',
+  'ਫ਼' => 'ਫ਼',
+  'ୈ' => 'ୈ',
+  'ୋ' => 'ୋ',
+  'ୌ' => 'ୌ',
+  'ଡ଼' => 'ଡ଼',
+  'ଢ଼' => 'ଢ଼',
+  'ஔ' => 'ஔ',
+  'ொ' => 'ொ',
+  'ோ' => 'ோ',
+  'ௌ' => 'ௌ',
+  'ై' => 'ై',
+  'ೀ' => 'ೀ',
+  'ೇ' => 'ೇ',
+  'ೈ' => 'ೈ',
+  'ೊ' => 'ೊ',
+  'ೋ' => 'ೋ',
+  'ൊ' => 'ൊ',
+  'ോ' => 'ോ',
+  'ൌ' => 'ൌ',
+  'ේ' => 'ේ',
+  'ො' => 'ො',
+  'ෝ' => 'ෝ',
+  'ෞ' => 'ෞ',
+  'གྷ' => 'གྷ',
+  'ཌྷ' => 'ཌྷ',
+  'དྷ' => 'དྷ',
+  'བྷ' => 'བྷ',
+  'ཛྷ' => 'ཛྷ',
+  'ཀྵ' => 'ཀྵ',
+  'ཱི' => 'ཱི',
+  'ཱུ' => 'ཱུ',
+  'ྲྀ' => 'ྲྀ',
+  'ླྀ' => 'ླྀ',
+  'ཱྀ' => 'ཱྀ',
+  'ྒྷ' => 'ྒྷ',
+  'ྜྷ' => 'ྜྷ',
+  'ྡྷ' => 'ྡྷ',
+  'ྦྷ' => 'ྦྷ',
+  'ྫྷ' => 'ྫྷ',
+  'ྐྵ' => 'ྐྵ',
+  'ဦ' => 'ဦ',
+  'ᬆ' => 'ᬆ',
+  'ᬈ' => 'ᬈ',
+  'ᬊ' => 'ᬊ',
+  'ᬌ' => 'ᬌ',
+  'ᬎ' => 'ᬎ',
+  'ᬒ' => 'ᬒ',
+  'ᬻ' => 'ᬻ',
+  'ᬽ' => 'ᬽ',
+  'ᭀ' => 'ᭀ',
+  'ᭁ' => 'ᭁ',
+  'ᭃ' => 'ᭃ',
+  'Ḁ' => 'Ḁ',
+  'ḁ' => 'ḁ',
+  'Ḃ' => 'Ḃ',
+  'ḃ' => 'ḃ',
+  'Ḅ' => 'Ḅ',
+  'ḅ' => 'ḅ',
+  'Ḇ' => 'Ḇ',
+  'ḇ' => 'ḇ',
+  'Ḉ' => 'Ḉ',
+  'ḉ' => 'ḉ',
+  'Ḋ' => 'Ḋ',
+  'ḋ' => 'ḋ',
+  'Ḍ' => 'Ḍ',
+  'ḍ' => 'ḍ',
+  'Ḏ' => 'Ḏ',
+  'ḏ' => 'ḏ',
+  'Ḑ' => 'Ḑ',
+  'ḑ' => 'ḑ',
+  'Ḓ' => 'Ḓ',
+  'ḓ' => 'ḓ',
+  'Ḕ' => 'Ḕ',
+  'ḕ' => 'ḕ',
+  'Ḗ' => 'Ḗ',
+  'ḗ' => 'ḗ',
+  'Ḙ' => 'Ḙ',
+  'ḙ' => 'ḙ',
+  'Ḛ' => 'Ḛ',
+  'ḛ' => 'ḛ',
+  'Ḝ' => 'Ḝ',
+  'ḝ' => 'ḝ',
+  'Ḟ' => 'Ḟ',
+  'ḟ' => 'ḟ',
+  'Ḡ' => 'Ḡ',
+  'ḡ' => 'ḡ',
+  'Ḣ' => 'Ḣ',
+  'ḣ' => 'ḣ',
+  'Ḥ' => 'Ḥ',
+  'ḥ' => 'ḥ',
+  'Ḧ' => 'Ḧ',
+  'ḧ' => 'ḧ',
+  'Ḩ' => 'Ḩ',
+  'ḩ' => 'ḩ',
+  'Ḫ' => 'Ḫ',
+  'ḫ' => 'ḫ',
+  'Ḭ' => 'Ḭ',
+  'ḭ' => 'ḭ',
+  'Ḯ' => 'Ḯ',
+  'ḯ' => 'ḯ',
+  'Ḱ' => 'Ḱ',
+  'ḱ' => 'ḱ',
+  'Ḳ' => 'Ḳ',
+  'ḳ' => 'ḳ',
+  'Ḵ' => 'Ḵ',
+  'ḵ' => 'ḵ',
+  'Ḷ' => 'Ḷ',
+  'ḷ' => 'ḷ',
+  'Ḹ' => 'Ḹ',
+  'ḹ' => 'ḹ',
+  'Ḻ' => 'Ḻ',
+  'ḻ' => 'ḻ',
+  'Ḽ' => 'Ḽ',
+  'ḽ' => 'ḽ',
+  'Ḿ' => 'Ḿ',
+  'ḿ' => 'ḿ',
+  'Ṁ' => 'Ṁ',
+  'ṁ' => 'ṁ',
+  'Ṃ' => 'Ṃ',
+  'ṃ' => 'ṃ',
+  'Ṅ' => 'Ṅ',
+  'ṅ' => 'ṅ',
+  'Ṇ' => 'Ṇ',
+  'ṇ' => 'ṇ',
+  'Ṉ' => 'Ṉ',
+  'ṉ' => 'ṉ',
+  'Ṋ' => 'Ṋ',
+  'ṋ' => 'ṋ',
+  'Ṍ' => 'Ṍ',
+  'ṍ' => 'ṍ',
+  'Ṏ' => 'Ṏ',
+  'ṏ' => 'ṏ',
+  'Ṑ' => 'Ṑ',
+  'ṑ' => 'ṑ',
+  'Ṓ' => 'Ṓ',
+  'ṓ' => 'ṓ',
+  'Ṕ' => 'Ṕ',
+  'ṕ' => 'ṕ',
+  'Ṗ' => 'Ṗ',
+  'ṗ' => 'ṗ',
+  'Ṙ' => 'Ṙ',
+  'ṙ' => 'ṙ',
+  'Ṛ' => 'Ṛ',
+  'ṛ' => 'ṛ',
+  'Ṝ' => 'Ṝ',
+  'ṝ' => 'ṝ',
+  'Ṟ' => 'Ṟ',
+  'ṟ' => 'ṟ',
+  'Ṡ' => 'Ṡ',
+  'ṡ' => 'ṡ',
+  'Ṣ' => 'Ṣ',
+  'ṣ' => 'ṣ',
+  'Ṥ' => 'Ṥ',
+  'ṥ' => 'ṥ',
+  'Ṧ' => 'Ṧ',
+  'ṧ' => 'ṧ',
+  'Ṩ' => 'Ṩ',
+  'ṩ' => 'ṩ',
+  'Ṫ' => 'Ṫ',
+  'ṫ' => 'ṫ',
+  'Ṭ' => 'Ṭ',
+  'ṭ' => 'ṭ',
+  'Ṯ' => 'Ṯ',
+  'ṯ' => 'ṯ',
+  'Ṱ' => 'Ṱ',
+  'ṱ' => 'ṱ',
+  'Ṳ' => 'Ṳ',
+  'ṳ' => 'ṳ',
+  'Ṵ' => 'Ṵ',
+  'ṵ' => 'ṵ',
+  'Ṷ' => 'Ṷ',
+  'ṷ' => 'ṷ',
+  'Ṹ' => 'Ṹ',
+  'ṹ' => 'ṹ',
+  'Ṻ' => 'Ṻ',
+  'ṻ' => 'ṻ',
+  'Ṽ' => 'Ṽ',
+  'ṽ' => 'ṽ',
+  'Ṿ' => 'Ṿ',
+  'ṿ' => 'ṿ',
+  'Ẁ' => 'Ẁ',
+  'ẁ' => 'ẁ',
+  'Ẃ' => 'Ẃ',
+  'ẃ' => 'ẃ',
+  'Ẅ' => 'Ẅ',
+  'ẅ' => 'ẅ',
+  'Ẇ' => 'Ẇ',
+  'ẇ' => 'ẇ',
+  'Ẉ' => 'Ẉ',
+  'ẉ' => 'ẉ',
+  'Ẋ' => 'Ẋ',
+  'ẋ' => 'ẋ',
+  'Ẍ' => 'Ẍ',
+  'ẍ' => 'ẍ',
+  'Ẏ' => 'Ẏ',
+  'ẏ' => 'ẏ',
+  'Ẑ' => 'Ẑ',
+  'ẑ' => 'ẑ',
+  'Ẓ' => 'Ẓ',
+  'ẓ' => 'ẓ',
+  'Ẕ' => 'Ẕ',
+  'ẕ' => 'ẕ',
+  'ẖ' => 'ẖ',
+  'ẗ' => 'ẗ',
+  'ẘ' => 'ẘ',
+  'ẙ' => 'ẙ',
+  'ẛ' => 'ẛ',
+  'Ạ' => 'Ạ',
+  'ạ' => 'ạ',
+  'Ả' => 'Ả',
+  'ả' => 'ả',
+  'Ấ' => 'Ấ',
+  'ấ' => 'ấ',
+  'Ầ' => 'Ầ',
+  'ầ' => 'ầ',
+  'Ẩ' => 'Ẩ',
+  'ẩ' => 'ẩ',
+  'Ẫ' => 'Ẫ',
+  'ẫ' => 'ẫ',
+  'Ậ' => 'Ậ',
+  'ậ' => 'ậ',
+  'Ắ' => 'Ắ',
+  'ắ' => 'ắ',
+  'Ằ' => 'Ằ',
+  'ằ' => 'ằ',
+  'Ẳ' => 'Ẳ',
+  'ẳ' => 'ẳ',
+  'Ẵ' => 'Ẵ',
+  'ẵ' => 'ẵ',
+  'Ặ' => 'Ặ',
+  'ặ' => 'ặ',
+  'Ẹ' => 'Ẹ',
+  'ẹ' => 'ẹ',
+  'Ẻ' => 'Ẻ',
+  'ẻ' => 'ẻ',
+  'Ẽ' => 'Ẽ',
+  'ẽ' => 'ẽ',
+  'Ế' => 'Ế',
+  'ế' => 'ế',
+  'Ề' => 'Ề',
+  'ề' => 'ề',
+  'Ể' => 'Ể',
+  'ể' => 'ể',
+  'Ễ' => 'Ễ',
+  'ễ' => 'ễ',
+  'Ệ' => 'Ệ',
+  'ệ' => 'ệ',
+  'Ỉ' => 'Ỉ',
+  'ỉ' => 'ỉ',
+  'Ị' => 'Ị',
+  'ị' => 'ị',
+  'Ọ' => 'Ọ',
+  'ọ' => 'ọ',
+  'Ỏ' => 'Ỏ',
+  'ỏ' => 'ỏ',
+  'Ố' => 'Ố',
+  'ố' => 'ố',
+  'Ồ' => 'Ồ',
+  'ồ' => 'ồ',
+  'Ổ' => 'Ổ',
+  'ổ' => 'ổ',
+  'Ỗ' => 'Ỗ',
+  'ỗ' => 'ỗ',
+  'Ộ' => 'Ộ',
+  'ộ' => 'ộ',
+  'Ớ' => 'Ớ',
+  'ớ' => 'ớ',
+  'Ờ' => 'Ờ',
+  'ờ' => 'ờ',
+  'Ở' => 'Ở',
+  'ở' => 'ở',
+  'Ỡ' => 'Ỡ',
+  'ỡ' => 'ỡ',
+  'Ợ' => 'Ợ',
+  'ợ' => 'ợ',
+  'Ụ' => 'Ụ',
+  'ụ' => 'ụ',
+  'Ủ' => 'Ủ',
+  'ủ' => 'ủ',
+  'Ứ' => 'Ứ',
+  'ứ' => 'ứ',
+  'Ừ' => 'Ừ',
+  'ừ' => 'ừ',
+  'Ử' => 'Ử',
+  'ử' => 'ử',
+  'Ữ' => 'Ữ',
+  'ữ' => 'ữ',
+  'Ự' => 'Ự',
+  'ự' => 'ự',
+  'Ỳ' => 'Ỳ',
+  'ỳ' => 'ỳ',
+  'Ỵ' => 'Ỵ',
+  'ỵ' => 'ỵ',
+  'Ỷ' => 'Ỷ',
+  'ỷ' => 'ỷ',
+  'Ỹ' => 'Ỹ',
+  'ỹ' => 'ỹ',
+  'ἀ' => 'ἀ',
+  'ἁ' => 'ἁ',
+  'ἂ' => 'ἂ',
+  'ἃ' => 'ἃ',
+  'ἄ' => 'ἄ',
+  'ἅ' => 'ἅ',
+  'ἆ' => 'ἆ',
+  'ἇ' => 'ἇ',
+  'Ἀ' => 'Ἀ',
+  'Ἁ' => 'Ἁ',
+  'Ἂ' => 'Ἂ',
+  'Ἃ' => 'Ἃ',
+  'Ἄ' => 'Ἄ',
+  'Ἅ' => 'Ἅ',
+  'Ἆ' => 'Ἆ',
+  'Ἇ' => 'Ἇ',
+  'ἐ' => 'ἐ',
+  'ἑ' => 'ἑ',
+  'ἒ' => 'ἒ',
+  'ἓ' => 'ἓ',
+  'ἔ' => 'ἔ',
+  'ἕ' => 'ἕ',
+  'Ἐ' => 'Ἐ',
+  'Ἑ' => 'Ἑ',
+  'Ἒ' => 'Ἒ',
+  'Ἓ' => 'Ἓ',
+  'Ἔ' => 'Ἔ',
+  'Ἕ' => 'Ἕ',
+  'ἠ' => 'ἠ',
+  'ἡ' => 'ἡ',
+  'ἢ' => 'ἢ',
+  'ἣ' => 'ἣ',
+  'ἤ' => 'ἤ',
+  'ἥ' => 'ἥ',
+  'ἦ' => 'ἦ',
+  'ἧ' => 'ἧ',
+  'Ἠ' => 'Ἠ',
+  'Ἡ' => 'Ἡ',
+  'Ἢ' => 'Ἢ',
+  'Ἣ' => 'Ἣ',
+  'Ἤ' => 'Ἤ',
+  'Ἥ' => 'Ἥ',
+  'Ἦ' => 'Ἦ',
+  'Ἧ' => 'Ἧ',
+  'ἰ' => 'ἰ',
+  'ἱ' => 'ἱ',
+  'ἲ' => 'ἲ',
+  'ἳ' => 'ἳ',
+  'ἴ' => 'ἴ',
+  'ἵ' => 'ἵ',
+  'ἶ' => 'ἶ',
+  'ἷ' => 'ἷ',
+  'Ἰ' => 'Ἰ',
+  'Ἱ' => 'Ἱ',
+  'Ἲ' => 'Ἲ',
+  'Ἳ' => 'Ἳ',
+  'Ἴ' => 'Ἴ',
+  'Ἵ' => 'Ἵ',
+  'Ἶ' => 'Ἶ',
+  'Ἷ' => 'Ἷ',
+  'ὀ' => 'ὀ',
+  'ὁ' => 'ὁ',
+  'ὂ' => 'ὂ',
+  'ὃ' => 'ὃ',
+  'ὄ' => 'ὄ',
+  'ὅ' => 'ὅ',
+  'Ὀ' => 'Ὀ',
+  'Ὁ' => 'Ὁ',
+  'Ὂ' => 'Ὂ',
+  'Ὃ' => 'Ὃ',
+  'Ὄ' => 'Ὄ',
+  'Ὅ' => 'Ὅ',
+  'ὐ' => 'ὐ',
+  'ὑ' => 'ὑ',
+  'ὒ' => 'ὒ',
+  'ὓ' => 'ὓ',
+  'ὔ' => 'ὔ',
+  'ὕ' => 'ὕ',
+  'ὖ' => 'ὖ',
+  'ὗ' => 'ὗ',
+  'Ὑ' => 'Ὑ',
+  'Ὓ' => 'Ὓ',
+  'Ὕ' => 'Ὕ',
+  'Ὗ' => 'Ὗ',
+  'ὠ' => 'ὠ',
+  'ὡ' => 'ὡ',
+  'ὢ' => 'ὢ',
+  'ὣ' => 'ὣ',
+  'ὤ' => 'ὤ',
+  'ὥ' => 'ὥ',
+  'ὦ' => 'ὦ',
+  'ὧ' => 'ὧ',
+  'Ὠ' => 'Ὠ',
+  'Ὡ' => 'Ὡ',
+  'Ὢ' => 'Ὢ',
+  'Ὣ' => 'Ὣ',
+  'Ὤ' => 'Ὤ',
+  'Ὥ' => 'Ὥ',
+  'Ὦ' => 'Ὦ',
+  'Ὧ' => 'Ὧ',
+  'ὰ' => 'ὰ',
+  'ά' => 'ά',
+  'ὲ' => 'ὲ',
+  'έ' => 'έ',
+  'ὴ' => 'ὴ',
+  'ή' => 'ή',
+  'ὶ' => 'ὶ',
+  'ί' => 'ί',
+  'ὸ' => 'ὸ',
+  'ό' => 'ό',
+  'ὺ' => 'ὺ',
+  'ύ' => 'ύ',
+  'ὼ' => 'ὼ',
+  'ώ' => 'ώ',
+  'ᾀ' => 'ᾀ',
+  'ᾁ' => 'ᾁ',
+  'ᾂ' => 'ᾂ',
+  'ᾃ' => 'ᾃ',
+  'ᾄ' => 'ᾄ',
+  'ᾅ' => 'ᾅ',
+  'ᾆ' => 'ᾆ',
+  'ᾇ' => 'ᾇ',
+  'ᾈ' => 'ᾈ',
+  'ᾉ' => 'ᾉ',
+  'ᾊ' => 'ᾊ',
+  'ᾋ' => 'ᾋ',
+  'ᾌ' => 'ᾌ',
+  'ᾍ' => 'ᾍ',
+  'ᾎ' => 'ᾎ',
+  'ᾏ' => 'ᾏ',
+  'ᾐ' => 'ᾐ',
+  'ᾑ' => 'ᾑ',
+  'ᾒ' => 'ᾒ',
+  'ᾓ' => 'ᾓ',
+  'ᾔ' => 'ᾔ',
+  'ᾕ' => 'ᾕ',
+  'ᾖ' => 'ᾖ',
+  'ᾗ' => 'ᾗ',
+  'ᾘ' => 'ᾘ',
+  'ᾙ' => 'ᾙ',
+  'ᾚ' => 'ᾚ',
+  'ᾛ' => 'ᾛ',
+  'ᾜ' => 'ᾜ',
+  'ᾝ' => 'ᾝ',
+  'ᾞ' => 'ᾞ',
+  'ᾟ' => 'ᾟ',
+  'ᾠ' => 'ᾠ',
+  'ᾡ' => 'ᾡ',
+  'ᾢ' => 'ᾢ',
+  'ᾣ' => 'ᾣ',
+  'ᾤ' => 'ᾤ',
+  'ᾥ' => 'ᾥ',
+  'ᾦ' => 'ᾦ',
+  'ᾧ' => 'ᾧ',
+  'ᾨ' => 'ᾨ',
+  'ᾩ' => 'ᾩ',
+  'ᾪ' => 'ᾪ',
+  'ᾫ' => 'ᾫ',
+  'ᾬ' => 'ᾬ',
+  'ᾭ' => 'ᾭ',
+  'ᾮ' => 'ᾮ',
+  'ᾯ' => 'ᾯ',
+  'ᾰ' => 'ᾰ',
+  'ᾱ' => 'ᾱ',
+  'ᾲ' => 'ᾲ',
+  'ᾳ' => 'ᾳ',
+  'ᾴ' => 'ᾴ',
+  'ᾶ' => 'ᾶ',
+  'ᾷ' => 'ᾷ',
+  'Ᾰ' => 'Ᾰ',
+  'Ᾱ' => 'Ᾱ',
+  'Ὰ' => 'Ὰ',
+  'Ά' => 'Ά',
+  'ᾼ' => 'ᾼ',
+  'ι' => 'ι',
+  '῁' => '῁',
+  'ῂ' => 'ῂ',
+  'ῃ' => 'ῃ',
+  'ῄ' => 'ῄ',
+  'ῆ' => 'ῆ',
+  'ῇ' => 'ῇ',
+  'Ὲ' => 'Ὲ',
+  'Έ' => 'Έ',
+  'Ὴ' => 'Ὴ',
+  'Ή' => 'Ή',
+  'ῌ' => 'ῌ',
+  '῍' => '῍',
+  '῎' => '῎',
+  '῏' => '῏',
+  'ῐ' => 'ῐ',
+  'ῑ' => 'ῑ',
+  'ῒ' => 'ῒ',
+  'ΐ' => 'ΐ',
+  'ῖ' => 'ῖ',
+  'ῗ' => 'ῗ',
+  'Ῐ' => 'Ῐ',
+  'Ῑ' => 'Ῑ',
+  'Ὶ' => 'Ὶ',
+  'Ί' => 'Ί',
+  '῝' => '῝',
+  '῞' => '῞',
+  '῟' => '῟',
+  'ῠ' => 'ῠ',
+  'ῡ' => 'ῡ',
+  'ῢ' => 'ῢ',
+  'ΰ' => 'ΰ',
+  'ῤ' => 'ῤ',
+  'ῥ' => 'ῥ',
+  'ῦ' => 'ῦ',
+  'ῧ' => 'ῧ',
+  'Ῠ' => 'Ῠ',
+  'Ῡ' => 'Ῡ',
+  'Ὺ' => 'Ὺ',
+  'Ύ' => 'Ύ',
+  'Ῥ' => 'Ῥ',
+  '῭' => '῭',
+  '΅' => '΅',
+  '`' => '`',
+  'ῲ' => 'ῲ',
+  'ῳ' => 'ῳ',
+  'ῴ' => 'ῴ',
+  'ῶ' => 'ῶ',
+  'ῷ' => 'ῷ',
+  'Ὸ' => 'Ὸ',
+  'Ό' => 'Ό',
+  'Ὼ' => 'Ὼ',
+  'Ώ' => 'Ώ',
+  'ῼ' => 'ῼ',
+  '´' => '´',
+  ' ' => ' ',
+  ' ' => ' ',
+  'Ω' => 'Ω',
+  'K' => 'K',
+  'Å' => 'Å',
+  '↚' => '↚',
+  '↛' => '↛',
+  '↮' => '↮',
+  '⇍' => '⇍',
+  '⇎' => '⇎',
+  '⇏' => '⇏',
+  '∄' => '∄',
+  '∉' => '∉',
+  '∌' => '∌',
+  '∤' => '∤',
+  '∦' => '∦',
+  '≁' => '≁',
+  '≄' => '≄',
+  '≇' => '≇',
+  '≉' => '≉',
+  '≠' => '≠',
+  '≢' => '≢',
+  '≭' => '≭',
+  '≮' => '≮',
+  '≯' => '≯',
+  '≰' => '≰',
+  '≱' => '≱',
+  '≴' => '≴',
+  '≵' => '≵',
+  '≸' => '≸',
+  '≹' => '≹',
+  '⊀' => '⊀',
+  '⊁' => '⊁',
+  '⊄' => '⊄',
+  '⊅' => '⊅',
+  '⊈' => '⊈',
+  '⊉' => '⊉',
+  '⊬' => '⊬',
+  '⊭' => '⊭',
+  '⊮' => '⊮',
+  '⊯' => '⊯',
+  '⋠' => '⋠',
+  '⋡' => '⋡',
+  '⋢' => '⋢',
+  '⋣' => '⋣',
+  '⋪' => '⋪',
+  '⋫' => '⋫',
+  '⋬' => '⋬',
+  '⋭' => '⋭',
+  '〈' => '〈',
+  '〉' => '〉',
+  '⫝̸' => '⫝̸',
+  'が' => 'が',
+  'ぎ' => 'ぎ',
+  'ぐ' => 'ぐ',
+  'げ' => 'げ',
+  'ご' => 'ご',
+  'ざ' => 'ざ',
+  'じ' => 'じ',
+  'ず' => 'ず',
+  'ぜ' => 'ぜ',
+  'ぞ' => 'ぞ',
+  'だ' => 'だ',
+  'ぢ' => 'ぢ',
+  'づ' => 'づ',
+  'で' => 'で',
+  'ど' => 'ど',
+  'ば' => 'ば',
+  'ぱ' => 'ぱ',
+  'び' => 'び',
+  'ぴ' => 'ぴ',
+  'ぶ' => 'ぶ',
+  'ぷ' => 'ぷ',
+  'べ' => 'べ',
+  'ぺ' => 'ぺ',
+  'ぼ' => 'ぼ',
+  'ぽ' => 'ぽ',
+  'ゔ' => 'ゔ',
+  'ゞ' => 'ゞ',
+  'ガ' => 'ガ',
+  'ギ' => 'ギ',
+  'グ' => 'グ',
+  'ゲ' => 'ゲ',
+  'ゴ' => 'ゴ',
+  'ザ' => 'ザ',
+  'ジ' => 'ジ',
+  'ズ' => 'ズ',
+  'ゼ' => 'ゼ',
+  'ゾ' => 'ゾ',
+  'ダ' => 'ダ',
+  'ヂ' => 'ヂ',
+  'ヅ' => 'ヅ',
+  'デ' => 'デ',
+  'ド' => 'ド',
+  'バ' => 'バ',
+  'パ' => 'パ',
+  'ビ' => 'ビ',
+  'ピ' => 'ピ',
+  'ブ' => 'ブ',
+  'プ' => 'プ',
+  'ベ' => 'ベ',
+  'ペ' => 'ペ',
+  'ボ' => 'ボ',
+  'ポ' => 'ポ',
+  'ヴ' => 'ヴ',
+  'ヷ' => 'ヷ',
+  'ヸ' => 'ヸ',
+  'ヹ' => 'ヹ',
+  'ヺ' => 'ヺ',
+  'ヾ' => 'ヾ',
+  '豈' => '豈',
+  '更' => '更',
+  '車' => '車',
+  '賈' => '賈',
+  '滑' => '滑',
+  '串' => '串',
+  '句' => '句',
+  '龜' => '龜',
+  '龜' => '龜',
+  '契' => '契',
+  '金' => '金',
+  '喇' => '喇',
+  '奈' => '奈',
+  '懶' => '懶',
+  '癩' => '癩',
+  '羅' => '羅',
+  '蘿' => '蘿',
+  '螺' => '螺',
+  '裸' => '裸',
+  '邏' => '邏',
+  '樂' => '樂',
+  '洛' => '洛',
+  '烙' => '烙',
+  '珞' => '珞',
+  '落' => '落',
+  '酪' => '酪',
+  '駱' => '駱',
+  '亂' => '亂',
+  '卵' => '卵',
+  '欄' => '欄',
+  '爛' => '爛',
+  '蘭' => '蘭',
+  '鸞' => '鸞',
+  '嵐' => '嵐',
+  '濫' => '濫',
+  '藍' => '藍',
+  '襤' => '襤',
+  '拉' => '拉',
+  '臘' => '臘',
+  '蠟' => '蠟',
+  '廊' => '廊',
+  '朗' => '朗',
+  '浪' => '浪',
+  '狼' => '狼',
+  '郎' => '郎',
+  '來' => '來',
+  '冷' => '冷',
+  '勞' => '勞',
+  '擄' => '擄',
+  '櫓' => '櫓',
+  '爐' => '爐',
+  '盧' => '盧',
+  '老' => '老',
+  '蘆' => '蘆',
+  '虜' => '虜',
+  '路' => '路',
+  '露' => '露',
+  '魯' => '魯',
+  '鷺' => '鷺',
+  '碌' => '碌',
+  '祿' => '祿',
+  '綠' => '綠',
+  '菉' => '菉',
+  '錄' => '錄',
+  '鹿' => '鹿',
+  '論' => '論',
+  '壟' => '壟',
+  '弄' => '弄',
+  '籠' => '籠',
+  '聾' => '聾',
+  '牢' => '牢',
+  '磊' => '磊',
+  '賂' => '賂',
+  '雷' => '雷',
+  '壘' => '壘',
+  '屢' => '屢',
+  '樓' => '樓',
+  '淚' => '淚',
+  '漏' => '漏',
+  '累' => '累',
+  '縷' => '縷',
+  '陋' => '陋',
+  '勒' => '勒',
+  '肋' => '肋',
+  '凜' => '凜',
+  '凌' => '凌',
+  '稜' => '稜',
+  '綾' => '綾',
+  '菱' => '菱',
+  '陵' => '陵',
+  '讀' => '讀',
+  '拏' => '拏',
+  '樂' => '樂',
+  '諾' => '諾',
+  '丹' => '丹',
+  '寧' => '寧',
+  '怒' => '怒',
+  '率' => '率',
+  '異' => '異',
+  '北' => '北',
+  '磻' => '磻',
+  '便' => '便',
+  '復' => '復',
+  '不' => '不',
+  '泌' => '泌',
+  '數' => '數',
+  '索' => '索',
+  '參' => '參',
+  '塞' => '塞',
+  '省' => '省',
+  '葉' => '葉',
+  '說' => '說',
+  '殺' => '殺',
+  '辰' => '辰',
+  '沈' => '沈',
+  '拾' => '拾',
+  '若' => '若',
+  '掠' => '掠',
+  '略' => '略',
+  '亮' => '亮',
+  '兩' => '兩',
+  '凉' => '凉',
+  '梁' => '梁',
+  '糧' => '糧',
+  '良' => '良',
+  '諒' => '諒',
+  '量' => '量',
+  '勵' => '勵',
+  '呂' => '呂',
+  '女' => '女',
+  '廬' => '廬',
+  '旅' => '旅',
+  '濾' => '濾',
+  '礪' => '礪',
+  '閭' => '閭',
+  '驪' => '驪',
+  '麗' => '麗',
+  '黎' => '黎',
+  '力' => '力',
+  '曆' => '曆',
+  '歷' => '歷',
+  '轢' => '轢',
+  '年' => '年',
+  '憐' => '憐',
+  '戀' => '戀',
+  '撚' => '撚',
+  '漣' => '漣',
+  '煉' => '煉',
+  '璉' => '璉',
+  '秊' => '秊',
+  '練' => '練',
+  '聯' => '聯',
+  '輦' => '輦',
+  '蓮' => '蓮',
+  '連' => '連',
+  '鍊' => '鍊',
+  '列' => '列',
+  '劣' => '劣',
+  '咽' => '咽',
+  '烈' => '烈',
+  '裂' => '裂',
+  '說' => '說',
+  '廉' => '廉',
+  '念' => '念',
+  '捻' => '捻',
+  '殮' => '殮',
+  '簾' => '簾',
+  '獵' => '獵',
+  '令' => '令',
+  '囹' => '囹',
+  '寧' => '寧',
+  '嶺' => '嶺',
+  '怜' => '怜',
+  '玲' => '玲',
+  '瑩' => '瑩',
+  '羚' => '羚',
+  '聆' => '聆',
+  '鈴' => '鈴',
+  '零' => '零',
+  '靈' => '靈',
+  '領' => '領',
+  '例' => '例',
+  '禮' => '禮',
+  '醴' => '醴',
+  '隸' => '隸',
+  '惡' => '惡',
+  '了' => '了',
+  '僚' => '僚',
+  '寮' => '寮',
+  '尿' => '尿',
+  '料' => '料',
+  '樂' => '樂',
+  '燎' => '燎',
+  '療' => '療',
+  '蓼' => '蓼',
+  '遼' => '遼',
+  '龍' => '龍',
+  '暈' => '暈',
+  '阮' => '阮',
+  '劉' => '劉',
+  '杻' => '杻',
+  '柳' => '柳',
+  '流' => '流',
+  '溜' => '溜',
+  '琉' => '琉',
+  '留' => '留',
+  '硫' => '硫',
+  '紐' => '紐',
+  '類' => '類',
+  '六' => '六',
+  '戮' => '戮',
+  '陸' => '陸',
+  '倫' => '倫',
+  '崙' => '崙',
+  '淪' => '淪',
+  '輪' => '輪',
+  '律' => '律',
+  '慄' => '慄',
+  '栗' => '栗',
+  '率' => '率',
+  '隆' => '隆',
+  '利' => '利',
+  '吏' => '吏',
+  '履' => '履',
+  '易' => '易',
+  '李' => '李',
+  '梨' => '梨',
+  '泥' => '泥',
+  '理' => '理',
+  '痢' => '痢',
+  '罹' => '罹',
+  '裏' => '裏',
+  '裡' => '裡',
+  '里' => '里',
+  '離' => '離',
+  '匿' => '匿',
+  '溺' => '溺',
+  '吝' => '吝',
+  '燐' => '燐',
+  '璘' => '璘',
+  '藺' => '藺',
+  '隣' => '隣',
+  '鱗' => '鱗',
+  '麟' => '麟',
+  '林' => '林',
+  '淋' => '淋',
+  '臨' => '臨',
+  '立' => '立',
+  '笠' => '笠',
+  '粒' => '粒',
+  '狀' => '狀',
+  '炙' => '炙',
+  '識' => '識',
+  '什' => '什',
+  '茶' => '茶',
+  '刺' => '刺',
+  '切' => '切',
+  '度' => '度',
+  '拓' => '拓',
+  '糖' => '糖',
+  '宅' => '宅',
+  '洞' => '洞',
+  '暴' => '暴',
+  '輻' => '輻',
+  '行' => '行',
+  '降' => '降',
+  '見' => '見',
+  '廓' => '廓',
+  '兀' => '兀',
+  '嗀' => '嗀',
+  '塚' => '塚',
+  '晴' => '晴',
+  '凞' => '凞',
+  '猪' => '猪',
+  '益' => '益',
+  '礼' => '礼',
+  '神' => '神',
+  '祥' => '祥',
+  '福' => '福',
+  '靖' => '靖',
+  '精' => '精',
+  '羽' => '羽',
+  '蘒' => '蘒',
+  '諸' => '諸',
+  '逸' => '逸',
+  '都' => '都',
+  '飯' => '飯',
+  '飼' => '飼',
+  '館' => '館',
+  '鶴' => '鶴',
+  '郞' => '郞',
+  '隷' => '隷',
+  '侮' => '侮',
+  '僧' => '僧',
+  '免' => '免',
+  '勉' => '勉',
+  '勤' => '勤',
+  '卑' => '卑',
+  '喝' => '喝',
+  '嘆' => '嘆',
+  '器' => '器',
+  '塀' => '塀',
+  '墨' => '墨',
+  '層' => '層',
+  '屮' => '屮',
+  '悔' => '悔',
+  '慨' => '慨',
+  '憎' => '憎',
+  '懲' => '懲',
+  '敏' => '敏',
+  '既' => '既',
+  '暑' => '暑',
+  '梅' => '梅',
+  '海' => '海',
+  '渚' => '渚',
+  '漢' => '漢',
+  '煮' => '煮',
+  '爫' => '爫',
+  '琢' => '琢',
+  '碑' => '碑',
+  '社' => '社',
+  '祉' => '祉',
+  '祈' => '祈',
+  '祐' => '祐',
+  '祖' => '祖',
+  '祝' => '祝',
+  '禍' => '禍',
+  '禎' => '禎',
+  '穀' => '穀',
+  '突' => '突',
+  '節' => '節',
+  '練' => '練',
+  '縉' => '縉',
+  '繁' => '繁',
+  '署' => '署',
+  '者' => '者',
+  '臭' => '臭',
+  '艹' => '艹',
+  '艹' => '艹',
+  '著' => '著',
+  '褐' => '褐',
+  '視' => '視',
+  '謁' => '謁',
+  '謹' => '謹',
+  '賓' => '賓',
+  '贈' => '贈',
+  '辶' => '辶',
+  '逸' => '逸',
+  '難' => '難',
+  '響' => '響',
+  '頻' => '頻',
+  '恵' => '恵',
+  '𤋮' => '𤋮',
+  '舘' => '舘',
+  '並' => '並',
+  '况' => '况',
+  '全' => '全',
+  '侀' => '侀',
+  '充' => '充',
+  '冀' => '冀',
+  '勇' => '勇',
+  '勺' => '勺',
+  '喝' => '喝',
+  '啕' => '啕',
+  '喙' => '喙',
+  '嗢' => '嗢',
+  '塚' => '塚',
+  '墳' => '墳',
+  '奄' => '奄',
+  '奔' => '奔',
+  '婢' => '婢',
+  '嬨' => '嬨',
+  '廒' => '廒',
+  '廙' => '廙',
+  '彩' => '彩',
+  '徭' => '徭',
+  '惘' => '惘',
+  '慎' => '慎',
+  '愈' => '愈',
+  '憎' => '憎',
+  '慠' => '慠',
+  '懲' => '懲',
+  '戴' => '戴',
+  '揄' => '揄',
+  '搜' => '搜',
+  '摒' => '摒',
+  '敖' => '敖',
+  '晴' => '晴',
+  '朗' => '朗',
+  '望' => '望',
+  '杖' => '杖',
+  '歹' => '歹',
+  '殺' => '殺',
+  '流' => '流',
+  '滛' => '滛',
+  '滋' => '滋',
+  '漢' => '漢',
+  '瀞' => '瀞',
+  '煮' => '煮',
+  '瞧' => '瞧',
+  '爵' => '爵',
+  '犯' => '犯',
+  '猪' => '猪',
+  '瑱' => '瑱',
+  '甆' => '甆',
+  '画' => '画',
+  '瘝' => '瘝',
+  '瘟' => '瘟',
+  '益' => '益',
+  '盛' => '盛',
+  '直' => '直',
+  '睊' => '睊',
+  '着' => '着',
+  '磌' => '磌',
+  '窱' => '窱',
+  '節' => '節',
+  '类' => '类',
+  '絛' => '絛',
+  '練' => '練',
+  '缾' => '缾',
+  '者' => '者',
+  '荒' => '荒',
+  '華' => '華',
+  '蝹' => '蝹',
+  '襁' => '襁',
+  '覆' => '覆',
+  '視' => '視',
+  '調' => '調',
+  '諸' => '諸',
+  '請' => '請',
+  '謁' => '謁',
+  '諾' => '諾',
+  '諭' => '諭',
+  '謹' => '謹',
+  '變' => '變',
+  '贈' => '贈',
+  '輸' => '輸',
+  '遲' => '遲',
+  '醙' => '醙',
+  '鉶' => '鉶',
+  '陼' => '陼',
+  '難' => '難',
+  '靖' => '靖',
+  '韛' => '韛',
+  '響' => '響',
+  '頋' => '頋',
+  '頻' => '頻',
+  '鬒' => '鬒',
+  '龜' => '龜',
+  '𢡊' => '𢡊',
+  '𢡄' => '𢡄',
+  '𣏕' => '𣏕',
+  '㮝' => '㮝',
+  '䀘' => '䀘',
+  '䀹' => '䀹',
+  '𥉉' => '𥉉',
+  '𥳐' => '𥳐',
+  '𧻓' => '𧻓',
+  '齃' => '齃',
+  '龎' => '龎',
+  'יִ' => 'יִ',
+  'ײַ' => 'ײַ',
+  'שׁ' => 'שׁ',
+  'שׂ' => 'שׂ',
+  'שּׁ' => 'שּׁ',
+  'שּׂ' => 'שּׂ',
+  'אַ' => 'אַ',
+  'אָ' => 'אָ',
+  'אּ' => 'אּ',
+  'בּ' => 'בּ',
+  'גּ' => 'גּ',
+  'דּ' => 'דּ',
+  'הּ' => 'הּ',
+  'וּ' => 'וּ',
+  'זּ' => 'זּ',
+  'טּ' => 'טּ',
+  'יּ' => 'יּ',
+  'ךּ' => 'ךּ',
+  'כּ' => 'כּ',
+  'לּ' => 'לּ',
+  'מּ' => 'מּ',
+  'נּ' => 'נּ',
+  'סּ' => 'סּ',
+  'ףּ' => 'ףּ',
+  'פּ' => 'פּ',
+  'צּ' => 'צּ',
+  'קּ' => 'קּ',
+  'רּ' => 'רּ',
+  'שּ' => 'שּ',
+  'תּ' => 'תּ',
+  'וֹ' => 'וֹ',
+  'בֿ' => 'בֿ',
+  'כֿ' => 'כֿ',
+  'פֿ' => 'פֿ',
+  '𑂚' => '𑂚',
+  '𑂜' => '𑂜',
+  '𑂫' => '𑂫',
+  '𑄮' => '𑄮',
+  '𑄯' => '𑄯',
+  '𑍋' => '𑍋',
+  '𑍌' => '𑍌',
+  '𑒻' => '𑒻',
+  '𑒼' => '𑒼',
+  '𑒾' => '𑒾',
+  '𑖺' => '𑖺',
+  '𑖻' => '𑖻',
+  '𑤸' => '𑤸',
+  '𝅗𝅥' => '𝅗𝅥',
+  '𝅘𝅥' => '𝅘𝅥',
+  '𝅘𝅥𝅮' => '𝅘𝅥𝅮',
+  '𝅘𝅥𝅯' => '𝅘𝅥𝅯',
+  '𝅘𝅥𝅰' => '𝅘𝅥𝅰',
+  '𝅘𝅥𝅱' => '𝅘𝅥𝅱',
+  '𝅘𝅥𝅲' => '𝅘𝅥𝅲',
+  '𝆹𝅥' => '𝆹𝅥',
+  '𝆺𝅥' => '𝆺𝅥',
+  '𝆹𝅥𝅮' => '𝆹𝅥𝅮',
+  '𝆺𝅥𝅮' => '𝆺𝅥𝅮',
+  '𝆹𝅥𝅯' => '𝆹𝅥𝅯',
+  '𝆺𝅥𝅯' => '𝆺𝅥𝅯',
+  '丽' => '丽',
+  '丸' => '丸',
+  '乁' => '乁',
+  '𠄢' => '𠄢',
+  '你' => '你',
+  '侮' => '侮',
+  '侻' => '侻',
+  '倂' => '倂',
+  '偺' => '偺',
+  '備' => '備',
+  '僧' => '僧',
+  '像' => '像',
+  '㒞' => '㒞',
+  '𠘺' => '𠘺',
+  '免' => '免',
+  '兔' => '兔',
+  '兤' => '兤',
+  '具' => '具',
+  '𠔜' => '𠔜',
+  '㒹' => '㒹',
+  '內' => '內',
+  '再' => '再',
+  '𠕋' => '𠕋',
+  '冗' => '冗',
+  '冤' => '冤',
+  '仌' => '仌',
+  '冬' => '冬',
+  '况' => '况',
+  '𩇟' => '𩇟',
+  '凵' => '凵',
+  '刃' => '刃',
+  '㓟' => '㓟',
+  '刻' => '刻',
+  '剆' => '剆',
+  '割' => '割',
+  '剷' => '剷',
+  '㔕' => '㔕',
+  '勇' => '勇',
+  '勉' => '勉',
+  '勤' => '勤',
+  '勺' => '勺',
+  '包' => '包',
+  '匆' => '匆',
+  '北' => '北',
+  '卉' => '卉',
+  '卑' => '卑',
+  '博' => '博',
+  '即' => '即',
+  '卽' => '卽',
+  '卿' => '卿',
+  '卿' => '卿',
+  '卿' => '卿',
+  '𠨬' => '𠨬',
+  '灰' => '灰',
+  '及' => '及',
+  '叟' => '叟',
+  '𠭣' => '𠭣',
+  '叫' => '叫',
+  '叱' => '叱',
+  '吆' => '吆',
+  '咞' => '咞',
+  '吸' => '吸',
+  '呈' => '呈',
+  '周' => '周',
+  '咢' => '咢',
+  '哶' => '哶',
+  '唐' => '唐',
+  '啓' => '啓',
+  '啣' => '啣',
+  '善' => '善',
+  '善' => '善',
+  '喙' => '喙',
+  '喫' => '喫',
+  '喳' => '喳',
+  '嗂' => '嗂',
+  '圖' => '圖',
+  '嘆' => '嘆',
+  '圗' => '圗',
+  '噑' => '噑',
+  '噴' => '噴',
+  '切' => '切',
+  '壮' => '壮',
+  '城' => '城',
+  '埴' => '埴',
+  '堍' => '堍',
+  '型' => '型',
+  '堲' => '堲',
+  '報' => '報',
+  '墬' => '墬',
+  '𡓤' => '𡓤',
+  '売' => '売',
+  '壷' => '壷',
+  '夆' => '夆',
+  '多' => '多',
+  '夢' => '夢',
+  '奢' => '奢',
+  '𡚨' => '𡚨',
+  '𡛪' => '𡛪',
+  '姬' => '姬',
+  '娛' => '娛',
+  '娧' => '娧',
+  '姘' => '姘',
+  '婦' => '婦',
+  '㛮' => '㛮',
+  '㛼' => '㛼',
+  '嬈' => '嬈',
+  '嬾' => '嬾',
+  '嬾' => '嬾',
+  '𡧈' => '𡧈',
+  '寃' => '寃',
+  '寘' => '寘',
+  '寧' => '寧',
+  '寳' => '寳',
+  '𡬘' => '𡬘',
+  '寿' => '寿',
+  '将' => '将',
+  '当' => '当',
+  '尢' => '尢',
+  '㞁' => '㞁',
+  '屠' => '屠',
+  '屮' => '屮',
+  '峀' => '峀',
+  '岍' => '岍',
+  '𡷤' => '𡷤',
+  '嵃' => '嵃',
+  '𡷦' => '𡷦',
+  '嵮' => '嵮',
+  '嵫' => '嵫',
+  '嵼' => '嵼',
+  '巡' => '巡',
+  '巢' => '巢',
+  '㠯' => '㠯',
+  '巽' => '巽',
+  '帨' => '帨',
+  '帽' => '帽',
+  '幩' => '幩',
+  '㡢' => '㡢',
+  '𢆃' => '𢆃',
+  '㡼' => '㡼',
+  '庰' => '庰',
+  '庳' => '庳',
+  '庶' => '庶',
+  '廊' => '廊',
+  '𪎒' => '𪎒',
+  '廾' => '廾',
+  '𢌱' => '𢌱',
+  '𢌱' => '𢌱',
+  '舁' => '舁',
+  '弢' => '弢',
+  '弢' => '弢',
+  '㣇' => '㣇',
+  '𣊸' => '𣊸',
+  '𦇚' => '𦇚',
+  '形' => '形',
+  '彫' => '彫',
+  '㣣' => '㣣',
+  '徚' => '徚',
+  '忍' => '忍',
+  '志' => '志',
+  '忹' => '忹',
+  '悁' => '悁',
+  '㤺' => '㤺',
+  '㤜' => '㤜',
+  '悔' => '悔',
+  '𢛔' => '𢛔',
+  '惇' => '惇',
+  '慈' => '慈',
+  '慌' => '慌',
+  '慎' => '慎',
+  '慌' => '慌',
+  '慺' => '慺',
+  '憎' => '憎',
+  '憲' => '憲',
+  '憤' => '憤',
+  '憯' => '憯',
+  '懞' => '懞',
+  '懲' => '懲',
+  '懶' => '懶',
+  '成' => '成',
+  '戛' => '戛',
+  '扝' => '扝',
+  '抱' => '抱',
+  '拔' => '拔',
+  '捐' => '捐',
+  '𢬌' => '𢬌',
+  '挽' => '挽',
+  '拼' => '拼',
+  '捨' => '捨',
+  '掃' => '掃',
+  '揤' => '揤',
+  '𢯱' => '𢯱',
+  '搢' => '搢',
+  '揅' => '揅',
+  '掩' => '掩',
+  '㨮' => '㨮',
+  '摩' => '摩',
+  '摾' => '摾',
+  '撝' => '撝',
+  '摷' => '摷',
+  '㩬' => '㩬',
+  '敏' => '敏',
+  '敬' => '敬',
+  '𣀊' => '𣀊',
+  '旣' => '旣',
+  '書' => '書',
+  '晉' => '晉',
+  '㬙' => '㬙',
+  '暑' => '暑',
+  '㬈' => '㬈',
+  '㫤' => '㫤',
+  '冒' => '冒',
+  '冕' => '冕',
+  '最' => '最',
+  '暜' => '暜',
+  '肭' => '肭',
+  '䏙' => '䏙',
+  '朗' => '朗',
+  '望' => '望',
+  '朡' => '朡',
+  '杞' => '杞',
+  '杓' => '杓',
+  '𣏃' => '𣏃',
+  '㭉' => '㭉',
+  '柺' => '柺',
+  '枅' => '枅',
+  '桒' => '桒',
+  '梅' => '梅',
+  '𣑭' => '𣑭',
+  '梎' => '梎',
+  '栟' => '栟',
+  '椔' => '椔',
+  '㮝' => '㮝',
+  '楂' => '楂',
+  '榣' => '榣',
+  '槪' => '槪',
+  '檨' => '檨',
+  '𣚣' => '𣚣',
+  '櫛' => '櫛',
+  '㰘' => '㰘',
+  '次' => '次',
+  '𣢧' => '𣢧',
+  '歔' => '歔',
+  '㱎' => '㱎',
+  '歲' => '歲',
+  '殟' => '殟',
+  '殺' => '殺',
+  '殻' => '殻',
+  '𣪍' => '𣪍',
+  '𡴋' => '𡴋',
+  '𣫺' => '𣫺',
+  '汎' => '汎',
+  '𣲼' => '𣲼',
+  '沿' => '沿',
+  '泍' => '泍',
+  '汧' => '汧',
+  '洖' => '洖',
+  '派' => '派',
+  '海' => '海',
+  '流' => '流',
+  '浩' => '浩',
+  '浸' => '浸',
+  '涅' => '涅',
+  '𣴞' => '𣴞',
+  '洴' => '洴',
+  '港' => '港',
+  '湮' => '湮',
+  '㴳' => '㴳',
+  '滋' => '滋',
+  '滇' => '滇',
+  '𣻑' => '𣻑',
+  '淹' => '淹',
+  '潮' => '潮',
+  '𣽞' => '𣽞',
+  '𣾎' => '𣾎',
+  '濆' => '濆',
+  '瀹' => '瀹',
+  '瀞' => '瀞',
+  '瀛' => '瀛',
+  '㶖' => '㶖',
+  '灊' => '灊',
+  '災' => '災',
+  '灷' => '灷',
+  '炭' => '炭',
+  '𠔥' => '𠔥',
+  '煅' => '煅',
+  '𤉣' => '𤉣',
+  '熜' => '熜',
+  '𤎫' => '𤎫',
+  '爨' => '爨',
+  '爵' => '爵',
+  '牐' => '牐',
+  '𤘈' => '𤘈',
+  '犀' => '犀',
+  '犕' => '犕',
+  '𤜵' => '𤜵',
+  '𤠔' => '𤠔',
+  '獺' => '獺',
+  '王' => '王',
+  '㺬' => '㺬',
+  '玥' => '玥',
+  '㺸' => '㺸',
+  '㺸' => '㺸',
+  '瑇' => '瑇',
+  '瑜' => '瑜',
+  '瑱' => '瑱',
+  '璅' => '璅',
+  '瓊' => '瓊',
+  '㼛' => '㼛',
+  '甤' => '甤',
+  '𤰶' => '𤰶',
+  '甾' => '甾',
+  '𤲒' => '𤲒',
+  '異' => '異',
+  '𢆟' => '𢆟',
+  '瘐' => '瘐',
+  '𤾡' => '𤾡',
+  '𤾸' => '𤾸',
+  '𥁄' => '𥁄',
+  '㿼' => '㿼',
+  '䀈' => '䀈',
+  '直' => '直',
+  '𥃳' => '𥃳',
+  '𥃲' => '𥃲',
+  '𥄙' => '𥄙',
+  '𥄳' => '𥄳',
+  '眞' => '眞',
+  '真' => '真',
+  '真' => '真',
+  '睊' => '睊',
+  '䀹' => '䀹',
+  '瞋' => '瞋',
+  '䁆' => '䁆',
+  '䂖' => '䂖',
+  '𥐝' => '𥐝',
+  '硎' => '硎',
+  '碌' => '碌',
+  '磌' => '磌',
+  '䃣' => '䃣',
+  '𥘦' => '𥘦',
+  '祖' => '祖',
+  '𥚚' => '𥚚',
+  '𥛅' => '𥛅',
+  '福' => '福',
+  '秫' => '秫',
+  '䄯' => '䄯',
+  '穀' => '穀',
+  '穊' => '穊',
+  '穏' => '穏',
+  '𥥼' => '𥥼',
+  '𥪧' => '𥪧',
+  '𥪧' => '𥪧',
+  '竮' => '竮',
+  '䈂' => '䈂',
+  '𥮫' => '𥮫',
+  '篆' => '篆',
+  '築' => '築',
+  '䈧' => '䈧',
+  '𥲀' => '𥲀',
+  '糒' => '糒',
+  '䊠' => '䊠',
+  '糨' => '糨',
+  '糣' => '糣',
+  '紀' => '紀',
+  '𥾆' => '𥾆',
+  '絣' => '絣',
+  '䌁' => '䌁',
+  '緇' => '緇',
+  '縂' => '縂',
+  '繅' => '繅',
+  '䌴' => '䌴',
+  '𦈨' => '𦈨',
+  '𦉇' => '𦉇',
+  '䍙' => '䍙',
+  '𦋙' => '𦋙',
+  '罺' => '罺',
+  '𦌾' => '𦌾',
+  '羕' => '羕',
+  '翺' => '翺',
+  '者' => '者',
+  '𦓚' => '𦓚',
+  '𦔣' => '𦔣',
+  '聠' => '聠',
+  '𦖨' => '𦖨',
+  '聰' => '聰',
+  '𣍟' => '𣍟',
+  '䏕' => '䏕',
+  '育' => '育',
+  '脃' => '脃',
+  '䐋' => '䐋',
+  '脾' => '脾',
+  '媵' => '媵',
+  '𦞧' => '𦞧',
+  '𦞵' => '𦞵',
+  '𣎓' => '𣎓',
+  '𣎜' => '𣎜',
+  '舁' => '舁',
+  '舄' => '舄',
+  '辞' => '辞',
+  '䑫' => '䑫',
+  '芑' => '芑',
+  '芋' => '芋',
+  '芝' => '芝',
+  '劳' => '劳',
+  '花' => '花',
+  '芳' => '芳',
+  '芽' => '芽',
+  '苦' => '苦',
+  '𦬼' => '𦬼',
+  '若' => '若',
+  '茝' => '茝',
+  '荣' => '荣',
+  '莭' => '莭',
+  '茣' => '茣',
+  '莽' => '莽',
+  '菧' => '菧',
+  '著' => '著',
+  '荓' => '荓',
+  '菊' => '菊',
+  '菌' => '菌',
+  '菜' => '菜',
+  '𦰶' => '𦰶',
+  '𦵫' => '𦵫',
+  '𦳕' => '𦳕',
+  '䔫' => '䔫',
+  '蓱' => '蓱',
+  '蓳' => '蓳',
+  '蔖' => '蔖',
+  '𧏊' => '𧏊',
+  '蕤' => '蕤',
+  '𦼬' => '𦼬',
+  '䕝' => '䕝',
+  '䕡' => '䕡',
+  '𦾱' => '𦾱',
+  '𧃒' => '𧃒',
+  '䕫' => '䕫',
+  '虐' => '虐',
+  '虜' => '虜',
+  '虧' => '虧',
+  '虩' => '虩',
+  '蚩' => '蚩',
+  '蚈' => '蚈',
+  '蜎' => '蜎',
+  '蛢' => '蛢',
+  '蝹' => '蝹',
+  '蜨' => '蜨',
+  '蝫' => '蝫',
+  '螆' => '螆',
+  '䗗' => '䗗',
+  '蟡' => '蟡',
+  '蠁' => '蠁',
+  '䗹' => '䗹',
+  '衠' => '衠',
+  '衣' => '衣',
+  '𧙧' => '𧙧',
+  '裗' => '裗',
+  '裞' => '裞',
+  '䘵' => '䘵',
+  '裺' => '裺',
+  '㒻' => '㒻',
+  '𧢮' => '𧢮',
+  '𧥦' => '𧥦',
+  '䚾' => '䚾',
+  '䛇' => '䛇',
+  '誠' => '誠',
+  '諭' => '諭',
+  '變' => '變',
+  '豕' => '豕',
+  '𧲨' => '𧲨',
+  '貫' => '貫',
+  '賁' => '賁',
+  '贛' => '贛',
+  '起' => '起',
+  '𧼯' => '𧼯',
+  '𠠄' => '𠠄',
+  '跋' => '跋',
+  '趼' => '趼',
+  '跰' => '跰',
+  '𠣞' => '𠣞',
+  '軔' => '軔',
+  '輸' => '輸',
+  '𨗒' => '𨗒',
+  '𨗭' => '𨗭',
+  '邔' => '邔',
+  '郱' => '郱',
+  '鄑' => '鄑',
+  '𨜮' => '𨜮',
+  '鄛' => '鄛',
+  '鈸' => '鈸',
+  '鋗' => '鋗',
+  '鋘' => '鋘',
+  '鉼' => '鉼',
+  '鏹' => '鏹',
+  '鐕' => '鐕',
+  '𨯺' => '𨯺',
+  '開' => '開',
+  '䦕' => '䦕',
+  '閷' => '閷',
+  '𨵷' => '𨵷',
+  '䧦' => '䧦',
+  '雃' => '雃',
+  '嶲' => '嶲',
+  '霣' => '霣',
+  '𩅅' => '𩅅',
+  '𩈚' => '𩈚',
+  '䩮' => '䩮',
+  '䩶' => '䩶',
+  '韠' => '韠',
+  '𩐊' => '𩐊',
+  '䪲' => '䪲',
+  '𩒖' => '𩒖',
+  '頋' => '頋',
+  '頋' => '頋',
+  '頩' => '頩',
+  '𩖶' => '𩖶',
+  '飢' => '飢',
+  '䬳' => '䬳',
+  '餩' => '餩',
+  '馧' => '馧',
+  '駂' => '駂',
+  '駾' => '駾',
+  '䯎' => '䯎',
+  '𩬰' => '𩬰',
+  '鬒' => '鬒',
+  '鱀' => '鱀',
+  '鳽' => '鳽',
+  '䳎' => '䳎',
+  '䳭' => '䳭',
+  '鵧' => '鵧',
+  '𪃎' => '𪃎',
+  '䳸' => '䳸',
+  '𪄅' => '𪄅',
+  '𪈎' => '𪈎',
+  '𪊑' => '𪊑',
+  '麻' => '麻',
+  '䵖' => '䵖',
+  '黹' => '黹',
+  '黾' => '黾',
+  '鼅' => '鼅',
+  '鼏' => '鼏',
+  '鼖' => '鼖',
+  '鼻' => '鼻',
+  '𪘀' => '𪘀',
+);
Index: vendor/symfony/polyfill-intl-normalizer/Resources/unidata/combiningClass.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/combiningClass.php b/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/combiningClass.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/combiningClass.php	(date 1725846310000)
@@ -0,0 +1,876 @@
+<?php
+
+return array (
+  '̀' => 230,
+  '́' => 230,
+  '̂' => 230,
+  '̃' => 230,
+  '̄' => 230,
+  '̅' => 230,
+  '̆' => 230,
+  '̇' => 230,
+  '̈' => 230,
+  '̉' => 230,
+  '̊' => 230,
+  '̋' => 230,
+  '̌' => 230,
+  '̍' => 230,
+  '̎' => 230,
+  '̏' => 230,
+  '̐' => 230,
+  '̑' => 230,
+  '̒' => 230,
+  '̓' => 230,
+  '̔' => 230,
+  '̕' => 232,
+  '̖' => 220,
+  '̗' => 220,
+  '̘' => 220,
+  '̙' => 220,
+  '̚' => 232,
+  '̛' => 216,
+  '̜' => 220,
+  '̝' => 220,
+  '̞' => 220,
+  '̟' => 220,
+  '̠' => 220,
+  '̡' => 202,
+  '̢' => 202,
+  '̣' => 220,
+  '̤' => 220,
+  '̥' => 220,
+  '̦' => 220,
+  '̧' => 202,
+  '̨' => 202,
+  '̩' => 220,
+  '̪' => 220,
+  '̫' => 220,
+  '̬' => 220,
+  '̭' => 220,
+  '̮' => 220,
+  '̯' => 220,
+  '̰' => 220,
+  '̱' => 220,
+  '̲' => 220,
+  '̳' => 220,
+  '̴' => 1,
+  '̵' => 1,
+  '̶' => 1,
+  '̷' => 1,
+  '̸' => 1,
+  '̹' => 220,
+  '̺' => 220,
+  '̻' => 220,
+  '̼' => 220,
+  '̽' => 230,
+  '̾' => 230,
+  '̿' => 230,
+  '̀' => 230,
+  '́' => 230,
+  '͂' => 230,
+  '̓' => 230,
+  '̈́' => 230,
+  'ͅ' => 240,
+  '͆' => 230,
+  '͇' => 220,
+  '͈' => 220,
+  '͉' => 220,
+  '͊' => 230,
+  '͋' => 230,
+  '͌' => 230,
+  '͍' => 220,
+  '͎' => 220,
+  '͐' => 230,
+  '͑' => 230,
+  '͒' => 230,
+  '͓' => 220,
+  '͔' => 220,
+  '͕' => 220,
+  '͖' => 220,
+  '͗' => 230,
+  '͘' => 232,
+  '͙' => 220,
+  '͚' => 220,
+  '͛' => 230,
+  '͜' => 233,
+  '͝' => 234,
+  '͞' => 234,
+  '͟' => 233,
+  '͠' => 234,
+  '͡' => 234,
+  '͢' => 233,
+  'ͣ' => 230,
+  'ͤ' => 230,
+  'ͥ' => 230,
+  'ͦ' => 230,
+  'ͧ' => 230,
+  'ͨ' => 230,
+  'ͩ' => 230,
+  'ͪ' => 230,
+  'ͫ' => 230,
+  'ͬ' => 230,
+  'ͭ' => 230,
+  'ͮ' => 230,
+  'ͯ' => 230,
+  '҃' => 230,
+  '҄' => 230,
+  '҅' => 230,
+  '҆' => 230,
+  '҇' => 230,
+  '֑' => 220,
+  '֒' => 230,
+  '֓' => 230,
+  '֔' => 230,
+  '֕' => 230,
+  '֖' => 220,
+  '֗' => 230,
+  '֘' => 230,
+  '֙' => 230,
+  '֚' => 222,
+  '֛' => 220,
+  '֜' => 230,
+  '֝' => 230,
+  '֞' => 230,
+  '֟' => 230,
+  '֠' => 230,
+  '֡' => 230,
+  '֢' => 220,
+  '֣' => 220,
+  '֤' => 220,
+  '֥' => 220,
+  '֦' => 220,
+  '֧' => 220,
+  '֨' => 230,
+  '֩' => 230,
+  '֪' => 220,
+  '֫' => 230,
+  '֬' => 230,
+  '֭' => 222,
+  '֮' => 228,
+  '֯' => 230,
+  'ְ' => 10,
+  'ֱ' => 11,
+  'ֲ' => 12,
+  'ֳ' => 13,
+  'ִ' => 14,
+  'ֵ' => 15,
+  'ֶ' => 16,
+  'ַ' => 17,
+  'ָ' => 18,
+  'ֹ' => 19,
+  'ֺ' => 19,
+  'ֻ' => 20,
+  'ּ' => 21,
+  'ֽ' => 22,
+  'ֿ' => 23,
+  'ׁ' => 24,
+  'ׂ' => 25,
+  'ׄ' => 230,
+  'ׅ' => 220,
+  'ׇ' => 18,
+  'ؐ' => 230,
+  'ؑ' => 230,
+  'ؒ' => 230,
+  'ؓ' => 230,
+  'ؔ' => 230,
+  'ؕ' => 230,
+  'ؖ' => 230,
+  'ؗ' => 230,
+  'ؘ' => 30,
+  'ؙ' => 31,
+  'ؚ' => 32,
+  'ً' => 27,
+  'ٌ' => 28,
+  'ٍ' => 29,
+  'َ' => 30,
+  'ُ' => 31,
+  'ِ' => 32,
+  'ّ' => 33,
+  'ْ' => 34,
+  'ٓ' => 230,
+  'ٔ' => 230,
+  'ٕ' => 220,
+  'ٖ' => 220,
+  'ٗ' => 230,
+  '٘' => 230,
+  'ٙ' => 230,
+  'ٚ' => 230,
+  'ٛ' => 230,
+  'ٜ' => 220,
+  'ٝ' => 230,
+  'ٞ' => 230,
+  'ٟ' => 220,
+  'ٰ' => 35,
+  'ۖ' => 230,
+  'ۗ' => 230,
+  'ۘ' => 230,
+  'ۙ' => 230,
+  'ۚ' => 230,
+  'ۛ' => 230,
+  'ۜ' => 230,
+  '۟' => 230,
+  '۠' => 230,
+  'ۡ' => 230,
+  'ۢ' => 230,
+  'ۣ' => 220,
+  'ۤ' => 230,
+  'ۧ' => 230,
+  'ۨ' => 230,
+  '۪' => 220,
+  '۫' => 230,
+  '۬' => 230,
+  'ۭ' => 220,
+  'ܑ' => 36,
+  'ܰ' => 230,
+  'ܱ' => 220,
+  'ܲ' => 230,
+  'ܳ' => 230,
+  'ܴ' => 220,
+  'ܵ' => 230,
+  'ܶ' => 230,
+  'ܷ' => 220,
+  'ܸ' => 220,
+  'ܹ' => 220,
+  'ܺ' => 230,
+  'ܻ' => 220,
+  'ܼ' => 220,
+  'ܽ' => 230,
+  'ܾ' => 220,
+  'ܿ' => 230,
+  '݀' => 230,
+  '݁' => 230,
+  '݂' => 220,
+  '݃' => 230,
+  '݄' => 220,
+  '݅' => 230,
+  '݆' => 220,
+  '݇' => 230,
+  '݈' => 220,
+  '݉' => 230,
+  '݊' => 230,
+  '߫' => 230,
+  '߬' => 230,
+  '߭' => 230,
+  '߮' => 230,
+  '߯' => 230,
+  '߰' => 230,
+  '߱' => 230,
+  '߲' => 220,
+  '߳' => 230,
+  '߽' => 220,
+  'ࠖ' => 230,
+  'ࠗ' => 230,
+  '࠘' => 230,
+  '࠙' => 230,
+  'ࠛ' => 230,
+  'ࠜ' => 230,
+  'ࠝ' => 230,
+  'ࠞ' => 230,
+  'ࠟ' => 230,
+  'ࠠ' => 230,
+  'ࠡ' => 230,
+  'ࠢ' => 230,
+  'ࠣ' => 230,
+  'ࠥ' => 230,
+  'ࠦ' => 230,
+  'ࠧ' => 230,
+  'ࠩ' => 230,
+  'ࠪ' => 230,
+  'ࠫ' => 230,
+  'ࠬ' => 230,
+  '࠭' => 230,
+  '࡙' => 220,
+  '࡚' => 220,
+  '࡛' => 220,
+  '࣓' => 220,
+  'ࣔ' => 230,
+  'ࣕ' => 230,
+  'ࣖ' => 230,
+  'ࣗ' => 230,
+  'ࣘ' => 230,
+  'ࣙ' => 230,
+  'ࣚ' => 230,
+  'ࣛ' => 230,
+  'ࣜ' => 230,
+  'ࣝ' => 230,
+  'ࣞ' => 230,
+  'ࣟ' => 230,
+  '࣠' => 230,
+  '࣡' => 230,
+  'ࣣ' => 220,
+  'ࣤ' => 230,
+  'ࣥ' => 230,
+  'ࣦ' => 220,
+  'ࣧ' => 230,
+  'ࣨ' => 230,
+  'ࣩ' => 220,
+  '࣪' => 230,
+  '࣫' => 230,
+  '࣬' => 230,
+  '࣭' => 220,
+  '࣮' => 220,
+  '࣯' => 220,
+  'ࣰ' => 27,
+  'ࣱ' => 28,
+  'ࣲ' => 29,
+  'ࣳ' => 230,
+  'ࣴ' => 230,
+  'ࣵ' => 230,
+  'ࣶ' => 220,
+  'ࣷ' => 230,
+  'ࣸ' => 230,
+  'ࣹ' => 220,
+  'ࣺ' => 220,
+  'ࣻ' => 230,
+  'ࣼ' => 230,
+  'ࣽ' => 230,
+  'ࣾ' => 230,
+  'ࣿ' => 230,
+  '़' => 7,
+  '्' => 9,
+  '॑' => 230,
+  '॒' => 220,
+  '॓' => 230,
+  '॔' => 230,
+  '়' => 7,
+  '্' => 9,
+  '৾' => 230,
+  '਼' => 7,
+  '੍' => 9,
+  '઼' => 7,
+  '્' => 9,
+  '଼' => 7,
+  '୍' => 9,
+  '்' => 9,
+  '్' => 9,
+  'ౕ' => 84,
+  'ౖ' => 91,
+  '಼' => 7,
+  '್' => 9,
+  '഻' => 9,
+  '഼' => 9,
+  '്' => 9,
+  '්' => 9,
+  'ุ' => 103,
+  'ู' => 103,
+  'ฺ' => 9,
+  '่' => 107,
+  '้' => 107,
+  '๊' => 107,
+  '๋' => 107,
+  'ຸ' => 118,
+  'ູ' => 118,
+  '຺' => 9,
+  '່' => 122,
+  '້' => 122,
+  '໊' => 122,
+  '໋' => 122,
+  '༘' => 220,
+  '༙' => 220,
+  '༵' => 220,
+  '༷' => 220,
+  '༹' => 216,
+  'ཱ' => 129,
+  'ི' => 130,
+  'ུ' => 132,
+  'ེ' => 130,
+  'ཻ' => 130,
+  'ོ' => 130,
+  'ཽ' => 130,
+  'ྀ' => 130,
+  'ྂ' => 230,
+  'ྃ' => 230,
+  '྄' => 9,
+  '྆' => 230,
+  '྇' => 230,
+  '࿆' => 220,
+  '့' => 7,
+  '္' => 9,
+  '်' => 9,
+  'ႍ' => 220,
+  '፝' => 230,
+  '፞' => 230,
+  '፟' => 230,
+  '᜔' => 9,
+  '᜴' => 9,
+  '្' => 9,
+  '៝' => 230,
+  'ᢩ' => 228,
+  '᤹' => 222,
+  '᤺' => 230,
+  '᤻' => 220,
+  'ᨗ' => 230,
+  'ᨘ' => 220,
+  '᩠' => 9,
+  '᩵' => 230,
+  '᩶' => 230,
+  '᩷' => 230,
+  '᩸' => 230,
+  '᩹' => 230,
+  '᩺' => 230,
+  '᩻' => 230,
+  '᩼' => 230,
+  '᩿' => 220,
+  '᪰' => 230,
+  '᪱' => 230,
+  '᪲' => 230,
+  '᪳' => 230,
+  '᪴' => 230,
+  '᪵' => 220,
+  '᪶' => 220,
+  '᪷' => 220,
+  '᪸' => 220,
+  '᪹' => 220,
+  '᪺' => 220,
+  '᪻' => 230,
+  '᪼' => 230,
+  '᪽' => 220,
+  'ᪿ' => 220,
+  'ᫀ' => 220,
+  '᬴' => 7,
+  '᭄' => 9,
+  '᭫' => 230,
+  '᭬' => 220,
+  '᭭' => 230,
+  '᭮' => 230,
+  '᭯' => 230,
+  '᭰' => 230,
+  '᭱' => 230,
+  '᭲' => 230,
+  '᭳' => 230,
+  '᮪' => 9,
+  '᮫' => 9,
+  '᯦' => 7,
+  '᯲' => 9,
+  '᯳' => 9,
+  '᰷' => 7,
+  '᳐' => 230,
+  '᳑' => 230,
+  '᳒' => 230,
+  '᳔' => 1,
+  '᳕' => 220,
+  '᳖' => 220,
+  '᳗' => 220,
+  '᳘' => 220,
+  '᳙' => 220,
+  '᳚' => 230,
+  '᳛' => 230,
+  '᳜' => 220,
+  '᳝' => 220,
+  '᳞' => 220,
+  '᳟' => 220,
+  '᳠' => 230,
+  '᳢' => 1,
+  '᳣' => 1,
+  '᳤' => 1,
+  '᳥' => 1,
+  '᳦' => 1,
+  '᳧' => 1,
+  '᳨' => 1,
+  '᳭' => 220,
+  '᳴' => 230,
+  '᳸' => 230,
+  '᳹' => 230,
+  '᷀' => 230,
+  '᷁' => 230,
+  '᷂' => 220,
+  '᷃' => 230,
+  '᷄' => 230,
+  '᷅' => 230,
+  '᷆' => 230,
+  '᷇' => 230,
+  '᷈' => 230,
+  '᷉' => 230,
+  '᷊' => 220,
+  '᷋' => 230,
+  '᷌' => 230,
+  '᷍' => 234,
+  '᷎' => 214,
+  '᷏' => 220,
+  '᷐' => 202,
+  '᷑' => 230,
+  '᷒' => 230,
+  'ᷓ' => 230,
+  'ᷔ' => 230,
+  'ᷕ' => 230,
+  'ᷖ' => 230,
+  'ᷗ' => 230,
+  'ᷘ' => 230,
+  'ᷙ' => 230,
+  'ᷚ' => 230,
+  'ᷛ' => 230,
+  'ᷜ' => 230,
+  'ᷝ' => 230,
+  'ᷞ' => 230,
+  'ᷟ' => 230,
+  'ᷠ' => 230,
+  'ᷡ' => 230,
+  'ᷢ' => 230,
+  'ᷣ' => 230,
+  'ᷤ' => 230,
+  'ᷥ' => 230,
+  'ᷦ' => 230,
+  'ᷧ' => 230,
+  'ᷨ' => 230,
+  'ᷩ' => 230,
+  'ᷪ' => 230,
+  'ᷫ' => 230,
+  'ᷬ' => 230,
+  'ᷭ' => 230,
+  'ᷮ' => 230,
+  'ᷯ' => 230,
+  'ᷰ' => 230,
+  'ᷱ' => 230,
+  'ᷲ' => 230,
+  'ᷳ' => 230,
+  'ᷴ' => 230,
+  '᷵' => 230,
+  '᷶' => 232,
+  '᷷' => 228,
+  '᷸' => 228,
+  '᷹' => 220,
+  '᷻' => 230,
+  '᷼' => 233,
+  '᷽' => 220,
+  '᷾' => 230,
+  '᷿' => 220,
+  '⃐' => 230,
+  '⃑' => 230,
+  '⃒' => 1,
+  '⃓' => 1,
+  '⃔' => 230,
+  '⃕' => 230,
+  '⃖' => 230,
+  '⃗' => 230,
+  '⃘' => 1,
+  '⃙' => 1,
+  '⃚' => 1,
+  '⃛' => 230,
+  '⃜' => 230,
+  '⃡' => 230,
+  '⃥' => 1,
+  '⃦' => 1,
+  '⃧' => 230,
+  '⃨' => 220,
+  '⃩' => 230,
+  '⃪' => 1,
+  '⃫' => 1,
+  '⃬' => 220,
+  '⃭' => 220,
+  '⃮' => 220,
+  '⃯' => 220,
+  '⃰' => 230,
+  '⳯' => 230,
+  '⳰' => 230,
+  '⳱' => 230,
+  '⵿' => 9,
+  'ⷠ' => 230,
+  'ⷡ' => 230,
+  'ⷢ' => 230,
+  'ⷣ' => 230,
+  'ⷤ' => 230,
+  'ⷥ' => 230,
+  'ⷦ' => 230,
+  'ⷧ' => 230,
+  'ⷨ' => 230,
+  'ⷩ' => 230,
+  'ⷪ' => 230,
+  'ⷫ' => 230,
+  'ⷬ' => 230,
+  'ⷭ' => 230,
+  'ⷮ' => 230,
+  'ⷯ' => 230,
+  'ⷰ' => 230,
+  'ⷱ' => 230,
+  'ⷲ' => 230,
+  'ⷳ' => 230,
+  'ⷴ' => 230,
+  'ⷵ' => 230,
+  'ⷶ' => 230,
+  'ⷷ' => 230,
+  'ⷸ' => 230,
+  'ⷹ' => 230,
+  'ⷺ' => 230,
+  'ⷻ' => 230,
+  'ⷼ' => 230,
+  'ⷽ' => 230,
+  'ⷾ' => 230,
+  'ⷿ' => 230,
+  '〪' => 218,
+  '〫' => 228,
+  '〬' => 232,
+  '〭' => 222,
+  '〮' => 224,
+  '〯' => 224,
+  '゙' => 8,
+  '゚' => 8,
+  '꙯' => 230,
+  'ꙴ' => 230,
+  'ꙵ' => 230,
+  'ꙶ' => 230,
+  'ꙷ' => 230,
+  'ꙸ' => 230,
+  'ꙹ' => 230,
+  'ꙺ' => 230,
+  'ꙻ' => 230,
+  '꙼' => 230,
+  '꙽' => 230,
+  'ꚞ' => 230,
+  'ꚟ' => 230,
+  '꛰' => 230,
+  '꛱' => 230,
+  '꠆' => 9,
+  '꠬' => 9,
+  '꣄' => 9,
+  '꣠' => 230,
+  '꣡' => 230,
+  '꣢' => 230,
+  '꣣' => 230,
+  '꣤' => 230,
+  '꣥' => 230,
+  '꣦' => 230,
+  '꣧' => 230,
+  '꣨' => 230,
+  '꣩' => 230,
+  '꣪' => 230,
+  '꣫' => 230,
+  '꣬' => 230,
+  '꣭' => 230,
+  '꣮' => 230,
+  '꣯' => 230,
+  '꣰' => 230,
+  '꣱' => 230,
+  '꤫' => 220,
+  '꤬' => 220,
+  '꤭' => 220,
+  '꥓' => 9,
+  '꦳' => 7,
+  '꧀' => 9,
+  'ꪰ' => 230,
+  'ꪲ' => 230,
+  'ꪳ' => 230,
+  'ꪴ' => 220,
+  'ꪷ' => 230,
+  'ꪸ' => 230,
+  'ꪾ' => 230,
+  '꪿' => 230,
+  '꫁' => 230,
+  '꫶' => 9,
+  '꯭' => 9,
+  'ﬞ' => 26,
+  '︠' => 230,
+  '︡' => 230,
+  '︢' => 230,
+  '︣' => 230,
+  '︤' => 230,
+  '︥' => 230,
+  '︦' => 230,
+  '︧' => 220,
+  '︨' => 220,
+  '︩' => 220,
+  '︪' => 220,
+  '︫' => 220,
+  '︬' => 220,
+  '︭' => 220,
+  '︮' => 230,
+  '︯' => 230,
+  '𐇽' => 220,
+  '𐋠' => 220,
+  '𐍶' => 230,
+  '𐍷' => 230,
+  '𐍸' => 230,
+  '𐍹' => 230,
+  '𐍺' => 230,
+  '𐨍' => 220,
+  '𐨏' => 230,
+  '𐨸' => 230,
+  '𐨹' => 1,
+  '𐨺' => 220,
+  '𐨿' => 9,
+  '𐫥' => 230,
+  '𐫦' => 220,
+  '𐴤' => 230,
+  '𐴥' => 230,
+  '𐴦' => 230,
+  '𐴧' => 230,
+  '𐺫' => 230,
+  '𐺬' => 230,
+  '𐽆' => 220,
+  '𐽇' => 220,
+  '𐽈' => 230,
+  '𐽉' => 230,
+  '𐽊' => 230,
+  '𐽋' => 220,
+  '𐽌' => 230,
+  '𐽍' => 220,
+  '𐽎' => 220,
+  '𐽏' => 220,
+  '𐽐' => 220,
+  '𑁆' => 9,
+  '𑁿' => 9,
+  '𑂹' => 9,
+  '𑂺' => 7,
+  '𑄀' => 230,
+  '𑄁' => 230,
+  '𑄂' => 230,
+  '𑄳' => 9,
+  '𑄴' => 9,
+  '𑅳' => 7,
+  '𑇀' => 9,
+  '𑇊' => 7,
+  '𑈵' => 9,
+  '𑈶' => 7,
+  '𑋩' => 7,
+  '𑋪' => 9,
+  '𑌻' => 7,
+  '𑌼' => 7,
+  '𑍍' => 9,
+  '𑍦' => 230,
+  '𑍧' => 230,
+  '𑍨' => 230,
+  '𑍩' => 230,
+  '𑍪' => 230,
+  '𑍫' => 230,
+  '𑍬' => 230,
+  '𑍰' => 230,
+  '𑍱' => 230,
+  '𑍲' => 230,
+  '𑍳' => 230,
+  '𑍴' => 230,
+  '𑑂' => 9,
+  '𑑆' => 7,
+  '𑑞' => 230,
+  '𑓂' => 9,
+  '𑓃' => 7,
+  '𑖿' => 9,
+  '𑗀' => 7,
+  '𑘿' => 9,
+  '𑚶' => 9,
+  '𑚷' => 7,
+  '𑜫' => 9,
+  '𑠹' => 9,
+  '𑠺' => 7,
+  '𑤽' => 9,
+  '𑤾' => 9,
+  '𑥃' => 7,
+  '𑧠' => 9,
+  '𑨴' => 9,
+  '𑩇' => 9,
+  '𑪙' => 9,
+  '𑰿' => 9,
+  '𑵂' => 7,
+  '𑵄' => 9,
+  '𑵅' => 9,
+  '𑶗' => 9,
+  '𖫰' => 1,
+  '𖫱' => 1,
+  '𖫲' => 1,
+  '𖫳' => 1,
+  '𖫴' => 1,
+  '𖬰' => 230,
+  '𖬱' => 230,
+  '𖬲' => 230,
+  '𖬳' => 230,
+  '𖬴' => 230,
+  '𖬵' => 230,
+  '𖬶' => 230,
+  '𖿰' => 6,
+  '𖿱' => 6,
+  '𛲞' => 1,
+  '𝅥' => 216,
+  '𝅦' => 216,
+  '𝅧' => 1,
+  '𝅨' => 1,
+  '𝅩' => 1,
+  '𝅭' => 226,
+  '𝅮' => 216,
+  '𝅯' => 216,
+  '𝅰' => 216,
+  '𝅱' => 216,
+  '𝅲' => 216,
+  '𝅻' => 220,
+  '𝅼' => 220,
+  '𝅽' => 220,
+  '𝅾' => 220,
+  '𝅿' => 220,
+  '𝆀' => 220,
+  '𝆁' => 220,
+  '𝆂' => 220,
+  '𝆅' => 230,
+  '𝆆' => 230,
+  '𝆇' => 230,
+  '𝆈' => 230,
+  '𝆉' => 230,
+  '𝆊' => 220,
+  '𝆋' => 220,
+  '𝆪' => 230,
+  '𝆫' => 230,
+  '𝆬' => 230,
+  '𝆭' => 230,
+  '𝉂' => 230,
+  '𝉃' => 230,
+  '𝉄' => 230,
+  '𞀀' => 230,
+  '𞀁' => 230,
+  '𞀂' => 230,
+  '𞀃' => 230,
+  '𞀄' => 230,
+  '𞀅' => 230,
+  '𞀆' => 230,
+  '𞀈' => 230,
+  '𞀉' => 230,
+  '𞀊' => 230,
+  '𞀋' => 230,
+  '𞀌' => 230,
+  '𞀍' => 230,
+  '𞀎' => 230,
+  '𞀏' => 230,
+  '𞀐' => 230,
+  '𞀑' => 230,
+  '𞀒' => 230,
+  '𞀓' => 230,
+  '𞀔' => 230,
+  '𞀕' => 230,
+  '𞀖' => 230,
+  '𞀗' => 230,
+  '𞀘' => 230,
+  '𞀛' => 230,
+  '𞀜' => 230,
+  '𞀝' => 230,
+  '𞀞' => 230,
+  '𞀟' => 230,
+  '𞀠' => 230,
+  '𞀡' => 230,
+  '𞀣' => 230,
+  '𞀤' => 230,
+  '𞀦' => 230,
+  '𞀧' => 230,
+  '𞀨' => 230,
+  '𞀩' => 230,
+  '𞀪' => 230,
+  '𞄰' => 230,
+  '𞄱' => 230,
+  '𞄲' => 230,
+  '𞄳' => 230,
+  '𞄴' => 230,
+  '𞄵' => 230,
+  '𞄶' => 230,
+  '𞋬' => 230,
+  '𞋭' => 230,
+  '𞋮' => 230,
+  '𞋯' => 230,
+  '𞣐' => 220,
+  '𞣑' => 220,
+  '𞣒' => 220,
+  '𞣓' => 220,
+  '𞣔' => 220,
+  '𞣕' => 220,
+  '𞣖' => 220,
+  '𞥄' => 230,
+  '𞥅' => 230,
+  '𞥆' => 230,
+  '𞥇' => 230,
+  '𞥈' => 230,
+  '𞥉' => 230,
+  '𞥊' => 7,
+);
Index: vendor/symfony/polyfill-intl-normalizer/Resources/unidata/compatibilityDecomposition.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/compatibilityDecomposition.php b/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/compatibilityDecomposition.php
new file mode 100644
--- /dev/null	(date 1725846310000)
+++ b/vendor/symfony/polyfill-intl-normalizer/Resources/unidata/compatibilityDecomposition.php	(date 1725846310000)
@@ -0,0 +1,3695 @@
+<?php
+
+return array (
+  ' ' => ' ',
+  '¨' => ' ̈',
+  'ª' => 'a',
+  '¯' => ' ̄',
+  '²' => '2',
+  '³' => '3',
+  '´' => ' ́',
+  'µ' => 'μ',
+  '¸' => ' ̧',
+  '¹' => '1',
+  'º' => 'o',
+  '¼' => '1⁄4',
+  '½' => '1⁄2',
+  '¾' => '3⁄4',
+  'Ĳ' => 'IJ',
+  'ĳ' => 'ij',
+  'Ŀ' => 'L·',
+  'ŀ' => 'l·',
+  'ŉ' => 'ʼn',
+  'ſ' => 's',
+  'Ǆ' => 'DŽ',
+  'ǅ' => 'Dž',
+  'ǆ' => 'dž',
+  'Ǉ' => 'LJ',
+  'ǈ' => 'Lj',
+  'ǉ' => 'lj',
+  'Ǌ' => 'NJ',
+  'ǋ' => 'Nj',
+  'ǌ' => 'nj',
+  'Ǳ' => 'DZ',
+  'ǲ' => 'Dz',
+  'ǳ' => 'dz',
+  'ʰ' => 'h',
+  'ʱ' => 'ɦ',
+  'ʲ' => 'j',
+  'ʳ' => 'r',
+  'ʴ' => 'ɹ',
+  'ʵ' => 'ɻ',
+  'ʶ' => 'ʁ',
+  'ʷ' => 'w',
+  'ʸ' => 'y',
+  '˘' => ' ̆',
+  '˙' => ' ̇',
+  '˚' => ' ̊',
+  '˛' => ' ̨',
+  '˜' => ' ̃',
+  '˝' => ' ̋',
+  'ˠ' => 'ɣ',
+  'ˡ' => 'l',
+  'ˢ' => 's',
+  'ˣ' => 'x',
+  'ˤ' => 'ʕ',
+  'ͺ' => ' ͅ',
+  '΄' => ' ́',
+  '΅' => ' ̈́',
+  'ϐ' => 'β',
+  'ϑ' => 'θ',
+  'ϒ' => 'Υ',
+  'ϓ' => 'Ύ',
+  'ϔ' => 'Ϋ',
+  'ϕ' => 'φ',
+  'ϖ' => 'π',
+  'ϰ' => 'κ',
+  'ϱ' => 'ρ',
+  'ϲ' => 'ς',
+  'ϴ' => 'Θ',
+  'ϵ' => 'ε',
+  'Ϲ' => 'Σ',
+  'և' => 'եւ',
+  'ٵ' => 'اٴ',
+  'ٶ' => 'وٴ',
+  'ٷ' => 'ۇٴ',
+  'ٸ' => 'يٴ',
+  'ำ' => 'ํา',
+  'ຳ' => 'ໍາ',
+  'ໜ' => 'ຫນ',
+  'ໝ' => 'ຫມ',
+  '༌' => '་',
+  'ཷ' => 'ྲཱྀ',
+  'ཹ' => 'ླཱྀ',
+  'ჼ' => 'ნ',
+  'ᴬ' => 'A',
+  'ᴭ' => 'Æ',
+  'ᴮ' => 'B',
+  'ᴰ' => 'D',
+  'ᴱ' => 'E',
+  'ᴲ' => 'Ǝ',
+  'ᴳ' => 'G',
+  'ᴴ' => 'H',
+  'ᴵ' => 'I',
+  'ᴶ' => 'J',
+  'ᴷ' => 'K',
+  'ᴸ' => 'L',
+  'ᴹ' => 'M',
+  'ᴺ' => 'N',
+  'ᴼ' => 'O',
+  'ᴽ' => 'Ȣ',
+  'ᴾ' => 'P',
+  'ᴿ' => 'R',
+  'ᵀ' => 'T',
+  'ᵁ' => 'U',
+  'ᵂ' => 'W',
+  'ᵃ' => 'a',
+  'ᵄ' => 'ɐ',
+  'ᵅ' => 'ɑ',
+  'ᵆ' => 'ᴂ',
+  'ᵇ' => 'b',
+  'ᵈ' => 'd',
+  'ᵉ' => 'e',
+  'ᵊ' => 'ə',
+  'ᵋ' => 'ɛ',
+  'ᵌ' => 'ɜ',
+  'ᵍ' => 'g',
+  'ᵏ' => 'k',
+  'ᵐ' => 'm',
+  'ᵑ' => 'ŋ',
+  'ᵒ' => 'o',
+  'ᵓ' => 'ɔ',
+  'ᵔ' => 'ᴖ',
+  'ᵕ' => 'ᴗ',
+  'ᵖ' => 'p',
+  'ᵗ' => 't',
+  'ᵘ' => 'u',
+  'ᵙ' => 'ᴝ',
+  'ᵚ' => 'ɯ',
+  'ᵛ' => 'v',
+  'ᵜ' => 'ᴥ',
+  'ᵝ' => 'β',
+  'ᵞ' => 'γ',
+  'ᵟ' => 'δ',
+  'ᵠ' => 'φ',
+  'ᵡ' => 'χ',
+  'ᵢ' => 'i',
+  'ᵣ' => 'r',
+  'ᵤ' => 'u',
+  'ᵥ' => 'v',
+  'ᵦ' => 'β',
+  'ᵧ' => 'γ',
+  'ᵨ' => 'ρ',
+  'ᵩ' => 'φ',
+  'ᵪ' => 'χ',
+  'ᵸ' => 'н',
+  'ᶛ' => 'ɒ',
+  'ᶜ' => 'c',
+  'ᶝ' => 'ɕ',
+  'ᶞ' => 'ð',
+  'ᶟ' => 'ɜ',
+  'ᶠ' => 'f',
+  'ᶡ' => 'ɟ',
+  'ᶢ' => 'ɡ',
+  'ᶣ' => 'ɥ',
+  'ᶤ' => 'ɨ',
+  'ᶥ' => 'ɩ',
+  'ᶦ' => 'ɪ',
+  'ᶧ' => 'ᵻ',
+  'ᶨ' => 'ʝ',
+  'ᶩ' => 'ɭ',
+  'ᶪ' => 'ᶅ',
+  'ᶫ' => 'ʟ',
+  'ᶬ' => 'ɱ',
+  'ᶭ' => 'ɰ',
+  'ᶮ' => 'ɲ',
+  'ᶯ' => 'ɳ',
+  'ᶰ' => 'ɴ',
+  'ᶱ' => 'ɵ',
+  'ᶲ' => 'ɸ',
+  'ᶳ' => 'ʂ',
+  'ᶴ' => 'ʃ',
+  'ᶵ' => 'ƫ',
+  'ᶶ' => 'ʉ',
+  'ᶷ' => 'ʊ',
+  'ᶸ' => 'ᴜ',
+  'ᶹ' => 'ʋ',
+  'ᶺ' => 'ʌ',
+  'ᶻ' => 'z',
+  'ᶼ' => 'ʐ',
+  'ᶽ' => 'ʑ',
+  'ᶾ' => 'ʒ',
+  'ᶿ' => 'θ',
+  'ẚ' => 'aʾ',
+  'ẛ' => 'ṡ',
+  '᾽' => ' ̓',
+  '᾿' => ' ̓',
+  '῀' => ' ͂',
+  '῁' => ' ̈͂',
+  '῍' => ' ̓̀',
+  '῎' => ' ̓́',
+  '῏' => ' ̓͂',
+  '῝' => ' ̔̀',
+  '῞' => ' ̔́',
+  '῟' => ' ̔͂',
+  '῭' => ' ̈̀',
+  '΅' => ' ̈́',
+  '´' => ' ́',
+  '῾' => ' ̔',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  ' ' => ' ',
+  '‑' => '‐',
+  '‗' => ' ̳',
+  '․' => '.',
+  '‥' => '..',
+  '…' => '...',
+  ' ' => ' ',
+  '″' => '′′',
+  '‴' => '′′′',
+  '‶' => '‵‵',
+  '‷' => '‵‵‵',
+  '‼' => '!!',
+  '‾' => ' ̅',
+  '⁇' => '??',
+  '⁈' => '?!',
+  '⁉' => '!?',
+  '⁗' => '′′′′',
+  ' ' => ' ',
+  '⁰' => '0',
+  'ⁱ' => 'i',
+  '⁴' => '4',
+  '⁵' => '5',
+  '⁶' => '6',
+  '⁷' => '7',
+  '⁸' => '8',
+  '⁹' => '9',
+  '⁺' => '+',
+  '⁻' => '−',
+  '⁼' => '=',
+  '⁽' => '(',
+  '⁾' => ')',
+  'ⁿ' => 'n',
+  '₀' => '0',
+  '₁' => '1',
+  '₂' => '2',
+  '₃' => '3',
+  '₄' => '4',
+  '₅' => '5',
+  '₆' => '6',
+  '₇' => '7',
+  '₈' => '8',
+  '₉' => '9',
+  '₊' => '+',
+  '₋' => '−',
+  '₌' => '=',
+  '₍' => '(',
+  '₎' => ')',
+  'ₐ' => 'a',
+  'ₑ' => 'e',
+  'ₒ' => 'o',
+  'ₓ' => 'x',
+  'ₔ' => 'ə',
+  'ₕ' => 'h',
+  'ₖ' => 'k',
+  'ₗ' => 'l',
+  'ₘ' => 'm',
+  'ₙ' => 'n',
+  'ₚ' => 'p',
+  'ₛ' => 's',
+  'ₜ' => 't',
+  '₨' => 'Rs',
+  '℀' => 'a/c',
+  '℁' => 'a/s',
+  'ℂ' => 'C',
+  '℃' => '°C',
+  '℅' => 'c/o',
+  '℆' => 'c/u',
+  'ℇ' => 'Ɛ',
+  '℉' => '°F',
+  'ℊ' => 'g',
+  'ℋ' => 'H',
+  'ℌ' => 'H',
+  'ℍ' => 'H',
+  'ℎ' => 'h',
+  'ℏ' => 'ħ',
+  'ℐ' => 'I',
+  'ℑ' => 'I',
+  'ℒ' => 'L',
+  'ℓ' => 'l',
+  'ℕ' => 'N',
+  '№' => 'No',
+  'ℙ' => 'P',
+  'ℚ' => 'Q',
+  'ℛ' => 'R',
+  'ℜ' => 'R',
+  'ℝ' => 'R',
+  '℠' => 'SM',
+  '℡' => 'TEL',
+  '™' => 'TM',
+  'ℤ' => 'Z',
+  'ℨ' => 'Z',
+  'ℬ' => 'B',
+  'ℭ' => 'C',
+  'ℯ' => 'e',
+  'ℰ' => 'E',
+  'ℱ' => 'F',
+  'ℳ' => 'M',
+  'ℴ' => 'o',
+  'ℵ' => 'א',
+  'ℶ' => 'ב',
+  'ℷ' => 'ג',
+  'ℸ' => 'ד',
+  'ℹ' => 'i',
+  '℻' => 'FAX',
+  'ℼ' => 'π',
+  'ℽ' => 'γ',
+  'ℾ' => 'Γ',
+  'ℿ' => 'Π',
+  '⅀' => '∑',
+  'ⅅ' => 'D',
+  'ⅆ' => 'd',
+  'ⅇ' => 'e',
+  'ⅈ' => 'i',
+  'ⅉ' => 'j',
+  '⅐' => '1⁄7',
+  '⅑' => '1⁄9',
+  '⅒' => '1⁄10',
+  '⅓' => '1⁄3',
+  '⅔' => '2⁄3',
+  '⅕' => '1⁄5',
+  '⅖' => '2⁄5',
+  '⅗' => '3⁄5',
+  '⅘' => '4⁄5',
+  '⅙' => '1⁄6',
+  '⅚' => '5⁄6',
+  '⅛' => '1⁄8',
+  '⅜' => '3⁄8',
+  '⅝' => '5⁄8',
+  '⅞' => '7⁄8',
+  '⅟' => '1⁄',
+  'Ⅰ' => 'I',
+  'Ⅱ' => 'II',
+  'Ⅲ' => 'III',
+  'Ⅳ' => 'IV',
+  'Ⅴ' => 'V',
+  'Ⅵ' => 'VI',
+  'Ⅶ' => 'VII',
+  'Ⅷ' => 'VIII',
+  'Ⅸ' => 'IX',
+  'Ⅹ' => 'X',
+  'Ⅺ' => 'XI',
+  'Ⅻ' => 'XII',
+  'Ⅼ' => 'L',
+  'Ⅽ' => 'C',
+  'Ⅾ' => 'D',
+  'Ⅿ' => 'M',
+  'ⅰ' => 'i',
+  'ⅱ' => 'ii',
+  'ⅲ' => 'iii',
+  'ⅳ' => 'iv',
+  'ⅴ' => 'v',
+  'ⅵ' => 'vi',
+  'ⅶ' => 'vii',
+  'ⅷ' => 'viii',
+  'ⅸ' => 'ix',
+  'ⅹ' => 'x',
+  'ⅺ' => 'xi',
+  'ⅻ' => 'xii',
+  'ⅼ' => 'l',
+  'ⅽ' => 'c',
+  'ⅾ' => 'd',
+  'ⅿ' => 'm',
+  '↉' => '0⁄3',
+  '∬' => '∫∫',
+  '∭' => '∫∫∫',
+  '∯' => '∮∮',
+  '∰' => '∮∮∮',
+  '①' => '1',
+  '②' => '2',
+  '③' => '3',
+  '④' => '4',
+  '⑤' => '5',
+  '⑥' => '6',
+  '⑦' => '7',
+  '⑧' => '8',
+  '⑨' => '9',
+  '⑩' => '10',
+  '⑪' => '11',
+  '⑫' => '12',
+  '⑬' => '13',
+  '⑭' => '14',
+  '⑮' => '15',
+  '⑯' => '16',
+  '⑰' => '17',
+  '⑱' => '18',
+  '⑲' => '19',
+  '⑳' => '20',
+  '⑴' => '(1)',
+  '⑵' => '(2)',
+  '⑶' => '(3)',
+  '⑷' => '(4)',
+  '⑸' => '(5)',
+  '⑹' => '(6)',
+  '⑺' => '(7)',
+  '⑻' => '(8)',
+  '⑼' => '(9)',
+  '⑽' => '(10)',
+  '⑾' => '(11)',
+  '⑿' => '(12)',
+  '⒀' => '(13)',
+  '⒁' => '(14)',
+  '⒂' => '(15)',
+  '⒃' => '(16)',
+  '⒄' => '(17)',
+  '⒅' => '(18)',
+  '⒆' => '(19)',
+  '⒇' => '(20)',
+  '⒈' => '1.',
+  '⒉' => '2.',
+  '⒊' => '3.',
+  '⒋' => '4.',
+  '⒌' => '5.',
+  '⒍' => '6.',
+  '⒎' => '7.',
+  '⒏' => '8.',
+  '⒐' => '9.',
+  '⒑' => '10.',
+  '⒒' => '11.',
+  '⒓' => '12.',
+  '⒔' => '13.',
+  '⒕' => '14.',
+  '⒖' => '15.',
+  '⒗' => '16.',
+  '⒘' => '17.',
+  '⒙' => '18.',
+  '⒚' => '19.',
+  '⒛' => '20.',
+  '⒜' => '(a)',
+  '⒝' => '(b)',
+  '⒞' => '(c)',
+  '⒟' => '(d)',
+  '⒠' => '(e)',
+  '⒡' => '(f)',
+  '⒢' => '(g)',
+  '⒣' => '(h)',
+  '⒤' => '(i)',
+  '⒥' => '(j)',
+  '⒦' => '(k)',
+  '⒧' => '(l)',
+  '⒨' => '(m)',
+  '⒩' => '(n)',
+  '⒪' => '(o)',
+  '⒫' => '(p)',
+  '⒬' => '(q)',
+  '⒭' => '(r)',
+  '⒮' => '(s)',
+  '⒯' => '(t)',
+  '⒰' => '(u)',
+  '⒱' => '(v)',
+  '⒲' => '(w)',
+  '⒳' => '(x)',
+  '⒴' => '(y)',
+  '⒵' => '(z)',
+  'Ⓐ' => 'A',
+  'Ⓑ' => 'B',
+  'Ⓒ' => 'C',
+  'Ⓓ' => 'D',
+  'Ⓔ' => 'E',
+  'Ⓕ' => 'F',
+  'Ⓖ' => 'G',
+  'Ⓗ' => 'H',
+  'Ⓘ' => 'I',
+  'Ⓙ' => 'J',
+  'Ⓚ' => 'K',
+  'Ⓛ' => 'L',
+  'Ⓜ' => 'M',
+  'Ⓝ' => 'N',
+  'Ⓞ' => 'O',
+  'Ⓟ' => 'P',
+  'Ⓠ' => 'Q',
+  'Ⓡ' => 'R',
+  'Ⓢ' => 'S',
+  'Ⓣ' => 'T',
+  'Ⓤ' => 'U',
+  'Ⓥ' => 'V',
+  'Ⓦ' => 'W',
+  'Ⓧ' => 'X',
+  'Ⓨ' => 'Y',
+  'Ⓩ' => 'Z',
+  'ⓐ' => 'a',
+  'ⓑ' => 'b',
+  'ⓒ' => 'c',
+  'ⓓ' => 'd',
+  'ⓔ' => 'e',
+  'ⓕ' => 'f',
+  'ⓖ' => 'g',
+  'ⓗ' => 'h',
+  'ⓘ' => 'i',
+  'ⓙ' => 'j',
+  'ⓚ' => 'k',
+  'ⓛ' => 'l',
+  'ⓜ' => 'm',
+  'ⓝ' => 'n',
+  'ⓞ' => 'o',
+  'ⓟ' => 'p',
+  'ⓠ' => 'q',
+  'ⓡ' => 'r',
+  'ⓢ' => 's',
+  'ⓣ' => 't',
+  'ⓤ' => 'u',
+  'ⓥ' => 'v',
+  'ⓦ' => 'w',
+  'ⓧ' => 'x',
+  'ⓨ' => 'y',
+  'ⓩ' => 'z',
+  '⓪' => '0',
+  '⨌' => '∫∫∫∫',
+  '⩴' => '::=',
+  '⩵' => '==',
+  '⩶' => '===',
+  'ⱼ' => 'j',
+  'ⱽ' => 'V',
+  'ⵯ' => 'ⵡ',
+  '⺟' => '母',
+  '⻳' => '龟',
+  '⼀' => '一',
+  '⼁' => '丨',
+  '⼂' => '丶',
+  '⼃' => '丿',
+  '⼄' => '乙',
+  '⼅' => '亅',
+  '⼆' => '二',
+  '⼇' => '亠',
+  '⼈' => '人',
+  '⼉' => '儿',
+  '⼊' => '入',
+  '⼋' => '八',
+  '⼌' => '冂',
+  '⼍' => '冖',
+  '⼎' => '冫',
+  '⼏' => '几',
+  '⼐' => '凵',
+  '⼑' => '刀',
+  '⼒' => '力',
+  '⼓' => '勹',
+  '⼔' => '匕',
+  '⼕' => '匚',
+  '⼖' => '匸',
+  '⼗' => '十',
+  '⼘' => '卜',
+  '⼙' => '卩',
+  '⼚' => '厂',
+  '⼛' => '厶',
+  '⼜' => '又',
+  '⼝' => '口',
+  '⼞' => '囗',
+  '⼟' => '土',
+  '⼠' => '士',
+  '⼡' => '夂',
+  '⼢' => '夊',
+  '⼣' => '夕',
+  '⼤' => '大',
+  '⼥' => '女',
+  '⼦' => '子',
+  '⼧' => '宀',
+  '⼨' => '寸',
+  '⼩' => '小',
+  '⼪' => '尢',
+  '⼫' => '尸',
+  '⼬' => '屮',
+  '⼭' => '山',
+  '⼮' => '巛',
+  '⼯' => '工',
+  '⼰' => '己',
+  '⼱' => '巾',
+  '⼲' => '干',
+  '⼳' => '幺',
+  '⼴' => '广',
+  '⼵' => '廴',
+  '⼶' => '廾',
+  '⼷' => '弋',
+  '⼸' => '弓',
+  '⼹' => '彐',
+  '⼺' => '彡',
+  '⼻' => '彳',
+  '⼼' => '心',
+  '⼽' => '戈',
+  '⼾' => '戶',
+  '⼿' => '手',
+  '⽀' => '支',
+  '⽁' => '攴',
+  '⽂' => '文',
+  '⽃' => '斗',
+  '⽄' => '斤',
+  '⽅' => '方',
+  '⽆' => '无',
+  '⽇' => '日',
+  '⽈' => '曰',
+  '⽉' => '月',
+  '⽊' => '木',
+  '⽋' => '欠',
+  '⽌' => '止',
+  '⽍' => '歹',
+  '⽎' => '殳',
+  '⽏' => '毋',
+  '⽐' => '比',
+  '⽑' => '毛',
+  '⽒' => '氏',
+  '⽓' => '气',
+  '⽔' => '水',
+  '⽕' => '火',
+  '⽖' => '爪',
+  '⽗' => '父',
+  '⽘' => '爻',
+  '⽙' => '爿',
+  '⽚' => '片',
+  '⽛' => '牙',
+  '⽜' => '牛',
+  '⽝' => '犬',
+  '⽞' => '玄',
+  '⽟' => '玉',
+  '⽠' => '瓜',
+  '⽡' => '瓦',
+  '⽢' => '甘',
+  '⽣' => '生',
+  '⽤' => '用',
+  '⽥' => '田',
+  '⽦' => '疋',
+  '⽧' => '疒',
+  '⽨' => '癶',
+  '⽩' => '白',
+  '⽪' => '皮',
+  '⽫' => '皿',
+  '⽬' => '目',
+  '⽭' => '矛',
+  '⽮' => '矢',
+  '⽯' => '石',
+  '⽰' => '示',
+  '⽱' => '禸',
+  '⽲' => '禾',
+  '⽳' => '穴',
+  '⽴' => '立',
+  '⽵' => '竹',
+  '⽶' => '米',
+  '⽷' => '糸',
+  '⽸' => '缶',
+  '⽹' => '网',
+  '⽺' => '羊',
+  '⽻' => '羽',
+  '⽼' => '老',
+  '⽽' => '而',
+  '⽾' => '耒',
+  '⽿' => '耳',
+  '⾀' => '聿',
+  '⾁' => '肉',
+  '⾂' => '臣',
+  '⾃' => '自',
+  '⾄' => '至',
+  '⾅' => '臼',
+  '⾆' => '舌',
+  '⾇' => '舛',
+  '⾈' => '舟',
+  '⾉' => '艮',
+  '⾊' => '色',
+  '⾋' => '艸',
+  '⾌' => '虍',
+  '⾍' => '虫',
+  '⾎' => '血',
+  '⾏' => '行',
+  '⾐' => '衣',
+  '⾑' => '襾',
+  '⾒' => '見',
+  '⾓' => '角',
+  '⾔' => '言',
+  '⾕' => '谷',
+  '⾖' => '豆',
+  '⾗' => '豕',
+  '⾘' => '豸',
+  '⾙' => '貝',
+  '⾚' => '赤',
+  '⾛' => '走',
+  '⾜' => '足',
+  '⾝' => '身',
+  '⾞' => '車',
+  '⾟' => '辛',
+  '⾠' => '辰',
+  '⾡' => '辵',
+  '⾢' => '邑',
+  '⾣' => '酉',
+  '⾤' => '釆',
+  '⾥' => '里',
+  '⾦' => '金',
+  '⾧' => '長',
+  '⾨' => '門',
+  '⾩' => '阜',
+  '⾪' => '隶',
+  '⾫' => '隹',
+  '⾬' => '雨',
+  '⾭' => '靑',
+  '⾮' => '非',
+  '⾯' => '面',
+  '⾰' => '革',
+  '⾱' => '韋',
+  '⾲' => '韭',
+  '⾳' => '音',
+  '⾴' => '頁',
+  '⾵' => '風',
+  '⾶' => '飛',
+  '⾷' => '食',
+  '⾸' => '首',
+  '⾹' => '香',
+  '⾺' => '馬',
+  '⾻' => '骨',
+  '⾼' => '高',
+  '⾽' => '髟',
+  '⾾' => '鬥',
+  '⾿' => '鬯',
+  '⿀' => '鬲',
+  '⿁' => '鬼',
+  '⿂' => '魚',
+  '⿃' => '鳥',
+  '⿄' => '鹵',
+  '⿅' => '鹿',
+  '⿆' => '麥',
+  '⿇' => '麻',
+  '⿈' => '黃',
+  '⿉' => '黍',
+  '⿊' => '黑',
+  '⿋' => '黹',
+  '⿌' => '黽',
+  '⿍' => '鼎',
+  '⿎' => '鼓',
+  '⿏' => '鼠',
+  '⿐' => '鼻',
+  '⿑' => '齊',
+  '⿒' => '齒',
+  '⿓' => '龍',
+  '⿔' => '龜',
+  '⿕' => '龠',
+  '　' => ' ',
+  '〶' => '〒',
+  '〸' => '十',
+  '〹' => '卄',
+  '〺' => '卅',
+  '゛' => ' ゙',
+  '゜' => ' ゚',
+  'ゟ' => 'より',
+  'ヿ' => 'コト',
+  'ㄱ' => 'ᄀ',
+  'ㄲ' => 'ᄁ',
+  'ㄳ' => 'ᆪ',
+  'ㄴ' => 'ᄂ',
+  'ㄵ' => 'ᆬ',
+  'ㄶ' => 'ᆭ',
+  'ㄷ' => 'ᄃ',
+  'ㄸ' => 'ᄄ',
+  'ㄹ' => 'ᄅ',
+  'ㄺ' => 'ᆰ',
+  'ㄻ' => 'ᆱ',
+  'ㄼ' => 'ᆲ',
+  'ㄽ' => 'ᆳ',
+  'ㄾ' => 'ᆴ',
+  'ㄿ' => 'ᆵ',
+  'ㅀ' => 'ᄚ',
+  'ㅁ' => 'ᄆ',
+  'ㅂ' => 'ᄇ',
+  'ㅃ' => 'ᄈ',
+  'ㅄ' => 'ᄡ',
+  'ㅅ' => 'ᄉ',
+  'ㅆ' => 'ᄊ',
+  'ㅇ' => 'ᄋ',
+  'ㅈ' => 'ᄌ',
+  'ㅉ' => 'ᄍ',
+  'ㅊ' => 'ᄎ',
+  'ㅋ' => 'ᄏ',
+  'ㅌ' => 'ᄐ',
+  'ㅍ' => 'ᄑ',
+  'ㅎ' => 'ᄒ',
+  'ㅏ' => 'ᅡ',
+  'ㅐ' => 'ᅢ',
+  'ㅑ' => 'ᅣ',
+  'ㅒ' => 'ᅤ',
+  'ㅓ' => 'ᅥ',
+  'ㅔ' => 'ᅦ',
+  'ㅕ' => 'ᅧ',
+  'ㅖ' => 'ᅨ',
+  'ㅗ' => 'ᅩ',
+  'ㅘ' => 'ᅪ',
+  'ㅙ' => 'ᅫ',
+  'ㅚ' => 'ᅬ',
+  'ㅛ' => 'ᅭ',
+  'ㅜ' => 'ᅮ',
+  'ㅝ' => 'ᅯ',
+  'ㅞ' => 'ᅰ',
+  'ㅟ' => 'ᅱ',
+  'ㅠ' => 'ᅲ',
+  'ㅡ' => 'ᅳ',
+  'ㅢ' => 'ᅴ',
+  'ㅣ' => 'ᅵ',
+  'ㅤ' => 'ᅠ',
+  'ㅥ' => 'ᄔ',
+  'ㅦ' => 'ᄕ',
+  'ㅧ' => 'ᇇ',
+  'ㅨ' => 'ᇈ',
+  'ㅩ' => 'ᇌ',
+  'ㅪ' => 'ᇎ',
+  'ㅫ' => 'ᇓ',
+  'ㅬ' => 'ᇗ',
+  'ㅭ' => 'ᇙ',
+  'ㅮ' => 'ᄜ',
+  'ㅯ' => 'ᇝ',
+  'ㅰ' => 'ᇟ',
+  'ㅱ' => 'ᄝ',
+  'ㅲ' => 'ᄞ',
+  'ㅳ' => 'ᄠ',
+  'ㅴ' => 'ᄢ',
+  'ㅵ' => 'ᄣ',
+  'ㅶ' => 'ᄧ',
+  'ㅷ' => 'ᄩ',
+  'ㅸ' => 'ᄫ',
+  'ㅹ' => 'ᄬ',
+  'ㅺ' => 'ᄭ',
+  'ㅻ' => 'ᄮ',
+  'ㅼ' => 'ᄯ',
+  'ㅽ' => 'ᄲ',
+  'ㅾ' => 'ᄶ',
+  'ㅿ' => 'ᅀ',
+  'ㆀ' => 'ᅇ',
+  'ㆁ' => 'ᅌ',
+  'ㆂ' => 'ᇱ',
+  'ㆃ' => 'ᇲ',
+  'ㆄ' => 'ᅗ',
+  'ㆅ' => 'ᅘ',
+  'ㆆ' => 'ᅙ',
+  'ㆇ' => 'ᆄ',
+  'ㆈ' => 'ᆅ',
+  'ㆉ' => 'ᆈ',
+  'ㆊ' => 'ᆑ',
+  'ㆋ' => 'ᆒ',
+  'ㆌ' => 'ᆔ',
+  'ㆍ' => 'ᆞ',
+  'ㆎ' => 'ᆡ',
+  '㆒' => '一',
+  '㆓' => '二',
+  '㆔' => '三',
+  '㆕' => '四',
+  '㆖' => '上',
+  '㆗' => '中',
+  '㆘' => '下',
+  '㆙' => '甲',
+  '㆚' => '乙',
+  '㆛' => '丙',
+  '㆜' => '丁',
+  '㆝' => '天',
+  '㆞' => '地',
+  '㆟' => '人',
+  '㈀' => '(ᄀ)',
+  '㈁' => '(ᄂ)',
+  '㈂' => '(ᄃ)',
+  '㈃' => '(ᄅ)',
+  '㈄' => '(ᄆ)',
+  '㈅' => '(ᄇ)',
+  '㈆' => '(ᄉ)',
+  '㈇' => '(ᄋ)',
+  '㈈' => '(ᄌ)',
+  '㈉' => '(ᄎ)',
+  '㈊' => '(ᄏ)',
+  '㈋' => '(ᄐ)',
+  '㈌' => '(ᄑ)',
+  '㈍' => '(ᄒ)',
+  '㈎' => '(가)',
+  '㈏' => '(나)',
+  '㈐' => '(다)',
+  '㈑' => '(라)',
+  '㈒' => '(마)',
+  '㈓' => '(바)',
+  '㈔' => '(사)',
+  '㈕' => '(아)',
+  '㈖' => '(자)',
+  '㈗' => '(차)',
+  '㈘' => '(카)',
+  '㈙' => '(타)',
+  '㈚' => '(파)',
+  '㈛' => '(하)',
+  '㈜' => '(주)',
+  '㈝' => '(오전)',
+  '㈞' => '(오후)',
+  '㈠' => '(一)',
+  '㈡' => '(二)',
+  '㈢' => '(三)',
+  '㈣' => '(四)',
+  '㈤' => '(五)',
+  '㈥' => '(六)',
+  '㈦' => '(七)',
+  '㈧' => '(八)',
+  '㈨' => '(九)',
+  '㈩' => '(十)',
+  '㈪' => '(月)',
+  '㈫' => '(火)',
+  '㈬' => '(水)',
+  '㈭' => '(木)',
+  '㈮' => '(金)',
+  '㈯' => '(土)',
+  '㈰' => '(日)',
+  '㈱' => '(株)',
+  '㈲' => '(有)',
+  '㈳' => '(社)',
+  '㈴' => '(名)',
+  '㈵' => '(特)',
+  '㈶' => '(財)',
+  '㈷' => '(祝)',
+  '㈸' => '(労)',
+  '㈹' => '(代)',
+  '㈺' => '(呼)',
+  '㈻' => '(学)',
+  '㈼' => '(監)',
+  '㈽' => '(企)',
+  '㈾' => '(資)',
+  '㈿' => '(協)',
+  '㉀' => '(祭)',
+  '㉁' => '(休)',
+  '㉂' => '(自)',
+  '㉃' => '(至)',
+  '㉄' => '問',
+  '㉅' => '幼',
+  '㉆' => '文',
+  '㉇' => '箏',
+  '㉐' => 'PTE',
+  '㉑' => '21',
+  '㉒' => '22',
+  '㉓' => '23',
+  '㉔' => '24',
+  '㉕' => '25',
+  '㉖' => '26',
+  '㉗' => '27',
+  '㉘' => '28',
+  '㉙' => '29',
+  '㉚' => '30',
+  '㉛' => '31',
+  '㉜' => '32',
+  '㉝' => '33',
+  '㉞' => '34',
+  '㉟' => '35',
+  '㉠' => 'ᄀ',
+  '㉡' => 'ᄂ',
+  '㉢' => 'ᄃ',
+  '㉣' => 'ᄅ',
+  '㉤' => 'ᄆ',
+  '㉥' => 'ᄇ',
+  '㉦' => 'ᄉ',
+  '㉧' => 'ᄋ',
+  '㉨' => 'ᄌ',
+  '㉩' => 'ᄎ',
+  '㉪' => 'ᄏ',
+  '㉫' => 'ᄐ',
+  '㉬' => 'ᄑ',
+  '㉭' => 'ᄒ',
+  '㉮' => '가',
+  '㉯' => '나',
+  '㉰' => '다',
+  '㉱' => '라',
+  '㉲' => '마',
+  '㉳' => '바',
+  '㉴' => '사',
+  '㉵' => '아',
+  '㉶' => '자',
+  '㉷' => '차',
+  '㉸' => '카',
+  '㉹' => '타',
+  '㉺' => '파',
+  '㉻' => '하',
+  '㉼' => '참고',
+  '㉽' => '주의',
+  '㉾' => '우',
+  '㊀' => '一',
+  '㊁' => '二',
+  '㊂' => '三',
+  '㊃' => '四',
+  '㊄' => '五',
+  '㊅' => '六',
+  '㊆' => '七',
+  '㊇' => '八',
+  '㊈' => '九',
+  '㊉' => '十',
+  '㊊' => '月',
+  '㊋' => '火',
+  '㊌' => '水',
+  '㊍' => '木',
+  '㊎' => '金',
+  '㊏' => '土',
+  '㊐' => '日',
+  '㊑' => '株',
+  '㊒' => '有',
+  '㊓' => '社',
+  '㊔' => '名',
+  '㊕' => '特',
+  '㊖' => '財',
+  '㊗' => '祝',
+  '㊘' => '労',
+  '㊙' => '秘',
+  '㊚' => '男',
+  '㊛' => '女',
+  '㊜' => '適',
+  '㊝' => '優',
+  '㊞' => '印',
+  '㊟' => '注',
+  '㊠' => '項',
+  '㊡' => '休',
+  '㊢' => '写',
+  '㊣' => '正',
+  '㊤' => '上',
+  '㊥' => '中',
+  '㊦' => '下',
+  '㊧' => '左',
+  '㊨' => '右',
+  '㊩' => '医',
+  '㊪' => '宗',
+  '㊫' => '学',
+  '㊬' => '監',
+  '㊭' => '企',
+  '㊮' => '資',
+  '㊯' => '協',
+  '㊰' => '夜',
+  '㊱' => '36',
+  '㊲' => '37',
+  '㊳' => '38',
+  '㊴' => '39',
+  '㊵' => '40',
+  '㊶' => '41',
+  '㊷' => '42',
+  '㊸' => '43',
+  '㊹' => '44',
+  '㊺' => '45',
+  '㊻' => '46',
+  '㊼' => '47',
+  '㊽' => '48',
+  '㊾' => '49',
+  '㊿' => '50',
+  '㋀' => '1月',
+  '㋁' => '2月',
+  '㋂' => '3月',
+  '㋃' => '4月',
+  '㋄' => '5月',
+  '㋅' => '6月',
+  '㋆' => '7月',
+  '㋇' => '8月',
+  '㋈' => '9月',
+  '㋉' => '10月',
+  '㋊' => '11月',
+  '㋋' => '12月',
+  '㋌' => 'Hg',
+  '㋍' => 'erg',
+  '㋎' => 'eV',
+  '㋏' => 'LTD',
+  '㋐' => 'ア',
+  '㋑' => 'イ',
+  '㋒' => 'ウ',
+  '㋓' => 'エ',
+  '㋔' => 'オ',
+  '㋕' => 'カ',
+  '㋖' => 'キ',
+  '㋗' => 'ク',
+  '㋘' => 'ケ',
+  '㋙' => 'コ',
+  '㋚' => 'サ',
+  '㋛' => 'シ',
+  '㋜' => 'ス',
+  '㋝' => 'セ',
+  '㋞' => 'ソ',
+  '㋟' => 'タ',
+  '㋠' => 'チ',
+  '㋡' => 'ツ',
+  '㋢' => 'テ',
+  '㋣' => 'ト',
+  '㋤' => 'ナ',
+  '㋥' => 'ニ',
+  '㋦' => 'ヌ',
+  '㋧' => 'ネ',
+  '㋨' => 'ノ',
+  '㋩' => 'ハ',
+  '㋪' => 'ヒ',
+  '㋫' => 'フ',
+  '㋬' => 'ヘ',
+  '㋭' => 'ホ',
+  '㋮' => 'マ',
+  '㋯' => 'ミ',
+  '㋰' => 'ム',
+  '㋱' => 'メ',
+  '㋲' => 'モ',
+  '㋳' => 'ヤ',
+  '㋴' => 'ユ',
+  '㋵' => 'ヨ',
+  '㋶' => 'ラ',
+  '㋷' => 'リ',
+  '㋸' => 'ル',
+  '㋹' => 'レ',
+  '㋺' => 'ロ',
+  '㋻' => 'ワ',
+  '㋼' => 'ヰ',
+  '㋽' => 'ヱ',
+  '㋾' => 'ヲ',
+  '㋿' => '令和',
+  '㌀' => 'アパート',
+  '㌁' => 'アルファ',
+  '㌂' => 'アンペア',
+  '㌃' => 'アール',
+  '㌄' => 'イニング',
+  '㌅' => 'インチ',
+  '㌆' => 'ウォン',
+  '㌇' => 'エスクード',
+  '㌈' => 'エーカー',
+  '㌉' => 'オンス',
+  '㌊' => 'オーム',
+  '㌋' => 'カイリ',
+  '㌌' => 'カラット',
+  '㌍' => 'カロリー',
+  '㌎' => 'ガロン',
+  '㌏' => 'ガンマ',
+  '㌐' => 'ギガ',
+  '㌑' => 'ギニー',
+  '㌒' => 'キュリー',
+  '㌓' => 'ギルダー',
+  '㌔' => 'キロ',
+  '㌕' => 'キログラム',
+  '㌖' => 'キロメートル',
+  '㌗' => 'キロワット',
+  '㌘' => 'グラム',
+  '㌙' => 'グラムトン',
+  '㌚' => 'クルゼイロ',
+  '㌛' => 'クローネ',
+  '㌜' => 'ケース',
+  '㌝' => 'コルナ',
+  '㌞' => 'コーポ',
+  '㌟' => 'サイクル',
+  '㌠' => 'サンチーム',
+  '㌡' => 'シリング',
+  '㌢' => 'センチ',
+  '㌣' => 'セント',
+  '㌤' => 'ダース',
+  '㌥' => 'デシ',
+  '㌦' => 'ドル',
+  '㌧' => 'トン',
+  '㌨' => 'ナノ',
+  '㌩' => 'ノット',
+  '㌪' => 'ハイツ',
+  '㌫' => 'パーセント',
+  '㌬' => 'パーツ',
+  '㌭' => 'バーレル',
+  '㌮' => 'ピアストル',
+  '㌯' => 'ピクル',
+  '㌰' => 'ピコ',
+  '㌱' => 'ビル',
+  '㌲' => 'ファラッド',
+  '㌳' => 'フィート',
+  '㌴' => 'ブッシェル',
+  '㌵' => 'フラン',
+  '㌶' => 'ヘクタール',
+  '㌷' => 'ペソ',
+  '㌸' => 'ペニヒ',
+  '㌹' => 'ヘルツ',
+  '㌺' => 'ペンス',
+  '㌻' => 'ページ',
+  '㌼' => 'ベータ',
+  '㌽' => 'ポイント',
+  '㌾' => 'ボルト',
+  '㌿' => 'ホン',
+  '㍀' => 'ポンド',
+  '㍁' => 'ホール',
+  '㍂' => 'ホーン',
+  '㍃' => 'マイクロ',
+  '㍄' => 'マイル',
+  '㍅' => 'マッハ',
+  '㍆' => 'マルク',
+  '㍇' => 'マンション',
+  '㍈' => 'ミクロン',
+  '㍉' => 'ミリ',
+  '㍊' => 'ミリバール',
+  '㍋' => 'メガ',
+  '㍌' => 'メガトン',
+  '㍍' => 'メートル',
+  '㍎' => 'ヤード',
+  '㍏' => 'ヤール',
+  '㍐' => 'ユアン',
+  '㍑' => 'リットル',
+  '㍒' => 'リラ',
+  '㍓' => 'ルピー',
+  '㍔' => 'ルーブル',
+  '㍕' => 'レム',
+  '㍖' => 'レントゲン',
+  '㍗' => 'ワット',
+  '㍘' => '0点',
+  '㍙' => '1点',
+  '㍚' => '2点',
+  '㍛' => '3点',
+  '㍜' => '4点',
+  '㍝' => '5点',
+  '㍞' => '6点',
+  '㍟' => '7点',
+  '㍠' => '8点',
+  '㍡' => '9点',
+  '㍢' => '10点',
+  '㍣' => '11点',
+  '㍤' => '12点',
+  '㍥' => '13点',
+  '㍦' => '14点',
+  '㍧' => '15点',
+  '㍨' => '16点',
+  '㍩' => '17点',
+  '㍪' => '18点',
+  '㍫' => '19点',
+  '㍬' => '20点',
+  '㍭' => '21点',
+  '㍮' => '22点',
+  '㍯' => '23点',
+  '㍰' => '24点',
+  '㍱' => 'hPa',
+  '㍲' => 'da',
+  '㍳' => 'AU',
+  '㍴' => 'bar',
+  '㍵' => 'oV',
+  '㍶' => 'pc',
+  '㍷' => 'dm',
+  '㍸' => 'dm2',
+  '㍹' => 'dm3',
+  '㍺' => 'IU',
+  '㍻' => '平成',
+  '㍼' => '昭和',
+  '㍽' => '大正',
+  '㍾' => '明治',
+  '㍿' => '株式会社',
+  '㎀' => 'pA',
+  '㎁' => 'nA',
+  '㎂' => 'μA',
+  '㎃' => 'mA',
+  '㎄' => 'kA',
+  '㎅' => 'KB',
+  '㎆' => 'MB',
+  '㎇' => 'GB',
+  '㎈' => 'cal',
+  '㎉' => 'kcal',
+  '㎊' => 'pF',
+  '㎋' => 'nF',
+  '㎌' => 'μF',
+  '㎍' => 'μg',
+  '㎎' => 'mg',
+  '㎏' => 'kg',
+  '㎐' => 'Hz',
+  '㎑' => 'kHz',
+  '㎒' => 'MHz',
+  '㎓' => 'GHz',
+  '㎔' => 'THz',
+  '㎕' => 'μl',
+  '㎖' => 'ml',
+  '㎗' => 'dl',
+  '㎘' => 'kl',
+  '㎙' => 'fm',
+  '㎚' => 'nm',
+  '㎛' => 'μm',
+  '㎜' => 'mm',
+  '㎝' => 'cm',
+  '㎞' => 'km',
+  '㎟' => 'mm2',
+  '㎠' => 'cm2',
+  '㎡' => 'm2',
+  '㎢' => 'km2',
+  '㎣' => 'mm3',
+  '㎤' => 'cm3',
+  '㎥' => 'm3',
+  '㎦' => 'km3',
+  '㎧' => 'm∕s',
+  '㎨' => 'm∕s2',
+  '㎩' => 'Pa',
+  '㎪' => 'kPa',
+  '㎫' => 'MPa',
+  '㎬' => 'GPa',
+  '㎭' => 'rad',
+  '㎮' => 'rad∕s',
+  '㎯' => 'rad∕s2',
+  '㎰' => 'ps',
+  '㎱' => 'ns',
+  '㎲' => 'μs',
+  '㎳' => 'ms',
+  '㎴' => 'pV',
+  '㎵' => 'nV',
+  '㎶' => 'μV',
+  '㎷' => 'mV',
+  '㎸' => 'kV',
+  '㎹' => 'MV',
+  '㎺' => 'pW',
+  '㎻' => 'nW',
+  '㎼' => 'μW',
+  '㎽' => 'mW',
+  '㎾' => 'kW',
+  '㎿' => 'MW',
+  '㏀' => 'kΩ',
+  '㏁' => 'MΩ',
+  '㏂' => 'a.m.',
+  '㏃' => 'Bq',
+  '㏄' => 'cc',
+  '㏅' => 'cd',
+  '㏆' => 'C∕kg',
+  '㏇' => 'Co.',
+  '㏈' => 'dB',
+  '㏉' => 'Gy',
+  '㏊' => 'ha',
+  '㏋' => 'HP',
+  '㏌' => 'in',
+  '㏍' => 'KK',
+  '㏎' => 'KM',
+  '㏏' => 'kt',
+  '㏐' => 'lm',
+  '㏑' => 'ln',
+  '㏒' => 'log',
+  '㏓' => 'lx',
+  '㏔' => 'mb',
+  '㏕' => 'mil',
+  '㏖' => 'mol',
+  '㏗' => 'PH',
+  '㏘' => 'p.m.',
+  '㏙' => 'PPM',
+  '㏚' => 'PR',
+  '㏛' => 'sr',
+  '㏜' => 'Sv',
+  '㏝' => 'Wb',
+  '㏞' => 'V∕m',
+  '㏟' => 'A∕m',
+  '㏠' => '1日',
+  '㏡' => '2日',
+  '㏢' => '3日',
+  '㏣' => '4日',
+  '㏤' => '5日',
+  '㏥' => '6日',
+  '㏦' => '7日',
+  '㏧' => '8日',
+  '㏨' => '9日',
+  '㏩' => '10日',
+  '㏪' => '11日',
+  '㏫' => '12日',
+  '㏬' => '13日',
+  '㏭' => '14日',
+  '㏮' => '15日',
+  '㏯' => '16日',
+  '㏰' => '17日',
+  '㏱' => '18日',
+  '㏲' => '19日',
+  '㏳' => '20日',
+  '㏴' => '21日',
+  '㏵' => '22日',
+  '㏶' => '23日',
+  '㏷' => '24日',
+  '㏸' => '25日',
+  '㏹' => '26日',
+  '㏺' => '27日',
+  '㏻' => '28日',
+  '㏼' => '29日',
+  '㏽' => '30日',
+  '㏾' => '31日',
+  '㏿' => 'gal',
+  'ꚜ' => 'ъ',
+  'ꚝ' => 'ь',
+  'ꝰ' => 'ꝯ',
+  'ꟸ' => 'Ħ',
+  'ꟹ' => 'œ',
+  'ꭜ' => 'ꜧ',
+  'ꭝ' => 'ꬷ',
+  'ꭞ' => 'ɫ',
+  'ꭟ' => 'ꭒ',
+  'ꭩ' => 'ʍ',
+  'ﬀ' => 'ff',
+  'ﬁ' => 'fi',
+  'ﬂ' => 'fl',
+  'ﬃ' => 'ffi',
+  'ﬄ' => 'ffl',
+  'ﬅ' => 'st',
+  'ﬆ' => 'st',
+  'ﬓ' => 'մն',
+  'ﬔ' => 'մե',
+  'ﬕ' => 'մի',
+  'ﬖ' => 'վն',
+  'ﬗ' => 'մխ',
+  'ﬠ' => 'ע',
+  'ﬡ' => 'א',
+  'ﬢ' => 'ד',
+  'ﬣ' => 'ה',
+  'ﬤ' => 'כ',
+  'ﬥ' => 'ל',
+  'ﬦ' => 'ם',
+  'ﬧ' => 'ר',
+  'ﬨ' => 'ת',
+  '﬩' => '+',
+  'ﭏ' => 'אל',
+  'ﭐ' => 'ٱ',
+  'ﭑ' => 'ٱ',
+  'ﭒ' => 'ٻ',
+  'ﭓ' => 'ٻ',
+  'ﭔ' => 'ٻ',
+  'ﭕ' => 'ٻ',
+  'ﭖ' => 'پ',
+  'ﭗ' => 'پ',
+  'ﭘ' => 'پ',
+  'ﭙ' => 'پ',
+  'ﭚ' => 'ڀ',
+  'ﭛ' => 'ڀ',
+  'ﭜ' => 'ڀ',
+  'ﭝ' => 'ڀ',
+  'ﭞ' => 'ٺ',
+  'ﭟ' => 'ٺ',
+  'ﭠ' => 'ٺ',
+  'ﭡ' => 'ٺ',
+  'ﭢ' => 'ٿ',
+  'ﭣ' => 'ٿ',
+  'ﭤ' => 'ٿ',
+  'ﭥ' => 'ٿ',
+  'ﭦ' => 'ٹ',
+  'ﭧ' => 'ٹ',
+  'ﭨ' => 'ٹ',
+  'ﭩ' => 'ٹ',
+  'ﭪ' => 'ڤ',
+  'ﭫ' => 'ڤ',
+  'ﭬ' => 'ڤ',
+  'ﭭ' => 'ڤ',
+  'ﭮ' => 'ڦ',
+  'ﭯ' => 'ڦ',
+  'ﭰ' => 'ڦ',
+  'ﭱ' => 'ڦ',
+  'ﭲ' => 'ڄ',
+  'ﭳ' => 'ڄ',
+  'ﭴ' => 'ڄ',
+  'ﭵ' => 'ڄ',
+  'ﭶ' => 'ڃ',
+  'ﭷ' => 'ڃ',
+  'ﭸ' => 'ڃ',
+  'ﭹ' => 'ڃ',
+  'ﭺ' => 'چ',
+  'ﭻ' => 'چ',
+  'ﭼ' => 'چ',
+  'ﭽ' => 'چ',
+  'ﭾ' => 'ڇ',
+  'ﭿ' => 'ڇ',
+  'ﮀ' => 'ڇ',
+  'ﮁ' => 'ڇ',
+  'ﮂ' => 'ڍ',
+  'ﮃ' => 'ڍ',
+  'ﮄ' => 'ڌ',
+  'ﮅ' => 'ڌ',
+  'ﮆ' => 'ڎ',
+  'ﮇ' => 'ڎ',
+  'ﮈ' => 'ڈ',
+  'ﮉ' => 'ڈ',
+  'ﮊ' => 'ژ',
+  'ﮋ' => 'ژ',
+  'ﮌ' => 'ڑ',
+  'ﮍ' => 'ڑ',
+  'ﮎ' => 'ک',
+  'ﮏ' => 'ک',
+  'ﮐ' => 'ک',
+  'ﮑ' => 'ک',
+  'ﮒ' => 'گ',
+  'ﮓ' => 'گ',
+  'ﮔ' => 'گ',
+  'ﮕ' => 'گ',
+  'ﮖ' => 'ڳ',
+  'ﮗ' => 'ڳ',
+  'ﮘ' => 'ڳ',
+  'ﮙ' => 'ڳ',
+  'ﮚ' => 'ڱ',
+  'ﮛ' => 'ڱ',
+  'ﮜ' => 'ڱ',
+  'ﮝ' => 'ڱ',
+  'ﮞ' => 'ں',
+  'ﮟ' => 'ں',
+  'ﮠ' => 'ڻ',
+  'ﮡ' => 'ڻ',
+  'ﮢ' => 'ڻ',
+  'ﮣ' => 'ڻ',
+  'ﮤ' => 'ۀ',
+  'ﮥ' => 'ۀ',
+  'ﮦ' => 'ہ',
+  'ﮧ' => 'ہ',
+  'ﮨ' => 'ہ',
+  'ﮩ' => 'ہ',
+  'ﮪ' => 'ھ',
+  'ﮫ' => 'ھ',
+  'ﮬ' => 'ھ',
+  'ﮭ' => 'ھ',
+  'ﮮ' => 'ے',
+  'ﮯ' => 'ے',
+  'ﮰ' => 'ۓ',
+  'ﮱ' => 'ۓ',
+  'ﯓ' => 'ڭ',
+  'ﯔ' => 'ڭ',
+  'ﯕ' => 'ڭ',
+  'ﯖ' => 'ڭ',
+  'ﯗ' => 'ۇ',
+  'ﯘ' => 'ۇ',
+  'ﯙ' => 'ۆ',
+  'ﯚ' => 'ۆ',
+  'ﯛ' => 'ۈ',
+  'ﯜ' => 'ۈ',
+  'ﯝ' => 'ۇٴ',
+  'ﯞ' => 'ۋ',
+  'ﯟ' => 'ۋ',
+  'ﯠ' => 'ۅ',
+  'ﯡ' => 'ۅ',
+  'ﯢ' => 'ۉ',
+  'ﯣ' => 'ۉ',
+  'ﯤ' => 'ې',
+  'ﯥ' => 'ې',
+  'ﯦ' => 'ې',
+  'ﯧ' => 'ې',
+  'ﯨ' => 'ى',
+  'ﯩ' => 'ى',
+  'ﯪ' => 'ئا',
+  'ﯫ' => 'ئا',
+  'ﯬ' => 'ئە',
+  'ﯭ' => 'ئە',
+  'ﯮ' => 'ئو',
+  'ﯯ' => 'ئو',
+  'ﯰ' => 'ئۇ',
+  'ﯱ' => 'ئۇ',
+  'ﯲ' => 'ئۆ',
+  'ﯳ' => 'ئۆ',
+  'ﯴ' => 'ئۈ',
+  'ﯵ' => 'ئۈ',
+  'ﯶ' => 'ئې',
+  'ﯷ' => 'ئې',
+  'ﯸ' => 'ئې',
+  'ﯹ' => 'ئى',
+  'ﯺ' => 'ئى',
+  'ﯻ' => 'ئى',
+  'ﯼ' => 'ی',
+  'ﯽ' => 'ی',
+  'ﯾ' => 'ی',
+  'ﯿ' => 'ی',
+  'ﰀ' => 'ئج',
+  'ﰁ' => 'ئح',
+  'ﰂ' => 'ئم',
+  'ﰃ' => 'ئى',
+  'ﰄ' => 'ئي',
+  'ﰅ' => 'بج',
+  'ﰆ' => 'بح',
+  'ﰇ' => 'بخ',
+  'ﰈ' => 'بم',
+  'ﰉ' => 'بى',
+  'ﰊ' => 'بي',
+  'ﰋ' => 'تج',
+  'ﰌ' => 'تح',
+  'ﰍ' => 'تخ',
+  'ﰎ' => 'تم',
+  'ﰏ' => 'تى',
+  'ﰐ' => 'تي',
+  'ﰑ' => 'ثج',
+  'ﰒ' => 'ثم',
+  'ﰓ' => 'ثى',
+  'ﰔ' => 'ثي',
+  'ﰕ' => 'جح',
+  'ﰖ' => 'جم',
+  'ﰗ' => 'حج',
+  'ﰘ' => 'حم',
+  'ﰙ' => 'خج',
+  'ﰚ' => 'خح',
+  'ﰛ' => 'خم',
+  'ﰜ' => 'سج',
+  'ﰝ' => 'سح',
+  'ﰞ' => 'سخ',
+  'ﰟ' => 'سم',
+  'ﰠ' => 'صح',
+  'ﰡ' => 'صم',
+  'ﰢ' => 'ضج',
+  'ﰣ' => 'ضح',
+  'ﰤ' => 'ضخ',
+  'ﰥ' => 'ضم',
+  'ﰦ' => 'طح',
+  'ﰧ' => 'طم',
+  'ﰨ' => 'ظم',
+  'ﰩ' => 'عج',
+  'ﰪ' => 'عم',
+  'ﰫ' => 'غج',
+  'ﰬ' => 'غم',
+  'ﰭ' => 'فج',
+  'ﰮ' => 'فح',
+  'ﰯ' => 'فخ',
+  'ﰰ' => 'فم',
+  'ﰱ' => 'فى',
+  'ﰲ' => 'في',
+  'ﰳ' => 'قح',
+  'ﰴ' => 'قم',
+  'ﰵ' => 'قى',
+  'ﰶ' => 'قي',
+  'ﰷ' => 'كا',
+  'ﰸ' => 'كج',
+  'ﰹ' => 'كح',
+  'ﰺ' => 'كخ',
+  'ﰻ' => 'كل',
+  'ﰼ' => 'كم',
+  'ﰽ' => 'كى',
+  'ﰾ' => 'كي',
+  'ﰿ' => 'لج',
+  'ﱀ' => 'لح',
+  'ﱁ' => 'لخ',
+  'ﱂ' => 'لم',
+  'ﱃ' => 'لى',
+  'ﱄ' => 'لي',
+  'ﱅ' => 'مج',
+  'ﱆ' => 'مح',
+  'ﱇ' => 'مخ',
+  'ﱈ' => 'مم',
+  'ﱉ' => 'مى',
+  'ﱊ' => 'مي',
+  'ﱋ' => 'نج',
+  'ﱌ' => 'نح',
+  'ﱍ' => 'نخ',
+  'ﱎ' => 'نم',
+  'ﱏ' => 'نى',
+  'ﱐ' => 'ني',
+  'ﱑ' => 'هج',
+  'ﱒ' => 'هم',
+  'ﱓ' => 'هى',
+  'ﱔ' => 'هي',
+  'ﱕ' => 'يج',
+  'ﱖ' => 'يح',
+  'ﱗ' => 'يخ',
+  'ﱘ' => 'يم',
+  'ﱙ' => 'يى',
+  'ﱚ' => 'يي',
+  'ﱛ' => 'ذٰ',
+  'ﱜ' => 'رٰ',
+  'ﱝ' => 'ىٰ',
+  'ﱞ' => ' ٌّ',
+  'ﱟ' => ' ٍّ',
+  'ﱠ' => ' َّ',
+  'ﱡ' => ' ُّ',
+  'ﱢ' => ' ِّ',
+  'ﱣ' => ' ّٰ',
+  'ﱤ' => 'ئر',
+  'ﱥ' => 'ئز',
+  'ﱦ' => 'ئم',
+  'ﱧ' => 'ئن',
+  'ﱨ' => 'ئى',
+  'ﱩ' => 'ئي',
+  'ﱪ' => 'بر',
+  'ﱫ' => 'بز',
+  'ﱬ' => 'بم',
+  'ﱭ' => 'بن',
+  'ﱮ' => 'بى',
+  'ﱯ' => 'بي',
+  'ﱰ' => 'تر',
+  'ﱱ' => 'تز',
+  'ﱲ' => 'تم',
+  'ﱳ' => 'تن',
+  'ﱴ' => 'تى',
+  'ﱵ' => 'تي',
+  'ﱶ' => 'ثر',
+  'ﱷ' => 'ثز',
+  'ﱸ' => 'ثم',
+  'ﱹ' => 'ثن',
+  'ﱺ' => 'ثى',
+  'ﱻ' => 'ثي',
+  'ﱼ' => 'فى',
+  'ﱽ' => 'في',
+  'ﱾ' => 'قى',
+  'ﱿ' => 'قي',
+  'ﲀ' => 'كا',
+  'ﲁ' => 'كل',
+  'ﲂ' => 'كم',
+  'ﲃ' => 'كى',
+  'ﲄ' => 'كي',
+  'ﲅ' => 'لم',
+  'ﲆ' => 'لى',
+  'ﲇ' => 'لي',
+  'ﲈ' => 'ما',
+  'ﲉ' => 'مم',
+  'ﲊ' => 'نر',
+  'ﲋ' => 'نز',
+  'ﲌ' => 'نم',
+  'ﲍ' => 'نن',
+  'ﲎ' => 'نى',
+  'ﲏ' => 'ني',
+  'ﲐ' => 'ىٰ',
+  'ﲑ' => 'ير',
+  'ﲒ' => 'يز',
+  'ﲓ' => 'يم',
+  'ﲔ' => 'ين',
+  'ﲕ' => 'يى',
+  'ﲖ' => 'يي',
+  'ﲗ' => 'ئج',
+  'ﲘ' => 'ئح',
+  'ﲙ' => 'ئخ',
+  'ﲚ' => 'ئم',
+  'ﲛ' => 'ئه',
+  'ﲜ' => 'بج',
+  'ﲝ' => 'بح',
+  'ﲞ' => 'بخ',
+  'ﲟ' => 'بم',
+  'ﲠ' => 'به',
+  'ﲡ' => 'تج',
+  'ﲢ' => 'تح',
+  'ﲣ' => 'تخ',
+  'ﲤ' => 'تم',
+  'ﲥ' => 'ته',
+  'ﲦ' => 'ثم',
+  'ﲧ' => 'جح',
+  'ﲨ' => 'جم',
+  'ﲩ' => 'حج',
+  'ﲪ' => 'حم',
+  'ﲫ' => 'خج',
+  'ﲬ' => 'خم',
+  'ﲭ' => 'سج',
+  'ﲮ' => 'سح',
+  'ﲯ' => 'سخ',
+  'ﲰ' => 'سم',
+  'ﲱ' => 'صح',
+  'ﲲ' => 'صخ',
+  'ﲳ' => 'صم',
+  'ﲴ' => 'ضج',
+  'ﲵ' => 'ضح',
+  'ﲶ' => 'ضخ',
+  'ﲷ' => 'ضم',
+  'ﲸ' => 'طح',
+  'ﲹ' => 'ظم',
+  'ﲺ' => 'عج',
+  'ﲻ' => 'عم',
+  'ﲼ' => 'غج',
+  'ﲽ' => 'غم',
+  'ﲾ' => 'فج',
+  'ﲿ' => 'فح',
+  'ﳀ' => 'فخ',
+  'ﳁ' => 'فم',
+  'ﳂ' => 'قح',
+  'ﳃ' => 'قم',
+  'ﳄ' => 'كج',
+  'ﳅ' => 'كح',
+  'ﳆ' => 'كخ',
+  'ﳇ' => 'كل',
+  'ﳈ' => 'كم',
+  'ﳉ' => 'لج',
+  'ﳊ' => 'لح',
+  'ﳋ' => 'لخ',
+  'ﳌ' => 'لم',
+  'ﳍ' => 'له',
+  'ﳎ' => 'مج',
+  'ﳏ' => 'مح',
+  'ﳐ' => 'مخ',
+  'ﳑ' => 'مم',
+  'ﳒ' => 'نج',
+  'ﳓ' => 'نح',
+  'ﳔ' => 'نخ',
+  'ﳕ' => 'نم',
+  'ﳖ' => 'نه',
+  'ﳗ' => 'هج',
+  'ﳘ' => 'هم',
+  'ﳙ' => 'هٰ',
+  'ﳚ' => 'يج',
+  'ﳛ' => 'يح',
+  'ﳜ' => 'يخ',
+  'ﳝ' => 'يم',
+  'ﳞ' => 'يه',
+  'ﳟ' => 'ئم',
+  'ﳠ' => 'ئه',
+  'ﳡ' => 'بم',
+  'ﳢ' => 'به',
+  'ﳣ' => 'تم',
+  'ﳤ' => 'ته',
+  'ﳥ' => 'ثم',
+  'ﳦ' => 'ثه',
+  'ﳧ' => 'سم',
+  'ﳨ' => 'سه',
+  'ﳩ' => 'شم',
+  'ﳪ' => 'شه',
+  'ﳫ' => 'كل',
+  'ﳬ' => 'كم',
+  'ﳭ' => 'لم',
+  'ﳮ' => 'نم',
+  'ﳯ' => 'نه',
+  'ﳰ' => 'يم',
+  'ﳱ' => 'يه',
+  'ﳲ' => 'ـَّ',
+  'ﳳ' => 'ـُّ',
+  'ﳴ' => 'ـِّ',
+  'ﳵ' => 'طى',
+  'ﳶ' => 'طي',
+  'ﳷ' => 'عى',
+  'ﳸ' => 'عي',
+  'ﳹ' => 'غى',
+  'ﳺ' => 'غي',
+  'ﳻ' => 'سى',
+  'ﳼ' => 'سي',
+  'ﳽ' => 'شى',
+  'ﳾ' => 'شي',
+  'ﳿ' => 'حى',
+  'ﴀ' => 'حي',
+  'ﴁ' => 'جى',
+  'ﴂ' => 'جي',
+  'ﴃ' => 'خى',
+  'ﴄ' => 'خي',
+  'ﴅ' => 'صى',
+  'ﴆ' => 'صي',
+  'ﴇ' => 'ضى',
+  'ﴈ' => 'ضي',
+  'ﴉ' => 'شج',
+  'ﴊ' => 'شح',
+  'ﴋ' => 'شخ',
+  'ﴌ' => 'شم',
+  'ﴍ' => 'شر',
+  'ﴎ' => 'سر',
+  'ﴏ' => 'صر',
+  'ﴐ' => 'ضر',
+  'ﴑ' => 'طى',
+  'ﴒ' => 'طي',
+  'ﴓ' => 'عى',
+  'ﴔ' => 'عي',
+  'ﴕ' => 'غى',
+  'ﴖ' => 'غي',
+  'ﴗ' => 'سى',
+  'ﴘ' => 'سي',
+  'ﴙ' => 'شى',
+  'ﴚ' => 'شي',
+  'ﴛ' => 'حى',
+  'ﴜ' => 'حي',
+  'ﴝ' => 'جى',
+  'ﴞ' => 'جي',
+  'ﴟ' => 'خى',
+  'ﴠ' => 'خي',
+  'ﴡ' => 'صى',
+  'ﴢ' => 'صي',
+  'ﴣ' => 'ضى',
+  'ﴤ' => 'ضي',
+  'ﴥ' => 'شج',
+  'ﴦ' => 'شح',
+  'ﴧ' => 'شخ',
+  'ﴨ' => 'شم',
+  'ﴩ' => 'شر',
+  'ﴪ' => 'سر',
+  'ﴫ' => 'صر',
+  'ﴬ' => 'ضر',
+  'ﴭ' => 'شج',
+  'ﴮ' => 'شح',
+  'ﴯ' => 'شخ',
+  'ﴰ' => 'شم',
+  'ﴱ' => 'سه',
+  'ﴲ' => 'شه',
+  'ﴳ' => 'طم',
+  'ﴴ' => 'سج',
+  'ﴵ' => 'سح',
+  'ﴶ' => 'سخ',
+  'ﴷ' => 'شج',
+  'ﴸ' => 'شح',
+  'ﴹ' => 'شخ',
+  'ﴺ' => 'طم',
+  'ﴻ' => 'ظم',
+  'ﴼ' => 'اً',
+  'ﴽ' => 'اً',
+  'ﵐ' => 'تجم',
+  'ﵑ' => 'تحج',
+  'ﵒ' => 'تحج',
+  'ﵓ' => 'تحم',
+  'ﵔ' => 'تخم',
+  'ﵕ' => 'تمج',
+  'ﵖ' => 'تمح',
+  'ﵗ' => 'تمخ',
+  'ﵘ' => 'جمح',
+  'ﵙ' => 'جمح',
+  'ﵚ' => 'حمي',
+  'ﵛ' => 'حمى',
+  'ﵜ' => 'سحج',
+  'ﵝ' => 'سجح',
+  'ﵞ' => 'سجى',
+  'ﵟ' => 'سمح',
+  'ﵠ' => 'سمح',
+  'ﵡ' => 'سمج',
+  'ﵢ' => 'سمم',
+  'ﵣ' => 'سمم',
+  'ﵤ' => 'صحح',
+  'ﵥ' => 'صحح',
+  'ﵦ' => 'صمم',
+  'ﵧ' => 'شحم',
+  'ﵨ' => 'شحم',
+  'ﵩ' => 'شجي',
+  'ﵪ' => 'شمخ',
+  'ﵫ' => 'شمخ',
+  'ﵬ' => 'شمم',
+  'ﵭ' => 'شمم',
+  'ﵮ' => 'ضحى',
+  'ﵯ' => 'ضخم',
+  'ﵰ' => 'ضخم',
+  'ﵱ' => 'طمح',
+  'ﵲ' => 'طمح',
+  'ﵳ' => 'طمم',
+  'ﵴ' => 'طمي',
+  'ﵵ' => 'عجم',
+  'ﵶ' => 'عمم',
+  'ﵷ' => 'عمم',
+  'ﵸ' => 'عمى',
+  'ﵹ' => 'غمم',
+  'ﵺ' => 'غمي',
+  'ﵻ' => 'غمى',
+  'ﵼ' => 'فخم',
+  'ﵽ' => 'فخم',
+  'ﵾ' => 'قمح',
+  'ﵿ' => 'قمم',
+  'ﶀ' => 'لحم',
+  'ﶁ' => 'لحي',
+  'ﶂ' => 'لحى',
+  'ﶃ' => 'لجج',
+  'ﶄ' => 'لجج',
+  'ﶅ' => 'لخم',
+  'ﶆ' => 'لخم',
+  'ﶇ' => 'لمح',
+  'ﶈ' => 'لمح',
+  'ﶉ' => 'محج',
+  'ﶊ' => 'محم',
+  'ﶋ' => 'محي',
+  'ﶌ' => 'مجح',
+  'ﶍ' => 'مجم',
+  'ﶎ' => 'مخج',
+  'ﶏ' => 'مخم',
+  'ﶒ' => 'مجخ',
+  'ﶓ' => 'همج',
+  'ﶔ' => 'همم',
+  'ﶕ' => 'نحم',
+  'ﶖ' => 'نحى',
+  'ﶗ' => 'نجم',
+  'ﶘ' => 'نجم',
+  'ﶙ' => 'نجى',
+  'ﶚ' => 'نمي',
+  'ﶛ' => 'نمى',
+  'ﶜ' => 'يمم',
+  'ﶝ' => 'يمم',
+  'ﶞ' => 'بخي',
+  'ﶟ' => 'تجي',
+  'ﶠ' => 'تجى',
+  'ﶡ' => 'تخي',
+  'ﶢ' => 'تخى',
+  'ﶣ' => 'تمي',
+  'ﶤ' => 'تمى',
+  'ﶥ' => 'جمي',
+  'ﶦ' => 'جحى',
+  'ﶧ' => 'جمى',
+  'ﶨ' => 'سخى',
+  'ﶩ' => 'صحي',
+  'ﶪ' => 'شحي',
+  'ﶫ' => 'ضحي',
+  'ﶬ' => 'لجي',
+  'ﶭ' => 'لمي',
+  'ﶮ' => 'يحي',
+  'ﶯ' => 'يجي',
+  'ﶰ' => 'يمي',
+  'ﶱ' => 'ممي',
+  'ﶲ' => 'قمي',
+  'ﶳ' => 'نحي',
+  'ﶴ' => 'قمح',
+  'ﶵ' => 'لحم',
+  'ﶶ' => 'عمي',
+  'ﶷ' => 'كمي',
+  'ﶸ' => 'نجح',
+  'ﶹ' => 'مخي',
+  'ﶺ' => 'لجم',
+  'ﶻ' => 'كمم',
+  'ﶼ' => 'لجم',
+  'ﶽ' => 'نجح',
+  'ﶾ' => 'جحي',
+  'ﶿ' => 'حجي',
+  'ﷀ' => 'مجي',
+  'ﷁ' => 'فمي',
+  'ﷂ' => 'بحي',
+  'ﷃ' => 'كمم',
+  'ﷄ' => 'عجم',
+  'ﷅ' => 'صمم',
+  'ﷆ' => 'سخي',
+  'ﷇ' => 'نجي',
+  'ﷰ' => 'صلے',
+  'ﷱ' => 'قلے',
+  'ﷲ' => 'الله',
+  'ﷳ' => 'اكبر',
+  'ﷴ' => 'محمد',
+  'ﷵ' => 'صلعم',
+  'ﷶ' => 'رسول',
+  'ﷷ' => 'عليه',
+  'ﷸ' => 'وسلم',
+  'ﷹ' => 'صلى',
+  'ﷺ' => 'صلى الله عليه وسلم',
+  'ﷻ' => 'جل جلاله',
+  '﷼' => 'ریال',
+  '︐' => ',',
+  '︑' => '、',
+  '︒' => '。',
+  '︓' => ':',
+  '︔' => ';',
+  '︕' => '!',
+  '︖' => '?',
+  '︗' => '〖',
+  '︘' => '〗',
+  '︙' => '...',
+  '︰' => '..',
+  '︱' => '—',
+  '︲' => '–',
+  '︳' => '_',
+  '︴' => '_',
+  '︵' => '(',
+  '︶' => ')',
+  '︷' => '{',
+  '︸' => '}',
+  '︹' => '〔',
+  '︺' => '〕',
+  '︻' => '【',
+  '︼' => '】',
+  '︽' => '《',
+  '︾' => '》',
+  '︿' => '〈',
+  '﹀' => '〉',
+  '﹁' => '「',
+  '﹂' => '」',
+  '﹃' => '『',
+  '﹄' => '』',
+  '﹇' => '[',
+  '﹈' => ']',
+  '﹉' => ' ̅',
+  '﹊' => ' ̅',
+  '﹋' => ' ̅',
+  '﹌' => ' ̅',
+  '﹍' => '_',
+  '﹎' => '_',
+  '﹏' => '_',
+  '﹐' => ',',
+  '﹑' => '、',
+  '﹒' => '.',
+  '﹔' => ';',
+  '﹕' => ':',
+  '﹖' => '?',
+  '﹗' => '!',
+  '﹘' => '—',
+  '﹙' => '(',
+  '﹚' => ')',
+  '﹛' => '{',
+  '﹜' => '}',
+  '﹝' => '〔',
+  '﹞' => '〕',
+  '﹟' => '#',
+  '﹠' => '&',
+  '﹡' => '*',
+  '﹢' => '+',
+  '﹣' => '-',
+  '﹤' => '<',
+  '﹥' => '>',
+  '﹦' => '=',
+  '﹨' => '\\',
+  '﹩' => '$',
+  '﹪' => '%',
+  '﹫' => '@',
+  'ﹰ' => ' ً',
+  'ﹱ' => 'ـً',
+  'ﹲ' => ' ٌ',
+  'ﹴ' => ' ٍ',
+  'ﹶ' => ' َ',
+  'ﹷ' => 'ـَ',
+  'ﹸ' => ' ُ',
+  'ﹹ' => 'ـُ',
+  'ﹺ' => ' ِ',
+  'ﹻ' => 'ـِ',
+  'ﹼ' => ' ّ',
+  'ﹽ' => 'ـّ',
+  'ﹾ' => ' ْ',
+  'ﹿ' => 'ـْ',
+  'ﺀ' => 'ء',
+  'ﺁ' => 'آ',
+  'ﺂ' => 'آ',
+  'ﺃ' => 'أ',
+  'ﺄ' => 'أ',
+  'ﺅ' => 'ؤ',
+  'ﺆ' => 'ؤ',
+  'ﺇ' => 'إ',
+  'ﺈ' => 'إ',
+  'ﺉ' => 'ئ',
+  'ﺊ' => 'ئ',
+  'ﺋ' => 'ئ',
+  'ﺌ' => 'ئ',
+  'ﺍ' => 'ا',
+  'ﺎ' => 'ا',
+  'ﺏ' => 'ب',
+  'ﺐ' => 'ب',
+  'ﺑ' => 'ب',
+  'ﺒ' => 'ب',
+  'ﺓ' => 'ة',
+  'ﺔ' => 'ة',
+  'ﺕ' => 'ت',
+  'ﺖ' => 'ت',
+  'ﺗ' => 'ت',
+  'ﺘ' => 'ت',
+  'ﺙ' => 'ث',
+  'ﺚ' => 'ث',
+  'ﺛ' => 'ث',
+  'ﺜ' => 'ث',
+  'ﺝ' => 'ج',
+  'ﺞ' => 'ج',
+  'ﺟ' => 'ج',
+  'ﺠ' => 'ج',
+  'ﺡ' => 'ح',
+  'ﺢ' => 'ح',
+  'ﺣ' => 'ح',
+  'ﺤ' => 'ح',
+  'ﺥ' => 'خ',
+  'ﺦ' => 'خ',
+  'ﺧ' => 'خ',
+  'ﺨ' => 'خ',
+  'ﺩ' => 'د',
+  'ﺪ' => 'د',
+  'ﺫ' => 'ذ',
+  'ﺬ' => 'ذ',
+  'ﺭ' => 'ر',
+  'ﺮ' => 'ر',
+  'ﺯ' => 'ز',
+  'ﺰ' => 'ز',
+  'ﺱ' => 'س',
+  'ﺲ' => 'س',
+  'ﺳ' => 'س',
+  'ﺴ' => 'س',
+  'ﺵ' => 'ش',
+  'ﺶ' => 'ش',
+  'ﺷ' => 'ش',
+  'ﺸ' => 'ش',
+  'ﺹ' => 'ص',
+  'ﺺ' => 'ص',
+  'ﺻ' => 'ص',
+  'ﺼ' => 'ص',
+  'ﺽ' => 'ض',
+  'ﺾ' => 'ض',
+  'ﺿ' => 'ض',
+  'ﻀ' => 'ض',
+  'ﻁ' => 'ط',
+  'ﻂ' => 'ط',
+  'ﻃ' => 'ط',
+  'ﻄ' => 'ط',
+  'ﻅ' => 'ظ',
+  'ﻆ' => 'ظ',
+  'ﻇ' => 'ظ',
+  'ﻈ' => 'ظ',
+  'ﻉ' => 'ع',
+  'ﻊ' => 'ع',
+  'ﻋ' => 'ع',
+  'ﻌ' => 'ع',
+  'ﻍ' => 'غ',
+  'ﻎ' => 'غ',
+  'ﻏ' => 'غ',
+  'ﻐ' => 'غ',
+  'ﻑ' => 'ف',
+  'ﻒ' => 'ف',
+  'ﻓ' => 'ف',
+  'ﻔ' => 'ف',
+  'ﻕ' => 'ق',
+  'ﻖ' => 'ق',
+  'ﻗ' => 'ق',
+  'ﻘ' => 'ق',
+  'ﻙ' => 'ك',
+  'ﻚ' => 'ك',
+  'ﻛ' => 'ك',
+  'ﻜ' => 'ك',
+  'ﻝ' => 'ل',
+  'ﻞ' => 'ل',
+  'ﻟ' => 'ل',
+  'ﻠ' => 'ل',
+  'ﻡ' => 'م',
+  'ﻢ' => 'م',
+  'ﻣ' => 'م',
+  'ﻤ' => 'م',
+  'ﻥ' => 'ن',
+  'ﻦ' => 'ن',
+  'ﻧ' => 'ن',
+  'ﻨ' => 'ن',
+  'ﻩ' => 'ه',
+  'ﻪ' => 'ه',
+  'ﻫ' => 'ه',
+  'ﻬ' => 'ه',
+  'ﻭ' => 'و',
+  'ﻮ' => 'و',
+  'ﻯ' => 'ى',
+  'ﻰ' => 'ى',
+  'ﻱ' => 'ي',
+  'ﻲ' => 'ي',
+  'ﻳ' => 'ي',
+  'ﻴ' => 'ي',
+  'ﻵ' => 'لآ',
+  'ﻶ' => 'لآ',
+  'ﻷ' => 'لأ',
+  'ﻸ' => 'لأ',
+  'ﻹ' => 'لإ',
+  'ﻺ' => 'لإ',
+  'ﻻ' => 'لا',
+  'ﻼ' => 'لا',
+  '！' => '!',
+  '＂' => '"',
+  '＃' => '#',
+  '＄' => '$',
+  '％' => '%',
+  '＆' => '&',
+  '＇' => '\'',
+  '（' => '(',
+  '）' => ')',
+  '＊' => '*',
+  '＋' => '+',
+  '，' => ',',
+  '－' => '-',
+  '．' => '.',
+  '／' => '/',
+  '０' => '0',
+  '１' => '1',
+  '２' => '2',
+  '３' => '3',
+  '４' => '4',
+  '５' => '5',
+  '６' => '6',
+  '７' => '7',
+  '８' => '8',
+  '９' => '9',
+  '：' => ':',
+  '；' => ';',
+  '＜' => '<',
+  '＝' => '=',
+  '＞' => '>',
+  '？' => '?',
+  '＠' => '@',
+  'Ａ' => 'A',
+  'Ｂ' => 'B',
+  'Ｃ' => 'C',
+  'Ｄ' => 'D',
+  'Ｅ' => 'E',
+  'Ｆ' => 'F',
+  'Ｇ' => 'G',
+  'Ｈ' => 'H',
+  'Ｉ' => 'I',
+  'Ｊ' => 'J',
+  'Ｋ' => 'K',
+  'Ｌ' => 'L',
+  'Ｍ' => 'M',
+  'Ｎ' => 'N',
+  'Ｏ' => 'O',
+  'Ｐ' => 'P',
+  'Ｑ' => 'Q',
+  'Ｒ' => 'R',
+  'Ｓ' => 'S',
+  'Ｔ' => 'T',
+  'Ｕ' => 'U',
+  'Ｖ' => 'V',
+  'Ｗ' => 'W',
+  'Ｘ' => 'X',
+  'Ｙ' => 'Y',
+  'Ｚ' => 'Z',
+  '［' => '[',
+  '＼' => '\\',
+  '］' => ']',
+  '＾' => '^',
+  '＿' => '_',
+  '｀' => '`',
+  'ａ' => 'a',
+  'ｂ' => 'b',
+  'ｃ' => 'c',
+  'ｄ' => 'd',
+  'ｅ' => 'e',
+  'ｆ' => 'f',
+  'ｇ' => 'g',
+  'ｈ' => 'h',
+  'ｉ' => 'i',
+  'ｊ' => 'j',
+  'ｋ' => 'k',
+  'ｌ' => 'l',
+  'ｍ' => 'm',
+  'ｎ' => 'n',
+  'ｏ' => 'o',
+  'ｐ' => 'p',
+  'ｑ' => 'q',
+  'ｒ' => 'r',
+  'ｓ' => 's',
+  'ｔ' => 't',
+  'ｕ' => 'u',
+  'ｖ' => 'v',
+  'ｗ' => 'w',
+  'ｘ' => 'x',
+  'ｙ' => 'y',
+  'ｚ' => 'z',
+  '｛' => '{',
+  '｜' => '|',
+  '｝' => '}',
+  '～' => '~',
+  '｟' => '⦅',
+  '｠' => '⦆',
+  '｡' => '。',
+  '｢' => '「',
+  '｣' => '」',
+  '､' => '、',
+  '･' => '・',
+  'ｦ' => 'ヲ',
+  'ｧ' => 'ァ',
+  'ｨ' => 'ィ',
+  'ｩ' => 'ゥ',
+  'ｪ' => 'ェ',
+  'ｫ' => 'ォ',
+  'ｬ' => 'ャ',
+  'ｭ' => 'ュ',
+  'ｮ' => 'ョ',
+  'ｯ' => 'ッ',
+  'ｰ' => 'ー',
+  'ｱ' => 'ア',
+  'ｲ' => 'イ',
+  'ｳ' => 'ウ',
+  'ｴ' => 'エ',
+  'ｵ' => 'オ',
+  'ｶ' => 'カ',
+  'ｷ' => 'キ',
+  'ｸ' => 'ク',
+  'ｹ' => 'ケ',
+  'ｺ' => 'コ',
+  'ｻ' => 'サ',
+  'ｼ' => 'シ',
+  'ｽ' => 'ス',
+  'ｾ' => 'セ',
+  'ｿ' => 'ソ',
+  'ﾀ' => 'タ',
+  'ﾁ' => 'チ',
+  'ﾂ' => 'ツ',
+  'ﾃ' => 'テ',
+  'ﾄ' => 'ト',
+  'ﾅ' => 'ナ',
+  'ﾆ' => 'ニ',
+  'ﾇ' => 'ヌ',
+  'ﾈ' => 'ネ',
+  'ﾉ' => 'ノ',
+  'ﾊ' => 'ハ',
+  'ﾋ' => 'ヒ',
+  'ﾌ' => 'フ',
+  'ﾍ' => 'ヘ',
+  'ﾎ' => 'ホ',
+  'ﾏ' => 'マ',
+  'ﾐ' => 'ミ',
+  'ﾑ' => 'ム',
+  'ﾒ' => 'メ',
+  'ﾓ' => 'モ',
+  'ﾔ' => 'ヤ',
+  'ﾕ' => 'ユ',
+  'ﾖ' => 'ヨ',
+  'ﾗ' => 'ラ',
+  'ﾘ' => 'リ',
+  'ﾙ' => 'ル',
+  'ﾚ' => 'レ',
+  'ﾛ' => 'ロ',
+  'ﾜ' => 'ワ',
+  'ﾝ' => 'ン',
+  'ﾞ' => '゙',
+  'ﾟ' => '゚',
+  'ﾠ' => 'ᅠ',
+  'ﾡ' => 'ᄀ',
+  'ﾢ' => 'ᄁ',
+  'ﾣ' => 'ᆪ',
+  'ﾤ' => 'ᄂ',
+  'ﾥ' => 'ᆬ',
+  'ﾦ' => 'ᆭ',
+  'ﾧ' => 'ᄃ',
+  'ﾨ' => 'ᄄ',
+  'ﾩ' => 'ᄅ',
+  'ﾪ' => 'ᆰ',
+  'ﾫ' => 'ᆱ',
+  'ﾬ' => 'ᆲ',
+  'ﾭ' => 'ᆳ',
+  'ﾮ' => 'ᆴ',
+  'ﾯ' => 'ᆵ',
+  'ﾰ' => 'ᄚ',
+  'ﾱ' => 'ᄆ',
+  'ﾲ' => 'ᄇ',
+  'ﾳ' => 'ᄈ',
+  'ﾴ' => 'ᄡ',
+  'ﾵ' => 'ᄉ',
+  'ﾶ' => 'ᄊ',
+  'ﾷ' => 'ᄋ',
+  'ﾸ' => 'ᄌ',
+  'ﾹ' => 'ᄍ',
+  'ﾺ' => 'ᄎ',
+  'ﾻ' => 'ᄏ',
+  'ﾼ' => 'ᄐ',
+  'ﾽ' => 'ᄑ',
+  'ﾾ' => 'ᄒ',
+  'ￂ' => 'ᅡ',
+  'ￃ' => 'ᅢ',
+  'ￄ' => 'ᅣ',
+  'ￅ' => 'ᅤ',
+  'ￆ' => 'ᅥ',
+  'ￇ' => 'ᅦ',
+  'ￊ' => 'ᅧ',
+  'ￋ' => 'ᅨ',
+  'ￌ' => 'ᅩ',
+  'ￍ' => 'ᅪ',
+  'ￎ' => 'ᅫ',
+  'ￏ' => 'ᅬ',
+  'ￒ' => 'ᅭ',
+  'ￓ' => 'ᅮ',
+  'ￔ' => 'ᅯ',
+  'ￕ' => 'ᅰ',
+  'ￖ' => 'ᅱ',
+  'ￗ' => 'ᅲ',
+  'ￚ' => 'ᅳ',
+  'ￛ' => 'ᅴ',
+  'ￜ' => 'ᅵ',
+  '￠' => '¢',
+  '￡' => '£',
+  '￢' => '¬',
+  '￣' => ' ̄',
+  '￤' => '¦',
+  '￥' => '¥',
+  '￦' => '₩',
+  '￨' => '│',
+  '￩' => '←',
+  '￪' => '↑',
+  '￫' => '→',
+  '￬' => '↓',
+  '￭' => '■',
+  '￮' => '○',
+  '𝐀' => 'A',
+  '𝐁' => 'B',
+  '𝐂' => 'C',
+  '𝐃' => 'D',
+  '𝐄' => 'E',
+  '𝐅' => 'F',
+  '𝐆' => 'G',
+  '𝐇' => 'H',
+  '𝐈' => 'I',
+  '𝐉' => 'J',
+  '𝐊' => 'K',
+  '𝐋' => 'L',
+  '𝐌' => 'M',
+  '𝐍' => 'N',
+  '𝐎' => 'O',
+  '𝐏' => 'P',
+  '𝐐' => 'Q',
+  '𝐑' => 'R',
+  '𝐒' => 'S',
+  '𝐓' => 'T',
+  '𝐔' => 'U',
+  '𝐕' => 'V',
+  '𝐖' => 'W',
+  '𝐗' => 'X',
+  '𝐘' => 'Y',
+  '𝐙' => 'Z',
+  '𝐚' => 'a',
+  '𝐛' => 'b',
+  '𝐜' => 'c',
+  '𝐝' => 'd',
+  '𝐞' => 'e',
+  '𝐟' => 'f',
+  '𝐠' => 'g',
+  '𝐡' => 'h',
+  '𝐢' => 'i',
+  '𝐣' => 'j',
+  '𝐤' => 'k',
+  '𝐥' => 'l',
+  '𝐦' => 'm',
+  '𝐧' => 'n',
+  '𝐨' => 'o',
+  '𝐩' => 'p',
+  '𝐪' => 'q',
+  '𝐫' => 'r',
+  '𝐬' => 's',
+  '𝐭' => 't',
+  '𝐮' => 'u',
+  '𝐯' => 'v',
+  '𝐰' => 'w',
+  '𝐱' => 'x',
+  '𝐲' => 'y',
+  '𝐳' => 'z',
+  '𝐴' => 'A',
+  '𝐵' => 'B',
+  '𝐶' => 'C',
+  '𝐷' => 'D',
+  '𝐸' => 'E',
+  '𝐹' => 'F',
+  '𝐺' => 'G',
+  '𝐻' => 'H',
+  '𝐼' => 'I',
+  '𝐽' => 'J',
+  '𝐾' => 'K',
+  '𝐿' => 'L',
+  '𝑀' => 'M',
+  '𝑁' => 'N',
+  '𝑂' => 'O',
+  '𝑃' => 'P',
+  '𝑄' => 'Q',
+  '𝑅' => 'R',
+  '𝑆' => 'S',
+  '𝑇' => 'T',
+  '𝑈' => 'U',
+  '𝑉' => 'V',
+  '𝑊' => 'W',
+  '𝑋' => 'X',
+  '𝑌' => 'Y',
+  '𝑍' => 'Z',
+  '𝑎' => 'a',
+  '𝑏' => 'b',
+  '𝑐' => 'c',
+  '𝑑' => 'd',
+  '𝑒' => 'e',
+  '𝑓' => 'f',
+  '𝑔' => 'g',
+  '𝑖' => 'i',
+  '𝑗' => 'j',
+  '𝑘' => 'k',
+  '𝑙' => 'l',
+  '𝑚' => 'm',
+  '𝑛' => 'n',
+  '𝑜' => 'o',
+  '𝑝' => 'p',
+  '𝑞' => 'q',
+  '𝑟' => 'r',
+  '𝑠' => 's',
+  '𝑡' => 't',
+  '𝑢' => 'u',
+  '𝑣' => 'v',
+  '𝑤' => 'w',
+  '𝑥' => 'x',
+  '𝑦' => 'y',
+  '𝑧' => 'z',
+  '𝑨' => 'A',
+  '𝑩' => 'B',
+  '𝑪' => 'C',
+  '𝑫' => 'D',
+  '𝑬' => 'E',
+  '𝑭' => 'F',
+  '𝑮' => 'G',
+  '𝑯' => 'H',
+  '𝑰' => 'I',
+  '𝑱' => 'J',
+  '𝑲' => 'K',
+  '𝑳' => 'L',
+  '𝑴' => 'M',
+  '𝑵' => 'N',
+  '𝑶' => 'O',
+  '𝑷' => 'P',
+  '𝑸' => 'Q',
+  '𝑹' => 'R',
+  '𝑺' => 'S',
+  '𝑻' => 'T',
+  '𝑼' => 'U',
+  '𝑽' => 'V',
+  '𝑾' => 'W',
+  '𝑿' => 'X',
+  '𝒀' => 'Y',
+  '𝒁' => 'Z',
+  '𝒂' => 'a',
+  '𝒃' => 'b',
+  '𝒄' => 'c',
+  '𝒅' => 'd',
+  '𝒆' => 'e',
+  '𝒇' => 'f',
+  '𝒈' => 'g',
+  '𝒉' => 'h',
+  '𝒊' => 'i',
+  '𝒋' => 'j',
+  '𝒌' => 'k',
+  '𝒍' => 'l',
+  '𝒎' => 'm',
+  '𝒏' => 'n',
+  '𝒐' => 'o',
+  '𝒑' => 'p',
+  '𝒒' => 'q',
+  '𝒓' => 'r',
+  '𝒔' => 's',
+  '𝒕' => 't',
+  '𝒖' => 'u',
+  '𝒗' => 'v',
+  '𝒘' => 'w',
+  '𝒙' => 'x',
+  '𝒚' => 'y',
+  '𝒛' => 'z',
+  '𝒜' => 'A',
+  '𝒞' => 'C',
+  '𝒟' => 'D',
+  '𝒢' => 'G',
+  '𝒥' => 'J',
+  '𝒦' => 'K',
+  '𝒩' => 'N',
+  '𝒪' => 'O',
+  '𝒫' => 'P',
+  '𝒬' => 'Q',
+  '𝒮' => 'S',
+  '𝒯' => 'T',
+  '𝒰' => 'U',
+  '𝒱' => 'V',
+  '𝒲' => 'W',
+  '𝒳' => 'X',
+  '𝒴' => 'Y',
+  '𝒵' => 'Z',
+  '𝒶' => 'a',
+  '𝒷' => 'b',
+  '𝒸' => 'c',
+  '𝒹' => 'd',
+  '𝒻' => 'f',
+  '𝒽' => 'h',
+  '𝒾' => 'i',
+  '𝒿' => 'j',
+  '𝓀' => 'k',
+  '𝓁' => 'l',
+  '𝓂' => 'm',
+  '𝓃' => 'n',
+  '𝓅' => 'p',
+  '𝓆' => 'q',
+  '𝓇' => 'r',
+  '𝓈' => 's',
+  '𝓉' => 't',
+  '𝓊' => 'u',
+  '𝓋' => 'v',
+  '𝓌' => 'w',
+  '𝓍' => 'x',
+  '𝓎' => 'y',
+  '𝓏' => 'z',
+  '𝓐' => 'A',
+  '𝓑' => 'B',
+  '𝓒' => 'C',
+  '𝓓' => 'D',
+  '𝓔' => 'E',
+  '𝓕' => 'F',
+  '𝓖' => 'G',
+  '𝓗' => 'H',
+  '𝓘' => 'I',
+  '𝓙' => 'J',
+  '𝓚' => 'K',
+  '𝓛' => 'L',
+  '𝓜' => 'M',
+  '𝓝' => 'N',
+  '𝓞' => 'O',
+  '𝓟' => 'P',
+  '𝓠' => 'Q',
+  '𝓡' => 'R',
+  '𝓢' => 'S',
+  '𝓣' => 'T',
+  '𝓤' => 'U',
+  '𝓥' => 'V',
+  '𝓦' => 'W',
+  '𝓧' => 'X',
+  '𝓨' => 'Y',
+  '𝓩' => 'Z',
+  '𝓪' => 'a',
+  '𝓫' => 'b',
+  '𝓬' => 'c',
+  '𝓭' => 'd',
+  '𝓮' => 'e',
+  '𝓯' => 'f',
+  '𝓰' => 'g',
+  '𝓱' => 'h',
+  '𝓲' => 'i',
+  '𝓳' => 'j',
+  '𝓴' => 'k',
+  '𝓵' => 'l',
+  '𝓶' => 'm',
+  '𝓷' => 'n',
+  '𝓸' => 'o',
+  '𝓹' => 'p',
+  '𝓺' => 'q',
+  '𝓻' => 'r',
+  '𝓼' => 's',
+  '𝓽' => 't',
+  '𝓾' => 'u',
+  '𝓿' => 'v',
+  '𝔀' => 'w',
+  '𝔁' => 'x',
+  '𝔂' => 'y',
+  '𝔃' => 'z',
+  '𝔄' => 'A',
+  '𝔅' => 'B',
+  '𝔇' => 'D',
+  '𝔈' => 'E',
+  '𝔉' => 'F',
+  '𝔊' => 'G',
+  '𝔍' => 'J',
+  '𝔎' => 'K',
+  '𝔏' => 'L',
+  '𝔐' => 'M',
+  '𝔑' => 'N',
+  '𝔒' => 'O',
+  '𝔓' => 'P',
+  '𝔔' => 'Q',
+  '𝔖' => 'S',
+  '𝔗' => 'T',
+  '𝔘' => 'U',
+  '𝔙' => 'V',
+  '𝔚' => 'W',
+  '𝔛' => 'X',
+  '𝔜' => 'Y',
+  '𝔞' => 'a',
+  '𝔟' => 'b',
+  '𝔠' => 'c',
+  '𝔡' => 'd',
+  '𝔢' => 'e',
+  '𝔣' => 'f',
+  '𝔤' => 'g',
+  '𝔥' => 'h',
+  '𝔦' => 'i',
+  '𝔧' => 'j',
+  '𝔨' => 'k',
+  '𝔩' => 'l',
+  '𝔪' => 'm',
+  '𝔫' => 'n',
+  '𝔬' => 'o',
+  '𝔭' => 'p',
+  '𝔮' => 'q',
+  '𝔯' => 'r',
+  '𝔰' => 's',
+  '𝔱' => 't',
+  '𝔲' => 'u',
+  '𝔳' => 'v',
+  '𝔴' => 'w',
+  '𝔵' => 'x',
+  '𝔶' => 'y',
+  '𝔷' => 'z',
+  '𝔸' => 'A',
+  '𝔹' => 'B',
+  '𝔻' => 'D',
+  '𝔼' => 'E',
+  '𝔽' => 'F',
+  '𝔾' => 'G',
+  '𝕀' => 'I',
+  '𝕁' => 'J',
+  '𝕂' => 'K',
+  '𝕃' => 'L',
+  '𝕄' => 'M',
+  '𝕆' => 'O',
+  '𝕊' => 'S',
+  '𝕋' => 'T',
+  '𝕌' => 'U',
+  '𝕍' => 'V',
+  '𝕎' => 'W',
+  '𝕏' => 'X',
+  '𝕐' => 'Y',
+  '𝕒' => 'a',
+  '𝕓' => 'b',
+  '𝕔' => 'c',
+  '𝕕' => 'd',
+  '𝕖' => 'e',
+  '𝕗' => 'f',
+  '𝕘' => 'g',
+  '𝕙' => 'h',
+  '𝕚' => 'i',
+  '𝕛' => 'j',
+  '𝕜' => 'k',
+  '𝕝' => 'l',
+  '𝕞' => 'm',
+  '𝕟' => 'n',
+  '𝕠' => 'o',
+  '𝕡' => 'p',
+  '𝕢' => 'q',
+  '𝕣' => 'r',
+  '𝕤' => 's',
+  '𝕥' => 't',
+  '𝕦' => 'u',
+  '𝕧' => 'v',
+  '𝕨' => 'w',
+  '𝕩' => 'x',
+  '𝕪' => 'y',
+  '𝕫' => 'z',
+  '𝕬' => 'A',
+  '𝕭' => 'B',
+  '𝕮' => 'C',
+  '𝕯' => 'D',
+  '𝕰' => 'E',
+  '𝕱' => 'F',
+  '𝕲' => 'G',
+  '𝕳' => 'H',
+  '𝕴' => 'I',
+  '𝕵' => 'J',
+  '𝕶' => 'K',
+  '𝕷' => 'L',
+  '𝕸' => 'M',
+  '𝕹' => 'N',
+  '𝕺' => 'O',
+  '𝕻' => 'P',
+  '𝕼' => 'Q',
+  '𝕽' => 'R',
+  '𝕾' => 'S',
+  '𝕿' => 'T',
+  '𝖀' => 'U',
+  '𝖁' => 'V',
+  '𝖂' => 'W',
+  '𝖃' => 'X',
+  '𝖄' => 'Y',
+  '𝖅' => 'Z',
+  '𝖆' => 'a',
+  '𝖇' => 'b',
+  '𝖈' => 'c',
+  '𝖉' => 'd',
+  '𝖊' => 'e',
+  '𝖋' => 'f',
+  '𝖌' => 'g',
+  '𝖍' => 'h',
+  '𝖎' => 'i',
+  '𝖏' => 'j',
+  '𝖐' => 'k',
+  '𝖑' => 'l',
+  '𝖒' => 'm',
+  '𝖓' => 'n',
+  '𝖔' => 'o',
+  '𝖕' => 'p',
+  '𝖖' => 'q',
+  '𝖗' => 'r',
+  '𝖘' => 's',
+  '𝖙' => 't',
+  '𝖚' => 'u',
+  '𝖛' => 'v',
+  '𝖜' => 'w',
+  '𝖝' => 'x',
+  '𝖞' => 'y',
+  '𝖟' => 'z',
+  '𝖠' => 'A',
+  '𝖡' => 'B',
+  '𝖢' => 'C',
+  '𝖣' => 'D',
+  '𝖤' => 'E',
+  '𝖥' => 'F',
+  '𝖦' => 'G',
+  '𝖧' => 'H',
+  '𝖨' => 'I',
+  '𝖩' => 'J',
+  '𝖪' => 'K',
+  '𝖫' => 'L',
+  '𝖬' => 'M',
+  '𝖭' => 'N',
+  '𝖮' => 'O',
+  '𝖯' => 'P',
+  '𝖰' => 'Q',
+  '𝖱' => 'R',
+  '𝖲' => 'S',
+  '𝖳' => 'T',
+  '𝖴' => 'U',
+  '𝖵' => 'V',
+  '𝖶' => 'W',
+  '𝖷' => 'X',
+  '𝖸' => 'Y',
+  '𝖹' => 'Z',
+  '𝖺' => 'a',
+  '𝖻' => 'b',
+  '𝖼' => 'c',
+  '𝖽' => 'd',
+  '𝖾' => 'e',
+  '𝖿' => 'f',
+  '𝗀' => 'g',
+  '𝗁' => 'h',
+  '𝗂' => 'i',
+  '𝗃' => 'j',
+  '𝗄' => 'k',
+  '𝗅' => 'l',
+  '𝗆' => 'm',
+  '𝗇' => 'n',
+  '𝗈' => 'o',
+  '𝗉' => 'p',
+  '𝗊' => 'q',
+  '𝗋' => 'r',
+  '𝗌' => 's',
+  '𝗍' => 't',
+  '𝗎' => 'u',
+  '𝗏' => 'v',
+  '𝗐' => 'w',
+  '𝗑' => 'x',
+  '𝗒' => 'y',
+  '𝗓' => 'z',
+  '𝗔' => 'A',
+  '𝗕' => 'B',
+  '𝗖' => 'C',
+  '𝗗' => 'D',
+  '𝗘' => 'E',
+  '𝗙' => 'F',
+  '𝗚' => 'G',
+  '𝗛' => 'H',
+  '𝗜' => 'I',
+  '𝗝' => 'J',
+  '𝗞' => 'K',
+  '𝗟' => 'L',
+  '𝗠' => 'M',
+  '𝗡' => 'N',
+  '𝗢' => 'O',
+  '𝗣' => 'P',
+  '𝗤' => 'Q',
+  '𝗥' => 'R',
+  '𝗦' => 'S',
+  '𝗧' => 'T',
+  '𝗨' => 'U',
+  '𝗩' => 'V',
+  '𝗪' => 'W',
+  '𝗫' => 'X',
+  '𝗬' => 'Y',
+  '𝗭' => 'Z',
+  '𝗮' => 'a',
+  '𝗯' => 'b',
+  '𝗰' => 'c',
+  '𝗱' => 'd',
+  '𝗲' => 'e',
+  '𝗳' => 'f',
+  '𝗴' => 'g',
+  '𝗵' => 'h',
+  '𝗶' => 'i',
+  '𝗷' => 'j',
+  '𝗸' => 'k',
+  '𝗹' => 'l',
+  '𝗺' => 'm',
+  '𝗻' => 'n',
+  '𝗼' => 'o',
+  '𝗽' => 'p',
+  '𝗾' => 'q',
+  '𝗿' => 'r',
+  '𝘀' => 's',
+  '𝘁' => 't',
+  '𝘂' => 'u',
+  '𝘃' => 'v',
+  '𝘄' => 'w',
+  '𝘅' => 'x',
+  '𝘆' => 'y',
+  '𝘇' => 'z',
+  '𝘈' => 'A',
+  '𝘉' => 'B',
+  '𝘊' => 'C',
+  '𝘋' => 'D',
+  '𝘌' => 'E',
+  '𝘍' => 'F',
+  '𝘎' => 'G',
+  '𝘏' => 'H',
+  '𝘐' => 'I',
+  '𝘑' => 'J',
+  '𝘒' => 'K',
+  '𝘓' => 'L',
+  '𝘔' => 'M',
+  '𝘕' => 'N',
+  '𝘖' => 'O',
+  '𝘗' => 'P',
+  '𝘘' => 'Q',
+  '𝘙' => 'R',
+  '𝘚' => 'S',
+  '𝘛' => 'T',
+  '𝘜' => 'U',
+  '𝘝' => 'V',
+  '𝘞' => 'W',
+  '𝘟' => 'X',
+  '𝘠' => 'Y',
+  '𝘡' => 'Z',
+  '𝘢' => 'a',
+  '𝘣' => 'b',
+  '𝘤' => 'c',
+  '𝘥' => 'd',
+  '𝘦' => 'e',
+  '𝘧' => 'f',
+  '𝘨' => 'g',
+  '𝘩' => 'h',
+  '𝘪' => 'i',
+  '𝘫' => 'j',
+  '𝘬' => 'k',
+  '𝘭' => 'l',
+  '𝘮' => 'm',
+  '𝘯' => 'n',
+  '𝘰' => 'o',
+  '𝘱' => 'p',
+  '𝘲' => 'q',
+  '𝘳' => 'r',
+  '𝘴' => 's',
+  '𝘵' => 't',
+  '𝘶' => 'u',
+  '𝘷' => 'v',
+  '𝘸' => 'w',
+  '𝘹' => 'x',
+  '𝘺' => 'y',
+  '𝘻' => 'z',
+  '𝘼' => 'A',
+  '𝘽' => 'B',
+  '𝘾' => 'C',
+  '𝘿' => 'D',
+  '𝙀' => 'E',
+  '𝙁' => 'F',
+  '𝙂' => 'G',
+  '𝙃' => 'H',
+  '𝙄' => 'I',
+  '𝙅' => 'J',
+  '𝙆' => 'K',
+  '𝙇' => 'L',
+  '𝙈' => 'M',
+  '𝙉' => 'N',
+  '𝙊' => 'O',
+  '𝙋' => 'P',
+  '𝙌' => 'Q',
+  '𝙍' => 'R',
+  '𝙎' => 'S',
+  '𝙏' => 'T',
+  '𝙐' => 'U',
+  '𝙑' => 'V',
+  '𝙒' => 'W',
+  '𝙓' => 'X',
+  '𝙔' => 'Y',
+  '𝙕' => 'Z',
+  '𝙖' => 'a',
+  '𝙗' => 'b',
+  '𝙘' => 'c',
+  '𝙙' => 'd',
+  '𝙚' => 'e',
+  '𝙛' => 'f',
+  '𝙜' => 'g',
+  '𝙝' => 'h',
+  '𝙞' => 'i',
+  '𝙟' => 'j',
+  '𝙠' => 'k',
+  '𝙡' => 'l',
+  '𝙢' => 'm',
+  '𝙣' => 'n',
+  '𝙤' => 'o',
+  '𝙥' => 'p',
+  '𝙦' => 'q',
+  '𝙧' => 'r',
+  '𝙨' => 's',
+  '𝙩' => 't',
+  '𝙪' => 'u',
+  '𝙫' => 'v',
+  '𝙬' => 'w',
+  '𝙭' => 'x',
+  '𝙮' => 'y',
+  '𝙯' => 'z',
+  '𝙰' => 'A',
+  '𝙱' => 'B',
+  '𝙲' => 'C',
+  '𝙳' => 'D',
+  '𝙴' => 'E',
+  '𝙵' => 'F',
+  '𝙶' => 'G',
+  '𝙷' => 'H',
+  '𝙸' => 'I',
+  '𝙹' => 'J',
+  '𝙺' => 'K',
+  '𝙻' => 'L',
+  '𝙼' => 'M',
+  '𝙽' => 'N',
+  '𝙾' => 'O',
+  '𝙿' => 'P',
+  '𝚀' => 'Q',
+  '𝚁' => 'R',
+  '𝚂' => 'S',
+  '𝚃' => 'T',
+  '𝚄' => 'U',
+  '𝚅' => 'V',
+  '𝚆' => 'W',
+  '𝚇' => 'X',
+  '𝚈' => 'Y',
+  '𝚉' => 'Z',
+  '𝚊' => 'a',
+  '𝚋' => 'b',
+  '𝚌' => 'c',
+  '𝚍' => 'd',
+  '𝚎' => 'e',
+  '𝚏' => 'f',
+  '𝚐' => 'g',
+  '𝚑' => 'h',
+  '𝚒' => 'i',
+  '𝚓' => 'j',
+  '𝚔' => 'k',
+  '𝚕' => 'l',
+  '𝚖' => 'm',
+  '𝚗' => 'n',
+  '𝚘' => 'o',
+  '𝚙' => 'p',
+  '𝚚' => 'q',
+  '𝚛' => 'r',
+  '𝚜' => 's',
+  '𝚝' => 't',
+  '𝚞' => 'u',
+  '𝚟' => 'v',
+  '𝚠' => 'w',
+  '𝚡' => 'x',
+  '𝚢' => 'y',
+  '𝚣' => 'z',
+  '𝚤' => 'ı',
+  '𝚥' => 'ȷ',
+  '𝚨' => 'Α',
+  '𝚩' => 'Β',
+  '𝚪' => 'Γ',
+  '𝚫' => 'Δ',
+  '𝚬' => 'Ε',
+  '𝚭' => 'Ζ',
+  '𝚮' => 'Η',
+  '𝚯' => 'Θ',
+  '𝚰' => 'Ι',
+  '𝚱' => 'Κ',
+  '𝚲' => 'Λ',
+  '𝚳' => 'Μ',
+  '𝚴' => 'Ν',
+  '𝚵' => 'Ξ',
+  '𝚶' => 'Ο',
+  '𝚷' => 'Π',
+  '𝚸' => 'Ρ',
+  '𝚹' => 'Θ',
+  '𝚺' => 'Σ',
+  '𝚻' => 'Τ',
+  '𝚼' => 'Υ',
+  '𝚽' => 'Φ',
+  '𝚾' => 'Χ',
+  '𝚿' => 'Ψ',
+  '𝛀' => 'Ω',
+  '𝛁' => '∇',
+  '𝛂' => 'α',
+  '𝛃' => 'β',
+  '𝛄' => 'γ',
+  '𝛅' => 'δ',
+  '𝛆' => 'ε',
+  '𝛇' => 'ζ',
+  '𝛈' => 'η',
+  '𝛉' => 'θ',
+  '𝛊' => 'ι',
+  '𝛋' => 'κ',
+  '𝛌' => 'λ',
+  '𝛍' => 'μ',
+  '𝛎' => 'ν',
+  '𝛏' => 'ξ',
+  '𝛐' => 'ο',
+  '𝛑' => 'π',
+  '𝛒' => 'ρ',
+  '𝛓' => 'ς',
+  '𝛔' => 'σ',
+  '𝛕' => 'τ',
+  '𝛖' => 'υ',
+  '𝛗' => 'φ',
+  '𝛘' => 'χ',
+  '𝛙' => 'ψ',
+  '𝛚' => 'ω',
+  '𝛛' => '∂',
+  '𝛜' => 'ε',
+  '𝛝' => 'θ',
+  '𝛞' => 'κ',
+  '𝛟' => 'φ',
+  '𝛠' => 'ρ',
+  '𝛡' => 'π',
+  '𝛢' => 'Α',
+  '𝛣' => 'Β',
+  '𝛤' => 'Γ',
+  '𝛥' => 'Δ',
+  '𝛦' => 'Ε',
+  '𝛧' => 'Ζ',
+  '𝛨' => 'Η',
+  '𝛩' => 'Θ',
+  '𝛪' => 'Ι',
+  '𝛫' => 'Κ',
+  '𝛬' => 'Λ',
+  '𝛭' => 'Μ',
+  '𝛮' => 'Ν',
+  '𝛯' => 'Ξ',
+  '𝛰' => 'Ο',
+  '𝛱' => 'Π',
+  '𝛲' => 'Ρ',
+  '𝛳' => 'Θ',
+  '𝛴' => 'Σ',
+  '𝛵' => 'Τ',
+  '𝛶' => 'Υ',
+  '𝛷' => 'Φ',
+  '𝛸' => 'Χ',
+  '𝛹' => 'Ψ',
+  '𝛺' => 'Ω',
+  '𝛻' => '∇',
+  '𝛼' => 'α',
+  '𝛽' => 'β',
+  '𝛾' => 'γ',
+  '𝛿' => 'δ',
+  '𝜀' => 'ε',
+  '𝜁' => 'ζ',
+  '𝜂' => 'η',
+  '𝜃' => 'θ',
+  '𝜄' => 'ι',
+  '𝜅' => 'κ',
+  '𝜆' => 'λ',
+  '𝜇' => 'μ',
+  '𝜈' => 'ν',
+  '𝜉' => 'ξ',
+  '𝜊' => 'ο',
+  '𝜋' => 'π',
+  '𝜌' => 'ρ',
+  '𝜍' => 'ς',
+  '𝜎' => 'σ',
+  '𝜏' => 'τ',
+  '𝜐' => 'υ',
+  '𝜑' => 'φ',
+  '𝜒' => 'χ',
+  '𝜓' => 'ψ',
+  '𝜔' => 'ω',
+  '𝜕' => '∂',
+  '𝜖' => 'ε',
+  '𝜗' => 'θ',
+  '𝜘' => 'κ',
+  '𝜙' => 'φ',
+  '𝜚' => 'ρ',
+  '𝜛' => 'π',
+  '𝜜' => 'Α',
+  '𝜝' => 'Β',
+  '𝜞' => 'Γ',
+  '𝜟' => 'Δ',
+  '𝜠' => 'Ε',
+  '𝜡' => 'Ζ',
+  '𝜢' => 'Η',
+  '𝜣' => 'Θ',
+  '𝜤' => 'Ι',
+  '𝜥' => 'Κ',
+  '𝜦' => 'Λ',
+  '𝜧' => 'Μ',
+  '𝜨' => 'Ν',
+  '𝜩' => 'Ξ',
+  '𝜪' => 'Ο',
+  '𝜫' => 'Π',
+  '𝜬' => 'Ρ',
+  '𝜭' => 'Θ',
+  '𝜮' => 'Σ',
+  '𝜯' => 'Τ',
+  '𝜰' => 'Υ',
+  '𝜱' => 'Φ',
+  '𝜲' => 'Χ',
+  '𝜳' => 'Ψ',
+  '𝜴' => 'Ω',
+  '𝜵' => '∇',
+  '𝜶' => 'α',
+  '𝜷' => 'β',
+  '𝜸' => 'γ',
+  '𝜹' => 'δ',
+  '𝜺' => 'ε',
+  '𝜻' => 'ζ',
+  '𝜼' => 'η',
+  '𝜽' => 'θ',
+  '𝜾' => 'ι',
+  '𝜿' => 'κ',
+  '𝝀' => 'λ',
+  '𝝁' => 'μ',
+  '𝝂' => 'ν',
+  '𝝃' => 'ξ',
+  '𝝄' => 'ο',
+  '𝝅' => 'π',
+  '𝝆' => 'ρ',
+  '𝝇' => 'ς',
+  '𝝈' => 'σ',
+  '𝝉' => 'τ',
+  '𝝊' => 'υ',
+  '𝝋' => 'φ',
+  '𝝌' => 'χ',
+  '𝝍' => 'ψ',
+  '𝝎' => 'ω',
+  '𝝏' => '∂',
+  '𝝐' => 'ε',
+  '𝝑' => 'θ',
+  '𝝒' => 'κ',
+  '𝝓' => 'φ',
+  '𝝔' => 'ρ',
+  '𝝕' => 'π',
+  '𝝖' => 'Α',
+  '𝝗' => 'Β',
+  '𝝘' => 'Γ',
+  '𝝙' => 'Δ',
+  '𝝚' => 'Ε',
+  '𝝛' => 'Ζ',
+  '𝝜' => 'Η',
+  '𝝝' => 'Θ',
+  '𝝞' => 'Ι',
+  '𝝟' => 'Κ',
+  '𝝠' => 'Λ',
+  '𝝡' => 'Μ',
+  '𝝢' => 'Ν',
+  '𝝣' => 'Ξ',
+  '𝝤' => 'Ο',
+  '𝝥' => 'Π',
+  '𝝦' => 'Ρ',
+  '𝝧' => 'Θ',
+  '𝝨' => 'Σ',
+  '𝝩' => 'Τ',
+  '𝝪' => 'Υ',
+  '𝝫' => 'Φ',
+  '𝝬' => 'Χ',
+  '𝝭' => 'Ψ',
+  '𝝮' => 'Ω',
+  '𝝯' => '∇',
+  '𝝰' => 'α',
+  '𝝱' => 'β',
+  '𝝲' => 'γ',
+  '𝝳' => 'δ',
+  '𝝴' => 'ε',
+  '𝝵' => 'ζ',
+  '𝝶' => 'η',
+  '𝝷' => 'θ',
+  '𝝸' => 'ι',
+  '𝝹' => 'κ',
+  '𝝺' => 'λ',
+  '𝝻' => 'μ',
+  '𝝼' => 'ν',
+  '𝝽' => 'ξ',
+  '𝝾' => 'ο',
+  '𝝿' => 'π',
+  '𝞀' => 'ρ',
+  '𝞁' => 'ς',
+  '𝞂' => 'σ',
+  '𝞃' => 'τ',
+  '𝞄' => 'υ',
+  '𝞅' => 'φ',
+  '𝞆' => 'χ',
+  '𝞇' => 'ψ',
+  '𝞈' => 'ω',
+  '𝞉' => '∂',
+  '𝞊' => 'ε',
+  '𝞋' => 'θ',
+  '𝞌' => 'κ',
+  '𝞍' => 'φ',
+  '𝞎' => 'ρ',
+  '𝞏' => 'π',
+  '𝞐' => 'Α',
+  '𝞑' => 'Β',
+  '𝞒' => 'Γ',
+  '𝞓' => 'Δ',
+  '𝞔' => 'Ε',
+  '𝞕' => 'Ζ',
+  '𝞖' => 'Η',
+  '𝞗' => 'Θ',
+  '𝞘' => 'Ι',
+  '𝞙' => 'Κ',
+  '𝞚' => 'Λ',
+  '𝞛' => 'Μ',
+  '𝞜' => 'Ν',
+  '𝞝' => 'Ξ',
+  '𝞞' => 'Ο',
+  '𝞟' => 'Π',
+  '𝞠' => 'Ρ',
+  '𝞡' => 'Θ',
+  '𝞢' => 'Σ',
+  '𝞣' => 'Τ',
+  '𝞤' => 'Υ',
+  '𝞥' => 'Φ',
+  '𝞦' => 'Χ',
+  '𝞧' => 'Ψ',
+  '𝞨' => 'Ω',
+  '𝞩' => '∇',
+  '𝞪' => 'α',
+  '𝞫' => 'β',
+  '𝞬' => 'γ',
+  '𝞭' => 'δ',
+  '𝞮' => 'ε',
+  '𝞯' => 'ζ',
+  '𝞰' => 'η',
+  '𝞱' => 'θ',
+  '𝞲' => 'ι',
+  '𝞳' => 'κ',
+  '𝞴' => 'λ',
+  '𝞵' => 'μ',
+  '𝞶' => 'ν',
+  '𝞷' => 'ξ',
+  '𝞸' => 'ο',
+  '𝞹' => 'π',
+  '𝞺' => 'ρ',
+  '𝞻' => 'ς',
+  '𝞼' => 'σ',
+  '𝞽' => 'τ',
+  '𝞾' => 'υ',
+  '𝞿' => 'φ',
+  '𝟀' => 'χ',
+  '𝟁' => 'ψ',
+  '𝟂' => 'ω',
+  '𝟃' => '∂',
+  '𝟄' => 'ε',
+  '𝟅' => 'θ',
+  '𝟆' => 'κ',
+  '𝟇' => 'φ',
+  '𝟈' => 'ρ',
+  '𝟉' => 'π',
+  '𝟊' => 'Ϝ',
+  '𝟋' => 'ϝ',
+  '𝟎' => '0',
+  '𝟏' => '1',
+  '𝟐' => '2',
+  '𝟑' => '3',
+  '𝟒' => '4',
+  '𝟓' => '5',
+  '𝟔' => '6',
+  '𝟕' => '7',
+  '𝟖' => '8',
+  '𝟗' => '9',
+  '𝟘' => '0',
+  '𝟙' => '1',
+  '𝟚' => '2',
+  '𝟛' => '3',
+  '𝟜' => '4',
+  '𝟝' => '5',
+  '𝟞' => '6',
+  '𝟟' => '7',
+  '𝟠' => '8',
+  '𝟡' => '9',
+  '𝟢' => '0',
+  '𝟣' => '1',
+  '𝟤' => '2',
+  '𝟥' => '3',
+  '𝟦' => '4',
+  '𝟧' => '5',
+  '𝟨' => '6',
+  '𝟩' => '7',
+  '𝟪' => '8',
+  '𝟫' => '9',
+  '𝟬' => '0',
+  '𝟭' => '1',
+  '𝟮' => '2',
+  '𝟯' => '3',
+  '𝟰' => '4',
+  '𝟱' => '5',
+  '𝟲' => '6',
+  '𝟳' => '7',
+  '𝟴' => '8',
+  '𝟵' => '9',
+  '𝟶' => '0',
+  '𝟷' => '1',
+  '𝟸' => '2',
+  '𝟹' => '3',
+  '𝟺' => '4',
+  '𝟻' => '5',
+  '𝟼' => '6',
+  '𝟽' => '7',
+  '𝟾' => '8',
+  '𝟿' => '9',
+  '𞸀' => 'ا',
+  '𞸁' => 'ب',
+  '𞸂' => 'ج',
+  '𞸃' => 'د',
+  '𞸅' => 'و',
+  '𞸆' => 'ز',
+  '𞸇' => 'ح',
+  '𞸈' => 'ط',
+  '𞸉' => 'ي',
+  '𞸊' => 'ك',
+  '𞸋' => 'ل',
+  '𞸌' => 'م',
+  '𞸍' => 'ن',
+  '𞸎' => 'س',
+  '𞸏' => 'ع',
+  '𞸐' => 'ف',
+  '𞸑' => 'ص',
+  '𞸒' => 'ق',
+  '𞸓' => 'ر',
+  '𞸔' => 'ش',
+  '𞸕' => 'ت',
+  '𞸖' => 'ث',
+  '𞸗' => 'خ',
+  '𞸘' => 'ذ',
+  '𞸙' => 'ض',
+  '𞸚' => 'ظ',
+  '𞸛' => 'غ',
+  '𞸜' => 'ٮ',
+  '𞸝' => 'ں',
+  '𞸞' => 'ڡ',
+  '𞸟' => 'ٯ',
+  '𞸡' => 'ب',
+  '𞸢' => 'ج',
+  '𞸤' => 'ه',
+  '𞸧' => 'ح',
+  '𞸩' => 'ي',
+  '𞸪' => 'ك',
+  '𞸫' => 'ل',
+  '𞸬' => 'م',
+  '𞸭' => 'ن',
+  '𞸮' => 'س',
+  '𞸯' => 'ع',
+  '𞸰' => 'ف',
+  '𞸱' => 'ص',
+  '𞸲' => 'ق',
+  '𞸴' => 'ش',
+  '𞸵' => 'ت',
+  '𞸶' => 'ث',
+  '𞸷' => 'خ',
+  '𞸹' => 'ض',
+  '𞸻' => 'غ',
+  '𞹂' => 'ج',
+  '𞹇' => 'ح',
+  '𞹉' => 'ي',
+  '𞹋' => 'ل',
+  '𞹍' => 'ن',
+  '𞹎' => 'س',
+  '𞹏' => 'ع',
+  '𞹑' => 'ص',
+  '𞹒' => 'ق',
+  '𞹔' => 'ش',
+  '𞹗' => 'خ',
+  '𞹙' => 'ض',
+  '𞹛' => 'غ',
+  '𞹝' => 'ں',
+  '𞹟' => 'ٯ',
+  '𞹡' => 'ب',
+  '𞹢' => 'ج',
+  '𞹤' => 'ه',
+  '𞹧' => 'ح',
+  '𞹨' => 'ط',
+  '𞹩' => 'ي',
+  '𞹪' => 'ك',
+  '𞹬' => 'م',
+  '𞹭' => 'ن',
+  '𞹮' => 'س',
+  '𞹯' => 'ع',
+  '𞹰' => 'ف',
+  '𞹱' => 'ص',
+  '𞹲' => 'ق',
+  '𞹴' => 'ش',
+  '𞹵' => 'ت',
+  '𞹶' => 'ث',
+  '𞹷' => 'خ',
+  '𞹹' => 'ض',
+  '𞹺' => 'ظ',
+  '𞹻' => 'غ',
+  '𞹼' => 'ٮ',
+  '𞹾' => 'ڡ',
+  '𞺀' => 'ا',
+  '𞺁' => 'ب',
+  '𞺂' => 'ج',
+  '𞺃' => 'د',
+  '𞺄' => 'ه',
+  '𞺅' => 'و',
+  '𞺆' => 'ز',
+  '𞺇' => 'ح',
+  '𞺈' => 'ط',
+  '𞺉' => 'ي',
+  '𞺋' => 'ل',
+  '𞺌' => 'م',
+  '𞺍' => 'ن',
+  '𞺎' => 'س',
+  '𞺏' => 'ع',
+  '𞺐' => 'ف',
+  '𞺑' => 'ص',
+  '𞺒' => 'ق',
+  '𞺓' => 'ر',
+  '𞺔' => 'ش',
+  '𞺕' => 'ت',
+  '𞺖' => 'ث',
+  '𞺗' => 'خ',
+  '𞺘' => 'ذ',
+  '𞺙' => 'ض',
+  '𞺚' => 'ظ',
+  '𞺛' => 'غ',
+  '𞺡' => 'ب',
+  '𞺢' => 'ج',
+  '𞺣' => 'د',
+  '𞺥' => 'و',
+  '𞺦' => 'ز',
+  '𞺧' => 'ح',
+  '𞺨' => 'ط',
+  '𞺩' => 'ي',
+  '𞺫' => 'ل',
+  '𞺬' => 'م',
+  '𞺭' => 'ن',
+  '𞺮' => 'س',
+  '𞺯' => 'ع',
+  '𞺰' => 'ف',
+  '𞺱' => 'ص',
+  '𞺲' => 'ق',
+  '𞺳' => 'ر',
+  '𞺴' => 'ش',
+  '𞺵' => 'ت',
+  '𞺶' => 'ث',
+  '𞺷' => 'خ',
+  '𞺸' => 'ذ',
+  '𞺹' => 'ض',
+  '𞺺' => 'ظ',
+  '𞺻' => 'غ',
+  '🄀' => '0.',
+  '🄁' => '0,',
+  '🄂' => '1,',
+  '🄃' => '2,',
+  '🄄' => '3,',
+  '🄅' => '4,',
+  '🄆' => '5,',
+  '🄇' => '6,',
+  '🄈' => '7,',
+  '🄉' => '8,',
+  '🄊' => '9,',
+  '🄐' => '(A)',
+  '🄑' => '(B)',
+  '🄒' => '(C)',
+  '🄓' => '(D)',
+  '🄔' => '(E)',
+  '🄕' => '(F)',
+  '🄖' => '(G)',
+  '🄗' => '(H)',
+  '🄘' => '(I)',
+  '🄙' => '(J)',
+  '🄚' => '(K)',
+  '🄛' => '(L)',
+  '🄜' => '(M)',
+  '🄝' => '(N)',
+  '🄞' => '(O)',
+  '🄟' => '(P)',
+  '🄠' => '(Q)',
+  '🄡' => '(R)',
+  '🄢' => '(S)',
+  '🄣' => '(T)',
+  '🄤' => '(U)',
+  '🄥' => '(V)',
+  '🄦' => '(W)',
+  '🄧' => '(X)',
+  '🄨' => '(Y)',
+  '🄩' => '(Z)',
+  '🄪' => '〔S〕',
+  '🄫' => 'C',
+  '🄬' => 'R',
+  '🄭' => 'CD',
+  '🄮' => 'WZ',
+  '🄰' => 'A',
+  '🄱' => 'B',
+  '🄲' => 'C',
+  '🄳' => 'D',
+  '🄴' => 'E',
+  '🄵' => 'F',
+  '🄶' => 'G',
+  '🄷' => 'H',
+  '🄸' => 'I',
+  '🄹' => 'J',
+  '🄺' => 'K',
+  '🄻' => 'L',
+  '🄼' => 'M',
+  '🄽' => 'N',
+  '🄾' => 'O',
+  '🄿' => 'P',
+  '🅀' => 'Q',
+  '🅁' => 'R',
+  '🅂' => 'S',
+  '🅃' => 'T',
+  '🅄' => 'U',
+  '🅅' => 'V',
+  '🅆' => 'W',
+  '🅇' => 'X',
+  '🅈' => 'Y',
+  '🅉' => 'Z',
+  '🅊' => 'HV',
+  '🅋' => 'MV',
+  '🅌' => 'SD',
+  '🅍' => 'SS',
+  '🅎' => 'PPV',
+  '🅏' => 'WC',
+  '🅪' => 'MC',
+  '🅫' => 'MD',
+  '🅬' => 'MR',
+  '🆐' => 'DJ',
+  '🈀' => 'ほか',
+  '🈁' => 'ココ',
+  '🈂' => 'サ',
+  '🈐' => '手',
+  '🈑' => '字',
+  '🈒' => '双',
+  '🈓' => 'デ',
+  '🈔' => '二',
+  '🈕' => '多',
+  '🈖' => '解',
+  '🈗' => '天',
+  '🈘' => '交',
+  '🈙' => '映',
+  '🈚' => '無',
+  '🈛' => '料',
+  '🈜' => '前',
+  '🈝' => '後',
+  '🈞' => '再',
+  '🈟' => '新',
+  '🈠' => '初',
+  '🈡' => '終',
+  '🈢' => '生',
+  '🈣' => '販',
+  '🈤' => '声',
+  '🈥' => '吹',
+  '🈦' => '演',
+  '🈧' => '投',
+  '🈨' => '捕',
+  '🈩' => '一',
+  '🈪' => '三',
+  '🈫' => '遊',
+  '🈬' => '左',
+  '🈭' => '中',
+  '🈮' => '右',
+  '🈯' => '指',
+  '🈰' => '走',
+  '🈱' => '打',
+  '🈲' => '禁',
+  '🈳' => '空',
+  '🈴' => '合',
+  '🈵' => '満',
+  '🈶' => '有',
+  '🈷' => '月',
+  '🈸' => '申',
+  '🈹' => '割',
+  '🈺' => '営',
+  '🈻' => '配',
+  '🉀' => '〔本〕',
+  '🉁' => '〔三〕',
+  '🉂' => '〔二〕',
+  '🉃' => '〔安〕',
+  '🉄' => '〔点〕',
+  '🉅' => '〔打〕',
+  '🉆' => '〔盗〕',
+  '🉇' => '〔勝〕',
+  '🉈' => '〔敗〕',
+  '🉐' => '得',
+  '🉑' => '可',
+  '🯰' => '0',
+  '🯱' => '1',
+  '🯲' => '2',
+  '🯳' => '3',
+  '🯴' => '4',
+  '🯵' => '5',
+  '🯶' => '6',
+  '🯷' => '7',
+  '🯸' => '8',
+  '🯹' => '9',
+);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"48168a89-b72b-43e9-a0d6-d952bd262cb8\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.gitignore\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/dataSources.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/php.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/php.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/base/config.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/base/config.php\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/html/index.php\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/html/index.php\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ComposerSettings\" synchronizationState=\"SYNCHRONIZE\">\r\n    <pharConfigPath>$PROJECT_DIR$/composer.json</pharConfigPath>\r\n    <execution />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"week2\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"C:\\Users\\JuckM4n\\.config\\herd\\bin\\php83\\php.exe\" />\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2pcjOxQViMmy5WEJ4ImHNLiIdPD\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"PHP Script.index.php.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"week3\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"last_opened_file_path\": \"D:/My documents/Recovery/Desktop/Программирование/loftschool/PHP_ls\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"php.override.implement.member.chooser.php.doc\": \"NONE\",\r\n    \"settings.editor.selected.configurable\": \"reference.webide.settings.project.settings.php\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"DatabaseDriversLRU\": [\r\n      \"mysql\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\My documents\\Recovery\\Desktop\\Программирование\\loftschool\\PHP_ls\" />\r\n      <recent name=\"D:\\My documents\\Recovery\\Desktop\\Программирование\\loftschool\\PHP_ls\\html\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration default=\"true\" type=\"ComposerRunConfigurationType\" factoryName=\"Composer Script\">\r\n      <option name=\"pathToComposerJson\" value=\"$PROJECT_DIR$/composer.json\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-PS-241.14494.237\" />\r\n        <option value=\"bundled-php-predefined-ba97393d7c68-8f0632a2a215-com.jetbrains.php.sharedIndexes-PS-241.14494.237\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"48168a89-b72b-43e9-a0d6-d952bd262cb8\" name=\"Changes\" comment=\"\" />\r\n      <created>1733072230123</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1733072230123</updated>\r\n      <workItem from=\"1733072231405\" duration=\"5135000\" />\r\n      <workItem from=\"1733486761582\" duration=\"2151000\" />\r\n      <workItem from=\"1733681739374\" duration=\"907000\" />\r\n      <workItem from=\"1733683759399\" duration=\"1223000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 12f2958a9e121a954c9bffadd231110cf29054d7)
+++ b/.idea/workspace.xml	(date 1734291541975)
@@ -5,12 +5,7 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="48168a89-b72b-43e9-a0d6-d952bd262cb8" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/dataSources.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/php.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/php.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/base/config.php" beforeDir="false" afterPath="$PROJECT_DIR$/base/config.php" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/html/index.php" beforeDir="false" afterPath="$PROJECT_DIR$/html/index.php" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -41,43 +36,37 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "PHP Script.index.php.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "week3",
-    "ignore.virus.scanning.warn.message": "true",
-    "last_opened_file_path": "D:/My documents/Recovery/Desktop/Программирование/loftschool/PHP_ls",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "php.override.implement.member.chooser.php.doc": "NONE",
-    "settings.editor.selected.configurable": "reference.webide.settings.project.settings.php",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
+    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;PHP Script.index.php.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;week3&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/My documents/Recovery/Desktop/Программирование/loftschool/PHP_ls&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;php.override.implement.member.chooser.php.doc&quot;: &quot;NONE&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;reference.webide.settings.project.settings.php&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   },
-  "keyToStringList": {
-    "DatabaseDriversLRU": [
-      "mysql"
+  &quot;keyToStringList&quot;: {
+    &quot;DatabaseDriversLRU&quot;: [
+      &quot;mysql&quot;
     ]
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="D:\My documents\Recovery\Desktop\Программирование\loftschool\PHP_ls" />
       <recent name="D:\My documents\Recovery\Desktop\Программирование\loftschool\PHP_ls\html" />
     </key>
   </component>
-  <component name="RunManager">
-    <configuration default="true" type="ComposerRunConfigurationType" factoryName="Composer Script">
-      <option name="pathToComposerJson" value="$PROJECT_DIR$/composer.json" />
-      <method v="2" />
-    </configuration>
-  </component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
@@ -98,6 +87,7 @@
       <workItem from="1733486761582" duration="2151000" />
       <workItem from="1733681739374" duration="907000" />
       <workItem from="1733683759399" duration="1223000" />
+      <workItem from="1734290695424" duration="609000" />
     </task>
     <servers />
   </component>
Index: composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"autoload\": {\r\n    \"psr-4\": {\r\n      \"App\\\\\": \"app/\", \"Base\\\\\": \"base/\"\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/composer.json b/composer.json
--- a/composer.json	(revision 12f2958a9e121a954c9bffadd231110cf29054d7)
+++ b/composer.json	(date 1734291710024)
@@ -3,5 +3,8 @@
     "psr-4": {
       "App\\": "app/", "Base\\": "base/"
     }
+  },
+  "require": {
+    "swiftmailer/swiftmailer": "6.0"
   }
 }
Index: vendor/autoload.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/autoload.php b/vendor/autoload.php
new file mode 100644
--- /dev/null	(date 1734291712006)
+++ b/vendor/autoload.php	(date 1734291712006)
@@ -0,0 +1,25 @@
+<?php
+
+// autoload.php @generated by Composer
+
+if (PHP_VERSION_ID < 50600) {
+    if (!headers_sent()) {
+        header('HTTP/1.1 500 Internal Server Error');
+    }
+    $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via "composer self-update --2.2". Aborting.'.PHP_EOL;
+    if (!ini_get('display_errors')) {
+        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
+            fwrite(STDERR, $err);
+        } elseif (!headers_sent()) {
+            echo $err;
+        }
+    }
+    trigger_error(
+        $err,
+        E_USER_ERROR
+    );
+}
+
+require_once __DIR__ . '/composer/autoload_real.php';
+
+return ComposerAutoloaderInit4e7cdc8497e2dffe5a9da14d7d0398d7::getLoader();
Index: composer.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/composer.lock b/composer.lock
new file mode 100644
--- /dev/null	(date 1734291710798)
+++ b/composer.lock	(date 1734291710798)
@@ -0,0 +1,387 @@
+{
+    "_readme": [
+        "This file locks the dependencies of your project to a known state",
+        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
+        "This file is @generated automatically"
+    ],
+    "content-hash": "4e7cdc8497e2dffe5a9da14d7d0398d7",
+    "packages": [
+        {
+            "name": "doctrine/lexer",
+            "version": "1.2.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/doctrine/lexer.git",
+                "reference": "c268e882d4dbdd85e36e4ad69e02dc284f89d229"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/doctrine/lexer/zipball/c268e882d4dbdd85e36e4ad69e02dc284f89d229",
+                "reference": "c268e882d4dbdd85e36e4ad69e02dc284f89d229",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1 || ^8.0"
+            },
+            "require-dev": {
+                "doctrine/coding-standard": "^9.0",
+                "phpstan/phpstan": "^1.3",
+                "phpunit/phpunit": "^7.5 || ^8.5 || ^9.5",
+                "vimeo/psalm": "^4.11"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Doctrine\\Common\\Lexer\\": "lib/Doctrine/Common/Lexer"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Guilherme Blanco",
+                    "email": "guilhermeblanco@gmail.com"
+                },
+                {
+                    "name": "Roman Borschel",
+                    "email": "roman@code-factory.org"
+                },
+                {
+                    "name": "Johannes Schmitt",
+                    "email": "schmittjoh@gmail.com"
+                }
+            ],
+            "description": "PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.",
+            "homepage": "https://www.doctrine-project.org/projects/lexer.html",
+            "keywords": [
+                "annotations",
+                "docblock",
+                "lexer",
+                "parser",
+                "php"
+            ],
+            "support": {
+                "issues": "https://github.com/doctrine/lexer/issues",
+                "source": "https://github.com/doctrine/lexer/tree/1.2.3"
+            },
+            "funding": [
+                {
+                    "url": "https://www.doctrine-project.org/sponsorship.html",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://www.patreon.com/phpdoctrine",
+                    "type": "patreon"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Flexer",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2022-02-28T11:07:21+00:00"
+        },
+        {
+            "name": "egulias/email-validator",
+            "version": "2.1.25",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/egulias/EmailValidator.git",
+                "reference": "0dbf5d78455d4d6a41d186da50adc1122ec066f4"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/egulias/EmailValidator/zipball/0dbf5d78455d4d6a41d186da50adc1122ec066f4",
+                "reference": "0dbf5d78455d4d6a41d186da50adc1122ec066f4",
+                "shasum": ""
+            },
+            "require": {
+                "doctrine/lexer": "^1.0.1",
+                "php": ">=5.5",
+                "symfony/polyfill-intl-idn": "^1.10"
+            },
+            "require-dev": {
+                "dominicsayers/isemail": "^3.0.7",
+                "phpunit/phpunit": "^4.8.36|^7.5.15",
+                "satooshi/php-coveralls": "^1.0.1"
+            },
+            "suggest": {
+                "ext-intl": "PHP Internationalization Libraries are required to use the SpoofChecking validation"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Egulias\\EmailValidator\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Eduardo Gulias Davis"
+                }
+            ],
+            "description": "A library for validating emails against several RFCs",
+            "homepage": "https://github.com/egulias/EmailValidator",
+            "keywords": [
+                "email",
+                "emailvalidation",
+                "emailvalidator",
+                "validation",
+                "validator"
+            ],
+            "support": {
+                "issues": "https://github.com/egulias/EmailValidator/issues",
+                "source": "https://github.com/egulias/EmailValidator/tree/2.1.25"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/egulias",
+                    "type": "github"
+                }
+            ],
+            "time": "2020-12-29T14:50:06+00:00"
+        },
+        {
+            "name": "swiftmailer/swiftmailer",
+            "version": "v6.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/swiftmailer/swiftmailer.git",
+                "reference": "74e20ce4dad5011fb2c2cedefb76b2237f123c0e"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/swiftmailer/swiftmailer/zipball/74e20ce4dad5011fb2c2cedefb76b2237f123c0e",
+                "reference": "74e20ce4dad5011fb2c2cedefb76b2237f123c0e",
+                "shasum": ""
+            },
+            "require": {
+                "egulias/email-validator": "~2.0",
+                "php": ">=7.0.0"
+            },
+            "require-dev": {
+                "mockery/mockery": "~0.9.1",
+                "symfony/phpunit-bridge": "~3.3@dev"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "6.0-dev"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "lib/swift_required.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Chris Corbyn"
+                },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                }
+            ],
+            "description": "Swiftmailer, free feature-rich PHP mailer",
+            "homepage": "http://swiftmailer.org",
+            "keywords": [
+                "email",
+                "mail",
+                "mailer"
+            ],
+            "support": {
+                "issues": "https://github.com/swiftmailer/swiftmailer/issues",
+                "source": "https://github.com/swiftmailer/swiftmailer/tree/v6.0.0"
+            },
+            "abandoned": "symfony/mailer",
+            "time": "2017-05-19T19:50:13+00:00"
+        },
+        {
+            "name": "symfony/polyfill-intl-idn",
+            "version": "v1.31.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-intl-idn.git",
+                "reference": "c36586dcf89a12315939e00ec9b4474adcb1d773"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/c36586dcf89a12315939e00ec9b4474adcb1d773",
+                "reference": "c36586dcf89a12315939e00ec9b4474adcb1d773",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2",
+                "symfony/polyfill-intl-normalizer": "^1.10"
+            },
+            "suggest": {
+                "ext-intl": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "thanks": {
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "bootstrap.php"
+                ],
+                "psr-4": {
+                    "Symfony\\Polyfill\\Intl\\Idn\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Laurent Bassin",
+                    "email": "laurent@bassin.info"
+                },
+                {
+                    "name": "Trevor Rowbotham",
+                    "email": "trevor.rowbotham@pm.me"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "idn",
+                "intl",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "support": {
+                "source": "https://github.com/symfony/polyfill-intl-idn/tree/v1.31.0"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2024-09-09T11:45:10+00:00"
+        },
+        {
+            "name": "symfony/polyfill-intl-normalizer",
+            "version": "v1.31.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
+                "reference": "3833d7255cc303546435cb650316bff708a1c75c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/3833d7255cc303546435cb650316bff708a1c75c",
+                "reference": "3833d7255cc303546435cb650316bff708a1c75c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=7.2"
+            },
+            "suggest": {
+                "ext-intl": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "thanks": {
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
+                }
+            },
+            "autoload": {
+                "files": [
+                    "bootstrap.php"
+                ],
+                "psr-4": {
+                    "Symfony\\Polyfill\\Intl\\Normalizer\\": ""
+                },
+                "classmap": [
+                    "Resources/stubs"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for intl's Normalizer class and related functions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "intl",
+                "normalizer",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "support": {
+                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.31.0"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2024-09-09T11:45:10+00:00"
+        }
+    ],
+    "packages-dev": [],
+    "aliases": [],
+    "minimum-stability": "stable",
+    "stability-flags": [],
+    "prefer-stable": false,
+    "prefer-lowest": false,
+    "platform": [],
+    "platform-dev": [],
+    "plugin-api-version": "2.6.0"
+}
Index: vendor/swiftmailer/swiftmailer/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/.gitignore b/vendor/swiftmailer/swiftmailer/.gitignore
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/.gitignore	(date 1495187412000)
@@ -0,0 +1,8 @@
+/.php_cs.cache
+/.phpunit
+/build/*
+/composer.lock
+/phpunit.xml
+/tests/acceptance.conf.php
+/tests/smoke.conf.php
+/vendor/
Index: vendor/swiftmailer/swiftmailer/.php_cs.dist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/.php_cs.dist b/vendor/swiftmailer/swiftmailer/.php_cs.dist
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/.php_cs.dist	(date 1495187412000)
@@ -0,0 +1,15 @@
+<?php
+
+return PhpCsFixer\Config::create()
+    ->setRules(array(
+        '@Symfony' => true,
+        '@Symfony:risky' => true,
+        'array_syntax' => array('syntax' => 'long'),
+        'no_unreachable_default_argument_value' => false,
+        'braces' => array('allow_single_line_closure' => true),
+        'heredoc_to_nowdoc' => false,
+        'phpdoc_annotation_without_dot' => false,
+    ))
+    ->setRiskyAllowed(true)
+    ->setFinder(PhpCsFixer\Finder::create()->in(__DIR__))
+;
Index: vendor/swiftmailer/swiftmailer/.travis.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/.travis.yml b/vendor/swiftmailer/swiftmailer/.travis.yml
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/.travis.yml	(date 1495187412000)
@@ -0,0 +1,24 @@
+language: php
+
+sudo: false
+
+before_script:
+    - cp tests/acceptance.conf.php.default tests/acceptance.conf.php
+    - cp tests/smoke.conf.php.default tests/smoke.conf.php
+    - composer self-update
+    - composer update --no-interaction --prefer-source
+    - gem install mime-types -v 2.99.1
+    - gem install mailcatcher
+    - mailcatcher --smtp-port 4456
+
+script: SYMFONY_PHPUNIT_VERSION=6.1 ./vendor/bin/simple-phpunit
+
+matrix:
+    include:
+        - php: 7.0
+        - php: 7.1
+    fast_finish: true
+
+cache:
+    directories:
+        - .phpunit
Index: vendor/swiftmailer/swiftmailer/CHANGES
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/CHANGES b/vendor/swiftmailer/swiftmailer/CHANGES
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/CHANGES	(date 1495187412000)
@@ -0,0 +1,287 @@
+Changelog
+=========
+
+6.0.0 (2017-05-19)
+------------------
+
+ * added Swift_Transport::ping()
+ * removed Swift_Mime_HeaderFactory, Swift_Mime_HeaderSet, Swift_Mime_Message, Swift_Mime_MimeEntity,
+   and Swift_Mime_ParameterizedHeader interfaces
+ * removed Swift_MailTransport and Swift_Transport_MailTransport
+ * removed Swift_Encoding
+ * removed the Swift_Transport_MailInvoker interface and Swift_Transport_SimpleMailInvoker class
+ * removed the Swift_SignedMessage class
+ * removed newInstance() methods everywhere
+ * methods operating on Date header now use DateTimeImmutable object instead of Unix timestamp;
+   Swift_Mime_Headers_DateHeader::getTimestamp()/setTimestamp() renamed to getDateTime()/setDateTime()
+ * bumped minimum version to PHP 7.0
+
+5.4.9 (2017-XX-XX)
+------------------
+
+ * n/a
+
+5.4.8 (2017-05-01)
+------------------
+
+ * fixed encoding inheritance in addPart()
+ * fixed sorting MIME children when their types are equal
+
+5.4.7 (2017-04-20)
+------------------
+
+ * fixed NTLMAuthenticator clobbering bcmath scale
+
+5.4.6 (2017-02-13)
+------------------
+
+ * removed exceptions thrown in destructors as they lead to fatal errors
+ * switched to use sha256 by default in DKIM as per the RFC
+ * fixed an 'Undefined variable: pipes' PHP notice
+ * fixed long To headers when using the mail transport
+ * fixed NTLMAuthenticator when no domain is passed with the username
+ * prevented fatal error during unserialization of a message
+ * fixed a PHP warning when sending a message that has a length of a multiple of 8192
+
+5.4.5 (2016-12-29)
+------------------
+
+ * SECURITY FIX:  fixed CVE-2016-10074 by disallowing potentially unsafe shell characters
+
+   Prior to 5.4.5, the mail transport (Swift_Transport_MailTransport) was vulnerable to passing
+   arbitrary shell arguments if the "From", "ReturnPath" or "Sender" header came
+   from a non-trusted source, potentially allowing Remote Code Execution
+ * deprecated the mail transport
+
+5.4.4 (2016-11-23)
+------------------
+
+ * reverted escaping command-line args to mail (PHP mail() function already does it)
+
+5.4.3 (2016-07-08)
+------------------
+
+ * fixed SimpleHeaderSet::has()/get() when the 0 index is removed
+ * removed the need to have mcrypt installed
+ * fixed broken MIME header encoding with quotes/colons and non-ascii chars
+ * allowed mail transport send for messages without To header
+ * fixed PHP 7 support
+
+5.4.2 (2016-05-01)
+------------------
+
+ * fixed support for IPv6 sockets
+ * added auto-retry when sending messages from the memory spool
+ * fixed consecutive read calls in Swift_ByteStream_FileByteStream
+ * added support for iso-8859-15 encoding
+ * fixed PHP mail extra params on missing reversePath
+ * added methods to set custom stream context options
+ * fixed charset changes in QpContentEncoderProxy
+ * added return-path header to the ignoredHeaders list of DKIMSigner
+ * fixed crlf for subject using mail
+ * fixed add soft line break only when necessary
+ * fixed escaping command-line args to mail
+
+5.4.1 (2015-06-06)
+------------------
+
+ * made Swiftmailer exceptions confirm to PHP base exception constructor signature
+ * fixed MAIL FROM & RCPT TO headers to be RFC compliant
+
+5.4.0 (2015-03-14)
+------------------
+
+ * added the possibility to add extra certs to PKCS#7 signature
+ * fix base64 encoding with streams
+ * added a new RESULT_SPOOLED status for SpoolTransport
+ * fixed getBody() on attachments when called more than once
+ * removed dots from generated filenames in filespool
+
+5.3.1 (2014-12-05)
+------------------
+
+ * fixed cloning of messages with attachments
+
+5.3.0 (2014-10-04)
+------------------
+
+ * fixed cloning when using signers
+ * reverted removal of Swift_Encoding
+ * drop support for PHP 5.2.x
+
+5.2.2 (2014-09-20)
+------------------
+
+ * fixed Japanese support
+ * fixed the memory spool when the message changes when in the pool
+ * added support for cloning messages
+ * fixed PHP warning in the redirect plugin
+ * changed the way to and cc-ed email are sent to only use one transaction
+
+5.2.1 (2014-06-13)
+------------------
+
+ * SECURITY FIX: fixed CLI escaping when using sendmail as a transport
+
+   Prior to 5.2.1, the sendmail transport (Swift_Transport_SendmailTransport)
+   was vulnerable to an arbitrary shell execution if the "From" header came
+   from a non-trusted source and no "Return-Path" is configured.
+
+ * fixed parameter in DKIMSigner
+ * fixed compatibility with PHP < 5.4
+
+5.2.0 (2014-05-08)
+------------------
+
+ * fixed Swift_ByteStream_FileByteStream::read() to match to the specification
+ * fixed from-charset and to-charset arguments in mbstring_convert_encoding() usages
+ * fixed infinite loop in StreamBuffer
+ * fixed NullTransport to return the number of ignored emails instead of 0
+ * Use phpunit and mockery for unit testing (realityking)
+
+5.1.0 (2014-03-18)
+------------------
+
+ * fixed data writing to stream when sending large messages
+ * added support for libopendkim (https://github.com/xdecock/php-opendkim)
+ * merged SignedMessage and Message
+ * added Gmail XOAuth2 authentication
+ * updated the list of known mime types
+ * added NTLM authentication
+
+5.0.3 (2013-12-03)
+------------------
+
+ * fixed double-dot bug
+ * fixed DKIM signer
+
+5.0.2 (2013-08-30)
+------------------
+
+ * handled correct exception type while reading IoBuffer output
+
+5.0.1 (2013-06-17)
+------------------
+
+ * changed the spool to only start the transport when a mail has to be sent
+ * fixed compatibility with PHP 5.2
+ * fixed LICENSE file
+
+5.0.0 (2013-04-30)
+------------------
+
+ * changed the license from LGPL to MIT
+
+4.3.1 (2013-04-11)
+------------------
+
+ * removed usage of the native QP encoder when the charset is not UTF-8
+ * fixed usage of uniqid to avoid collisions
+ * made a performance improvement when tokenizing large headers
+ * fixed usage of the PHP native QP encoder on PHP 5.4.7+
+
+4.3.0 (2013-01-08)
+------------------
+
+ * made the temporary directory configurable via the TMPDIR env variable
+ * added S/MIME signer and encryption support
+
+4.2.2 (2012-10-25)
+------------------
+
+ * added the possibility to throttle messages per second in ThrottlerPlugin (mostly for Amazon SES)
+ * switched mime.qpcontentencoder to automatically use the PHP native encoder on PHP 5.4.7+
+ * allowed specifying a whitelist with regular expressions in RedirectingPlugin
+
+4.2.1 (2012-07-13)
+------------------
+
+ * changed the coding standards to PSR-1/2
+ * fixed issue with autoloading
+ * added NativeQpContentEncoder to enhance performance (for PHP 5.3+)
+
+4.2.0 (2012-06-29)
+------------------
+
+ * added documentation about how to use the Japanese support introduced in 4.1.8
+ * added a way to override the default configuration in a lazy way
+ * changed the PEAR init script to lazy-load the initialization
+ * fixed a bug when calling Swift_Preferences before anything else (regression introduced in 4.1.8)
+
+4.1.8 (2012-06-17)
+------------------
+
+ * added Japanese iso-2022-jp support
+ * changed the init script to lazy-load the initialization
+ * fixed docblocks (@id) which caused some problems with libraries parsing the dobclocks
+ * fixed Swift_Mime_Headers_IdentificationHeader::setId() when passed an array of ids
+ * fixed encoding of email addresses in headers
+ * added replacements setter to the Decorator plugin
+
+4.1.7 (2012-04-26)
+------------------
+
+ * fixed QpEncoder safeMapShareId property
+
+4.1.6 (2012-03-23)
+------------------
+
+ * reduced the size of serialized Messages
+
+4.1.5 (2012-01-04)
+------------------
+
+ * enforced Swift_Spool::queueMessage() to return a Boolean
+ * made an optimization to the memory spool: start the transport only when required
+ * prevented stream_socket_client() from generating an error and throw a Swift_TransportException instead
+ * fixed a PHP warning when calling to mail() when safe_mode is off
+ * many doc tweaks
+
+4.1.4 (2011-12-16)
+------------------
+
+ * added a memory spool (Swift_MemorySpool)
+ * fixed too many opened files when sending emails with attachments
+
+4.1.3 (2011-10-27)
+------------------
+
+ * added STARTTLS support
+ * added missing @return tags on fluent methods
+ * added a MessageLogger plugin that logs all sent messages
+ * added composer.json
+
+4.1.2 (2011-09-13)
+------------------
+
+ * fixed wrong detection of magic_quotes_runtime
+ * fixed fatal errors when no To or Subject header has been set
+ * fixed charset on parameter header continuations
+ * added documentation about how to install Swiftmailer from the PEAR channel
+ * fixed various typos and markup problem in the documentation
+ * fixed warning when cache directory does not exist
+ * fixed "slashes are escaped" bug
+ * changed require_once() to require() in autoload
+
+4.1.1 (2011-07-04)
+------------------
+
+ * added missing file in PEAR package
+
+4.1.0 (2011-06-30)
+------------------
+
+ * documentation has been converted to ReST
+
+4.1.0 RC1 (2011-06-17)
+----------------------
+
+New features:
+
+ * changed the Decorator Plugin to allow replacements in all headers
+ * added Swift_Mime_Grammar and Swift_Validate to validate an email address
+ * modified the autoloader to lazy-initialize Swiftmailer
+ * removed Swift_Mailer::batchSend()
+ * added NullTransport
+ * added new plugins: RedirectingPlugin and ImpersonatePlugin
+ * added a way to send messages asynchronously (Spool)
Index: vendor/swiftmailer/swiftmailer/.gitattributes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/.gitattributes b/vendor/swiftmailer/swiftmailer/.gitattributes
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/.gitattributes	(date 1495187412000)
@@ -0,0 +1,9 @@
+*.crt -crlf
+*.key -crlf
+*.srl -crlf
+*.pub -crlf
+*.priv -crlf
+*.txt -crlf
+
+# ignore /notes in the git-generated distributed .zip archive
+/doc/notes export-ignore
Index: vendor/swiftmailer/swiftmailer/phpunit.xml.dist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/phpunit.xml.dist b/vendor/swiftmailer/swiftmailer/phpunit.xml.dist
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/phpunit.xml.dist	(date 1495187412000)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<phpunit backupGlobals="false"
+         backupStaticAttributes="false"
+         colors="true"
+         convertErrorsToExceptions="true"
+         convertNoticesToExceptions="true"
+         convertWarningsToExceptions="true"
+         processIsolation="false"
+         stopOnFailure="false"
+         syntaxCheck="false"
+         bootstrap="tests/bootstrap.php"
+>
+    <php>
+        <ini name="intl.default_locale" value="en"/>
+        <ini name="intl.error_level" value="0"/>
+        <ini name="memory_limit" value="-1"/>
+        <ini name="error_reporting" value="-1" />
+    </php>
+
+    <testsuites>
+        <testsuite name="SwiftMailer unit tests">
+            <directory>tests/unit</directory>
+        </testsuite>
+        <testsuite name="SwiftMailer acceptance tests">
+            <directory>tests/acceptance</directory>
+        </testsuite>
+        <testsuite name="SwiftMailer bug">
+            <directory>tests/bug</directory>
+        </testsuite>
+        <testsuite name="SwiftMailer smoke tests">
+            <directory>tests/smoke</directory>
+        </testsuite>
+    </testsuites>
+
+    <listeners>
+        <listener class="Symfony\Bridge\PhpUnit\SymfonyTestsListener" />
+    </listeners>
+</phpunit>
Index: vendor/swiftmailer/swiftmailer/README
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/README b/vendor/swiftmailer/swiftmailer/README
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/README	(date 1495187412000)
@@ -0,0 +1,15 @@
+Swift Mailer
+------------
+
+Swift Mailer is a component based mailing solution for PHP 5.
+It is released under the MIT license.
+
+Homepage:      http://swiftmailer.org
+Documentation: http://swiftmailer.org/docs
+Bugs:          https://github.com/swiftmailer/swiftmailer/issues
+Repository:    https://github.com/swiftmailer/swiftmailer
+
+Swift Mailer is highly object-oriented by design and lends itself
+to use in complex web application with a great deal of flexibility.
+
+For full details on usage, see the documentation.
Index: vendor/swiftmailer/swiftmailer/doc/headers.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/doc/headers.rst b/vendor/swiftmailer/swiftmailer/doc/headers.rst
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/doc/headers.rst	(date 1495187412000)
@@ -0,0 +1,609 @@
+Message Headers
+===============
+
+Sometimes you'll want to add your own headers to a message or modify/remove
+headers that are already present. You work with the message's HeaderSet to do
+this.
+
+Header Basics
+-------------
+
+All MIME entities in Swift Mailer -- including the message itself -- store
+their headers in a single object called a HeaderSet. This HeaderSet is
+retrieved with the ``getHeaders()`` method.
+
+As mentioned in the previous chapter, everything that forms a part of a message
+in Swift Mailer is a MIME entity that is represented by an instance of
+``Swift_Mime_SimpleMimeEntity``. This includes -- most notably -- the message
+object itself, attachments, MIME parts and embedded images. Each of these MIME
+entities consists of a body and a set of headers that describe the body.
+
+For all of the "standard" headers in these MIME entities, such as the
+``Content-Type``, there are named methods for working with them, such as
+``setContentType()`` and ``getContentType()``. This is because headers are a
+moderately complex area of the library. Each header has a slightly different
+required structure that it must meet in order to comply with the standards that
+govern email (and that are checked by spam blockers etc).
+
+You fetch the HeaderSet from a MIME entity like so::
+
+    $message = new Swift_Message();
+
+    // Fetch the HeaderSet from a Message object
+    $headers = $message->getHeaders();
+
+    $attachment = Swift_Attachment::fromPath('document.pdf');
+
+    // Fetch the HeaderSet from an attachment object
+    $headers = $attachment->getHeaders();
+
+The job of the HeaderSet is to contain and manage instances of Header objects.
+Depending upon the MIME entity the HeaderSet came from, the contents of the
+HeaderSet will be different, since an attachment for example has a different
+set of headers to those in a message.
+
+You can find out what the HeaderSet contains with a quick loop, dumping out the
+names of the headers::
+
+    foreach ($headers->getAll() as $header) {
+      printf("%s<br />\n", $header->getFieldName());
+    }
+
+    /*
+    Content-Transfer-Encoding
+    Content-Type
+    MIME-Version
+    Date
+    Message-ID
+    From
+    Subject
+    To
+    */
+
+You can also dump out the rendered HeaderSet by calling its ``toString()``
+method::
+
+    echo $headers->toString();
+
+    /*
+    Message-ID: <1234869991.499a9ee7f1d5e@swift.generated>
+    Date: Tue, 17 Feb 2009 22:26:31 +1100
+    Subject: Awesome subject!
+    From: sender@example.org
+    To: recipient@example.org
+    MIME-Version: 1.0
+    Content-Type: text/plain; charset=utf-8
+    Content-Transfer-Encoding: quoted-printable
+    */
+
+Where the complexity comes in is when you want to modify an existing header.
+This complexity comes from the fact that each header can be of a slightly
+different type (such as a Date header, or a header that contains email
+addresses, or a header that has key-value parameters on it!). Each header in
+the HeaderSet is an instance of ``Swift_Mime_Header``. They all have common
+functionality, but knowing exactly what type of header you're working with will
+allow you a little more control.
+
+You can determine the type of header by comparing the return value of its
+``getFieldType()`` method with the constants ``TYPE_TEXT``,
+``TYPE_PARAMETERIZED``, ``TYPE_DATE``, ``TYPE_MAILBOX``, ``TYPE_ID`` and
+``TYPE_PATH`` which are defined in ``Swift_Mime_Header``::
+
+    foreach ($headers->getAll() as $header) {
+      switch ($header->getFieldType()) {
+        case Swift_Mime_Header::TYPE_TEXT: $type = 'text';
+          break;
+        case Swift_Mime_Header::TYPE_PARAMETERIZED: $type = 'parameterized';
+          break;
+        case Swift_Mime_Header::TYPE_MAILBOX: $type = 'mailbox';
+          break;
+        case Swift_Mime_Header::TYPE_DATE: $type = 'date';
+          break;
+        case Swift_Mime_Header::TYPE_ID: $type = 'ID';
+          break;
+        case Swift_Mime_Header::TYPE_PATH: $type = 'path';
+          break;
+      }
+      printf("%s: is a %s header<br />\n", $header->getFieldName(), $type);
+    }
+
+    /*
+    Content-Transfer-Encoding: is a text header
+    Content-Type: is a parameterized header
+    MIME-Version: is a text header
+    Date: is a date header
+    Message-ID: is a ID header
+    From: is a mailbox header
+    Subject: is a text header
+    To: is a mailbox header
+    */
+
+Headers can be removed from the set, modified within the set, or added to the
+set.
+
+The following sections show you how to work with the HeaderSet and explain the
+details of each implementation of ``Swift_Mime_Header`` that may exist within
+the HeaderSet.
+
+Header Types
+------------
+
+Because all headers are modeled on different data (dates, addresses, text!)
+there are different types of Header in Swift Mailer. Swift Mailer attempts to
+categorize all possible MIME headers into more general groups, defined by a
+small number of classes.
+
+Text Headers
+~~~~~~~~~~~~
+
+Text headers are the simplest type of Header. They contain textual information
+with no special information included within it -- for example the Subject
+header in a message.
+
+There's nothing particularly interesting about a text header, though it is
+probably the one you'd opt to use if you need to add a custom header to a
+message. It represents text just like you'd think it does. If the text contains
+characters that are not permitted in a message header (such as new lines, or
+non-ascii characters) then the header takes care of encoding the text so that
+it can be used.
+
+No header -- including text headers -- in Swift Mailer is vulnerable to
+header-injection attacks. Swift Mailer breaks any attempt at header injection
+by encoding the dangerous data into a non-dangerous form.
+
+It's easy to add a new text header to a HeaderSet. You do this by calling the
+HeaderSet's ``addTextHeader()`` method::
+
+    $message = new Swift_Message();
+    $headers = $message->getHeaders();
+    $headers->addTextHeader('Your-Header-Name', 'the header value');
+
+Changing the value of an existing text header is done by calling it's
+``setValue()`` method::
+
+    $subject = $message->getHeaders()->get('Subject');
+    $subject->setValue('new subject');
+
+When output via ``toString()``, a text header produces something like the
+following::
+
+    $subject = $message->getHeaders()->get('Subject');
+    $subject->setValue('amazing subject line');
+    echo $subject->toString();
+
+    /*
+
+    Subject: amazing subject line
+
+    */
+
+If the header contains any characters that are outside of the US-ASCII range
+however, they will be encoded. This is nothing to be concerned about since mail
+clients will decode them back::
+
+    $subject = $message->getHeaders()->get('Subject');
+    $subject->setValue('contains – dash');
+    echo $subject->toString();
+
+    /*
+
+    Subject: contains =?utf-8?Q?=E2=80=93?= dash
+
+    */
+
+Parameterized Headers
+~~~~~~~~~~~~~~~~~~~~~
+
+Parameterized headers are text headers that contain key-value parameters
+following the textual content. The Content-Type header of a message is a
+parameterized header since it contains charset information after the content
+type.
+
+The parameterized header type is a special type of text header. It extends the
+text header by allowing additional information to follow it. All of the methods
+from text headers are available in addition to the methods described here.
+
+Adding a parameterized header to a HeaderSet is done by using the
+``addParameterizedHeader()`` method which takes a text value like
+``addTextHeader()`` but it also accepts an associative array of key-value
+parameters::
+
+    $message = new Swift_Message();
+    $headers = $message->getHeaders();
+    $headers->addParameterizedHeader(
+      'Header-Name', 'header value',
+      ['foo' => 'bar']
+      );
+
+To change the text value of the header, call it's ``setValue()`` method just as
+you do with text headers.
+
+To change the parameters in the header, call the header's ``setParameters()``
+method or the ``setParameter()`` method (note the pluralization)::
+
+    $type = $message->getHeaders()->get('Content-Type');
+
+    // setParameters() takes an associative array
+    $type->setParameters([
+      'name' => 'file.txt',
+      'charset' => 'iso-8859-1'
+    ]);
+
+    // setParameter() takes two args for $key and $value
+    $type->setParameter('charset', 'iso-8859-1');
+
+When output via ``toString()``, a parameterized header produces something like
+the following::
+
+    $type = $message->getHeaders()->get('Content-Type');
+    $type->setValue('text/html');
+    $type->setParameter('charset', 'utf-8');
+
+    echo $type->toString();
+
+    /*
+
+    Content-Type: text/html; charset=utf-8
+
+    */
+
+If the header contains any characters that are outside of the US-ASCII range
+however, they will be encoded, just like they are for text headers. This is
+nothing to be concerned about since mail clients will decode them back.
+Likewise, if the parameters contain any non-ascii characters they will be
+encoded so that they can be transmitted safely::
+
+    $attachment = new Swift_Attachment();
+    $disp = $attachment->getHeaders()->get('Content-Disposition');
+    $disp->setValue('attachment');
+    $disp->setParameter('filename', 'report–may.pdf');
+    echo $disp->toString();
+
+    /*
+
+    Content-Disposition: attachment; filename*=utf-8''report%E2%80%93may.pdf
+
+    */
+
+Date Headers
+~~~~~~~~~~~~
+
+Date headers contains an RFC 2822 formatted date (i.e. what PHP's ``date('r')``
+returns). They are used anywhere a date or time is needed to be presented as a
+message header.
+
+The data on which a date header is modeled as a DateTimeImmutable object. The
+object is used to create a correctly structured RFC 2822 formatted date with
+timezone such as ``Tue, 17 Feb 2009 22:26:31 +1100``.
+
+The obvious place this header type is used is in the ``Date:`` header of the
+message itself.
+
+It's easy to add a new date header to a HeaderSet. You do this by calling the
+HeaderSet's ``addDateHeader()`` method::
+
+    $message = new Swift_Message();
+    $headers = $message->getHeaders();
+    $headers->addDateHeader('Your-Header', new DateTimeImmutable('3 days ago'));
+
+Changing the value of an existing date header is done by calling it's
+``setDateTime()`` method::
+
+    $date = $message->getHeaders()->get('Date');
+    $date->setDateTime(new DateTimeImmutable());
+
+When output via ``toString()``, a date header produces something like the
+following::
+
+    $date = $message->getHeaders()->get('Date');
+    echo $date->toString();
+
+    /*
+
+    Date: Wed, 18 Feb 2009 13:35:02 +1100
+
+    */
+
+Mailbox (e-mail address) Headers
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Mailbox headers contain one or more email addresses, possibly with personalized
+names attached to them. The data on which they are modeled is represented by an
+associative array of email addresses and names.
+
+Mailbox headers are probably the most complex header type to understand in
+Swift Mailer because they accept their input as an array which can take various
+forms, as described in the previous chapter.
+
+All of the headers that contain e-mail addresses in a message -- with the
+exception of ``Return-Path:`` which has a stricter syntax -- use this header
+type. That is, ``To:``, ``From:`` etc.
+
+You add a new mailbox header to a HeaderSet by calling the HeaderSet's
+``addMailboxHeader()`` method::
+
+    $message = new Swift_Message();
+    $headers = $message->getHeaders();
+    $headers->addMailboxHeader('Your-Header-Name', [
+          'person1@example.org' => 'Person Name One',
+          'person2@example.org',
+          'person3@example.org',
+          'person4@example.org' => 'Another named person'
+    ]);
+
+Changing the value of an existing mailbox header is done by calling it's
+``setNameAddresses()`` method::
+
+    $to = $message->getHeaders()->get('To');
+    $to->setNameAddresses([
+      'joe@example.org' => 'Joe Bloggs',
+      'john@example.org' => 'John Doe',
+      'no-name@example.org'
+    ]);
+
+If you don't wish to concern yourself with the complicated accepted input
+formats accepted by ``setNameAddresses()`` as described in the previous chapter
+and you only want to set one or more addresses (not names) then you can just
+use the ``setAddresses()`` method instead::
+
+    $to = $message->getHeaders()->get('To');
+    $to->setAddresses([
+      'joe@example.org',
+      'john@example.org',
+      'no-name@example.org'
+    ]);
+
+.. note::
+
+    Both methods will accept the above input format in practice.
+
+If all you want to do is set a single address in the header, you can use a
+string as the input parameter to ``setAddresses()`` and/or
+``setNameAddresses()``::
+
+    $to = $message->getHeaders()->get('To');
+    $to->setAddresses('joe-bloggs@example.org');
+
+When output via ``toString()``, a mailbox header produces something like the
+following::
+
+    $to = $message->getHeaders()->get('To');
+    $to->setNameAddresses([
+      'person1@example.org' => 'Name of Person',
+      'person2@example.org',
+      'person3@example.org' => 'Another Person'
+    ]);
+
+    echo $to->toString();
+
+    /*
+
+    To: Name of Person <person1@example.org>, person2@example.org, Another Person
+     <person3@example.org>
+
+    */
+
+ID Headers
+~~~~~~~~~~
+
+ID headers contain identifiers for the entity (or the message). The most
+notable ID header is the Message-ID header on the message itself.
+
+An ID that exists inside an ID header looks more-or-less less like an email
+address. For example, ``<1234955437.499becad62ec2@example.org>``. The part to
+the left of the @ sign is usually unique, based on the current time and some
+random factor. The part on the right is usually a domain name.
+
+Any ID passed to the header's ``setId()`` method absolutely MUST conform to
+this structure, otherwise you'll get an Exception thrown at you by Swift Mailer
+(a ``Swift_RfcComplianceException``). This is to ensure that the generated
+email complies with relevant RFC documents and therefore is less likely to be
+blocked as spam.
+
+It's easy to add a new ID header to a HeaderSet. You do this by calling the
+HeaderSet's ``addIdHeader()`` method::
+
+    $message = new Swift_Message();
+    $headers = $message->getHeaders();
+    $headers->addIdHeader('Your-Header-Name', '123456.unqiue@example.org');
+
+Changing the value of an existing date header is done by calling its
+``setId()`` method::
+
+    $msgId = $message->getHeaders()->get('Message-ID');
+    $msgId->setId(time() . '.' . uniqid('thing') . '@example.org');
+
+When output via ``toString()``, an ID header produces something like the
+following::
+
+    $msgId = $message->getHeaders()->get('Message-ID');
+    echo $msgId->toString();
+
+    /*
+
+    Message-ID: <1234955437.499becad62ec2@example.org>
+
+    */
+
+Path Headers
+~~~~~~~~~~~~
+
+Path headers are like very-restricted mailbox headers. They contain a single
+email address with no associated name. The Return-Path header of a message is a
+path header.
+
+You add a new path header to a HeaderSet by calling the HeaderSet's
+``addPathHeader()`` method::
+
+    $message = new Swift_Message();
+    $headers = $message->getHeaders();
+    $headers->addPathHeader('Your-Header-Name', 'person@example.org');
+
+
+Changing the value of an existing path header is done by calling its
+``setAddress()`` method::
+
+    $return = $message->getHeaders()->get('Return-Path');
+    $return->setAddress('my-address@example.org');
+
+When output via ``toString()``, a path header produces something like the
+following::
+
+    $return = $message->getHeaders()->get('Return-Path');
+    $return->setAddress('person@example.org');
+    echo $return->toString();
+
+    /*
+
+    Return-Path: <person@example.org>
+
+    */
+
+Header Operations
+-----------------
+
+Working with the headers in a message involves knowing how to use the methods
+on the HeaderSet and on the individual Headers within the HeaderSet.
+
+Adding new Headers
+~~~~~~~~~~~~~~~~~~
+
+New headers can be added to the HeaderSet by using one of the provided
+``add..Header()`` methods.
+
+The added header will appear in the message when it is sent::
+
+    // Adding a custom header to a message
+    $message = new Swift_Message();
+    $headers = $message->getHeaders();
+    $headers->addTextHeader('X-Mine', 'something here');
+
+    // Adding a custom header to an attachment
+    $attachment = Swift_Attachment::fromPath('/path/to/doc.pdf');
+    $attachment->getHeaders()->addDateHeader('X-Created-Time', time());
+
+Retrieving Headers
+~~~~~~~~~~~~~~~~~~
+
+Headers are retrieved through the HeaderSet's ``get()`` and ``getAll()``
+methods::
+
+    $headers = $message->getHeaders();
+
+    // Get the To: header
+    $toHeader = $headers->get('To');
+
+    // Get all headers named "X-Foo"
+    $fooHeaders = $headers->getAll('X-Foo');
+
+    // Get the second header named "X-Foo"
+    $foo = $headers->get('X-Foo', 1);
+
+    // Get all headers that are present
+    $all = $headers->getAll();
+
+When using ``get()`` a single header is returned that matches the name (case
+insensitive) that is passed to it. When using ``getAll()`` with a header name,
+an array of headers with that name are returned. Calling ``getAll()`` with no
+arguments returns an array of all headers present in the entity.
+
+.. note::
+
+    It's valid for some headers to appear more than once in a message (e.g.
+    the Received header). For this reason ``getAll()`` exists to fetch all
+    headers with a specified name. In addition, ``get()`` accepts an optional
+    numerical index, starting from zero to specify which header you want more
+    specifically.
+
+.. note::
+
+    If you want to modify the contents of the header and you don't know for
+    sure what type of header it is then you may need to check the type by
+    calling its ``getFieldType()`` method.
+
+Check if a Header Exists
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+You can check if a named header is present in a HeaderSet by calling its
+``has()`` method::
+
+    $headers = $message->getHeaders();
+
+    // Check if the To: header exists
+    if ($headers->has('To')) {
+      echo 'To: exists';
+    }
+
+    // Check if an X-Foo header exists twice (i.e. check for the 2nd one)
+    if ($headers->has('X-Foo', 1)) {
+      echo 'Second X-Foo header exists';
+    }
+
+If the header exists, ``true`` will be returned or ``false`` if not.
+
+.. note::
+
+    It's valid for some headers to appear more than once in a message (e.g.
+    the Received header). For this reason ``has()`` accepts an optional
+    numerical index, starting from zero to specify which header you want to
+    check more specifically.
+
+Removing Headers
+~~~~~~~~~~~~~~~~
+
+Removing a Header from the HeaderSet is done by calling the HeaderSet's
+``remove()`` or ``removeAll()`` methods::
+
+    $headers = $message->getHeaders();
+
+    // Remove the Subject: header
+    $headers->remove('Subject');
+
+    // Remove all X-Foo headers
+    $headers->removeAll('X-Foo');
+
+    // Remove only the second X-Foo header
+    $headers->remove('X-Foo', 1);
+
+When calling ``remove()`` a single header will be removed. When calling
+``removeAll()`` all headers with the given name will be removed. If no headers
+exist with the given name, no errors will occur.
+
+.. note::
+
+    It's valid for some headers to appear more than once in a message (e.g.
+    the Received header). For this reason ``remove()`` accepts an optional
+    numerical index, starting from zero to specify which header you want to
+    check more specifically. For the same reason, ``removeAll()`` exists to
+    remove all headers that have the given name.
+
+Modifying a Header's Content
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+To change a Header's content you should know what type of header it is and then
+call it's appropriate setter method. All headers also have a
+``setFieldBodyModel()`` method that accepts a mixed parameter and delegates to
+the correct setter::
+
+The header will be updated inside the HeaderSet and the changes will be seen
+when the message is sent::
+
+    $headers = $message->getHeaders();
+
+    // Change the Subject: header
+    $subj = $headers->get('Subject');
+    $subj->setValue('new subject here');
+
+    // Change the To: header
+    $to = $headers->get('To');
+    $to->setNameAddresses([
+      'person@example.org' => 'Person',
+      'thing@example.org'
+    ]);
+
+    // Using the setFieldBodyModel() just delegates to the correct method
+    // So here to calls setNameAddresses()
+    $to->setFieldBodyModel([
+      'person@example.org' => 'Person',
+      'thing@example.org'
+    ]);
Index: vendor/swiftmailer/swiftmailer/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/composer.json b/vendor/swiftmailer/swiftmailer/composer.json
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/composer.json	(date 1495187412000)
@@ -0,0 +1,36 @@
+{
+    "name": "swiftmailer/swiftmailer",
+    "type": "library",
+    "description": "Swiftmailer, free feature-rich PHP mailer",
+    "keywords": ["mail","mailer","email"],
+    "homepage": "http://swiftmailer.org",
+    "license": "MIT",
+    "authors": [
+        {
+            "name": "Chris Corbyn"
+        },
+        {
+            "name": "Fabien Potencier",
+            "email": "fabien@symfony.com"
+        }
+    ],
+    "require": {
+        "php": ">=7.0.0",
+        "egulias/email-validator": "~2.0"
+    },
+    "require-dev": {
+        "mockery/mockery": "~0.9.1",
+        "symfony/phpunit-bridge": "~3.3@dev"
+    },
+    "autoload": {
+        "files": ["lib/swift_required.php"]
+    },
+    "autoload-dev": {
+        "psr-0": { "Swift_": "tests/unit" }
+    },
+    "extra": {
+        "branch-alias": {
+            "dev-master": "6.0-dev"
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/LICENSE b/vendor/swiftmailer/swiftmailer/LICENSE
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/LICENSE	(date 1495187412000)
@@ -0,0 +1,19 @@
+Copyright (c) 2013-2016 Fabien Potencier
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
Index: vendor/swiftmailer/swiftmailer/doc/plugins.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/doc/plugins.rst b/vendor/swiftmailer/swiftmailer/doc/plugins.rst
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/doc/plugins.rst	(date 1495187412000)
@@ -0,0 +1,337 @@
+Plugins
+=======
+
+Plugins exist to extend, or modify the behaviour of Swift Mailer. They respond
+to Events that are fired within the Transports during sending.
+
+There are a number of Plugins provided as part of the base Swift Mailer package
+and they all follow a common interface to respond to Events fired within the
+library. Interfaces are provided to "listen" to each type of Event fired and to
+act as desired when a listened-to Event occurs.
+
+Although several plugins are provided with Swift Mailer out-of-the-box, the
+Events system has been specifically designed to make it easy for experienced
+object-oriented developers to write their own plugins in order to achieve
+goals that may not be possible with the base library.
+
+AntiFlood Plugin
+----------------
+
+Many SMTP servers have limits on the number of messages that may be sent during
+any single SMTP connection. The AntiFlood plugin provides a way to stay within
+this limit while still managing a large number of emails.
+
+A typical limit for a single connection is 100 emails. If the server you
+connect to imposes such a limit, it expects you to disconnect after that number
+of emails has been sent. You could manage this manually within a loop, but the
+AntiFlood plugin provides the necessary wrapper code so that you don't need to
+worry about this logic.
+
+Regardless of limits imposed by the server, it's usually a good idea to be
+conservative with the resources of the SMTP server. Sending will become
+sluggish if the server is being over-used so using the AntiFlood plugin will
+not be a bad idea even if no limits exist.
+
+The AntiFlood plugin's logic is basically to disconnect and the immediately
+re-connect with the SMTP server every X number of emails sent, where X is a
+number you specify to the plugin.
+
+You can also specify a time period in seconds that Swift Mailer should pause
+for between the disconnect/re-connect process. It's a good idea to pause for a
+short time (say 30 seconds every 100 emails) simply to give the SMTP server a
+chance to process its queue and recover some resources.
+
+Using the AntiFlood Plugin
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The AntiFlood Plugin -- like all plugins -- is added with the Mailer class's
+``registerPlugin()`` method. It takes two constructor parameters: the number of
+emails to pause after, and optionally the number of seconds to pause for.
+
+When Swift Mailer sends messages it will count the number of messages that have
+been sent since the last re-connect. Once the number hits your specified
+threshold it will disconnect and re-connect, optionally pausing for a specified
+amount of time::
+
+    // Create the Mailer using any Transport
+    $mailer = new Swift_Mailer(
+      new Swift_SmtpTransport('smtp.example.org', 25)
+    );
+
+    // Use AntiFlood to re-connect after 100 emails
+    $mailer->registerPlugin(new Swift_Plugins_AntiFloodPlugin(100));
+
+    // And specify a time in seconds to pause for (30 secs)
+    $mailer->registerPlugin(new Swift_Plugins_AntiFloodPlugin(100, 30));
+
+    // Continue sending as normal
+    for ($lotsOfRecipients as $recipient) {
+      ...
+
+      $mailer->send( ... );
+    }
+
+Throttler Plugin
+----------------
+
+If your SMTP server has restrictions in place to limit the rate at which you
+send emails, then your code will need to be aware of this rate-limiting. The
+Throttler plugin makes Swift Mailer run at a rate-limited speed.
+
+Many shared hosts don't open their SMTP servers as a free-for-all. Usually they
+have policies in place (probably to discourage spammers) that only allow you to
+send a fixed number of emails per-hour/day.
+
+The Throttler plugin supports two modes of rate-limiting and with each, you
+will need to do that math to figure out the values you want. The plugin can
+limit based on the number of emails per minute, or the number of
+bytes-transferred per-minute.
+
+Using the Throttler Plugin
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The Throttler Plugin -- like all plugins -- is added with the Mailer class'
+``registerPlugin()`` method. It has two required constructor parameters that
+tell it how to do its rate-limiting.
+
+When Swift Mailer sends messages it will keep track of the rate at which
+sending messages is occurring. If it realises that sending is happening too
+fast, it will cause your program to ``sleep()`` for enough time to average out
+the rate::
+
+    // Create the Mailer using any Transport
+    $mailer = new Swift_Mailer(
+      new Swift_SmtpTransport('smtp.example.org', 25)
+    );
+
+    // Rate limit to 100 emails per-minute
+    $mailer->registerPlugin(new Swift_Plugins_ThrottlerPlugin(
+      100, Swift_Plugins_ThrottlerPlugin::MESSAGES_PER_MINUTE
+    ));
+
+    // Rate limit to 10MB per-minute
+    $mailer->registerPlugin(new Swift_Plugins_ThrottlerPlugin(
+      1024 * 1024 * 10, Swift_Plugins_ThrottlerPlugin::BYTES_PER_MINUTE
+    ));
+
+    // Continue sending as normal
+    for ($lotsOfRecipients as $recipient) {
+      ...
+
+      $mailer->send( ... );
+    }
+
+Logger Plugin
+-------------
+
+The Logger plugins helps with debugging during the process of sending. It can
+help to identify why an SMTP server is rejecting addresses, or any other
+hard-to-find problems that may arise.
+
+The Logger plugin comes in two parts. There's the plugin itself, along with one
+of a number of possible Loggers that you may choose to use. For example, the
+logger may output messages directly in realtime, or it may capture messages in
+an array.
+
+One other notable feature is the way in which the Logger plugin changes
+Exception messages. If Exceptions are being thrown but the error message does
+not provide conclusive information as to the source of the problem (such as an
+ambiguous SMTP error) the Logger plugin includes the entire SMTP transcript in
+the error message so that debugging becomes a simpler task.
+
+There are a few available Loggers included with Swift Mailer, but writing your
+own implementation is incredibly simple and is achieved by creating a short
+class that implements the ``Swift_Plugins_Logger`` interface.
+
+* ``Swift_Plugins_Loggers_ArrayLogger``: Keeps a collection of log messages
+  inside an array. The array content can be cleared or dumped out to the screen.
+
+* ``Swift_Plugins_Loggers_EchoLogger``: Prints output to the screen in
+  realtime. Handy for very rudimentary debug output.
+
+Using the Logger Plugin
+~~~~~~~~~~~~~~~~~~~~~~~
+
+The Logger Plugin -- like all plugins -- is added with the Mailer class'
+``registerPlugin()`` method. It accepts an instance of ``Swift_Plugins_Logger``
+in its constructor.
+
+When Swift Mailer sends messages it will keep a log of all the interactions
+with the underlying Transport being used. Depending upon the Logger that has
+been used the behaviour will differ, but all implementations offer a way to get
+the contents of the log::
+
+    // Create the Mailer using any Transport
+    $mailer = new Swift_Mailer(
+     new Swift_SmtpTransport('smtp.example.org', 25)
+    );
+
+    // To use the ArrayLogger
+    $logger = new Swift_Plugins_Loggers_ArrayLogger();
+    $mailer->registerPlugin(new Swift_Plugins_LoggerPlugin($logger));
+
+    // Or to use the Echo Logger
+    $logger = new Swift_Plugins_Loggers_EchoLogger();
+    $mailer->registerPlugin(new Swift_Plugins_LoggerPlugin($logger));
+
+    // Continue sending as normal
+    for ($lotsOfRecipients as $recipient) {
+     ...
+
+     $mailer->send( ... );
+    }
+
+    // Dump the log contents
+    // NOTE: The EchoLogger dumps in realtime so dump() does nothing for it
+    echo $logger->dump();
+
+Decorator Plugin
+----------------
+
+Often there's a need to send the same message to multiple recipients, but with
+tiny variations such as the recipient's name being used inside the message
+body. The Decorator plugin aims to provide a solution for allowing these small
+differences.
+
+The decorator plugin works by intercepting the sending process of Swift Mailer,
+reading the email address in the To: field and then looking up a set of
+replacements for a template.
+
+While the use of this plugin is simple, it is probably the most commonly
+misunderstood plugin due to the way in which it works. The typical mistake
+users make is to try registering the plugin multiple times (once for each
+recipient) -- inside a loop for example. This is incorrect.
+
+The Decorator plugin should be registered just once, but containing the list of
+all recipients prior to sending. It will use this list of recipients to find
+the required replacements during sending.
+
+Using the Decorator Plugin
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+To use the Decorator plugin, simply create an associative array of replacements
+based on email addresses and then use the mailer's ``registerPlugin()`` method
+to add the plugin.
+
+First create an associative array of replacements based on the email addresses
+you'll be sending the message to.
+
+.. note::
+
+    The replacements array becomes a 2-dimensional array whose keys are the
+    email addresses and whose values are an associative array of replacements
+    for that email address. The curly braces used in this example can be any
+    type of syntax you choose, provided they match the placeholders in your
+    email template::
+
+        $replacements = [];
+        foreach ($users as $user) {
+          $replacements[$user['email']] = [
+            '{username}'=>$user['username'],
+            '{password}'=>$user['password']
+          ];
+        }
+
+Now create an instance of the Decorator plugin using this array of replacements
+and then register it with the Mailer. Do this only once!
+
+::
+
+    $decorator = new Swift_Plugins_DecoratorPlugin($replacements);
+
+    $mailer->registerPlugin($decorator);
+
+When you create your message, replace elements in the body (and/or the subject
+line) with your placeholders::
+
+    $message = new Swift_Message()
+      ->setSubject('Important notice for {username}')
+      ->setBody(
+        "Hello {username}, we have reset your password to {password}\n" .
+        "Please log in and change it at your earliest convenience."
+      )
+      ;
+
+    foreach ($users as $user) {
+      $message->addTo($user['email']);
+    }
+
+When you send this message to each of your recipients listed in your
+``$replacements`` array they will receive a message customized for just
+themselves. For example, the message used above when received may appear like
+this to one user:
+
+.. code-block:: text
+
+    Subject: Important notice for smilingsunshine2009
+
+    Hello smilingsunshine2009, we have reset your password to rainyDays
+    Please log in and change it at your earliest convenience.
+
+While another use may receive the message as:
+
+.. code-block:: text
+
+    Subject: Important notice for billy-bo-bob
+
+    Hello billy-bo-bob, we have reset your password to dancingOctopus
+    Please log in and change it at your earliest convenience.
+
+While the decorator plugin provides a means to solve this problem, there are
+various ways you could tackle this problem without the need for a plugin. We're
+trying to come up with a better way ourselves and while we have several
+(obvious) ideas we don't quite have the perfect solution to go ahead and
+implement it. Watch this space.
+
+Providing Your Own Replacements Lookup for the Decorator
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Filling an array with replacements may not be the best solution for providing
+replacement information to the decorator. If you have a more elegant algorithm
+that performs replacement lookups on-the-fly you may provide your own
+implementation.
+
+Providing your own replacements lookup implementation for the Decorator is
+simply a matter of passing an instance of
+``Swift_Plugins_Decorator_Replacements`` to the decorator plugin's constructor,
+rather than passing in an array.
+
+The Replacements interface is very simple to implement since it has just one
+method: ``getReplacementsFor($address)``.
+
+Imagine you want to look up replacements from a database on-the-fly, you might
+provide an implementation that does this. You need to create a small class::
+
+    class DbReplacements implements Swift_Plugins_Decorator_Replacements {
+      public function getReplacementsFor($address) {
+        $sql = sprintf(
+          "SELECT * FROM user WHERE email = '%s'",
+          mysql_real_escape_string($address)
+        );
+
+        $result = mysql_query($sql);
+
+        if ($row = mysql_fetch_assoc($result)) {
+          return [
+            '{username}'=>$row['username'],
+            '{password}'=>$row['password']
+          ];
+        }
+      }
+    }
+
+Now all you need to do is pass an instance of your class into the Decorator
+plugin's constructor instead of passing an array::
+
+    $decorator = new Swift_Plugins_DecoratorPlugin(new DbReplacements());
+
+    $mailer->registerPlugin($decorator);
+
+For each message sent, the plugin will call your class'
+``getReplacementsFor()`` method to find the array of replacements it needs.
+
+.. note::
+
+    If your lookup algorithm is case sensitive, you should transform the
+    ``$address`` argument as appropriate -- for example by passing it through
+    ``strtolower()``.
Index: vendor/swiftmailer/swiftmailer/doc/sending.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/doc/sending.rst b/vendor/swiftmailer/swiftmailer/doc/sending.rst
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/doc/sending.rst	(date 1495187412000)
@@ -0,0 +1,446 @@
+Sending Messages
+================
+
+Quick Reference for Sending a Message
+-------------------------------------
+
+Sending a message is very straightforward. You create a Transport, use it to
+create the Mailer, then you use the Mailer to send the message.
+
+When using ``send()`` the message will be sent just like it would be sent if
+you used your mail client. An integer is returned which includes the number of
+successful recipients. If none of the recipients could be sent to then zero
+will be returned, which equates to a boolean ``false``. If you set two ``To:``
+recipients and three ``Bcc:`` recipients in the message and all of the
+recipients are delivered to successfully then the value 5 will be returned::
+
+    // Create the Transport
+    $transport = (new Swift_SmtpTransport('smtp.example.org', 25))
+      ->setUsername('your username')
+      ->setPassword('your password')
+      ;
+
+    /*
+    You could alternatively use a different transport such as Sendmail:
+
+    // Sendmail
+    $transport = new Swift_SendmailTransport('/usr/sbin/sendmail -bs');
+    */
+
+    // Create the Mailer using your created Transport
+    $mailer = new Swift_Mailer($transport);
+
+    // Create a message
+    $message = new Swift_Message('Wonderful Subject')
+      ->setFrom(['john@doe.com' => 'John Doe'])
+      ->setTo(['receiver@domain.org', 'other@domain.org' => 'A name'])
+      ->setBody('Here is the message itself')
+      ;
+
+    // Send the message
+    $result = $mailer->send($message);
+
+Transport Types
+~~~~~~~~~~~~~~~
+
+Transports are the classes in Swift Mailer that are responsible for
+communicating with a service in order to deliver a Message. There are several
+types of Transport in Swift Mailer, all of which implement the
+``Swift_Transport`` interface::
+
+* ``Swift_SmtpTransport``: Sends messages over SMTP; Supports Authentication;
+  Supports Encryption. Very portable; Pleasingly predictable results; Provides
+  good feedback;
+
+* ``Swift_SendmailTransport``: Communicates with a locally installed
+  ``sendmail`` executable (Linux/UNIX). Quick time-to-run; Provides
+  less-accurate feedback than SMTP; Requires ``sendmail`` installation;
+
+* ``Swift_LoadBalancedTransport``: Cycles through a collection of the other
+  Transports to manage load-reduction. Provides graceful fallback if one
+  Transport fails (e.g. an SMTP server is down); Keeps the load on remote
+  services down by spreading the work;
+
+* ``Swift_FailoverTransport``: Works in conjunction with a collection of the
+  other Transports to provide high-availability. Provides graceful fallback if
+  one Transport fails (e.g. an SMTP server is down).
+
+The SMTP Transport
+..................
+
+The SMTP Transport sends messages over the (standardized) Simple Message
+Transfer Protocol. It can deal with encryption and authentication.
+
+The SMTP Transport, ``Swift_SmtpTransport`` is without doubt the most commonly
+used Transport because it will work on 99% of web servers (I just made that
+number up, but you get the idea). All the server needs is the ability to
+connect to a remote (or even local) SMTP server on the correct port number
+(usually 25).
+
+SMTP servers often require users to authenticate with a username and password
+before any mail can be sent to other domains. This is easily achieved using
+Swift Mailer with the SMTP Transport.
+
+SMTP is a protocol -- in other words it's a "way" of communicating a job to be
+done (i.e. sending a message). The SMTP protocol is the fundamental basis on
+which messages are delivered all over the internet 7 days a week, 365 days a
+year. For this reason it's the most "direct" method of sending messages you can
+use and it's the one that will give you the most power and feedback (such as
+delivery failures) when using Swift Mailer.
+
+Because SMTP is generally run as a remote service (i.e. you connect to it over
+the network/internet) it's extremely portable from server-to-server. You can
+easily store the SMTP server address and port number in a configuration file
+within your application and adjust the settings accordingly if the code is
+moved or if the SMTP server is changed.
+
+Some SMTP servers -- Google for example -- use encryption for security reasons.
+Swift Mailer supports using both SSL and TLS encryption settings.
+
+Using the SMTP Transport
+^^^^^^^^^^^^^^^^^^^^^^^^
+
+The SMTP Transport is easy to use. Most configuration options can be set with
+the constructor.
+
+To use the SMTP Transport you need to know which SMTP server your code needs to
+connect to. Ask your web host if you're not sure. Lots of people ask me who to
+connect to -- I really can't answer that since it's a setting that's extremely
+specific to your hosting environment.
+
+A connection to the SMTP server will be established upon the first call to
+``send()``::
+
+    // Create the Transport
+    $transport = new Swift_SmtpTransport('smtp.example.org', 25);
+
+    // Create the Mailer using your created Transport
+    $mailer = new Swift_Mailer($transport);
+
+    /*
+    It's also possible to use multiple method calls
+
+    $transport = (new Swift_SmtpTransport())
+      ->setHost('smtp.example.org')
+      ->setPort(25)
+      ;
+    */
+
+Encrypted SMTP
+^^^^^^^^^^^^^^
+
+You can use SSL or TLS encryption with the SMTP Transport by specifying it as a
+parameter or with a method call::
+
+    // Create the Transport
+    $transport = new Swift_SmtpTransport('smtp.example.org', 587, 'ssl');
+
+    // Create the Mailer using your created Transport
+    $mailer = new Swift_Mailer($transport);
+
+A connection to the SMTP server will be established upon the first call to
+``send()``. The connection will be initiated with the correct encryption
+settings.
+
+.. note::
+
+    For SSL or TLS encryption to work your PHP installation must have
+    appropriate OpenSSL transports wrappers. You can check if "tls" and/or
+    "ssl" are present in your PHP installation by using the PHP function
+    ``stream_get_transports()``.
+
+SMTP with a Username and Password
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Some servers require authentication. You can provide a username and password
+with ``setUsername()`` and ``setPassword()`` methods::
+
+    // Create the Transport the call setUsername() and setPassword()
+    $transport = new Swift_SmtpTransport('smtp.example.org', 25)
+      ->setUsername('username')
+      ->setPassword('password')
+      ;
+
+    // Create the Mailer using your created Transport
+    $mailer = new Swift_Mailer($transport);
+
+Your username and password will be used to authenticate upon first connect when
+``send()`` are first used on the Mailer.
+
+If authentication fails, an Exception of type ``Swift_TransportException`` will
+be thrown.
+
+.. note::
+
+    If you need to know early whether or not authentication has failed and an
+    Exception is going to be thrown, call the ``start()`` method on the
+    created Transport.
+
+The Sendmail Transport
+......................
+
+The Sendmail Transport sends messages by communicating with a locally installed
+MTA -- such as ``sendmail``.
+
+The Sendmail Transport, ``Swift_SendmailTransport`` does not directly connect
+to any remote services. It is designed for Linux servers that have ``sendmail``
+installed. The Transport starts a local ``sendmail`` process and sends messages
+to it. Usually the ``sendmail`` process will respond quickly as it spools your
+messages to disk before sending them.
+
+The Transport is named the Sendmail Transport for historical reasons
+(``sendmail`` was the "standard" UNIX tool for sending e-mail for years). It
+will send messages using other transfer agents such as Exim or Postfix despite
+its name, provided they have the relevant sendmail wrappers so that they can be
+started with the correct command-line flags.
+
+It's a common misconception that because the Sendmail Transport returns a
+result very quickly it must therefore deliver messages to recipients quickly --
+this is not true. It's not slow by any means, but it's certainly not faster
+than SMTP when it comes to getting messages to the intended recipients. This is
+because sendmail itself sends the messages over SMTP once they have been
+quickly spooled to disk.
+
+The Sendmail Transport has the potential to be just as smart of the SMTP
+Transport when it comes to notifying Swift Mailer about which recipients were
+rejected, but in reality the majority of locally installed ``sendmail``
+instances are not configured well enough to provide any useful feedback. As
+such Swift Mailer may report successful deliveries where they did in fact fail
+before they even left your server.
+
+You can run the Sendmail Transport in two different modes specified by command
+line flags:
+
+* "``-bs``" runs in SMTP mode so theoretically it will act like the SMTP
+  Transport
+
+* "``-t``" runs in piped mode with no feedback, but theoretically faster,
+  though not advised
+
+You can think of the Sendmail Transport as a sort of asynchronous SMTP
+Transport -- though if you have problems with delivery failures you should try
+using the SMTP Transport instead. Swift Mailer isn't doing the work here, it's
+simply passing the work to somebody else (i.e. ``sendmail``).
+
+Using the Sendmail Transport
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+To use the Sendmail Transport you simply need to call ``new
+Swift_SendmailTransport()`` with the command as a parameter.
+
+To use the Sendmail Transport you need to know where ``sendmail`` or another
+MTA exists on the server. Swift Mailer uses a default value of
+``/usr/sbin/sendmail``, which should work on most systems.
+
+You specify the entire command as a parameter (i.e. including the command line
+flags). Swift Mailer supports operational modes of "``-bs``" (default) and
+"``-t``".
+
+.. note::
+
+    If you run sendmail in "``-t``" mode you will get no feedback as to whether
+    or not sending has succeeded. Use "``-bs``" unless you have a reason not to.
+
+A sendmail process will be started upon the first call to ``send()``. If the
+process cannot be started successfully an Exception of type
+``Swift_TransportException`` will be thrown::
+
+    // Create the Transport
+    $transport = new Swift_SendmailTransport('/usr/sbin/exim -bs');
+
+    // Create the Mailer using your created Transport
+    $mailer = new Swift_Mailer($transport);
+
+Available Methods for Sending Messages
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The Mailer class offers one method for sending Messages -- ``send()``.
+
+When a message is sent in Swift Mailer, the Mailer class communicates with
+whichever Transport class you have chosen to use.
+
+Each recipient in the message should either be accepted or rejected by the
+Transport. For example, if the domain name on the email address is not
+reachable the SMTP Transport may reject the address because it cannot process
+it. ``send()`` will return an integer indicating the number of accepted
+recipients.
+
+.. note::
+
+    It's possible to find out which recipients were rejected -- we'll cover that
+    later in this chapter.
+
+Using the ``send()`` Method
+...........................
+
+The ``send()`` method of the ``Swift_Mailer`` class sends a message using
+exactly the same logic as your Desktop mail client would use. Just pass it a
+Message and get a result.
+
+The message will be sent just like it would be sent if you used your mail
+client. An integer is returned which includes the number of successful
+recipients. If none of the recipients could be sent to then zero will be
+returned, which equates to a boolean ``false``. If you set two
+``To:`` recipients and three ``Bcc:`` recipients in the message and all of the
+recipients are delivered to successfully then the value 5 will be returned::
+
+    // Create the Transport
+    $transport = new Swift_SmtpTransport('localhost', 25);
+
+    // Create the Mailer using your created Transport
+    $mailer = new Swift_Mailer($transport);
+
+    // Create a message
+    $message = new Swift_Message('Wonderful Subject')
+      ->setFrom(['john@doe.com' => 'John Doe'])
+      ->setTo(['receiver@domain.org', 'other@domain.org' => 'A name'])
+      ->setBody('Here is the message itself')
+      ;
+
+    // Send the message
+    $numSent = $mailer->send($message);
+
+    printf("Sent %d messages\n", $numSent);
+
+    /* Note that often that only the boolean equivalent of the
+       return value is of concern (zero indicates FALSE)
+
+    if ($mailer->send($message))
+    {
+      echo "Sent\n";
+    }
+    else
+    {
+      echo "Failed\n";
+    }
+
+    */
+
+Sending Emails in Batch
+.......................
+
+If you want to send a separate message to each recipient so that only their own
+address shows up in the ``To:`` field, follow the following recipe:
+
+* Create a Transport from one of the provided Transports --
+  ``Swift_SmtpTransport``, ``Swift_SendmailTransport``,
+  or one of the aggregate Transports.
+
+* Create an instance of the ``Swift_Mailer`` class, using the Transport as
+  it's constructor parameter.
+
+* Create a Message.
+
+* Iterate over the recipients and send message via the ``send()`` method on
+  the Mailer object.
+
+Each recipient of the messages receives a different copy with only their own
+email address on the ``To:`` field.
+
+Make sure to add only valid email addresses as recipients. If you try to add an
+invalid email address with ``setTo()``, ``setCc()`` or ``setBcc()``, Swift
+Mailer will throw a ``Swift_RfcComplianceException``.
+
+If you add recipients automatically based on a data source that may contain
+invalid email addresses, you can prevent possible exceptions by validating the
+addresses using ``Swift_Validate::email($email)`` and only adding addresses
+that validate. Another way would be to wrap your ``setTo()``, ``setCc()`` and
+``setBcc()`` calls in a try-catch block and handle the
+``Swift_RfcComplianceException`` in the catch block.
+
+Handling invalid addresses properly is especially important when sending emails
+in large batches since a single invalid address might cause an unhandled
+exception and stop the execution or your script early.
+
+.. note::
+
+    In the following example, two emails are sent. One to each of
+    ``receiver@domain.org`` and ``other@domain.org``. These recipients will
+    not be aware of each other::
+
+        // Create the Transport
+        $transport = new Swift_SmtpTransport('localhost', 25);
+
+        // Create the Mailer using your created Transport
+        $mailer = new Swift_Mailer($transport);
+
+        // Create a message
+        $message = new Swift_Message('Wonderful Subject')
+          ->setFrom(['john@doe.com' => 'John Doe'])
+          ->setBody('Here is the message itself')
+          ;
+
+        // Send the message
+        $failedRecipients = [];
+        $numSent = 0;
+        $to = ['receiver@domain.org', 'other@domain.org' => 'A name'];
+
+        foreach ($to as $address => $name)
+        {
+          if (is_int($address)) {
+            $message->setTo($name);
+          } else {
+            $message->setTo([$address => $name]);
+          }
+
+          $numSent += $mailer->send($message, $failedRecipients);
+        }
+
+        printf("Sent %d messages\n", $numSent);
+
+Finding out Rejected Addresses
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+It's possible to get a list of addresses that were rejected by the Transport by
+using a by-reference parameter to ``send()``.
+
+As Swift Mailer attempts to send the message to each address given to it, if a
+recipient is rejected it will be added to the array. You can pass an existing
+array, otherwise one will be created by-reference.
+
+Collecting the list of recipients that were rejected can be useful in
+circumstances where you need to "prune" a mailing list for example when some
+addresses cannot be delivered to.
+
+Getting Failures By-reference
+.............................
+
+Collecting delivery failures by-reference with the ``send()`` method is as
+simple as passing a variable name to the method call::
+
+    $mailer = new Swift_Mailer( ... );
+
+    $message = (new Swift_Message( ... ))
+      ->setFrom( ... )
+      ->setTo([
+        'receiver@bad-domain.org' => 'Receiver Name',
+        'other@domain.org' => 'A name',
+        'other-receiver@bad-domain.org' => 'Other Name'
+      ))
+      ->setBody( ... )
+      ;
+
+    // Pass a variable name to the send() method
+    if (!$mailer->send($message, $failures))
+    {
+      echo "Failures:";
+      print_r($failures);
+    }
+
+    /*
+    Failures:
+    Array (
+      0 => receiver@bad-domain.org,
+      1 => other-receiver@bad-domain.org
+    )
+    */
+
+If the Transport rejects any of the recipients, the culprit addresses will be
+added to the array provided by-reference.
+
+.. note::
+
+    If the variable name does not yet exist, it will be initialized as an
+    empty array and then failures will be added to that array. If the variable
+    already exists it will be type-cast to an array and failures will be added
+    to it.
Index: vendor/swiftmailer/swiftmailer/doc/index.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/doc/index.rst b/vendor/swiftmailer/swiftmailer/doc/index.rst
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/doc/index.rst	(date 1495187412000)
@@ -0,0 +1,12 @@
+Swiftmailer
+===========
+
+.. toctree::
+    :maxdepth: 2
+
+    introduction
+    messages
+    headers
+    sending
+    plugins
+    japanese
Index: vendor/swiftmailer/swiftmailer/doc/introduction.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/doc/introduction.rst b/vendor/swiftmailer/swiftmailer/doc/introduction.rst
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/doc/introduction.rst	(date 1495187412000)
@@ -0,0 +1,61 @@
+Introduction
+============
+
+Swift Mailer is a for sending e-mails from PHP applications.
+
+System Requirements
+-------------------
+
+Swift Mailer requires PHP 7.0 or higher (``proc_*`` functions must be
+available).
+
+Swift Mailer does not work when used with function overloading as implemented
+by ``mbstring`` when ``mbstring.func_overload`` is set to ``2``.
+
+Installation
+------------
+
+The recommended way to install Swiftmailer is via Composer:
+
+.. code-block:: bash
+
+    $ composer require "swiftmailer/swiftmailer:^6.0"
+
+Basic Usage
+-----------
+
+Here is the simplest way to send emails with Swift Mailer::
+
+    require_once '/path/to/vendor/autoload.php';
+
+    // Create the Transport
+    $transport = (new Swift_SmtpTransport('smtp.example.org', 25))
+      ->setUsername('your username')
+      ->setPassword('your password')
+    ;
+
+    // Create the Mailer using your created Transport
+    $mailer = new Swift_Mailer($transport);
+
+    // Create a message
+    $message = new Swift_Message('Wonderful Subject')
+      ->setFrom(['john@doe.com' => 'John Doe'])
+      ->setTo(['receiver@domain.org', 'other@domain.org' => 'A name'])
+      ->setBody('Here is the message itself')
+      ;
+
+    // Send the message
+    $result = $mailer->send($message);
+
+You can also use Sendmail as a transport:
+
+    // Sendmail
+    $transport = new Swift_SendmailTransport('/usr/sbin/sendmail -bs');
+
+Getting Help
+------------
+
+For bug reports and feature requests, create a new ticket in `GitHub
+<https://github.com/swiftmailer/swiftmailer/issues>`_.
+
+For general support, use Stack Overflow.
Index: vendor/swiftmailer/swiftmailer/doc/japanese.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/doc/japanese.rst b/vendor/swiftmailer/swiftmailer/doc/japanese.rst
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/doc/japanese.rst	(date 1495187412000)
@@ -0,0 +1,19 @@
+Using Swift Mailer for Japanese Emails
+======================================
+
+To send emails in Japanese, you need to tweak the default configuration.
+
+Call the ``Swift::init()`` method with the following code as early as possible
+in your code::
+
+    Swift::init(function () {
+        Swift_DependencyContainer::getInstance()
+            ->register('mime.qpheaderencoder')
+            ->asAliasOf('mime.base64headerencoder');
+
+        Swift_Preferences::getInstance()->setCharset('iso-2022-jp');
+    });
+
+    /* rest of code goes here */
+
+That's all!
Index: vendor/swiftmailer/swiftmailer/doc/messages.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/doc/messages.rst b/vendor/swiftmailer/swiftmailer/doc/messages.rst
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/doc/messages.rst	(date 1495187412000)
@@ -0,0 +1,903 @@
+Creating Messages
+=================
+
+Creating messages in Swift Mailer is done by making use of the various MIME
+entities provided with the library. Complex messages can be quickly created
+with very little effort.
+
+Quick Reference
+---------------
+
+You can think of creating a Message as being similar to the steps you perform
+when you click the Compose button in your mail client. You give it a subject,
+specify some recipients, add any attachments and write your message::
+
+    // Create the message
+    $message = (new Swift_Message())
+
+      // Give the message a subject
+      ->setSubject('Your subject')
+
+      // Set the From address with an associative array
+      ->setFrom(['john@doe.com' => 'John Doe'])
+
+      // Set the To addresses with an associative array (setTo/setCc/setBcc)
+      ->setTo(['receiver@domain.org', 'other@domain.org' => 'A name'])
+
+      // Give it a body
+      ->setBody('Here is the message itself')
+
+      // And optionally an alternative body
+      ->addPart('<q>Here is the message itself</q>', 'text/html')
+
+      // Optionally add any attachments
+      ->attach(Swift_Attachment::fromPath('my-document.pdf'))
+      ;
+
+Message Basics
+--------------
+
+A message is a container for anything you want to send to somebody else. There
+are several basic aspects of a message that you should know.
+
+An e-mail message is made up of several relatively simple entities that are
+combined in different ways to achieve different results. All of these entities
+have the same fundamental outline but serve a different purpose. The Message
+itself can be defined as a MIME entity, an Attachment is a MIME entity, all
+MIME parts are MIME entities -- and so on!
+
+The basic units of each MIME entity -- be it the Message itself, or an
+Attachment -- are its Headers and its body:
+
+.. code-block:: text
+
+    Header-Name: A header value
+    Other-Header: Another value
+
+    The body content itself
+
+The Headers of a MIME entity, and its body must conform to some strict
+standards defined by various RFC documents. Swift Mailer ensures that these
+specifications are followed by using various types of object, including
+Encoders and different Header types to generate the entity.
+
+The Structure of a Message
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Of all of the MIME entities, a message -- ``Swift_Message`` is the largest and
+most complex. It has many properties that can be updated and it can contain
+other MIME entities -- attachments for example -- nested inside it.
+
+A Message has a lot of different Headers which are there to present information
+about the message to the recipients' mail client. Most of these headers will be
+familiar to the majority of users, but we'll list the basic ones. Although it's
+possible to work directly with the Headers of a Message (or other MIME entity),
+the standard Headers have accessor methods provided to abstract away the
+complex details for you. For example, although the Date on a message is written
+with a strict format, you only need to pass a DateTimeInterface instance to
+``setDate()``.
+
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| Header                        | Description                                                                                                                        | Accessors                                   |
++===============================+====================================================================================================================================+=============================================+
+| ``Message-ID``                | Identifies this message with a unique ID, usually containing the domain name and time generated                                    | ``getId()`` / ``setId()``                   |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Return-Path``               | Specifies where bounces should go (Swift Mailer reads this for other uses)                                                         | ``getReturnPath()`` / ``setReturnPath()``   |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``From``                      | Specifies the address of the person who the message is from. This can be multiple addresses if multiple people wrote the message.  | ``getFrom()`` / ``setFrom()``               |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Sender``                    | Specifies the address of the person who physically sent the message (higher precedence than ``From:``)                             | ``getSender()`` / ``setSender()``           |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``To``                        | Specifies the addresses of the intended recipients                                                                                 | ``getTo()`` / ``setTo()``                   |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Cc``                        | Specifies the addresses of recipients who will be copied in on the message                                                         | ``getCc()`` / ``setCc()``                   |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Bcc``                       | Specifies the addresses of recipients who the message will be blind-copied to. Other recipients will not be aware of these copies. | ``getBcc()`` / ``setBcc()``                 |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Reply-To``                  | Specifies the address where replies are sent to                                                                                    | ``getReplyTo()`` / ``setReplyTo()``         |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Subject``                   | Specifies the subject line that is displayed in the recipients' mail client                                                        | ``getSubject()`` / ``setSubject()``         |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Date``                      | Specifies the date at which the message was sent                                                                                   | ``getDate()`` / ``setDate()``               |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Content-Type``              | Specifies the format of the message (usually text/plain or text/html)                                                              | ``getContentType()`` / ``setContentType()`` |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+| ``Content-Transfer-Encoding`` | Specifies the encoding scheme in the message                                                                                       | ``getEncoder()`` / ``setEncoder()``         |
++-------------------------------+------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------+
+
+Working with a Message Object
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Although there are a lot of available methods on a message object, you only
+need to make use of a small subset of them. Usually you'll use
+``setSubject()``, ``setTo()`` and ``setFrom()`` before setting the body of your
+message with ``setBody()``::
+
+    $message = new Swift_Message();
+    $message->setSubject('My subject');
+
+All MIME entities (including a message) have a ``toString()`` method that you
+can call if you want to take a look at what is going to be sent. For example,
+if you ``echo $message->toString();`` you would see something like this:
+
+.. code-block:: text
+
+    Message-ID: <1230173678.4952f5eeb1432@swift.generated>
+    Date: Thu, 25 Dec 2008 13:54:38 +1100
+    Subject: Example subject
+    From: Chris Corbyn <chris@w3style.co.uk>
+    To: Receiver Name <recipient@example.org>
+    MIME-Version: 1.0
+    Content-Type: text/plain; charset=utf-8
+    Content-Transfer-Encoding: quoted-printable
+
+    Here is the message
+
+We'll take a closer look at the methods you use to create your message in the
+following sections.
+
+Adding Content to Your Message
+------------------------------
+
+Rich content can be added to messages in Swift Mailer with relative ease by
+calling methods such as ``setSubject()``, ``setBody()``, ``addPart()`` and
+``attach()``.
+
+Setting the Subject Line
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+The subject line, displayed in the recipients' mail client can be set with the
+``setSubject()`` method, or as a parameter to ``new Swift_Message()``::
+
+    // Pass it as a parameter when you create the message
+    $message = new Swift_Message('My amazing subject');
+
+    // Or set it after like this
+    $message->setSubject('My amazing subject');
+
+Setting the Body Content
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+The body of the message -- seen when the user opens the message -- is specified
+by calling the ``setBody()`` method. If an alternative body is to be included,
+``addPart()`` can be used.
+
+The body of a message is the main part that is read by the user. Often people
+want to send a message in HTML format (``text/html``), other times people want
+to send in plain text (``text/plain``), or sometimes people want to send both
+versions and allow the recipient to choose how they view the message.
+
+As a rule of thumb, if you're going to send a HTML email, always include a
+plain-text equivalent of the same content so that users who prefer to read
+plain text can do so.
+
+If the recipient's mail client offers preferences for displaying text vs. HTML
+then the mail client will present that part to the user where available. In
+other cases the mail client will display the "best" part it can - usually HTML
+if you've included HTML::
+
+    // Pass it as a parameter when you create the message
+    $message = new Swift_Message('Subject here', 'My amazing body');
+
+    // Or set it after like this
+    $message->setBody('My <em>amazing</em> body', 'text/html');
+
+    // Add alternative parts with addPart()
+    $message->addPart('My amazing body in plain text', 'text/plain');
+
+Attaching Files
+---------------
+
+Attachments are downloadable parts of a message and can be added by calling the
+``attach()`` method on the message. You can add attachments that exist on disk,
+or you can create attachments on-the-fly.
+
+Although we refer to files sent over e-mails as "attachments" -- because
+they're attached to the message -- lots of other parts of the message are
+actually "attached" even if we don't refer to these parts as attachments.
+
+File attachments are created by the ``Swift_Attachment`` class and then
+attached to the message via the ``attach()`` method on it. For all of the
+"every day" MIME types such as all image formats, word documents, PDFs and
+spreadsheets you don't need to explicitly set the content-type of the
+attachment, though it would do no harm to do so. For less common formats you
+should set the content-type -- which we'll cover in a moment.
+
+Attaching Existing Files
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+Files that already exist, either on disk or at a URL can be attached to a
+message with just one line of code, using ``Swift_Attachment::fromPath()``.
+
+You can attach files that exist locally, or if your PHP installation has
+``allow_url_fopen`` turned on you can attach files from other
+websites.
+
+The attachment will be presented to the recipient as a downloadable file with
+the same filename as the one you attached::
+
+    // Create the attachment
+    // * Note that you can technically leave the content-type parameter out
+    $attachment = Swift_Attachment::fromPath('/path/to/image.jpg', 'image/jpeg');
+
+    // Attach it to the message
+    $message->attach($attachment);
+
+
+    // The two statements above could be written in one line instead
+    $message->attach(Swift_Attachment::fromPath('/path/to/image.jpg'));
+
+
+    // You can attach files from a URL if allow_url_fopen is on in php.ini
+    $message->attach(Swift_Attachment::fromPath('http://site.tld/logo.png'));
+
+Setting the Filename
+~~~~~~~~~~~~~~~~~~~~
+
+Usually you don't need to explicitly set the filename of an attachment because
+the name of the attached file will be used by default, but if you want to set
+the filename you use the ``setFilename()`` method of the Attachment.
+
+The attachment will be attached in the normal way, but meta-data sent inside
+the email will rename the file to something else::
+
+    // Create the attachment and call its setFilename() method
+    $attachment = Swift_Attachment::fromPath('/path/to/image.jpg')
+      ->setFilename('cool.jpg');
+
+
+    // Because there's a fluid interface, you can do this in one statement
+    $message->attach(
+      Swift_Attachment::fromPath('/path/to/image.jpg')->setFilename('cool.jpg')
+    );
+
+Attaching Dynamic Content
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Files that are generated at runtime, such as PDF documents or images created
+via GD can be attached directly to a message without writing them out to disk.
+Use ``Swift_Attachment`` directly.
+
+The attachment will be presented to the recipient as a downloadable file
+with the filename and content-type you specify::
+
+    // Create your file contents in the normal way, but don't write them to disk
+    $data = create_my_pdf_data();
+
+    // Create the attachment with your data
+    $attachment = new Swift_Attachment($data, 'my-file.pdf', 'application/pdf');
+
+    // Attach it to the message
+    $message->attach($attachment);
+
+
+    // You can alternatively use method chaining to build the attachment
+    $attachment = (new Swift_Attachment())
+      ->setFilename('my-file.pdf')
+      ->setContentType('application/pdf')
+      ->setBody($data)
+      ;
+
+.. note::
+
+    If you would usually write the file to disk anyway you should just attach
+    it with ``Swift_Attachment::fromPath()`` since this will use less memory.
+
+Changing the Disposition
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+Attachments just appear as files that can be saved to the Desktop if desired.
+You can make attachment appear inline where possible by using the
+``setDisposition()`` method of an attachment.
+
+The attachment will be displayed within the email viewing window if the mail
+client knows how to display it::
+
+    // Create the attachment and call its setDisposition() method
+    $attachment = Swift_Attachment::fromPath('/path/to/image.jpg')
+      ->setDisposition('inline');
+
+
+    // Because there's a fluid interface, you can do this in one statement
+    $message->attach(
+      Swift_Attachment::fromPath('/path/to/image.jpg')->setDisposition('inline')
+    );
+
+.. note::
+
+    If you try to create an inline attachment for a non-displayable file type
+    such as a ZIP file, the mail client should just present the attachment as
+    normal.
+
+Embedding Inline Media Files
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Often, people want to include an image or other content inline with a HTML
+message. It's easy to do this with HTML linking to remote resources, but this
+approach is usually blocked by mail clients. Swift Mailer allows you to embed
+your media directly into the message.
+
+Mail clients usually block downloads from remote resources because this
+technique was often abused as a mean of tracking who opened an email. If
+you're sending a HTML email and you want to include an image in the message
+another approach you can take is to embed the image directly.
+
+Swift Mailer makes embedding files into messages extremely streamlined. You
+embed a file by calling the ``embed()`` method of the message,
+which returns a value you can use in a ``src`` or
+``href`` attribute in your HTML.
+
+Just like with attachments, it's possible to embed dynamically generated
+content without having an existing file available.
+
+The embedded files are sent in the email as a special type of attachment that
+has a unique ID used to reference them within your HTML attributes. On mail
+clients that do not support embedded files they may appear as attachments.
+
+Although this is commonly done for images, in theory it will work for any
+displayable (or playable) media type. Support for other media types (such as
+video) is dependent on the mail client however.
+
+Embedding Existing Files
+........................
+
+Files that already exist, either on disk or at a URL can be embedded in a
+message with just one line of code, using ``Swift_EmbeddedFile::fromPath()``.
+
+You can embed files that exist locally, or if your PHP installation has
+``allow_url_fopen`` turned on you can embed files from other websites.
+
+The file will be displayed with the message inline with the HTML wherever its ID
+is used as a ``src`` attribute::
+
+    // Create the message
+    $message = new Swift_Message('My subject');
+
+    // Set the body
+    $message->setBody(
+    '<html>' .
+    ' <body>' .
+    '  Here is an image <img src="' . // Embed the file
+         $message->embed(Swift_Image::fromPath('image.png')) .
+       '" alt="Image" />' .
+    '  Rest of message' .
+    ' </body>' .
+    '</html>',
+      'text/html' // Mark the content-type as HTML
+    );
+
+    // You can embed files from a URL if allow_url_fopen is on in php.ini
+    $message->setBody(
+    '<html>' .
+    ' <body>' .
+    '  Here is an image <img src="' .
+         $message->embed(Swift_Image::fromPath('http://site.tld/logo.png')) .
+       '" alt="Image" />' .
+    '  Rest of message' .
+    ' </body>' .
+    '</html>',
+      'text/html'
+    );
+
+.. note::
+
+    ``Swift_Image`` and ``Swift_EmbeddedFile`` are just aliases of one another.
+    ``Swift_Image`` exists for semantic purposes.
+
+.. note::
+
+    You can embed files in two stages if you prefer. Just capture the return
+    value of ``embed()`` in a variable and use that as the ``src`` attribute::
+
+        // If placing the embed() code inline becomes cumbersome
+        // it's easy to do this in two steps
+        $cid = $message->embed(Swift_Image::fromPath('image.png'));
+
+        $message->setBody(
+        '<html>' .
+        ' <body>' .
+        '  Here is an image <img src="' . $cid . '" alt="Image" />' .
+        '  Rest of message' .
+        ' </body>' .
+        '</html>',
+          'text/html' // Mark the content-type as HTML
+        );
+
+Embedding Dynamic Content
+.........................
+
+Images that are generated at runtime, such as images created via GD can be
+embedded directly to a message without writing them out to disk. Use the
+standard ``new Swift_Image()`` method.
+
+The file will be displayed with the message inline with the HTML wherever its ID
+is used as a ``src`` attribute::
+
+    // Create your file contents in the normal way, but don't write them to disk
+    $img_data = create_my_image_data();
+
+    // Create the message
+    $message = new Swift_Message('My subject');
+
+    // Set the body
+    $message->setBody(
+    '<html>' .
+    ' <body>' .
+    '  Here is an image <img src="' . // Embed the file
+         $message->embed(new Swift_Image($img_data, 'image.jpg', 'image/jpeg')) .
+       '" alt="Image" />' .
+    '  Rest of message' .
+    ' </body>' .
+    '</html>',
+      'text/html' // Mark the content-type as HTML
+    );
+
+.. note::
+
+    ``Swift_Image`` and ``Swift_EmbeddedFile`` are just aliases of one another.
+    ``Swift_Image`` exists for semantic purposes.
+
+.. note::
+
+    You can embed files in two stages if you prefer. Just capture the return
+    value of ``embed()`` in a variable and use that as the ``src`` attribute::
+
+        // If placing the embed() code inline becomes cumbersome
+        // it's easy to do this in two steps
+        $cid = $message->embed(new Swift_Image($img_data, 'image.jpg', 'image/jpeg'));
+
+        $message->setBody(
+        '<html>' .
+        ' <body>' .
+        '  Here is an image <img src="' . $cid . '" alt="Image" />' .
+        '  Rest of message' .
+        ' </body>' .
+        '</html>',
+          'text/html' // Mark the content-type as HTML
+        );
+
+Adding Recipients to Your Message
+---------------------------------
+
+Recipients are specified within the message itself via ``setTo()``, ``setCc()``
+and ``setBcc()``. Swift Mailer reads these recipients from the message when it
+gets sent so that it knows where to send the message to.
+
+Message recipients are one of three types:
+
+* ``To:`` recipients -- the primary recipients (required)
+
+* ``Cc:`` recipients -- receive a copy of the message (optional)
+
+* ``Bcc:`` recipients -- hidden from other recipients (optional)
+
+Each type can contain one, or several addresses. It's possible to list only the
+addresses of the recipients, or you can personalize the address by providing
+the real name of the recipient.
+
+Make sure to add only valid email addresses as recipients. If you try to add an
+invalid email address with ``setTo()``, ``setCc()`` or ``setBcc()``, Swift
+Mailer will throw a ``Swift_RfcComplianceException``.
+
+If you add recipients automatically based on a data source that may contain
+invalid email addresses, you can prevent possible exceptions by validating the
+addresses using ``Swift_Validate::email($email)`` and only adding addresses
+that validate. Another way would be to wrap your ``setTo()``, ``setCc()`` and
+``setBcc()`` calls in a try-catch block and handle the
+``Swift_RfcComplianceException`` in the catch block.
+
+.. sidebar:: Syntax for Addresses
+
+    If you only wish to refer to a single email address (for example your
+    ``From:`` address) then you can just use a string::
+
+          $message->setFrom('some@address.tld');
+
+    If you want to include a name then you must use an associative array::
+
+         $message->setFrom(['some@address.tld' => 'The Name']);
+
+    If you want to include multiple addresses then you must use an array::
+
+         $message->setTo(['some@address.tld', 'other@address.tld']);
+
+    You can mix personalized (addresses with a name) and non-personalized
+    addresses in the same list by mixing the use of associative and
+    non-associative array syntax::
+
+         $message->setTo([
+           'recipient-with-name@example.org' => 'Recipient Name One',
+           'no-name@example.org', // Note that this is not a key-value pair
+           'named-recipient@example.org' => 'Recipient Name Two'
+         ]);
+
+Setting ``To:`` Recipients
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+``To:`` recipients are required in a message and are set with the ``setTo()``
+or ``addTo()`` methods of the message.
+
+To set ``To:`` recipients, create the message object using either ``new
+Swift_Message( ... )`` or ``new Swift_Message( ... )``, then call the
+``setTo()`` method with a complete array of addresses, or use the ``addTo()``
+method to iteratively add recipients.
+
+The ``setTo()`` method accepts input in various formats as described earlier in
+this chapter. The ``addTo()`` method takes either one or two parameters. The
+first being the email address and the second optional parameter being the name
+of the recipient.
+
+``To:`` recipients are visible in the message headers and will be seen by the
+other recipients::
+
+    // Using setTo() to set all recipients in one go
+    $message->setTo([
+      'person1@example.org',
+      'person2@otherdomain.org' => 'Person 2 Name',
+      'person3@example.org',
+      'person4@example.org',
+      'person5@example.org' => 'Person 5 Name'
+    ]);
+
+.. note::
+
+    Multiple calls to ``setTo()`` will not add new recipients -- each
+    call overrides the previous calls. If you want to iteratively add
+    recipients, use the ``addTo()`` method::
+
+        // Using addTo() to add recipients iteratively
+        $message->addTo('person1@example.org');
+        $message->addTo('person2@example.org', 'Person 2 Name');
+
+Setting ``Cc:`` Recipients
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+``Cc:`` recipients are set with the ``setCc()`` or ``addCc()`` methods of the
+message.
+
+To set ``Cc:`` recipients, create the message object using either ``new
+Swift_Message( ... )`` or ``new Swift_Message( ... )``, then call the
+``setCc()`` method with a complete array of addresses, or use the ``addCc()``
+method to iteratively add recipients.
+
+The ``setCc()`` method accepts input in various formats as described earlier in
+this chapter. The ``addCc()`` method takes either one or two parameters. The
+first being the email address and the second optional parameter being the name
+of the recipient.
+
+``Cc:`` recipients are visible in the message headers and will be seen by the
+other recipients::
+
+    // Using setTo() to set all recipients in one go
+    $message->setTo([
+      'person1@example.org',
+      'person2@otherdomain.org' => 'Person 2 Name',
+      'person3@example.org',
+      'person4@example.org',
+      'person5@example.org' => 'Person 5 Name'
+    ]);
+
+.. note::
+
+    Multiple calls to ``setCc()`` will not add new recipients -- each call
+    overrides the previous calls. If you want to iteratively add Cc:
+    recipients, use the ``addCc()`` method::
+
+        // Using addCc() to add recipients iteratively
+        $message->addCc('person1@example.org');
+        $message->addCc('person2@example.org', 'Person 2 Name');
+
+Setting ``Bcc:`` Recipients
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+``Bcc:`` recipients receive a copy of the message without anybody else knowing
+it, and are set with the ``setBcc()`` or ``addBcc()`` methods of the message.
+
+To set ``Bcc:`` recipients, create the message object using either ``new
+Swift_Message( ... )`` or ``new Swift_Message( ... )``, then call the
+``setBcc()`` method with a complete array of addresses, or use the ``addBcc()``
+method to iteratively add recipients.
+
+The ``setBcc()`` method accepts input in various formats as described earlier
+in this chapter. The ``addBcc()`` method takes either one or two parameters.
+The first being the email address and the second optional parameter being the
+name of the recipient.
+
+Only the individual ``Bcc:`` recipient will see their address in the message
+headers. Other recipients (including other ``Bcc:`` recipients) will not see
+the address::
+
+    // Using setBcc() to set all recipients in one go
+    $message->setBcc([
+      'person1@example.org',
+      'person2@otherdomain.org' => 'Person 2 Name',
+      'person3@example.org',
+      'person4@example.org',
+      'person5@example.org' => 'Person 5 Name'
+    ]);
+
+.. note::
+
+    Multiple calls to ``setBcc()`` will not add new recipients -- each call
+    overrides the previous calls. If you want to iteratively add Bcc:
+    recipients, use the ``addBcc()`` method::
+
+        // Using addBcc() to add recipients iteratively
+        $message->addBcc('person1@example.org');
+        $message->addBcc('person2@example.org', 'Person 2 Name');
+
+Specifying Sender Details
+-------------------------
+
+An email must include information about who sent it. Usually this is managed by
+the ``From:`` address, however there are other options.
+
+The sender information is contained in three possible places:
+
+* ``From:`` -- the address(es) of who wrote the message (required)
+
+* ``Sender:`` -- the address of the single person who sent the message
+  (optional)
+
+* ``Return-Path:`` -- the address where bounces should go to (optional)
+
+You must always include a ``From:`` address by using ``setFrom()`` on the
+message. Swift Mailer will use this as the default ``Return-Path:`` unless
+otherwise specified.
+
+The ``Sender:`` address exists because the person who actually sent the email
+may not be the person who wrote the email. It has a higher precedence than the
+``From:`` address and will be used as the ``Return-Path:`` unless otherwise
+specified.
+
+Setting the ``From:`` Address
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+A ``From:`` address is required and is set with the ``setFrom()`` method of the
+message. ``From:`` addresses specify who actually wrote the email, and usually
+who sent it.
+
+What most people probably don't realize is that you can have more than one
+``From:`` address if more than one person wrote the email -- for example if an
+email was put together by a committee.
+
+The ``From:`` address(es) are visible in the message headers and will be seen
+by the recipients.
+
+.. note::
+
+    If you set multiple ``From:`` addresses then you absolutely must set a
+    ``Sender:`` address to indicate who physically sent the message.
+
+::
+
+    // Set a single From: address
+    $message->setFrom('your@address.tld');
+
+    // Set a From: address including a name
+    $message->setFrom(['your@address.tld' => 'Your Name']);
+
+    // Set multiple From: addresses if multiple people wrote the email
+    $message->setFrom([
+      'person1@example.org' => 'Sender One',
+      'person2@example.org' => 'Sender Two'
+    ]);
+
+Setting the ``Sender:`` Address
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+A ``Sender:`` address specifies who sent the message and is set with the
+``setSender()`` method of the message.
+
+The ``Sender:`` address is visible in the message headers and will be seen by
+the recipients.
+
+This address will be used as the ``Return-Path:`` unless otherwise specified.
+
+.. note::
+
+    If you set multiple ``From:`` addresses then you absolutely must set a
+    ``Sender:`` address to indicate who physically sent the message.
+
+You must not set more than one sender address on a message because it's not
+possible for more than one person to send a single message::
+
+    $message->setSender('your@address.tld');
+
+Setting the ``Return-Path:`` (Bounce) Address
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The ``Return-Path:`` address specifies where bounce notifications should be
+sent and is set with the ``setReturnPath()`` method of the message.
+
+You can only have one ``Return-Path:`` and it must not include a personal name.
+
+Bounce notifications will be sent to this address::
+
+    $message->setReturnPath('bounces@address.tld');
+
+Signed/Encrypted Message
+------------------------
+
+To increase the integrity/security of a message it is possible to sign and/or
+encrypt an message using one or multiple signers.
+
+S/MIME
+~~~~~~
+
+S/MIME can sign and/or encrypt a message using the OpenSSL extension.
+
+When signing a message, the signer creates a signature of the entire content of
+the message (including attachments).
+
+The certificate and private key must be PEM encoded, and can be either created
+using for example OpenSSL or obtained at an official Certificate Authority (CA).
+
+**The recipient must have the CA certificate in the list of trusted issuers in
+order to verify the signature.**
+
+**Make sure the certificate supports emailProtection.**
+
+When using OpenSSL this can done by the including the *-addtrust
+emailProtection* parameter when creating the certificate::
+
+    $message = new Swift_Message();
+
+    $smimeSigner = new Swift_Signers_SMimeSigner();
+    $smimeSigner->setSignCertificate('/path/to/certificate.pem', '/path/to/private-key.pem');
+    $message->attachSigner($smimeSigner);
+
+When the private key is secured using a passphrase use the following instead::
+
+    $message = new Swift_Message();
+
+    $smimeSigner = new Swift_Signers_SMimeSigner();
+    $smimeSigner->setSignCertificate('/path/to/certificate.pem', ['/path/to/private-key.pem', 'passphrase']);
+    $message->attachSigner($smimeSigner);
+
+By default the signature is added as attachment, making the message still
+readable for mailing agents not supporting signed messages.
+
+Storing the message as binary is also possible but not recommended::
+
+    $smimeSigner->setSignCertificate('/path/to/certificate.pem', '/path/to/private-key.pem', PKCS7_BINARY);
+
+When encrypting the message (also known as enveloping), the entire message
+(including attachments) is encrypted using a certificate, and the recipient can
+then decrypt the message using corresponding private key.
+
+Encrypting ensures nobody can read the contents of the message without the
+private key.
+
+Normally the recipient provides a certificate for encrypting and keeping the
+decryption key private.
+
+Using both signing and encrypting is also possible::
+
+    $message = new Swift_Message();
+
+    $smimeSigner = new Swift_Signers_SMimeSigner();
+    $smimeSigner->setSignCertificate('/path/to/sign-certificate.pem', '/path/to/private-key.pem');
+    $smimeSigner->setEncryptCertificate('/path/to/encrypt-certificate.pem');
+    $message->attachSigner($smimeSigner);
+
+The used encryption cipher can be set as the second parameter of
+setEncryptCertificate()
+
+See http://php.net/manual/openssl.ciphers for a list of supported ciphers.
+
+By default the message is first signed and then encrypted, this can be changed
+by adding::
+
+    $smimeSigner->setSignThenEncrypt(false);
+
+**Changing this is not recommended as most mail agents don't support this
+none-standard way.**
+
+Only when having trouble with sign then encrypt method, this should be changed.
+
+Requesting a Read Receipt
+-------------------------
+
+It is possible to request a read-receipt to be sent to an address when the
+email is opened. To request a read receipt set the address with
+``setReadReceiptTo()``:
+
+    $message->setReadReceiptTo('your@address.tld');
+
+When the email is opened, if the mail client supports it a notification will be
+sent to this address.
+
+.. note::
+
+    Read receipts won't work for the majority of recipients since many mail
+    clients auto-disable them. Those clients that will send a read receipt
+    will make the user aware that one has been requested.
+
+Setting the Character Set
+-------------------------
+
+The character set of the message (and it's MIME parts) is set with the
+``setCharset()`` method. You can also change the global default of UTF-8 by
+working with the ``Swift_Preferences`` class.
+
+Swift Mailer will default to the UTF-8 character set unless otherwise
+overridden. UTF-8 will work in most instances since it includes all of the
+standard US keyboard characters in addition to most international characters.
+
+It is absolutely vital however that you know what character set your message
+(or it's MIME parts) are written in otherwise your message may be received
+completely garbled.
+
+There are two places in Swift Mailer where you can change the character set:
+
+* In the ``Swift_Preferences`` class
+
+* On each individual message and/or MIME part
+
+To set the character set of your Message:
+
+* Change the global UTF-8 setting by calling
+  ``Swift_Preferences::setCharset()``; or
+
+* Call the ``setCharset()`` method on the message or the MIME part::
+
+    // Approach 1: Change the global setting (suggested)
+    Swift_Preferences::getInstance()->setCharset('iso-8859-2');
+
+    // Approach 2: Call the setCharset() method of the message
+    $message = new Swift_Message()
+      ->setCharset('iso-8859-2');
+
+    // Approach 3: Specify the charset when setting the body
+    $message->setBody('My body', 'text/html', 'iso-8859-2');
+
+    // Approach 4: Specify the charset for each part added
+    $message->addPart('My part', 'text/plain', 'iso-8859-2');
+
+Setting the Line Length
+-----------------------
+
+The length of lines in a message can be changed by using the
+``setMaxLineLength()`` method on the message::
+
+    $message->setMaxLineLength(1000);
+
+Swift Mailer defaults to using 78 characters per line in a message. This is
+done for historical reasons and so that the message can be easily viewed in
+plain-text terminals
+
+Lines that are longer than the line length specified will be wrapped between
+words.
+
+.. note::
+
+    You should never set a maximum length longer than 1000 characters
+    according to RFC 2822. Doing so could have unspecified side-effects such
+    as truncating parts of your message when it is transported between SMTP
+    servers.
+
+Setting the Message Priority
+----------------------------
+
+You can change the priority of the message with ``setPriority()``. Setting the
+priority will not change the way your email is sent -- it is purely an
+indicative setting for the recipient::
+
+    // Indicate "High" priority
+    $message->setPriority(2);
+
+The priority of a message is an indication to the recipient what significance
+it has. Swift Mailer allows you to set the priority by calling the
+``setPriority`` method. This method takes an integer value between 1 and 5:
+
+* ``Swift_Mime_SimpleMessage::PRIORITY_HIGHEST``: 1
+* ``Swift_Mime_SimpleMessage::PRIORITY_HIGH``: 2
+* ``Swift_Mime_SimpleMessage::PRIORITY_NORMAL``: 3
+* ``Swift_Mime_SimpleMessage::PRIORITY_LOW``: 4
+* ``Swift_Mime_SimpleMessage::PRIORITY_LOWEST``: 5
+
+::
+
+    // Or use the constant to be more explicit
+    $message->setPriority(Swift_Mime_SimpleMessage::PRIORITY_HIGH);
Index: vendor/swiftmailer/swiftmailer/tests/acceptance.conf.php.default
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance.conf.php.default b/vendor/swiftmailer/swiftmailer/tests/acceptance.conf.php.default
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance.conf.php.default	(date 1495187412000)
@@ -0,0 +1,37 @@
+<?php
+
+/*
+ Swift Mailer V4 accpetance test configuration.
+
+ YOU ONLY NEED TO EDIT THIS FILE IF YOU WISH TO RUN THE ACCEPTANCE TESTS.
+
+ The acceptance tests are run by default when "All Tests" are run with the
+ testing suite, however, without configuration options here only the unit tests
+ will be run and the acceptance tests will be skipped.
+ 
+ You can fill out only the parts you know and leave the other bits.
+ */
+
+/*
+ Defines: The name and port of a SMTP server you can connect to.
+ Recommended: smtp.gmail.com:25
+ */
+define('SWIFT_SMTP_HOST', 'localhost:4456');
+
+/*
+ Defines: An SMTP server and port which uses TLS encryption.
+ Recommended: smtp.gmail.com:465
+ */
+define('SWIFT_TLS_HOST', 'smtp.gmail.com:465');
+
+/*
+ Defines: An SMTP server and port which uses SSL encryption.
+ Recommended: smtp.gmail.com:465
+ */
+define('SWIFT_SSL_HOST', 'smtp.gmail.com:465');
+
+/*
+ Defines: The path to a sendmail binary (one which can run in -bs mode).
+ Recommended: /usr/sbin/sendmail
+ */
+define('SWIFT_SENDMAIL_PATH', '/usr/sbin/sendmail -bs');
Index: vendor/swiftmailer/swiftmailer/tests/bootstrap.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bootstrap.php b/vendor/swiftmailer/swiftmailer/tests/bootstrap.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bootstrap.php	(date 1495187412000)
@@ -0,0 +1,21 @@
+<?php
+
+require_once dirname(__DIR__).'/vendor/autoload.php';
+
+// Disable garbage collector to prevent segfaults
+gc_disable();
+
+set_include_path(get_include_path().PATH_SEPARATOR.dirname(__DIR__).'/lib');
+
+Mockery::getConfiguration()->allowMockingNonExistentMethods(true);
+
+if (is_file(__DIR__.'/acceptance.conf.php')) {
+    require_once __DIR__.'/acceptance.conf.php';
+}
+if (is_file(__DIR__.'/smoke.conf.php')) {
+    require_once __DIR__.'/smoke.conf.php';
+}
+require_once __DIR__.'/StreamCollector.php';
+require_once __DIR__.'/IdenticalBinaryConstraint.php';
+require_once __DIR__.'/SwiftMailerTestCase.php';
+require_once __DIR__.'/SwiftMailerSmokeTestCase.php';
Index: vendor/swiftmailer/swiftmailer/lib/mime_types.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/mime_types.php b/vendor/swiftmailer/swiftmailer/lib/mime_types.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/mime_types.php	(date 1495187412000)
@@ -0,0 +1,1007 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ *
+ * autogenerated using http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
+ * and https://raw.github.com/minad/mimemagic/master/script/freedesktop.org.xml
+ */
+
+/*
+ * List of MIME type automatically detected in Swift Mailer.
+ */
+
+// You may add or take away what you like (lowercase required)
+
+$swift_mime_types = array(
+    '3dml' => 'text/vnd.in3d.3dml',
+    '3ds' => 'image/x-3ds',
+    '3g2' => 'video/3gpp2',
+    '3gp' => 'video/3gpp',
+    '7z' => 'application/x-7z-compressed',
+    'aab' => 'application/x-authorware-bin',
+    'aac' => 'audio/x-aac',
+    'aam' => 'application/x-authorware-map',
+    'aas' => 'application/x-authorware-seg',
+    'abw' => 'application/x-abiword',
+    'ac' => 'application/pkix-attr-cert',
+    'acc' => 'application/vnd.americandynamics.acc',
+    'ace' => 'application/x-ace-compressed',
+    'acu' => 'application/vnd.acucobol',
+    'acutc' => 'application/vnd.acucorp',
+    'adp' => 'audio/adpcm',
+    'aep' => 'application/vnd.audiograph',
+    'afm' => 'application/x-font-type1',
+    'afp' => 'application/vnd.ibm.modcap',
+    'ahead' => 'application/vnd.ahead.space',
+    'ai' => 'application/postscript',
+    'aif' => 'audio/x-aiff',
+    'aifc' => 'audio/x-aiff',
+    'aiff' => 'audio/x-aiff',
+    'air' => 'application/vnd.adobe.air-application-installer-package+zip',
+    'ait' => 'application/vnd.dvb.ait',
+    'ami' => 'application/vnd.amiga.ami',
+    'apk' => 'application/vnd.android.package-archive',
+    'appcache' => 'text/cache-manifest',
+    'apr' => 'application/vnd.lotus-approach',
+    'aps' => 'application/postscript',
+    'arc' => 'application/x-freearc',
+    'asc' => 'application/pgp-signature',
+    'asf' => 'video/x-ms-asf',
+    'asm' => 'text/x-asm',
+    'aso' => 'application/vnd.accpac.simply.aso',
+    'asx' => 'video/x-ms-asf',
+    'atc' => 'application/vnd.acucorp',
+    'atom' => 'application/atom+xml',
+    'atomcat' => 'application/atomcat+xml',
+    'atomsvc' => 'application/atomsvc+xml',
+    'atx' => 'application/vnd.antix.game-component',
+    'au' => 'audio/basic',
+    'avi' => 'video/x-msvideo',
+    'aw' => 'application/applixware',
+    'azf' => 'application/vnd.airzip.filesecure.azf',
+    'azs' => 'application/vnd.airzip.filesecure.azs',
+    'azw' => 'application/vnd.amazon.ebook',
+    'bat' => 'application/x-msdownload',
+    'bcpio' => 'application/x-bcpio',
+    'bdf' => 'application/x-font-bdf',
+    'bdm' => 'application/vnd.syncml.dm+wbxml',
+    'bed' => 'application/vnd.realvnc.bed',
+    'bh2' => 'application/vnd.fujitsu.oasysprs',
+    'bin' => 'application/octet-stream',
+    'blb' => 'application/x-blorb',
+    'blorb' => 'application/x-blorb',
+    'bmi' => 'application/vnd.bmi',
+    'bmp' => 'image/bmp',
+    'book' => 'application/vnd.framemaker',
+    'box' => 'application/vnd.previewsystems.box',
+    'boz' => 'application/x-bzip2',
+    'bpk' => 'application/octet-stream',
+    'btif' => 'image/prs.btif',
+    'bz' => 'application/x-bzip',
+    'bz2' => 'application/x-bzip2',
+    'c' => 'text/x-c',
+    'c11amc' => 'application/vnd.cluetrust.cartomobile-config',
+    'c11amz' => 'application/vnd.cluetrust.cartomobile-config-pkg',
+    'c4d' => 'application/vnd.clonk.c4group',
+    'c4f' => 'application/vnd.clonk.c4group',
+    'c4g' => 'application/vnd.clonk.c4group',
+    'c4p' => 'application/vnd.clonk.c4group',
+    'c4u' => 'application/vnd.clonk.c4group',
+    'cab' => 'application/vnd.ms-cab-compressed',
+    'caf' => 'audio/x-caf',
+    'cap' => 'application/vnd.tcpdump.pcap',
+    'car' => 'application/vnd.curl.car',
+    'cat' => 'application/vnd.ms-pki.seccat',
+    'cb7' => 'application/x-cbr',
+    'cba' => 'application/x-cbr',
+    'cbr' => 'application/x-cbr',
+    'cbt' => 'application/x-cbr',
+    'cbz' => 'application/x-cbr',
+    'cc' => 'text/x-c',
+    'cct' => 'application/x-director',
+    'ccxml' => 'application/ccxml+xml',
+    'cdbcmsg' => 'application/vnd.contact.cmsg',
+    'cdf' => 'application/x-netcdf',
+    'cdkey' => 'application/vnd.mediastation.cdkey',
+    'cdmia' => 'application/cdmi-capability',
+    'cdmic' => 'application/cdmi-container',
+    'cdmid' => 'application/cdmi-domain',
+    'cdmio' => 'application/cdmi-object',
+    'cdmiq' => 'application/cdmi-queue',
+    'cdx' => 'chemical/x-cdx',
+    'cdxml' => 'application/vnd.chemdraw+xml',
+    'cdy' => 'application/vnd.cinderella',
+    'cer' => 'application/pkix-cert',
+    'cfs' => 'application/x-cfs-compressed',
+    'cgm' => 'image/cgm',
+    'chat' => 'application/x-chat',
+    'chm' => 'application/vnd.ms-htmlhelp',
+    'chrt' => 'application/vnd.kde.kchart',
+    'cif' => 'chemical/x-cif',
+    'cii' => 'application/vnd.anser-web-certificate-issue-initiation',
+    'cil' => 'application/vnd.ms-artgalry',
+    'cla' => 'application/vnd.claymore',
+    'class' => 'application/java-vm',
+    'clkk' => 'application/vnd.crick.clicker.keyboard',
+    'clkp' => 'application/vnd.crick.clicker.palette',
+    'clkt' => 'application/vnd.crick.clicker.template',
+    'clkw' => 'application/vnd.crick.clicker.wordbank',
+    'clkx' => 'application/vnd.crick.clicker',
+    'clp' => 'application/x-msclip',
+    'cmc' => 'application/vnd.cosmocaller',
+    'cmdf' => 'chemical/x-cmdf',
+    'cml' => 'chemical/x-cml',
+    'cmp' => 'application/vnd.yellowriver-custom-menu',
+    'cmx' => 'image/x-cmx',
+    'cod' => 'application/vnd.rim.cod',
+    'com' => 'application/x-msdownload',
+    'conf' => 'text/plain',
+    'cpio' => 'application/x-cpio',
+    'cpp' => 'text/x-c',
+    'cpt' => 'application/mac-compactpro',
+    'crd' => 'application/x-mscardfile',
+    'crl' => 'application/pkix-crl',
+    'crt' => 'application/x-x509-ca-cert',
+    'csh' => 'application/x-csh',
+    'csml' => 'chemical/x-csml',
+    'csp' => 'application/vnd.commonspace',
+    'css' => 'text/css',
+    'cst' => 'application/x-director',
+    'csv' => 'text/csv',
+    'cu' => 'application/cu-seeme',
+    'curl' => 'text/vnd.curl',
+    'cww' => 'application/prs.cww',
+    'cxt' => 'application/x-director',
+    'cxx' => 'text/x-c',
+    'dae' => 'model/vnd.collada+xml',
+    'daf' => 'application/vnd.mobius.daf',
+    'dart' => 'application/vnd.dart',
+    'dataless' => 'application/vnd.fdsn.seed',
+    'davmount' => 'application/davmount+xml',
+    'dbk' => 'application/docbook+xml',
+    'dcr' => 'application/x-director',
+    'dcurl' => 'text/vnd.curl.dcurl',
+    'dd2' => 'application/vnd.oma.dd2+xml',
+    'ddd' => 'application/vnd.fujixerox.ddd',
+    'deb' => 'application/x-debian-package',
+    'def' => 'text/plain',
+    'deploy' => 'application/octet-stream',
+    'der' => 'application/x-x509-ca-cert',
+    'dfac' => 'application/vnd.dreamfactory',
+    'dgc' => 'application/x-dgc-compressed',
+    'dic' => 'text/x-c',
+    'dir' => 'application/x-director',
+    'dis' => 'application/vnd.mobius.dis',
+    'dist' => 'application/octet-stream',
+    'distz' => 'application/octet-stream',
+    'djv' => 'image/vnd.djvu',
+    'djvu' => 'image/vnd.djvu',
+    'dll' => 'application/x-msdownload',
+    'dmg' => 'application/x-apple-diskimage',
+    'dmp' => 'application/vnd.tcpdump.pcap',
+    'dms' => 'application/octet-stream',
+    'dna' => 'application/vnd.dna',
+    'doc' => 'application/msword',
+    'docm' => 'application/vnd.ms-word.document.macroenabled.12',
+    'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
+    'dot' => 'application/msword',
+    'dotm' => 'application/vnd.ms-word.template.macroenabled.12',
+    'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
+    'dp' => 'application/vnd.osgi.dp',
+    'dpg' => 'application/vnd.dpgraph',
+    'dra' => 'audio/vnd.dra',
+    'dsc' => 'text/prs.lines.tag',
+    'dssc' => 'application/dssc+der',
+    'dtb' => 'application/x-dtbook+xml',
+    'dtd' => 'application/xml-dtd',
+    'dts' => 'audio/vnd.dts',
+    'dtshd' => 'audio/vnd.dts.hd',
+    'dump' => 'application/octet-stream',
+    'dvb' => 'video/vnd.dvb.file',
+    'dvi' => 'application/x-dvi',
+    'dwf' => 'model/vnd.dwf',
+    'dwg' => 'image/vnd.dwg',
+    'dxf' => 'image/vnd.dxf',
+    'dxp' => 'application/vnd.spotfire.dxp',
+    'dxr' => 'application/x-director',
+    'ecelp4800' => 'audio/vnd.nuera.ecelp4800',
+    'ecelp7470' => 'audio/vnd.nuera.ecelp7470',
+    'ecelp9600' => 'audio/vnd.nuera.ecelp9600',
+    'ecma' => 'application/ecmascript',
+    'edm' => 'application/vnd.novadigm.edm',
+    'edx' => 'application/vnd.novadigm.edx',
+    'efif' => 'application/vnd.picsel',
+    'ei6' => 'application/vnd.pg.osasli',
+    'elc' => 'application/octet-stream',
+    'emf' => 'application/x-msmetafile',
+    'eml' => 'message/rfc822',
+    'emma' => 'application/emma+xml',
+    'emz' => 'application/x-msmetafile',
+    'eol' => 'audio/vnd.digital-winds',
+    'eot' => 'application/vnd.ms-fontobject',
+    'eps' => 'application/postscript',
+    'epub' => 'application/epub+zip',
+    'es3' => 'application/vnd.eszigno3+xml',
+    'esa' => 'application/vnd.osgi.subsystem',
+    'esf' => 'application/vnd.epson.esf',
+    'et3' => 'application/vnd.eszigno3+xml',
+    'etx' => 'text/x-setext',
+    'eva' => 'application/x-eva',
+    'evy' => 'application/x-envoy',
+    'exe' => 'application/x-msdownload',
+    'exi' => 'application/exi',
+    'ext' => 'application/vnd.novadigm.ext',
+    'ez' => 'application/andrew-inset',
+    'ez2' => 'application/vnd.ezpix-album',
+    'ez3' => 'application/vnd.ezpix-package',
+    'f' => 'text/x-fortran',
+    'f4v' => 'video/x-f4v',
+    'f77' => 'text/x-fortran',
+    'f90' => 'text/x-fortran',
+    'fbs' => 'image/vnd.fastbidsheet',
+    'fcdt' => 'application/vnd.adobe.formscentral.fcdt',
+    'fcs' => 'application/vnd.isac.fcs',
+    'fdf' => 'application/vnd.fdf',
+    'fe_launch' => 'application/vnd.denovo.fcselayout-link',
+    'fg5' => 'application/vnd.fujitsu.oasysgp',
+    'fgd' => 'application/x-director',
+    'fh' => 'image/x-freehand',
+    'fh4' => 'image/x-freehand',
+    'fh5' => 'image/x-freehand',
+    'fh7' => 'image/x-freehand',
+    'fhc' => 'image/x-freehand',
+    'fig' => 'application/x-xfig',
+    'flac' => 'audio/x-flac',
+    'fli' => 'video/x-fli',
+    'flo' => 'application/vnd.micrografx.flo',
+    'flv' => 'video/x-flv',
+    'flw' => 'application/vnd.kde.kivio',
+    'flx' => 'text/vnd.fmi.flexstor',
+    'fly' => 'text/vnd.fly',
+    'fm' => 'application/vnd.framemaker',
+    'fnc' => 'application/vnd.frogans.fnc',
+    'for' => 'text/x-fortran',
+    'fpx' => 'image/vnd.fpx',
+    'frame' => 'application/vnd.framemaker',
+    'fsc' => 'application/vnd.fsc.weblaunch',
+    'fst' => 'image/vnd.fst',
+    'ftc' => 'application/vnd.fluxtime.clip',
+    'fti' => 'application/vnd.anser-web-funds-transfer-initiation',
+    'fvt' => 'video/vnd.fvt',
+    'fxp' => 'application/vnd.adobe.fxp',
+    'fxpl' => 'application/vnd.adobe.fxp',
+    'fzs' => 'application/vnd.fuzzysheet',
+    'g2w' => 'application/vnd.geoplan',
+    'g3' => 'image/g3fax',
+    'g3w' => 'application/vnd.geospace',
+    'gac' => 'application/vnd.groove-account',
+    'gam' => 'application/x-tads',
+    'gbr' => 'application/rpki-ghostbusters',
+    'gca' => 'application/x-gca-compressed',
+    'gdl' => 'model/vnd.gdl',
+    'geo' => 'application/vnd.dynageo',
+    'gex' => 'application/vnd.geometry-explorer',
+    'ggb' => 'application/vnd.geogebra.file',
+    'ggt' => 'application/vnd.geogebra.tool',
+    'ghf' => 'application/vnd.groove-help',
+    'gif' => 'image/gif',
+    'gim' => 'application/vnd.groove-identity-message',
+    'gml' => 'application/gml+xml',
+    'gmx' => 'application/vnd.gmx',
+    'gnumeric' => 'application/x-gnumeric',
+    'gph' => 'application/vnd.flographit',
+    'gpx' => 'application/gpx+xml',
+    'gqf' => 'application/vnd.grafeq',
+    'gqs' => 'application/vnd.grafeq',
+    'gram' => 'application/srgs',
+    'gramps' => 'application/x-gramps-xml',
+    'gre' => 'application/vnd.geometry-explorer',
+    'grv' => 'application/vnd.groove-injector',
+    'grxml' => 'application/srgs+xml',
+    'gsf' => 'application/x-font-ghostscript',
+    'gtar' => 'application/x-gtar',
+    'gtm' => 'application/vnd.groove-tool-message',
+    'gtw' => 'model/vnd.gtw',
+    'gv' => 'text/vnd.graphviz',
+    'gxf' => 'application/gxf',
+    'gxt' => 'application/vnd.geonext',
+    'gz' => 'application/x-gzip',
+    'h' => 'text/x-c',
+    'h261' => 'video/h261',
+    'h263' => 'video/h263',
+    'h264' => 'video/h264',
+    'hal' => 'application/vnd.hal+xml',
+    'hbci' => 'application/vnd.hbci',
+    'hdf' => 'application/x-hdf',
+    'hh' => 'text/x-c',
+    'hlp' => 'application/winhlp',
+    'hpgl' => 'application/vnd.hp-hpgl',
+    'hpid' => 'application/vnd.hp-hpid',
+    'hps' => 'application/vnd.hp-hps',
+    'hqx' => 'application/mac-binhex40',
+    'htke' => 'application/vnd.kenameaapp',
+    'htm' => 'text/html',
+    'html' => 'text/html',
+    'hvd' => 'application/vnd.yamaha.hv-dic',
+    'hvp' => 'application/vnd.yamaha.hv-voice',
+    'hvs' => 'application/vnd.yamaha.hv-script',
+    'i2g' => 'application/vnd.intergeo',
+    'icc' => 'application/vnd.iccprofile',
+    'ice' => 'x-conference/x-cooltalk',
+    'icm' => 'application/vnd.iccprofile',
+    'ico' => 'image/x-icon',
+    'ics' => 'text/calendar',
+    'ief' => 'image/ief',
+    'ifb' => 'text/calendar',
+    'ifm' => 'application/vnd.shana.informed.formdata',
+    'iges' => 'model/iges',
+    'igl' => 'application/vnd.igloader',
+    'igm' => 'application/vnd.insors.igm',
+    'igs' => 'model/iges',
+    'igx' => 'application/vnd.micrografx.igx',
+    'iif' => 'application/vnd.shana.informed.interchange',
+    'imp' => 'application/vnd.accpac.simply.imp',
+    'ims' => 'application/vnd.ms-ims',
+    'in' => 'text/plain',
+    'ink' => 'application/inkml+xml',
+    'inkml' => 'application/inkml+xml',
+    'install' => 'application/x-install-instructions',
+    'iota' => 'application/vnd.astraea-software.iota',
+    'ipfix' => 'application/ipfix',
+    'ipk' => 'application/vnd.shana.informed.package',
+    'irm' => 'application/vnd.ibm.rights-management',
+    'irp' => 'application/vnd.irepository.package+xml',
+    'iso' => 'application/x-iso9660-image',
+    'itp' => 'application/vnd.shana.informed.formtemplate',
+    'ivp' => 'application/vnd.immervision-ivp',
+    'ivu' => 'application/vnd.immervision-ivu',
+    'jad' => 'text/vnd.sun.j2me.app-descriptor',
+    'jam' => 'application/vnd.jam',
+    'jar' => 'application/java-archive',
+    'java' => 'text/x-java-source',
+    'jisp' => 'application/vnd.jisp',
+    'jlt' => 'application/vnd.hp-jlyt',
+    'jnlp' => 'application/x-java-jnlp-file',
+    'joda' => 'application/vnd.joost.joda-archive',
+    'jpe' => 'image/jpeg',
+    'jpeg' => 'image/jpeg',
+    'jpg' => 'image/jpeg',
+    'jpgm' => 'video/jpm',
+    'jpgv' => 'video/jpeg',
+    'jpm' => 'video/jpm',
+    'js' => 'application/javascript',
+    'json' => 'application/json',
+    'jsonml' => 'application/jsonml+json',
+    'kar' => 'audio/midi',
+    'karbon' => 'application/vnd.kde.karbon',
+    'kfo' => 'application/vnd.kde.kformula',
+    'kia' => 'application/vnd.kidspiration',
+    'kml' => 'application/vnd.google-earth.kml+xml',
+    'kmz' => 'application/vnd.google-earth.kmz',
+    'kne' => 'application/vnd.kinar',
+    'knp' => 'application/vnd.kinar',
+    'kon' => 'application/vnd.kde.kontour',
+    'kpr' => 'application/vnd.kde.kpresenter',
+    'kpt' => 'application/vnd.kde.kpresenter',
+    'kpxx' => 'application/vnd.ds-keypoint',
+    'ksp' => 'application/vnd.kde.kspread',
+    'ktr' => 'application/vnd.kahootz',
+    'ktx' => 'image/ktx',
+    'ktz' => 'application/vnd.kahootz',
+    'kwd' => 'application/vnd.kde.kword',
+    'kwt' => 'application/vnd.kde.kword',
+    'lasxml' => 'application/vnd.las.las+xml',
+    'latex' => 'application/x-latex',
+    'lbd' => 'application/vnd.llamagraphics.life-balance.desktop',
+    'lbe' => 'application/vnd.llamagraphics.life-balance.exchange+xml',
+    'les' => 'application/vnd.hhe.lesson-player',
+    'lha' => 'application/x-lzh-compressed',
+    'link66' => 'application/vnd.route66.link66+xml',
+    'list' => 'text/plain',
+    'list3820' => 'application/vnd.ibm.modcap',
+    'listafp' => 'application/vnd.ibm.modcap',
+    'lnk' => 'application/x-ms-shortcut',
+    'log' => 'text/plain',
+    'lostxml' => 'application/lost+xml',
+    'lrf' => 'application/octet-stream',
+    'lrm' => 'application/vnd.ms-lrm',
+    'ltf' => 'application/vnd.frogans.ltf',
+    'lvp' => 'audio/vnd.lucent.voice',
+    'lwp' => 'application/vnd.lotus-wordpro',
+    'lzh' => 'application/x-lzh-compressed',
+    'm13' => 'application/x-msmediaview',
+    'm14' => 'application/x-msmediaview',
+    'm1v' => 'video/mpeg',
+    'm21' => 'application/mp21',
+    'm2a' => 'audio/mpeg',
+    'm2v' => 'video/mpeg',
+    'm3a' => 'audio/mpeg',
+    'm3u' => 'audio/x-mpegurl',
+    'm3u8' => 'application/vnd.apple.mpegurl',
+    'm4a' => 'audio/mp4',
+    'm4u' => 'video/vnd.mpegurl',
+    'm4v' => 'video/x-m4v',
+    'ma' => 'application/mathematica',
+    'mads' => 'application/mads+xml',
+    'mag' => 'application/vnd.ecowin.chart',
+    'maker' => 'application/vnd.framemaker',
+    'man' => 'text/troff',
+    'mar' => 'application/octet-stream',
+    'mathml' => 'application/mathml+xml',
+    'mb' => 'application/mathematica',
+    'mbk' => 'application/vnd.mobius.mbk',
+    'mbox' => 'application/mbox',
+    'mc1' => 'application/vnd.medcalcdata',
+    'mcd' => 'application/vnd.mcd',
+    'mcurl' => 'text/vnd.curl.mcurl',
+    'mdb' => 'application/x-msaccess',
+    'mdi' => 'image/vnd.ms-modi',
+    'me' => 'text/troff',
+    'mesh' => 'model/mesh',
+    'meta4' => 'application/metalink4+xml',
+    'metalink' => 'application/metalink+xml',
+    'mets' => 'application/mets+xml',
+    'mfm' => 'application/vnd.mfmp',
+    'mft' => 'application/rpki-manifest',
+    'mgp' => 'application/vnd.osgeo.mapguide.package',
+    'mgz' => 'application/vnd.proteus.magazine',
+    'mid' => 'audio/midi',
+    'midi' => 'audio/midi',
+    'mie' => 'application/x-mie',
+    'mif' => 'application/vnd.mif',
+    'mime' => 'message/rfc822',
+    'mj2' => 'video/mj2',
+    'mjp2' => 'video/mj2',
+    'mk3d' => 'video/x-matroska',
+    'mka' => 'audio/x-matroska',
+    'mks' => 'video/x-matroska',
+    'mkv' => 'video/x-matroska',
+    'mlp' => 'application/vnd.dolby.mlp',
+    'mmd' => 'application/vnd.chipnuts.karaoke-mmd',
+    'mmf' => 'application/vnd.smaf',
+    'mmr' => 'image/vnd.fujixerox.edmics-mmr',
+    'mng' => 'video/x-mng',
+    'mny' => 'application/x-msmoney',
+    'mobi' => 'application/x-mobipocket-ebook',
+    'mods' => 'application/mods+xml',
+    'mov' => 'video/quicktime',
+    'movie' => 'video/x-sgi-movie',
+    'mp2' => 'audio/mpeg',
+    'mp21' => 'application/mp21',
+    'mp2a' => 'audio/mpeg',
+    'mp3' => 'audio/mpeg',
+    'mp4' => 'video/mp4',
+    'mp4a' => 'audio/mp4',
+    'mp4s' => 'application/mp4',
+    'mp4v' => 'video/mp4',
+    'mpc' => 'application/vnd.mophun.certificate',
+    'mpe' => 'video/mpeg',
+    'mpeg' => 'video/mpeg',
+    'mpg' => 'video/mpeg',
+    'mpg4' => 'video/mp4',
+    'mpga' => 'audio/mpeg',
+    'mpkg' => 'application/vnd.apple.installer+xml',
+    'mpm' => 'application/vnd.blueice.multipass',
+    'mpn' => 'application/vnd.mophun.application',
+    'mpp' => 'application/vnd.ms-project',
+    'mpt' => 'application/vnd.ms-project',
+    'mpy' => 'application/vnd.ibm.minipay',
+    'mqy' => 'application/vnd.mobius.mqy',
+    'mrc' => 'application/marc',
+    'mrcx' => 'application/marcxml+xml',
+    'ms' => 'text/troff',
+    'mscml' => 'application/mediaservercontrol+xml',
+    'mseed' => 'application/vnd.fdsn.mseed',
+    'mseq' => 'application/vnd.mseq',
+    'msf' => 'application/vnd.epson.msf',
+    'msh' => 'model/mesh',
+    'msi' => 'application/x-msdownload',
+    'msl' => 'application/vnd.mobius.msl',
+    'msty' => 'application/vnd.muvee.style',
+    'mts' => 'model/vnd.mts',
+    'mus' => 'application/vnd.musician',
+    'musicxml' => 'application/vnd.recordare.musicxml+xml',
+    'mvb' => 'application/x-msmediaview',
+    'mwf' => 'application/vnd.mfer',
+    'mxf' => 'application/mxf',
+    'mxl' => 'application/vnd.recordare.musicxml',
+    'mxml' => 'application/xv+xml',
+    'mxs' => 'application/vnd.triscape.mxs',
+    'mxu' => 'video/vnd.mpegurl',
+    'n-gage' => 'application/vnd.nokia.n-gage.symbian.install',
+    'n3' => 'text/n3',
+    'nb' => 'application/mathematica',
+    'nbp' => 'application/vnd.wolfram.player',
+    'nc' => 'application/x-netcdf',
+    'ncx' => 'application/x-dtbncx+xml',
+    'nfo' => 'text/x-nfo',
+    'ngdat' => 'application/vnd.nokia.n-gage.data',
+    'nitf' => 'application/vnd.nitf',
+    'nlu' => 'application/vnd.neurolanguage.nlu',
+    'nml' => 'application/vnd.enliven',
+    'nnd' => 'application/vnd.noblenet-directory',
+    'nns' => 'application/vnd.noblenet-sealer',
+    'nnw' => 'application/vnd.noblenet-web',
+    'npx' => 'image/vnd.net-fpx',
+    'nsc' => 'application/x-conference',
+    'nsf' => 'application/vnd.lotus-notes',
+    'ntf' => 'application/vnd.nitf',
+    'nzb' => 'application/x-nzb',
+    'oa2' => 'application/vnd.fujitsu.oasys2',
+    'oa3' => 'application/vnd.fujitsu.oasys3',
+    'oas' => 'application/vnd.fujitsu.oasys',
+    'obd' => 'application/x-msbinder',
+    'obj' => 'application/x-tgif',
+    'oda' => 'application/oda',
+    'odb' => 'application/vnd.oasis.opendocument.database',
+    'odc' => 'application/vnd.oasis.opendocument.chart',
+    'odf' => 'application/vnd.oasis.opendocument.formula',
+    'odft' => 'application/vnd.oasis.opendocument.formula-template',
+    'odg' => 'application/vnd.oasis.opendocument.graphics',
+    'odi' => 'application/vnd.oasis.opendocument.image',
+    'odm' => 'application/vnd.oasis.opendocument.text-master',
+    'odp' => 'application/vnd.oasis.opendocument.presentation',
+    'ods' => 'application/vnd.oasis.opendocument.spreadsheet',
+    'odt' => 'application/vnd.oasis.opendocument.text',
+    'oga' => 'audio/ogg',
+    'ogg' => 'audio/ogg',
+    'ogv' => 'video/ogg',
+    'ogx' => 'application/ogg',
+    'omdoc' => 'application/omdoc+xml',
+    'onepkg' => 'application/onenote',
+    'onetmp' => 'application/onenote',
+    'onetoc' => 'application/onenote',
+    'onetoc2' => 'application/onenote',
+    'opf' => 'application/oebps-package+xml',
+    'opml' => 'text/x-opml',
+    'oprc' => 'application/vnd.palm',
+    'org' => 'application/vnd.lotus-organizer',
+    'osf' => 'application/vnd.yamaha.openscoreformat',
+    'osfpvg' => 'application/vnd.yamaha.openscoreformat.osfpvg+xml',
+    'otc' => 'application/vnd.oasis.opendocument.chart-template',
+    'otf' => 'application/x-font-otf',
+    'otg' => 'application/vnd.oasis.opendocument.graphics-template',
+    'oth' => 'application/vnd.oasis.opendocument.text-web',
+    'oti' => 'application/vnd.oasis.opendocument.image-template',
+    'otp' => 'application/vnd.oasis.opendocument.presentation-template',
+    'ots' => 'application/vnd.oasis.opendocument.spreadsheet-template',
+    'ott' => 'application/vnd.oasis.opendocument.text-template',
+    'oxps' => 'application/oxps',
+    'oxt' => 'application/vnd.openofficeorg.extension',
+    'p' => 'text/x-pascal',
+    'p10' => 'application/pkcs10',
+    'p12' => 'application/x-pkcs12',
+    'p7b' => 'application/x-pkcs7-certificates',
+    'p7c' => 'application/pkcs7-mime',
+    'p7m' => 'application/pkcs7-mime',
+    'p7r' => 'application/x-pkcs7-certreqresp',
+    'p7s' => 'application/pkcs7-signature',
+    'p8' => 'application/pkcs8',
+    'pas' => 'text/x-pascal',
+    'paw' => 'application/vnd.pawaafile',
+    'pbd' => 'application/vnd.powerbuilder6',
+    'pbm' => 'image/x-portable-bitmap',
+    'pcap' => 'application/vnd.tcpdump.pcap',
+    'pcf' => 'application/x-font-pcf',
+    'pcl' => 'application/vnd.hp-pcl',
+    'pclxl' => 'application/vnd.hp-pclxl',
+    'pct' => 'image/x-pict',
+    'pcurl' => 'application/vnd.curl.pcurl',
+    'pcx' => 'image/x-pcx',
+    'pdb' => 'application/vnd.palm',
+    'pdf' => 'application/pdf',
+    'pfa' => 'application/x-font-type1',
+    'pfb' => 'application/x-font-type1',
+    'pfm' => 'application/x-font-type1',
+    'pfr' => 'application/font-tdpfr',
+    'pfx' => 'application/x-pkcs12',
+    'pgm' => 'image/x-portable-graymap',
+    'pgn' => 'application/x-chess-pgn',
+    'pgp' => 'application/pgp-encrypted',
+    'php' => 'application/x-php',
+    'php3' => 'application/x-php',
+    'php4' => 'application/x-php',
+    'php5' => 'application/x-php',
+    'pic' => 'image/x-pict',
+    'pkg' => 'application/octet-stream',
+    'pki' => 'application/pkixcmp',
+    'pkipath' => 'application/pkix-pkipath',
+    'plb' => 'application/vnd.3gpp.pic-bw-large',
+    'plc' => 'application/vnd.mobius.plc',
+    'plf' => 'application/vnd.pocketlearn',
+    'pls' => 'application/pls+xml',
+    'pml' => 'application/vnd.ctc-posml',
+    'png' => 'image/png',
+    'pnm' => 'image/x-portable-anymap',
+    'portpkg' => 'application/vnd.macports.portpkg',
+    'pot' => 'application/vnd.ms-powerpoint',
+    'potm' => 'application/vnd.ms-powerpoint.template.macroenabled.12',
+    'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template',
+    'ppam' => 'application/vnd.ms-powerpoint.addin.macroenabled.12',
+    'ppd' => 'application/vnd.cups-ppd',
+    'ppm' => 'image/x-portable-pixmap',
+    'pps' => 'application/vnd.ms-powerpoint',
+    'ppsm' => 'application/vnd.ms-powerpoint.slideshow.macroenabled.12',
+    'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
+    'ppt' => 'application/vnd.ms-powerpoint',
+    'pptm' => 'application/vnd.ms-powerpoint.presentation.macroenabled.12',
+    'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
+    'pqa' => 'application/vnd.palm',
+    'prc' => 'application/x-mobipocket-ebook',
+    'pre' => 'application/vnd.lotus-freelance',
+    'prf' => 'application/pics-rules',
+    'ps' => 'application/postscript',
+    'psb' => 'application/vnd.3gpp.pic-bw-small',
+    'psd' => 'image/vnd.adobe.photoshop',
+    'psf' => 'application/x-font-linux-psf',
+    'pskcxml' => 'application/pskc+xml',
+    'ptid' => 'application/vnd.pvi.ptid1',
+    'pub' => 'application/x-mspublisher',
+    'pvb' => 'application/vnd.3gpp.pic-bw-var',
+    'pwn' => 'application/vnd.3m.post-it-notes',
+    'pya' => 'audio/vnd.ms-playready.media.pya',
+    'pyv' => 'video/vnd.ms-playready.media.pyv',
+    'qam' => 'application/vnd.epson.quickanime',
+    'qbo' => 'application/vnd.intu.qbo',
+    'qfx' => 'application/vnd.intu.qfx',
+    'qps' => 'application/vnd.publishare-delta-tree',
+    'qt' => 'video/quicktime',
+    'qwd' => 'application/vnd.quark.quarkxpress',
+    'qwt' => 'application/vnd.quark.quarkxpress',
+    'qxb' => 'application/vnd.quark.quarkxpress',
+    'qxd' => 'application/vnd.quark.quarkxpress',
+    'qxl' => 'application/vnd.quark.quarkxpress',
+    'qxt' => 'application/vnd.quark.quarkxpress',
+    'ra' => 'audio/x-pn-realaudio',
+    'ram' => 'audio/x-pn-realaudio',
+    'rar' => 'application/x-rar-compressed',
+    'ras' => 'image/x-cmu-raster',
+    'rcprofile' => 'application/vnd.ipunplugged.rcprofile',
+    'rdf' => 'application/rdf+xml',
+    'rdz' => 'application/vnd.data-vision.rdz',
+    'rep' => 'application/vnd.businessobjects',
+    'res' => 'application/x-dtbresource+xml',
+    'rgb' => 'image/x-rgb',
+    'rif' => 'application/reginfo+xml',
+    'rip' => 'audio/vnd.rip',
+    'ris' => 'application/x-research-info-systems',
+    'rl' => 'application/resource-lists+xml',
+    'rlc' => 'image/vnd.fujixerox.edmics-rlc',
+    'rld' => 'application/resource-lists-diff+xml',
+    'rm' => 'application/vnd.rn-realmedia',
+    'rmi' => 'audio/midi',
+    'rmp' => 'audio/x-pn-realaudio-plugin',
+    'rms' => 'application/vnd.jcp.javame.midlet-rms',
+    'rmvb' => 'application/vnd.rn-realmedia-vbr',
+    'rnc' => 'application/relax-ng-compact-syntax',
+    'roa' => 'application/rpki-roa',
+    'roff' => 'text/troff',
+    'rp9' => 'application/vnd.cloanto.rp9',
+    'rpss' => 'application/vnd.nokia.radio-presets',
+    'rpst' => 'application/vnd.nokia.radio-preset',
+    'rq' => 'application/sparql-query',
+    'rs' => 'application/rls-services+xml',
+    'rsd' => 'application/rsd+xml',
+    'rss' => 'application/rss+xml',
+    'rtf' => 'application/rtf',
+    'rtx' => 'text/richtext',
+    's' => 'text/x-asm',
+    's3m' => 'audio/s3m',
+    'saf' => 'application/vnd.yamaha.smaf-audio',
+    'sbml' => 'application/sbml+xml',
+    'sc' => 'application/vnd.ibm.secure-container',
+    'scd' => 'application/x-msschedule',
+    'scm' => 'application/vnd.lotus-screencam',
+    'scq' => 'application/scvp-cv-request',
+    'scs' => 'application/scvp-cv-response',
+    'scurl' => 'text/vnd.curl.scurl',
+    'sda' => 'application/vnd.stardivision.draw',
+    'sdc' => 'application/vnd.stardivision.calc',
+    'sdd' => 'application/vnd.stardivision.impress',
+    'sdkd' => 'application/vnd.solent.sdkm+xml',
+    'sdkm' => 'application/vnd.solent.sdkm+xml',
+    'sdp' => 'application/sdp',
+    'sdw' => 'application/vnd.stardivision.writer',
+    'see' => 'application/vnd.seemail',
+    'seed' => 'application/vnd.fdsn.seed',
+    'sema' => 'application/vnd.sema',
+    'semd' => 'application/vnd.semd',
+    'semf' => 'application/vnd.semf',
+    'ser' => 'application/java-serialized-object',
+    'setpay' => 'application/set-payment-initiation',
+    'setreg' => 'application/set-registration-initiation',
+    'sfd-hdstx' => 'application/vnd.hydrostatix.sof-data',
+    'sfs' => 'application/vnd.spotfire.sfs',
+    'sfv' => 'text/x-sfv',
+    'sgi' => 'image/sgi',
+    'sgl' => 'application/vnd.stardivision.writer-global',
+    'sgm' => 'text/sgml',
+    'sgml' => 'text/sgml',
+    'sh' => 'application/x-sh',
+    'shar' => 'application/x-shar',
+    'shf' => 'application/shf+xml',
+    'sid' => 'image/x-mrsid-image',
+    'sig' => 'application/pgp-signature',
+    'sil' => 'audio/silk',
+    'silo' => 'model/mesh',
+    'sis' => 'application/vnd.symbian.install',
+    'sisx' => 'application/vnd.symbian.install',
+    'sit' => 'application/x-stuffit',
+    'sitx' => 'application/x-stuffitx',
+    'skd' => 'application/vnd.koan',
+    'skm' => 'application/vnd.koan',
+    'skp' => 'application/vnd.koan',
+    'skt' => 'application/vnd.koan',
+    'sldm' => 'application/vnd.ms-powerpoint.slide.macroenabled.12',
+    'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide',
+    'slt' => 'application/vnd.epson.salt',
+    'sm' => 'application/vnd.stepmania.stepchart',
+    'smf' => 'application/vnd.stardivision.math',
+    'smi' => 'application/smil+xml',
+    'smil' => 'application/smil+xml',
+    'smv' => 'video/x-smv',
+    'smzip' => 'application/vnd.stepmania.package',
+    'snd' => 'audio/basic',
+    'snf' => 'application/x-font-snf',
+    'so' => 'application/octet-stream',
+    'spc' => 'application/x-pkcs7-certificates',
+    'spf' => 'application/vnd.yamaha.smaf-phrase',
+    'spl' => 'application/x-futuresplash',
+    'spot' => 'text/vnd.in3d.spot',
+    'spp' => 'application/scvp-vp-response',
+    'spq' => 'application/scvp-vp-request',
+    'spx' => 'audio/ogg',
+    'sql' => 'application/x-sql',
+    'src' => 'application/x-wais-source',
+    'srt' => 'application/x-subrip',
+    'sru' => 'application/sru+xml',
+    'srx' => 'application/sparql-results+xml',
+    'ssdl' => 'application/ssdl+xml',
+    'sse' => 'application/vnd.kodak-descriptor',
+    'ssf' => 'application/vnd.epson.ssf',
+    'ssml' => 'application/ssml+xml',
+    'st' => 'application/vnd.sailingtracker.track',
+    'stc' => 'application/vnd.sun.xml.calc.template',
+    'std' => 'application/vnd.sun.xml.draw.template',
+    'stf' => 'application/vnd.wt.stf',
+    'sti' => 'application/vnd.sun.xml.impress.template',
+    'stk' => 'application/hyperstudio',
+    'stl' => 'application/vnd.ms-pki.stl',
+    'str' => 'application/vnd.pg.format',
+    'stw' => 'application/vnd.sun.xml.writer.template',
+    'sub' => 'text/vnd.dvb.subtitle',
+    'sus' => 'application/vnd.sus-calendar',
+    'susp' => 'application/vnd.sus-calendar',
+    'sv4cpio' => 'application/x-sv4cpio',
+    'sv4crc' => 'application/x-sv4crc',
+    'svc' => 'application/vnd.dvb.service',
+    'svd' => 'application/vnd.svd',
+    'svg' => 'image/svg+xml',
+    'svgz' => 'image/svg+xml',
+    'swa' => 'application/x-director',
+    'swf' => 'application/x-shockwave-flash',
+    'swi' => 'application/vnd.aristanetworks.swi',
+    'sxc' => 'application/vnd.sun.xml.calc',
+    'sxd' => 'application/vnd.sun.xml.draw',
+    'sxg' => 'application/vnd.sun.xml.writer.global',
+    'sxi' => 'application/vnd.sun.xml.impress',
+    'sxm' => 'application/vnd.sun.xml.math',
+    'sxw' => 'application/vnd.sun.xml.writer',
+    't' => 'text/troff',
+    't3' => 'application/x-t3vm-image',
+    'taglet' => 'application/vnd.mynfc',
+    'tao' => 'application/vnd.tao.intent-module-archive',
+    'tar' => 'application/x-tar',
+    'tcap' => 'application/vnd.3gpp2.tcap',
+    'tcl' => 'application/x-tcl',
+    'teacher' => 'application/vnd.smart.teacher',
+    'tei' => 'application/tei+xml',
+    'teicorpus' => 'application/tei+xml',
+    'tex' => 'application/x-tex',
+    'texi' => 'application/x-texinfo',
+    'texinfo' => 'application/x-texinfo',
+    'text' => 'text/plain',
+    'tfi' => 'application/thraud+xml',
+    'tfm' => 'application/x-tex-tfm',
+    'tga' => 'image/x-tga',
+    'thmx' => 'application/vnd.ms-officetheme',
+    'tif' => 'image/tiff',
+    'tiff' => 'image/tiff',
+    'tmo' => 'application/vnd.tmobile-livetv',
+    'torrent' => 'application/x-bittorrent',
+    'tpl' => 'application/vnd.groove-tool-template',
+    'tpt' => 'application/vnd.trid.tpt',
+    'tr' => 'text/troff',
+    'tra' => 'application/vnd.trueapp',
+    'trm' => 'application/x-msterminal',
+    'tsd' => 'application/timestamped-data',
+    'tsv' => 'text/tab-separated-values',
+    'ttc' => 'application/x-font-ttf',
+    'ttf' => 'application/x-font-ttf',
+    'ttl' => 'text/turtle',
+    'twd' => 'application/vnd.simtech-mindmapper',
+    'twds' => 'application/vnd.simtech-mindmapper',
+    'txd' => 'application/vnd.genomatix.tuxedo',
+    'txf' => 'application/vnd.mobius.txf',
+    'txt' => 'text/plain',
+    'u32' => 'application/x-authorware-bin',
+    'udeb' => 'application/x-debian-package',
+    'ufd' => 'application/vnd.ufdl',
+    'ufdl' => 'application/vnd.ufdl',
+    'ulx' => 'application/x-glulx',
+    'umj' => 'application/vnd.umajin',
+    'unityweb' => 'application/vnd.unity',
+    'uoml' => 'application/vnd.uoml+xml',
+    'uri' => 'text/uri-list',
+    'uris' => 'text/uri-list',
+    'urls' => 'text/uri-list',
+    'ustar' => 'application/x-ustar',
+    'utz' => 'application/vnd.uiq.theme',
+    'uu' => 'text/x-uuencode',
+    'uva' => 'audio/vnd.dece.audio',
+    'uvd' => 'application/vnd.dece.data',
+    'uvf' => 'application/vnd.dece.data',
+    'uvg' => 'image/vnd.dece.graphic',
+    'uvh' => 'video/vnd.dece.hd',
+    'uvi' => 'image/vnd.dece.graphic',
+    'uvm' => 'video/vnd.dece.mobile',
+    'uvp' => 'video/vnd.dece.pd',
+    'uvs' => 'video/vnd.dece.sd',
+    'uvt' => 'application/vnd.dece.ttml+xml',
+    'uvu' => 'video/vnd.uvvu.mp4',
+    'uvv' => 'video/vnd.dece.video',
+    'uvva' => 'audio/vnd.dece.audio',
+    'uvvd' => 'application/vnd.dece.data',
+    'uvvf' => 'application/vnd.dece.data',
+    'uvvg' => 'image/vnd.dece.graphic',
+    'uvvh' => 'video/vnd.dece.hd',
+    'uvvi' => 'image/vnd.dece.graphic',
+    'uvvm' => 'video/vnd.dece.mobile',
+    'uvvp' => 'video/vnd.dece.pd',
+    'uvvs' => 'video/vnd.dece.sd',
+    'uvvt' => 'application/vnd.dece.ttml+xml',
+    'uvvu' => 'video/vnd.uvvu.mp4',
+    'uvvv' => 'video/vnd.dece.video',
+    'uvvx' => 'application/vnd.dece.unspecified',
+    'uvvz' => 'application/vnd.dece.zip',
+    'uvx' => 'application/vnd.dece.unspecified',
+    'uvz' => 'application/vnd.dece.zip',
+    'vcard' => 'text/vcard',
+    'vcd' => 'application/x-cdlink',
+    'vcf' => 'text/x-vcard',
+    'vcg' => 'application/vnd.groove-vcard',
+    'vcs' => 'text/x-vcalendar',
+    'vcx' => 'application/vnd.vcx',
+    'vis' => 'application/vnd.visionary',
+    'viv' => 'video/vnd.vivo',
+    'vob' => 'video/x-ms-vob',
+    'vor' => 'application/vnd.stardivision.writer',
+    'vox' => 'application/x-authorware-bin',
+    'vrml' => 'model/vrml',
+    'vsd' => 'application/vnd.visio',
+    'vsf' => 'application/vnd.vsf',
+    'vss' => 'application/vnd.visio',
+    'vst' => 'application/vnd.visio',
+    'vsw' => 'application/vnd.visio',
+    'vtu' => 'model/vnd.vtu',
+    'vxml' => 'application/voicexml+xml',
+    'w3d' => 'application/x-director',
+    'wad' => 'application/x-doom',
+    'wav' => 'audio/x-wav',
+    'wax' => 'audio/x-ms-wax',
+    'wbmp' => 'image/vnd.wap.wbmp',
+    'wbs' => 'application/vnd.criticaltools.wbs+xml',
+    'wbxml' => 'application/vnd.wap.wbxml',
+    'wcm' => 'application/vnd.ms-works',
+    'wdb' => 'application/vnd.ms-works',
+    'wdp' => 'image/vnd.ms-photo',
+    'weba' => 'audio/webm',
+    'webm' => 'video/webm',
+    'webp' => 'image/webp',
+    'wg' => 'application/vnd.pmi.widget',
+    'wgt' => 'application/widget',
+    'wks' => 'application/vnd.ms-works',
+    'wm' => 'video/x-ms-wm',
+    'wma' => 'audio/x-ms-wma',
+    'wmd' => 'application/x-ms-wmd',
+    'wmf' => 'application/x-msmetafile',
+    'wml' => 'text/vnd.wap.wml',
+    'wmlc' => 'application/vnd.wap.wmlc',
+    'wmls' => 'text/vnd.wap.wmlscript',
+    'wmlsc' => 'application/vnd.wap.wmlscriptc',
+    'wmv' => 'video/x-ms-wmv',
+    'wmx' => 'video/x-ms-wmx',
+    'wmz' => 'application/x-msmetafile',
+    'woff' => 'application/font-woff',
+    'wpd' => 'application/vnd.wordperfect',
+    'wpl' => 'application/vnd.ms-wpl',
+    'wps' => 'application/vnd.ms-works',
+    'wqd' => 'application/vnd.wqd',
+    'wri' => 'application/x-mswrite',
+    'wrl' => 'model/vrml',
+    'wsdl' => 'application/wsdl+xml',
+    'wspolicy' => 'application/wspolicy+xml',
+    'wtb' => 'application/vnd.webturbo',
+    'wvx' => 'video/x-ms-wvx',
+    'x32' => 'application/x-authorware-bin',
+    'x3d' => 'model/x3d+xml',
+    'x3db' => 'model/x3d+binary',
+    'x3dbz' => 'model/x3d+binary',
+    'x3dv' => 'model/x3d+vrml',
+    'x3dvz' => 'model/x3d+vrml',
+    'x3dz' => 'model/x3d+xml',
+    'xaml' => 'application/xaml+xml',
+    'xap' => 'application/x-silverlight-app',
+    'xar' => 'application/vnd.xara',
+    'xbap' => 'application/x-ms-xbap',
+    'xbd' => 'application/vnd.fujixerox.docuworks.binder',
+    'xbm' => 'image/x-xbitmap',
+    'xdf' => 'application/xcap-diff+xml',
+    'xdm' => 'application/vnd.syncml.dm+xml',
+    'xdp' => 'application/vnd.adobe.xdp+xml',
+    'xdssc' => 'application/dssc+xml',
+    'xdw' => 'application/vnd.fujixerox.docuworks',
+    'xenc' => 'application/xenc+xml',
+    'xer' => 'application/patch-ops-error+xml',
+    'xfdf' => 'application/vnd.adobe.xfdf',
+    'xfdl' => 'application/vnd.xfdl',
+    'xht' => 'application/xhtml+xml',
+    'xhtml' => 'application/xhtml+xml',
+    'xhvml' => 'application/xv+xml',
+    'xif' => 'image/vnd.xiff',
+    'xla' => 'application/vnd.ms-excel',
+    'xlam' => 'application/vnd.ms-excel.addin.macroenabled.12',
+    'xlc' => 'application/vnd.ms-excel',
+    'xlf' => 'application/x-xliff+xml',
+    'xlm' => 'application/vnd.ms-excel',
+    'xls' => 'application/vnd.ms-excel',
+    'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
+    'xlsm' => 'application/vnd.ms-excel.sheet.macroenabled.12',
+    'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
+    'xlt' => 'application/vnd.ms-excel',
+    'xltm' => 'application/vnd.ms-excel.template.macroenabled.12',
+    'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
+    'xlw' => 'application/vnd.ms-excel',
+    'xm' => 'audio/xm',
+    'xml' => 'application/xml',
+    'xo' => 'application/vnd.olpc-sugar',
+    'xop' => 'application/xop+xml',
+    'xpi' => 'application/x-xpinstall',
+    'xpl' => 'application/xproc+xml',
+    'xpm' => 'image/x-xpixmap',
+    'xpr' => 'application/vnd.is-xpr',
+    'xps' => 'application/vnd.ms-xpsdocument',
+    'xpw' => 'application/vnd.intercon.formnet',
+    'xpx' => 'application/vnd.intercon.formnet',
+    'xsl' => 'application/xml',
+    'xslt' => 'application/xslt+xml',
+    'xsm' => 'application/vnd.syncml+xml',
+    'xspf' => 'application/xspf+xml',
+    'xul' => 'application/vnd.mozilla.xul+xml',
+    'xvm' => 'application/xv+xml',
+    'xvml' => 'application/xv+xml',
+    'xwd' => 'image/x-xwindowdump',
+    'xyz' => 'chemical/x-xyz',
+    'xz' => 'application/x-xz',
+    'yang' => 'application/yang',
+    'yin' => 'application/yin+xml',
+    'z1' => 'application/x-zmachine',
+    'z2' => 'application/x-zmachine',
+    'z3' => 'application/x-zmachine',
+    'z4' => 'application/x-zmachine',
+    'z5' => 'application/x-zmachine',
+    'z6' => 'application/x-zmachine',
+    'z7' => 'application/x-zmachine',
+    'z8' => 'application/x-zmachine',
+    'zaz' => 'application/vnd.zzazz.deck+xml',
+    'zip' => 'application/zip',
+    'zir' => 'application/vnd.zul',
+    'zirz' => 'application/vnd.zul',
+    'zmm' => 'application/vnd.handheld-entertainment+xml',
+    '123' => 'application/vnd.lotus-1-2-3',
+);
Index: vendor/swiftmailer/swiftmailer/lib/preferences.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/preferences.php b/vendor/swiftmailer/swiftmailer/lib/preferences.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/preferences.php	(date 1495187412000)
@@ -0,0 +1,19 @@
+<?php
+
+/****************************************************************************/
+/*                                                                          */
+/* YOU MAY WISH TO MODIFY OR REMOVE THE FOLLOWING LINES WHICH SET DEFAULTS  */
+/*                                                                          */
+/****************************************************************************/
+
+$preferences = Swift_Preferences::getInstance();
+
+// Sets the default charset so that setCharset() is not needed elsewhere
+$preferences->setCharset('utf-8');
+
+// Without these lines the default caching mechanism is "array" but this uses a lot of memory.
+// If possible, use a disk cache to enable attaching large attachments etc.
+// You can override the default temporary directory by setting the TMPDIR environment variable.
+if (@is_writable($tmpDir = sys_get_temp_dir())) {
+    $preferences->setTempDir($tmpDir)->setCacheType('disk');
+}
Index: vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php b/vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/swiftmailer_generate_mimes_config.php	(date 1495187412000)
@@ -0,0 +1,193 @@
+#!/usr/bin/php
+
+<?php
+define('APACHE_MIME_TYPES_URL', 'http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types');
+define('FREEDESKTOP_XML_URL', 'https://raw2.github.com/minad/mimemagic/master/script/freedesktop.org.xml');
+
+function generateUpToDateMimeArray()
+{
+    $preamble = "<?php\n\n";
+    $preamble .= "/*\n";
+    $preamble .= " * This file is part of SwiftMailer.\n";
+    $preamble .= " * (c) 2004-2009 Chris Corbyn\n *\n";
+    $preamble .= " * For the full copyright and license information, please view the LICENSE\n";
+    $preamble .= " * file that was distributed with this source code.\n *\n";
+    $preamble .= " * autogenerated using http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n";
+    $preamble .= " * and https://raw.github.com/minad/mimemagic/master/script/freedesktop.org.xml\n";
+    $preamble .= " */\n\n";
+    $preamble .= "/*\n";
+    $preamble .= " * List of MIME type automatically detected in Swift Mailer.\n";
+    $preamble .= " */\n\n";
+    $preamble .= "// You may add or take away what you like (lowercase required)\n\n";
+
+    // get current mime types files
+    $mime_types = @file_get_contents(APACHE_MIME_TYPES_URL);
+    $mime_xml = @file_get_contents(FREEDESKTOP_XML_URL);
+
+    // prepare valid mime types
+    $valid_mime_types = array();
+
+    // split mime type and extensions eg. "video/x-matroska        mkv mk3d mks"
+    if (preg_match_all('/^#?([a-z0-9\-\+\/\.]+)[\t]+(.*)$/miu', $mime_types, $matches) !== false) {
+        // collection of predefined mimetypes (bugfix for wrong resolved or missing mime types)
+        $valid_mime_types_preset = array(
+            'php' => 'application/x-php',
+            'php3' => 'application/x-php',
+            'php4' => 'application/x-php',
+            'php5' => 'application/x-php',
+            'zip' => 'application/zip',
+            'gif' => 'image/gif',
+            'png' => 'image/png',
+            'css' => 'text/css',
+            'js' => 'text/javascript',
+            'txt' => 'text/plain',
+            'aif' => 'audio/x-aiff',
+            'aiff' => 'audio/x-aiff',
+            'avi' => 'video/avi',
+            'bmp' => 'image/bmp',
+            'bz2' => 'application/x-bz2',
+            'csv' => 'text/csv',
+            'dmg' => 'application/x-apple-diskimage',
+            'doc' => 'application/msword',
+            'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
+            'eml' => 'message/rfc822',
+            'aps' => 'application/postscript',
+            'exe' => 'application/x-ms-dos-executable',
+            'flv' => 'video/x-flv',
+            'gz' => 'application/x-gzip',
+            'hqx' => 'application/stuffit',
+            'htm' => 'text/html',
+            'html' => 'text/html',
+            'jar' => 'application/x-java-archive',
+            'jpeg' => 'image/jpeg',
+            'jpg' => 'image/jpeg',
+            'm3u' => 'audio/x-mpegurl',
+            'm4a' => 'audio/mp4',
+            'mdb' => 'application/x-msaccess',
+            'mid' => 'audio/midi',
+            'midi' => 'audio/midi',
+            'mov' => 'video/quicktime',
+            'mp3' => 'audio/mpeg',
+            'mp4' => 'video/mp4',
+            'mpeg' => 'video/mpeg',
+            'mpg' => 'video/mpeg',
+            'odg' => 'vnd.oasis.opendocument.graphics',
+            'odp' => 'vnd.oasis.opendocument.presentation',
+            'odt' => 'vnd.oasis.opendocument.text',
+            'ods' => 'vnd.oasis.opendocument.spreadsheet',
+            'ogg' => 'audio/ogg',
+            'pdf' => 'application/pdf',
+            'ppt' => 'application/vnd.ms-powerpoint',
+            'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
+            'ps' => 'application/postscript',
+            'rar' => 'application/x-rar-compressed',
+            'rtf' => 'application/rtf',
+            'tar' => 'application/x-tar',
+            'sit' => 'application/x-stuffit',
+            'svg' => 'image/svg+xml',
+            'tif' => 'image/tiff',
+            'tiff' => 'image/tiff',
+            'ttf' => 'application/x-font-truetype',
+            'vcf' => 'text/x-vcard',
+            'wav' => 'audio/wav',
+            'wma' => 'audio/x-ms-wma',
+            'wmv' => 'audio/x-ms-wmv',
+            'xls' => 'application/excel',
+            'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
+            'xml' => 'application/xml',
+        );
+
+        // wrap array for generating file
+        foreach ($valid_mime_types_preset as $extension => $mime_type) {
+            // generate array for mimetype to extension resolver (only first match)
+            $valid_mime_types[$extension] = "'{$extension}' => '{$mime_type}'";
+        }
+
+        // collect extensions
+        $valid_extensions = array();
+
+        // all extensions from second match
+        foreach ($matches[2] as $i => $extensions) {
+            // explode multiple extensions from string
+            $extensions = explode(' ', strtolower($extensions));
+
+            // force array for foreach
+            if (!is_array($extensions)) {
+                $extensions = array($extensions);
+            }
+
+            foreach ($extensions as $extension) {
+                // get mime type
+                $mime_type = $matches[1][$i];
+
+                // check if string length lower than 10
+                if (strlen($extension) < 10) {
+                    // add extension
+                    $valid_extensions[] = $extension;
+
+                    if (!isset($valid_mime_types[$mime_type])) {
+                        // generate array for mimetype to extension resolver (only first match)
+                        $valid_mime_types[$extension] = "'{$extension}' => '{$mime_type}'";
+                    }
+                }
+            }
+        }
+    }
+
+    $xml = simplexml_load_string($mime_xml);
+
+    foreach ($xml as $node) {
+        // check if there is no pattern
+        if (!isset($node->glob['pattern'])) {
+            continue;
+        }
+
+        // get all matching extensions from match
+        foreach ((array) $node->glob['pattern'] as $extension) {
+            // skip none glob extensions
+            if (strpos($extension, '.') === false) {
+                continue;
+            }
+
+            // remove get only last part
+            $extension = explode('.', strtolower($extension));
+            $extension = end($extension);
+
+            // maximum length in database column
+            if (strlen($extension) <= 9) {
+                $valid_extensions[] = $extension;
+            }
+        }
+
+        if (isset($node->glob['pattern'][0])) {
+            // mime type
+            $mime_type = strtolower((string) $node['type']);
+
+            // get first extension
+            $extension = strtolower(trim($node->glob['ddpattern'][0], '*.'));
+
+            // skip none glob extensions and check if string length between 1 and 10
+            if (strpos($extension, '.') !== false || strlen($extension) < 1 || strlen($extension) > 9) {
+                continue;
+            }
+
+            // check if string length lower than 10
+            if (!isset($valid_mime_types[$mime_type])) {
+                // generate array for mimetype to extension resolver (only first match)
+                $valid_mime_types[$extension] = "'{$extension}' => '{$mime_type}'";
+            }
+        }
+    }
+
+    // full list of valid extensions only
+    $valid_mime_types = array_unique($valid_mime_types);
+    ksort($valid_mime_types);
+
+    // combine mime types and extensions array
+    $output = "$preamble\$swift_mime_types = array(\n    ".implode($valid_mime_types, ",\n    ")."\n);";
+
+    // write mime_types.php config file
+    @file_put_contents('./mime_types.php', $output);
+}
+
+generateUpToDateMimeArray();
Index: vendor/swiftmailer/swiftmailer/lib/swift_required.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/swift_required.php b/vendor/swiftmailer/swiftmailer/lib/swift_required.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/swift_required.php	(date 1495187412000)
@@ -0,0 +1,22 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+require __DIR__.'/classes/Swift.php';
+
+Swift::registerAutoload(function () {
+    // Load in dependency maps
+    require __DIR__.'/dependency_maps/cache_deps.php';
+    require __DIR__.'/dependency_maps/mime_deps.php';
+    require __DIR__.'/dependency_maps/message_deps.php';
+    require __DIR__.'/dependency_maps/transport_deps.php';
+
+    // Load in global library preferences
+    require __DIR__.'/preferences.php';
+});
Index: vendor/swiftmailer/swiftmailer/tests/StreamCollector.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/StreamCollector.php b/vendor/swiftmailer/swiftmailer/tests/StreamCollector.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/StreamCollector.php	(date 1495187412000)
@@ -0,0 +1,11 @@
+<?php
+
+class Swift_StreamCollector
+{
+    public $content = '';
+
+    public function __invoke($arg)
+    {
+        $this->content .= $arg;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/SwiftMailerSmokeTestCase.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/SwiftMailerSmokeTestCase.php b/vendor/swiftmailer/swiftmailer/tests/SwiftMailerSmokeTestCase.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/SwiftMailerSmokeTestCase.php	(date 1495187412000)
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * Base test for smoke tests.
+ *
+ * @author Rouven Weßling
+ */
+class SwiftMailerSmokeTestCase extends SwiftMailerTestCase
+{
+    protected function setUp()
+    {
+        if (!defined('SWIFT_SMOKE_TRANSPORT_TYPE')) {
+            $this->markTestSkipped(
+                'Smoke tests are skipped if tests/smoke.conf.php is not edited'
+             );
+        }
+    }
+
+    protected function getMailer()
+    {
+        switch (SWIFT_SMOKE_TRANSPORT_TYPE) {
+            case 'smtp':
+                $transport = Swift_DependencyContainer::getInstance()->lookup('transport.smtp')
+                    ->setHost(SWIFT_SMOKE_SMTP_HOST)
+                    ->setPort(SWIFT_SMOKE_SMTP_PORT)
+                    ->setUsername(SWIFT_SMOKE_SMTP_USER)
+                    ->setPassword(SWIFT_SMOKE_SMTP_PASS)
+                    ->setEncryption(SWIFT_SMOKE_SMTP_ENCRYPTION)
+                    ;
+                break;
+            case 'sendmail':
+                $transport = Swift_DependencyContainer::getInstance()->lookup('transport.sendmail')
+                    ->setCommand(SWIFT_SMOKE_SENDMAIL_COMMAND)
+                    ;
+                break;
+            case 'mail':
+            case 'nativemail':
+                $transport = Swift_DependencyContainer::getInstance()->lookup('transport.mail');
+                break;
+            default:
+                throw new Exception('Undefined transport ['.SWIFT_SMOKE_TRANSPORT_TYPE.']');
+        }
+
+        return new Swift_Mailer($transport);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/SwiftMailerTestCase.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/SwiftMailerTestCase.php b/vendor/swiftmailer/swiftmailer/tests/SwiftMailerTestCase.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/SwiftMailerTestCase.php	(date 1495187412000)
@@ -0,0 +1,38 @@
+<?php
+
+use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
+
+/**
+ * A base test case with some custom expectations.
+ *
+ * @author Rouven Weßling
+ */
+class SwiftMailerTestCase extends \PHPUnit\Framework\TestCase
+{
+    use MockeryPHPUnitIntegration;
+
+    public static function regExp($pattern)
+    {
+        if (!is_string($pattern)) {
+            throw PHPUnit_Util_InvalidArgumentHelper::factory(1, 'string');
+        }
+
+        return new \PHPUnit\Framework\Constraint\RegularExpression($pattern);
+    }
+
+    public function assertIdenticalBinary($expected, $actual, $message = '')
+    {
+        $constraint = new IdenticalBinaryConstraint($expected);
+        self::assertThat($actual, $constraint, $message);
+    }
+
+    protected function tearDown()
+    {
+        \Mockery::close();
+    }
+
+    protected function getMockery($class)
+    {
+        return \Mockery::mock($class);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/IdenticalBinaryConstraint.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/IdenticalBinaryConstraint.php b/vendor/swiftmailer/swiftmailer/tests/IdenticalBinaryConstraint.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/IdenticalBinaryConstraint.php	(date 1495187412000)
@@ -0,0 +1,62 @@
+<?php
+
+/**
+ * A binary safe string comparison.
+ *
+ * @author Chris Corbyn
+ */
+class IdenticalBinaryConstraint extends \PHPUnit\Framework\Constraint\Constraint
+{
+    protected $value;
+
+    public function __construct($value)
+    {
+        $this->value = $value;
+    }
+
+    /**
+     * Evaluates the constraint for parameter $other. Returns TRUE if the
+     * constraint is met, FALSE otherwise.
+     *
+     * @param mixed $other Value or object to evaluate.
+     *
+     * @return bool
+     */
+    public function matches($other)
+    {
+        $aHex = $this->asHexString($this->value);
+        $bHex = $this->asHexString($other);
+
+        return $aHex === $bHex;
+    }
+
+    /**
+     * Returns a string representation of the constraint.
+     *
+     * @return string
+     */
+    public function toString()
+    {
+        return 'identical binary';
+    }
+
+    /**
+     * Get the given string of bytes as a stirng of Hexadecimal sequences.
+     *
+     * @param string $binary
+     *
+     * @return string
+     */
+    private function asHexString($binary)
+    {
+        $hex = '';
+
+        $bytes = unpack('H*', $binary);
+
+        foreach ($bytes as &$byte) {
+            $byte = strtoupper($byte);
+        }
+
+        return implode('', $bytes);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/smoke.conf.php.default
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/smoke.conf.php.default b/vendor/swiftmailer/swiftmailer/tests/smoke.conf.php.default
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/smoke.conf.php.default	(date 1495187412000)
@@ -0,0 +1,63 @@
+<?php
+
+/*
+ Swift Mailer V4 smoke test configuration.
+
+ YOU ONLY NEED TO EDIT THIS FILE IF YOU WISH TO RUN THE SMOKE TESTS.
+
+ The smoke tests are run by default when "All Tests" are run with the
+ testing suite, however, without configuration options here only the unit tests
+ will be run and the smoke tests will be skipped.
+ */
+
+/*
+ Defines: The an address which Swift can send to (it will also send "from" this address).
+ Recommended: (your own email address?)
+ */
+define('SWIFT_SMOKE_EMAIL_ADDRESS', 'test@swiftmailer.org');
+
+/*
+ Defines: The specific transport you want to mail with.
+ Recommended: Any of 'smtp', 'sendmail' or 'mail'
+ */
+define('SWIFT_SMOKE_TRANSPORT_TYPE', 'smtp');
+
+// SMTP-specific settings
+
+/*
+ Defines: An SMTP server to connect to
+ Recommended: smtp.your-isp.com (varies wildly!)
+ */
+define('SWIFT_SMOKE_SMTP_HOST', 'localhost');
+
+/*
+ Defines: The SMTP port to connect to
+ Recommended: 25
+ */
+define('SWIFT_SMOKE_SMTP_PORT', '4456');
+
+/*
+ Defines: A username to authenticate with SMTP (if needed).
+ Recommended: (none)
+ */
+define('SWIFT_SMOKE_SMTP_USER', '');
+
+/*
+ Defines: A password to authenticate with SMTP (if needed).
+ Recommended: (none)
+ */
+define('SWIFT_SMOKE_SMTP_PASS', '');
+
+/*
+ Defines: The encryption needed on your SMTP server.
+ Recommended: (none), or 'tls' or 'ssl'
+ */
+define('SWIFT_SMOKE_SMTP_ENCRYPTION', '');
+
+// Sendmail specific settings
+
+/*
+ Defines: The command to use when sending via sendmail
+ Recommended: /usr/sbin/sendmail -bs (or "-oi -t")
+ */
+define('SWIFT_SMOKE_SENDMAIL_COMMAND', '/usr/sbin/sendmail -bs');
Index: vendor/swiftmailer/swiftmailer/lib/dependency_maps/message_deps.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/dependency_maps/message_deps.php b/vendor/swiftmailer/swiftmailer/lib/dependency_maps/message_deps.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/dependency_maps/message_deps.php	(date 1495187412000)
@@ -0,0 +1,9 @@
+<?php
+
+Swift_DependencyContainer::getInstance()
+    ->register('message.message')
+    ->asNewInstanceOf('Swift_Message')
+
+    ->register('message.mimepart')
+    ->asNewInstanceOf('Swift_MimePart')
+;
Index: vendor/swiftmailer/swiftmailer/lib/dependency_maps/mime_deps.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/dependency_maps/mime_deps.php b/vendor/swiftmailer/swiftmailer/lib/dependency_maps/mime_deps.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/dependency_maps/mime_deps.php	(date 1495187412000)
@@ -0,0 +1,130 @@
+<?php
+
+require __DIR__.'/../mime_types.php';
+
+Swift_DependencyContainer::getInstance()
+    ->register('properties.charset')
+    ->asValue('utf-8')
+
+    ->register('email.validator')
+    ->asSharedInstanceOf('Egulias\EmailValidator\EmailValidator')
+
+    ->register('mime.idgenerator.idright')
+    // As SERVER_NAME can come from the user in certain configurations, check that
+    // it does not contain forbidden characters (see RFC 952 and RFC 2181). Use
+    // preg_replace() instead of preg_match() to prevent DoS attacks with long host names.
+    ->asValue(!empty($_SERVER['SERVER_NAME']) && preg_replace('/(?:^\[)?[a-zA-Z0-9-:\]_]+\.?/', '', $_SERVER['SERVER_NAME']) === '' ? $_SERVER['SERVER_NAME'] : 'swift.generated')
+
+    ->register('mime.idgenerator')
+    ->asSharedInstanceOf('Swift_Mime_IdGenerator')
+    ->withDependencies(array(
+        'mime.idgenerator.idright',
+    ))
+
+    ->register('mime.message')
+    ->asNewInstanceOf('Swift_Mime_SimpleMessage')
+    ->withDependencies(array(
+        'mime.headerset',
+        'mime.qpcontentencoder',
+        'cache',
+        'mime.idgenerator',
+        'properties.charset',
+    ))
+
+    ->register('mime.part')
+    ->asNewInstanceOf('Swift_Mime_MimePart')
+    ->withDependencies(array(
+        'mime.headerset',
+        'mime.qpcontentencoder',
+        'cache',
+        'mime.idgenerator',
+        'properties.charset',
+    ))
+
+    ->register('mime.attachment')
+    ->asNewInstanceOf('Swift_Mime_Attachment')
+    ->withDependencies(array(
+        'mime.headerset',
+        'mime.base64contentencoder',
+        'cache',
+        'mime.idgenerator',
+    ))
+    ->addConstructorValue($swift_mime_types)
+
+    ->register('mime.embeddedfile')
+    ->asNewInstanceOf('Swift_Mime_EmbeddedFile')
+    ->withDependencies(array(
+        'mime.headerset',
+        'mime.base64contentencoder',
+        'cache',
+        'mime.idgenerator',
+    ))
+    ->addConstructorValue($swift_mime_types)
+
+    ->register('mime.headerfactory')
+    ->asNewInstanceOf('Swift_Mime_SimpleHeaderFactory')
+    ->withDependencies(array(
+            'mime.qpheaderencoder',
+            'mime.rfc2231encoder',
+            'email.validator',
+            'properties.charset',
+        ))
+
+    ->register('mime.headerset')
+    ->asNewInstanceOf('Swift_Mime_SimpleHeaderSet')
+    ->withDependencies(array('mime.headerfactory', 'properties.charset'))
+
+    ->register('mime.qpheaderencoder')
+    ->asNewInstanceOf('Swift_Mime_HeaderEncoder_QpHeaderEncoder')
+    ->withDependencies(array('mime.charstream'))
+
+    ->register('mime.base64headerencoder')
+    ->asNewInstanceOf('Swift_Mime_HeaderEncoder_Base64HeaderEncoder')
+    ->withDependencies(array('mime.charstream'))
+
+    ->register('mime.charstream')
+    ->asNewInstanceOf('Swift_CharacterStream_NgCharacterStream')
+    ->withDependencies(array('mime.characterreaderfactory', 'properties.charset'))
+
+    ->register('mime.bytecanonicalizer')
+    ->asSharedInstanceOf('Swift_StreamFilters_ByteArrayReplacementFilter')
+    ->addConstructorValue(array(array(0x0D, 0x0A), array(0x0D), array(0x0A)))
+    ->addConstructorValue(array(array(0x0A), array(0x0A), array(0x0D, 0x0A)))
+
+    ->register('mime.characterreaderfactory')
+    ->asSharedInstanceOf('Swift_CharacterReaderFactory_SimpleCharacterReaderFactory')
+
+    ->register('mime.safeqpcontentencoder')
+    ->asNewInstanceOf('Swift_Mime_ContentEncoder_QpContentEncoder')
+    ->withDependencies(array('mime.charstream', 'mime.bytecanonicalizer'))
+
+    ->register('mime.rawcontentencoder')
+    ->asNewInstanceOf('Swift_Mime_ContentEncoder_RawContentEncoder')
+
+    ->register('mime.nativeqpcontentencoder')
+    ->withDependencies(array('properties.charset'))
+    ->asNewInstanceOf('Swift_Mime_ContentEncoder_NativeQpContentEncoder')
+
+    ->register('mime.qpcontentencoder')
+    ->asNewInstanceOf('Swift_Mime_ContentEncoder_QpContentEncoderProxy')
+    ->withDependencies(array('mime.safeqpcontentencoder', 'mime.nativeqpcontentencoder', 'properties.charset'))
+
+    ->register('mime.7bitcontentencoder')
+    ->asNewInstanceOf('Swift_Mime_ContentEncoder_PlainContentEncoder')
+    ->addConstructorValue('7bit')
+    ->addConstructorValue(true)
+
+    ->register('mime.8bitcontentencoder')
+    ->asNewInstanceOf('Swift_Mime_ContentEncoder_PlainContentEncoder')
+    ->addConstructorValue('8bit')
+    ->addConstructorValue(true)
+
+    ->register('mime.base64contentencoder')
+    ->asSharedInstanceOf('Swift_Mime_ContentEncoder_Base64ContentEncoder')
+
+    ->register('mime.rfc2231encoder')
+    ->asNewInstanceOf('Swift_Encoder_Rfc2231Encoder')
+    ->withDependencies(array('mime.charstream'))
+;
+
+unset($swift_mime_types);
Index: vendor/swiftmailer/swiftmailer/lib/dependency_maps/transport_deps.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/dependency_maps/transport_deps.php b/vendor/swiftmailer/swiftmailer/lib/dependency_maps/transport_deps.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/dependency_maps/transport_deps.php	(date 1495187412000)
@@ -0,0 +1,77 @@
+<?php
+
+Swift_DependencyContainer::getInstance()
+    ->register('transport.localdomain')
+    // As SERVER_NAME can come from the user in certain configurations, check that
+    // it does not contain forbidden characters (see RFC 952 and RFC 2181). Use
+    // preg_replace() instead of preg_match() to prevent DoS attacks with long host names.
+    ->asValue(!empty($_SERVER['SERVER_NAME']) && preg_replace('/(?:^\[)?[a-zA-Z0-9-:\]_]+\.?/', '', $_SERVER['SERVER_NAME']) === '' ? trim($_SERVER['SERVER_NAME'], '[]') : '127.0.0.1')
+
+    ->register('transport.smtp')
+    ->asNewInstanceOf('Swift_Transport_EsmtpTransport')
+    ->withDependencies(array(
+        'transport.buffer',
+        array('transport.authhandler'),
+        'transport.eventdispatcher',
+        'transport.localdomain',
+    ))
+
+    ->register('transport.sendmail')
+    ->asNewInstanceOf('Swift_Transport_SendmailTransport')
+    ->withDependencies(array(
+        'transport.buffer',
+        'transport.eventdispatcher',
+        'transport.localdomain',
+    ))
+
+    ->register('transport.loadbalanced')
+    ->asNewInstanceOf('Swift_Transport_LoadBalancedTransport')
+
+    ->register('transport.failover')
+    ->asNewInstanceOf('Swift_Transport_FailoverTransport')
+
+    ->register('transport.spool')
+    ->asNewInstanceOf('Swift_Transport_SpoolTransport')
+    ->withDependencies(array('transport.eventdispatcher'))
+
+    ->register('transport.null')
+    ->asNewInstanceOf('Swift_Transport_NullTransport')
+    ->withDependencies(array('transport.eventdispatcher'))
+
+    ->register('transport.buffer')
+    ->asNewInstanceOf('Swift_Transport_StreamBuffer')
+    ->withDependencies(array('transport.replacementfactory'))
+
+    ->register('transport.authhandler')
+    ->asNewInstanceOf('Swift_Transport_Esmtp_AuthHandler')
+    ->withDependencies(array(
+        array(
+            'transport.crammd5auth',
+            'transport.loginauth',
+            'transport.plainauth',
+            'transport.ntlmauth',
+            'transport.xoauth2auth',
+        ),
+    ))
+
+    ->register('transport.crammd5auth')
+    ->asNewInstanceOf('Swift_Transport_Esmtp_Auth_CramMd5Authenticator')
+
+    ->register('transport.loginauth')
+    ->asNewInstanceOf('Swift_Transport_Esmtp_Auth_LoginAuthenticator')
+
+    ->register('transport.plainauth')
+    ->asNewInstanceOf('Swift_Transport_Esmtp_Auth_PlainAuthenticator')
+
+    ->register('transport.xoauth2auth')
+    ->asNewInstanceOf('Swift_Transport_Esmtp_Auth_XOAuth2Authenticator')
+
+    ->register('transport.ntlmauth')
+    ->asNewInstanceOf('Swift_Transport_Esmtp_Auth_NTLMAuthenticator')
+
+    ->register('transport.eventdispatcher')
+    ->asNewInstanceOf('Swift_Events_SimpleEventDispatcher')
+
+    ->register('transport.replacementfactory')
+    ->asSharedInstanceOf('Swift_StreamFilters_StringReplacementFilterFactory')
+;
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift.php	(date 1495187412000)
@@ -0,0 +1,79 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * General utility class in Swift Mailer, not to be instantiated.
+ *
+ *
+ * @author Chris Corbyn
+ */
+abstract class Swift
+{
+    const VERSION = '6.0.0';
+
+    public static $initialized = false;
+    public static $inits = array();
+
+    /**
+     * Registers an initializer callable that will be called the first time
+     * a SwiftMailer class is autoloaded.
+     *
+     * This enables you to tweak the default configuration in a lazy way.
+     *
+     * @param mixed $callable A valid PHP callable that will be called when autoloading the first Swift class
+     */
+    public static function init($callable)
+    {
+        self::$inits[] = $callable;
+    }
+
+    /**
+     * Internal autoloader for spl_autoload_register().
+     *
+     * @param string $class
+     */
+    public static function autoload($class)
+    {
+        // Don't interfere with other autoloaders
+        if (0 !== strpos($class, 'Swift_')) {
+            return;
+        }
+
+        $path = __DIR__.'/'.str_replace('_', '/', $class).'.php';
+
+        if (!file_exists($path)) {
+            return;
+        }
+
+        require $path;
+
+        if (self::$inits && !self::$initialized) {
+            self::$initialized = true;
+            foreach (self::$inits as $init) {
+                call_user_func($init);
+            }
+        }
+    }
+
+    /**
+     * Configure autoloading using Swift Mailer.
+     *
+     * This is designed to play nicely with other autoloaders.
+     *
+     * @param mixed $callable A valid PHP callable that will be called when autoloading the first Swift class
+     */
+    public static function registerAutoload($callable = null)
+    {
+        if (null !== $callable) {
+            self::$inits[] = $callable;
+        }
+        spl_autoload_register(array('Swift', 'autoload'));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/dependency_maps/cache_deps.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/dependency_maps/cache_deps.php b/vendor/swiftmailer/swiftmailer/lib/dependency_maps/cache_deps.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/dependency_maps/cache_deps.php	(date 1495187412000)
@@ -0,0 +1,23 @@
+<?php
+
+Swift_DependencyContainer::getInstance()
+    ->register('cache')
+    ->asAliasOf('cache.array')
+
+    ->register('tempdir')
+    ->asValue('/tmp')
+
+    ->register('cache.null')
+    ->asSharedInstanceOf('Swift_KeyCache_NullKeyCache')
+
+    ->register('cache.array')
+    ->asSharedInstanceOf('Swift_KeyCache_ArrayKeyCache')
+    ->withDependencies(array('cache.inputstream'))
+
+    ->register('cache.disk')
+    ->asSharedInstanceOf('Swift_KeyCache_DiskKeyCache')
+    ->withDependencies(array('cache.inputstream', 'tempdir'))
+
+    ->register('cache.inputstream')
+    ->asNewInstanceOf('Swift_KeyCache_SimpleKeyCacheInputStream')
+;
Index: vendor/swiftmailer/swiftmailer/tests/fixtures/MimeEntityFixture.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/fixtures/MimeEntityFixture.php b/vendor/swiftmailer/swiftmailer/tests/fixtures/MimeEntityFixture.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/fixtures/MimeEntityFixture.php	(date 1495187412000)
@@ -0,0 +1,67 @@
+<?php
+
+class MimeEntityFixture extends Swift_Mime_SimpleMimeEntity
+{
+    private $level;
+    private $string;
+    private $contentType;
+
+    public function __construct($level = null, $string = '', $contentType = null)
+    {
+        $this->level = $level;
+        $this->string = $string;
+        $this->contentType = $contentType;
+    }
+
+    public function getNestingLevel()
+    {
+        return $this->level;
+    }
+
+    public function toString()
+    {
+        return $this->string;
+    }
+
+    public function getContentType()
+    {
+        return $this->contentType;
+    }
+
+    // These methods are here to account for the implemented interfaces
+    public function getId()
+    {
+    }
+
+    public function getHeaders()
+    {
+    }
+
+    public function getBody()
+    {
+    }
+
+    public function setBody($body, $contentType = null)
+    {
+    }
+
+    public function toByteStream(Swift_InputByteStream $is)
+    {
+    }
+
+    public function charsetChanged($charset)
+    {
+    }
+
+    public function encoderChanged(Swift_Mime_ContentEncoder $encoder)
+    {
+    }
+
+    public function getChildren()
+    {
+    }
+
+    public function setChildren(array $children, $compoundLevel = null)
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReaderFactory.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReaderFactory.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReaderFactory.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReaderFactory.php	(date 1495187412000)
@@ -0,0 +1,26 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A factory for creating CharacterReaders.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_CharacterReaderFactory
+{
+    /**
+     * Returns a CharacterReader suitable for the charset applied.
+     *
+     * @param string $charset
+     *
+     * @return Swift_CharacterReader
+     */
+    public function getReaderFor($charset);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream.php	(date 1495187412000)
@@ -0,0 +1,89 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An abstract means of reading and writing data in terms of characters as opposed
+ * to bytes.
+ *
+ * Classes implementing this interface may use a subsystem which requires less
+ * memory than working with large strings of data.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_CharacterStream
+{
+    /**
+     * Set the character set used in this CharacterStream.
+     *
+     * @param string $charset
+     */
+    public function setCharacterSet($charset);
+
+    /**
+     * Set the CharacterReaderFactory for multi charset support.
+     *
+     * @param Swift_CharacterReaderFactory $factory
+     */
+    public function setCharacterReaderFactory(Swift_CharacterReaderFactory $factory);
+
+    /**
+     * Overwrite this character stream using the byte sequence in the byte stream.
+     *
+     * @param Swift_OutputByteStream $os output stream to read from
+     */
+    public function importByteStream(Swift_OutputByteStream $os);
+
+    /**
+     * Import a string a bytes into this CharacterStream, overwriting any existing
+     * data in the stream.
+     *
+     * @param string $string
+     */
+    public function importString($string);
+
+    /**
+     * Read $length characters from the stream and move the internal pointer
+     * $length further into the stream.
+     *
+     * @param int $length
+     *
+     * @return string
+     */
+    public function read($length);
+
+    /**
+     * Read $length characters from the stream and return a 1-dimensional array
+     * containing there octet values.
+     *
+     * @param int $length
+     *
+     * @return int[]
+     */
+    public function readBytes($length);
+
+    /**
+     * Write $chars to the end of the stream.
+     *
+     * @param string $chars
+     */
+    public function write($chars);
+
+    /**
+     * Move the internal pointer to $charOffset in the stream.
+     *
+     * @param int $charOffset
+     */
+    public function setPointer($charOffset);
+
+    /**
+     * Empty the stream and reset the internal pointer.
+     */
+    public function flushContents();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Attachment.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Attachment.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Attachment.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Attachment.php	(date 1495187412000)
@@ -0,0 +1,57 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Attachment class for attaching files to a {@link Swift_Mime_SimpleMessage}.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Attachment extends Swift_Mime_Attachment
+{
+    /**
+     * Create a new Attachment.
+     *
+     * Details may be optionally provided to the constructor.
+     *
+     * @param string|Swift_OutputByteStream $data
+     * @param string                        $filename
+     * @param string                        $contentType
+     */
+    public function __construct($data = null, $filename = null, $contentType = null)
+    {
+        call_user_func_array(
+            array($this, 'Swift_Mime_Attachment::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('mime.attachment')
+            );
+
+        $this->setBody($data);
+        $this->setFilename($filename);
+        if ($contentType) {
+            $this->setContentType($contentType);
+        }
+    }
+
+    /**
+     * Create a new Attachment from a filesystem path.
+     *
+     * @param string $path
+     * @param string $contentType optional
+     *
+     * @return Swift_Mime_Attachment
+     */
+    public static function fromPath($path, $contentType = null)
+    {
+        return (new self())->setFile(
+            new Swift_ByteStream_FileByteStream($path),
+            $contentType
+        );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader.php	(date 1495187412000)
@@ -0,0 +1,67 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Analyzes characters for a specific character set.
+ *
+ * @author Chris Corbyn
+ * @author Xavier De Cock <xdecock@gmail.com>
+ */
+interface Swift_CharacterReader
+{
+    const MAP_TYPE_INVALID = 0x01;
+    const MAP_TYPE_FIXED_LEN = 0x02;
+    const MAP_TYPE_POSITIONS = 0x03;
+
+    /**
+     * Returns the complete character map.
+     *
+     * @param string $string
+     * @param int    $startOffset
+     * @param array  $currentMap
+     * @param mixed  $ignoredChars
+     *
+     * @return int
+     */
+    public function getCharPositions($string, $startOffset, &$currentMap, &$ignoredChars);
+
+    /**
+     * Returns the mapType, see constants.
+     *
+     * @return int
+     */
+    public function getMapType();
+
+    /**
+     * Returns an integer which specifies how many more bytes to read.
+     *
+     * A positive integer indicates the number of more bytes to fetch before invoking
+     * this method again.
+     *
+     * A value of zero means this is already a valid character.
+     * A value of -1 means this cannot possibly be a valid character.
+     *
+     * @param int[] $bytes
+     * @param int   $size
+     *
+     * @return int
+     */
+    public function validateByteSequence($bytes, $size);
+
+    /**
+     * Returns the number of bytes which should be read to start each character.
+     *
+     * For fixed width character sets this should be the number of octets-per-character.
+     * For multibyte character sets this will probably be 1.
+     *
+     * @return int
+     */
+    public function getInitialByteSize();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder.php	(date 1495187412000)
@@ -0,0 +1,28 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Interface for all Encoder schemes.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Encoder extends Swift_Mime_CharsetObserver
+{
+    /**
+     * Encode a given string to produce an encoded string.
+     *
+     * @param string $string
+     * @param int    $firstLineOffset if first line needs to be shorter
+     * @param int    $maxLineLength   - 0 indicates the default length for this encoding
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/FailoverTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FailoverTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FailoverTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FailoverTransport.php	(date 1495187412000)
@@ -0,0 +1,33 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Contains a list of redundant Transports so when one fails, the next is used.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_FailoverTransport extends Swift_Transport_FailoverTransport
+{
+    /**
+     * Creates a new FailoverTransport with $transports.
+     *
+     * @param Swift_Transport[] $transports
+     */
+    public function __construct($transports = array())
+    {
+        call_user_func_array(
+            array($this, 'Swift_Transport_FailoverTransport::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('transport.failover')
+            );
+
+        $this->setTransports($transports);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/ConfigurableSpool.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ConfigurableSpool.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ConfigurableSpool.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ConfigurableSpool.php	(date 1495187412000)
@@ -0,0 +1,63 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier <fabien.potencier@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Base class for Spools (implements time and message limits).
+ *
+ * @author Fabien Potencier
+ */
+abstract class Swift_ConfigurableSpool implements Swift_Spool
+{
+    /** The maximum number of messages to send per flush */
+    private $message_limit;
+
+    /** The time limit per flush */
+    private $time_limit;
+
+    /**
+     * Sets the maximum number of messages to send per flush.
+     *
+     * @param int $limit
+     */
+    public function setMessageLimit($limit)
+    {
+        $this->message_limit = (int) $limit;
+    }
+
+    /**
+     * Gets the maximum number of messages to send per flush.
+     *
+     * @return int The limit
+     */
+    public function getMessageLimit()
+    {
+        return $this->message_limit;
+    }
+
+    /**
+     * Sets the time limit (in seconds) per flush.
+     *
+     * @param int $limit The limit
+     */
+    public function setTimeLimit($limit)
+    {
+        $this->time_limit = (int) $limit;
+    }
+
+    /**
+     * Gets the time limit (in seconds) per flush.
+     *
+     * @return int The limit
+     */
+    public function getTimeLimit()
+    {
+        return $this->time_limit;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/DependencyContainer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/DependencyContainer.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/DependencyContainer.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/DependencyContainer.php	(date 1495187412000)
@@ -0,0 +1,373 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Dependency Injection container.
+ *
+ * @author  Chris Corbyn
+ */
+class Swift_DependencyContainer
+{
+    /** Constant for literal value types */
+    const TYPE_VALUE = 0x0001;
+
+    /** Constant for new instance types */
+    const TYPE_INSTANCE = 0x0010;
+
+    /** Constant for shared instance types */
+    const TYPE_SHARED = 0x0100;
+
+    /** Constant for aliases */
+    const TYPE_ALIAS = 0x1000;
+
+    /** Singleton instance */
+    private static $instance = null;
+
+    /** The data container */
+    private $store = array();
+
+    /** The current endpoint in the data container */
+    private $endPoint;
+
+    /**
+     * Constructor should not be used.
+     *
+     * Use {@link getInstance()} instead.
+     */
+    public function __construct()
+    {
+    }
+
+    /**
+     * Returns a singleton of the DependencyContainer.
+     *
+     * @return self
+     */
+    public static function getInstance()
+    {
+        if (!isset(self::$instance)) {
+            self::$instance = new self();
+        }
+
+        return self::$instance;
+    }
+
+    /**
+     * List the names of all items stored in the Container.
+     *
+     * @return array
+     */
+    public function listItems()
+    {
+        return array_keys($this->store);
+    }
+
+    /**
+     * Test if an item is registered in this container with the given name.
+     *
+     * @see register()
+     *
+     * @param string $itemName
+     *
+     * @return bool
+     */
+    public function has($itemName)
+    {
+        return array_key_exists($itemName, $this->store)
+            && isset($this->store[$itemName]['lookupType']);
+    }
+
+    /**
+     * Lookup the item with the given $itemName.
+     *
+     * @see register()
+     *
+     * @param string $itemName
+     *
+     * @return mixed
+     *
+     * @throws Swift_DependencyException If the dependency is not found
+     */
+    public function lookup($itemName)
+    {
+        if (!$this->has($itemName)) {
+            throw new Swift_DependencyException(
+                'Cannot lookup dependency "'.$itemName.'" since it is not registered.'
+                );
+        }
+
+        switch ($this->store[$itemName]['lookupType']) {
+            case self::TYPE_ALIAS:
+                return $this->createAlias($itemName);
+            case self::TYPE_VALUE:
+                return $this->getValue($itemName);
+            case self::TYPE_INSTANCE:
+                return $this->createNewInstance($itemName);
+            case self::TYPE_SHARED:
+                return $this->createSharedInstance($itemName);
+        }
+    }
+
+    /**
+     * Create an array of arguments passed to the constructor of $itemName.
+     *
+     * @param string $itemName
+     *
+     * @return array
+     */
+    public function createDependenciesFor($itemName)
+    {
+        $args = array();
+        if (isset($this->store[$itemName]['args'])) {
+            $args = $this->resolveArgs($this->store[$itemName]['args']);
+        }
+
+        return $args;
+    }
+
+    /**
+     * Register a new dependency with $itemName.
+     *
+     * This method returns the current DependencyContainer instance because it
+     * requires the use of the fluid interface to set the specific details for the
+     * dependency.
+     *
+     * @see asNewInstanceOf(), asSharedInstanceOf(), asValue()
+     *
+     * @param string $itemName
+     *
+     * @return $this
+     */
+    public function register($itemName)
+    {
+        $this->store[$itemName] = array();
+        $this->endPoint = &$this->store[$itemName];
+
+        return $this;
+    }
+
+    /**
+     * Specify the previously registered item as a literal value.
+     *
+     * {@link register()} must be called before this will work.
+     *
+     * @param mixed $value
+     *
+     * @return $this
+     */
+    public function asValue($value)
+    {
+        $endPoint = &$this->getEndPoint();
+        $endPoint['lookupType'] = self::TYPE_VALUE;
+        $endPoint['value'] = $value;
+
+        return $this;
+    }
+
+    /**
+     * Specify the previously registered item as an alias of another item.
+     *
+     * @param string $lookup
+     *
+     * @return $this
+     */
+    public function asAliasOf($lookup)
+    {
+        $endPoint = &$this->getEndPoint();
+        $endPoint['lookupType'] = self::TYPE_ALIAS;
+        $endPoint['ref'] = $lookup;
+
+        return $this;
+    }
+
+    /**
+     * Specify the previously registered item as a new instance of $className.
+     *
+     * {@link register()} must be called before this will work.
+     * Any arguments can be set with {@link withDependencies()},
+     * {@link addConstructorValue()} or {@link addConstructorLookup()}.
+     *
+     * @see withDependencies(), addConstructorValue(), addConstructorLookup()
+     *
+     * @param string $className
+     *
+     * @return $this
+     */
+    public function asNewInstanceOf($className)
+    {
+        $endPoint = &$this->getEndPoint();
+        $endPoint['lookupType'] = self::TYPE_INSTANCE;
+        $endPoint['className'] = $className;
+
+        return $this;
+    }
+
+    /**
+     * Specify the previously registered item as a shared instance of $className.
+     *
+     * {@link register()} must be called before this will work.
+     *
+     * @param string $className
+     *
+     * @return $this
+     */
+    public function asSharedInstanceOf($className)
+    {
+        $endPoint = &$this->getEndPoint();
+        $endPoint['lookupType'] = self::TYPE_SHARED;
+        $endPoint['className'] = $className;
+
+        return $this;
+    }
+
+    /**
+     * Specify a list of injected dependencies for the previously registered item.
+     *
+     * This method takes an array of lookup names.
+     *
+     * @see addConstructorValue(), addConstructorLookup()
+     *
+     * @param array $lookups
+     *
+     * @return $this
+     */
+    public function withDependencies(array $lookups)
+    {
+        $endPoint = &$this->getEndPoint();
+        $endPoint['args'] = array();
+        foreach ($lookups as $lookup) {
+            $this->addConstructorLookup($lookup);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Specify a literal (non looked up) value for the constructor of the
+     * previously registered item.
+     *
+     * @see withDependencies(), addConstructorLookup()
+     *
+     * @param mixed $value
+     *
+     * @return $this
+     */
+    public function addConstructorValue($value)
+    {
+        $endPoint = &$this->getEndPoint();
+        if (!isset($endPoint['args'])) {
+            $endPoint['args'] = array();
+        }
+        $endPoint['args'][] = array('type' => 'value', 'item' => $value);
+
+        return $this;
+    }
+
+    /**
+     * Specify a dependency lookup for the constructor of the previously
+     * registered item.
+     *
+     * @see withDependencies(), addConstructorValue()
+     *
+     * @param string $lookup
+     *
+     * @return $this
+     */
+    public function addConstructorLookup($lookup)
+    {
+        $endPoint = &$this->getEndPoint();
+        if (!isset($this->endPoint['args'])) {
+            $endPoint['args'] = array();
+        }
+        $endPoint['args'][] = array('type' => 'lookup', 'item' => $lookup);
+
+        return $this;
+    }
+
+    /** Get the literal value with $itemName */
+    private function getValue($itemName)
+    {
+        return $this->store[$itemName]['value'];
+    }
+
+    /** Resolve an alias to another item */
+    private function createAlias($itemName)
+    {
+        return $this->lookup($this->store[$itemName]['ref']);
+    }
+
+    /** Create a fresh instance of $itemName */
+    private function createNewInstance($itemName)
+    {
+        $reflector = new ReflectionClass($this->store[$itemName]['className']);
+        if ($reflector->getConstructor()) {
+            return $reflector->newInstanceArgs(
+                $this->createDependenciesFor($itemName)
+                );
+        }
+
+        return $reflector->newInstance();
+    }
+
+    /** Create and register a shared instance of $itemName */
+    private function createSharedInstance($itemName)
+    {
+        if (!isset($this->store[$itemName]['instance'])) {
+            $this->store[$itemName]['instance'] = $this->createNewInstance($itemName);
+        }
+
+        return $this->store[$itemName]['instance'];
+    }
+
+    /** Get the current endpoint in the store */
+    private function &getEndPoint()
+    {
+        if (!isset($this->endPoint)) {
+            throw new BadMethodCallException(
+                'Component must first be registered by calling register()'
+                );
+        }
+
+        return $this->endPoint;
+    }
+
+    /** Get an argument list with dependencies resolved */
+    private function resolveArgs(array $args)
+    {
+        $resolved = array();
+        foreach ($args as $argDefinition) {
+            switch ($argDefinition['type']) {
+                case 'lookup':
+                    $resolved[] = $this->lookupRecursive($argDefinition['item']);
+                    break;
+                case 'value':
+                    $resolved[] = $argDefinition['item'];
+                    break;
+            }
+        }
+
+        return $resolved;
+    }
+
+    /** Resolve a single dependency with an collections */
+    private function lookupRecursive($item)
+    {
+        if (is_array($item)) {
+            $collection = array();
+            foreach ($item as $k => $v) {
+                $collection[$k] = $this->lookupRecursive($v);
+            }
+
+            return $collection;
+        }
+
+        return $this->lookup($item);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/DependencyException.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/DependencyException.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/DependencyException.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/DependencyException.php	(date 1495187412000)
@@ -0,0 +1,27 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * DependencyException gets thrown when a requested dependency is missing.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_DependencyException extends Swift_SwiftException
+{
+    /**
+     * Create a new DependencyException with $message.
+     *
+     * @param string $message
+     */
+    public function __construct($message)
+    {
+        parent::__construct($message);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/EmbeddedFile.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/EmbeddedFile.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/EmbeddedFile.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/EmbeddedFile.php	(date 1495187412000)
@@ -0,0 +1,53 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An embedded file, in a multipart message.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_EmbeddedFile extends Swift_Mime_EmbeddedFile
+{
+    /**
+     * Create a new EmbeddedFile.
+     *
+     * Details may be optionally provided to the constructor.
+     *
+     * @param string|Swift_OutputByteStream $data
+     * @param string                        $filename
+     * @param string                        $contentType
+     */
+    public function __construct($data = null, $filename = null, $contentType = null)
+    {
+        call_user_func_array(
+            array($this, 'Swift_Mime_EmbeddedFile::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('mime.embeddedfile')
+            );
+
+        $this->setBody($data);
+        $this->setFilename($filename);
+        if ($contentType) {
+            $this->setContentType($contentType);
+        }
+    }
+
+    /**
+     * Create a new EmbeddedFile from a filesystem path.
+     *
+     * @param string $path
+     *
+     * @return Swift_Mime_EmbeddedFile
+     */
+    public static function fromPath($path)
+    {
+        return (new self())->setFile(new Swift_ByteStream_FileByteStream($path));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Image.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Image.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Image.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Image.php	(date 1495187412000)
@@ -0,0 +1,43 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An image, embedded in a multipart message.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Image extends Swift_EmbeddedFile
+{
+    /**
+     * Create a new EmbeddedFile.
+     *
+     * Details may be optionally provided to the constructor.
+     *
+     * @param string|Swift_OutputByteStream $data
+     * @param string                        $filename
+     * @param string                        $contentType
+     */
+    public function __construct($data = null, $filename = null, $contentType = null)
+    {
+        parent::__construct($data, $filename, $contentType);
+    }
+
+    /**
+     * Create a new Image from a filesystem path.
+     *
+     * @param string $path
+     *
+     * @return self
+     */
+    public static function fromPath($path)
+    {
+        return (new self())->setFile(new Swift_ByteStream_FileByteStream($path));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/InputByteStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/InputByteStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/InputByteStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/InputByteStream.php	(date 1495187412000)
@@ -0,0 +1,75 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An abstract means of writing data.
+ *
+ * Classes implementing this interface may use a subsystem which requires less
+ * memory than working with large strings of data.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_InputByteStream
+{
+    /**
+     * Writes $bytes to the end of the stream.
+     *
+     * Writing may not happen immediately if the stream chooses to buffer.  If
+     * you want to write these bytes with immediate effect, call {@link commit()}
+     * after calling write().
+     *
+     * This method returns the sequence ID of the write (i.e. 1 for first, 2 for
+     * second, etc etc).
+     *
+     * @param string $bytes
+     *
+     * @throws Swift_IoException
+     *
+     * @return int
+     */
+    public function write($bytes);
+
+    /**
+     * For any bytes that are currently buffered inside the stream, force them
+     * off the buffer.
+     *
+     * @throws Swift_IoException
+     */
+    public function commit();
+
+    /**
+     * Attach $is to this stream.
+     *
+     * The stream acts as an observer, receiving all data that is written.
+     * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function bind(Swift_InputByteStream $is);
+
+    /**
+     * Remove an already bound stream.
+     *
+     * If $is is not bound, no errors will be raised.
+     * If the stream currently has any buffered data it will be written to $is
+     * before unbinding occurs.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function unbind(Swift_InputByteStream $is);
+
+    /**
+     * Flush the contents of the stream (empty it) and set the internal pointer
+     * to the beginning.
+     *
+     * @throws Swift_IoException
+     */
+    public function flushBuffers();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/IoException.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/IoException.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/IoException.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/IoException.php	(date 1495187412000)
@@ -0,0 +1,29 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * I/O Exception class.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_IoException extends Swift_SwiftException
+{
+    /**
+     * Create a new IoException with $message.
+     *
+     * @param string    $message
+     * @param int       $code
+     * @param Exception $previous
+     */
+    public function __construct($message, $code = 0, Exception $previous = null)
+    {
+        parent::__construct($message, $code, $previous);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php	(date 1495187412000)
@@ -0,0 +1,208 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier <fabien.potencier@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Stores Messages on the filesystem.
+ *
+ * @author Fabien Potencier
+ * @author Xavier De Cock <xdecock@gmail.com>
+ */
+class Swift_FileSpool extends Swift_ConfigurableSpool
+{
+    /** The spool directory */
+    private $path;
+
+    /**
+     * File WriteRetry Limit.
+     *
+     * @var int
+     */
+    private $retryLimit = 10;
+
+    /**
+     * Create a new FileSpool.
+     *
+     * @param string $path
+     *
+     * @throws Swift_IoException
+     */
+    public function __construct($path)
+    {
+        $this->path = $path;
+
+        if (!file_exists($this->path)) {
+            if (!mkdir($this->path, 0777, true)) {
+                throw new Swift_IoException(sprintf('Unable to create path "%s".', $this->path));
+            }
+        }
+    }
+
+    /**
+     * Tests if this Spool mechanism has started.
+     *
+     * @return bool
+     */
+    public function isStarted()
+    {
+        return true;
+    }
+
+    /**
+     * Starts this Spool mechanism.
+     */
+    public function start()
+    {
+    }
+
+    /**
+     * Stops this Spool mechanism.
+     */
+    public function stop()
+    {
+    }
+
+    /**
+     * Allow to manage the enqueuing retry limit.
+     *
+     * Default, is ten and allows over 64^20 different fileNames
+     *
+     * @param int $limit
+     */
+    public function setRetryLimit($limit)
+    {
+        $this->retryLimit = $limit;
+    }
+
+    /**
+     * Queues a message.
+     *
+     * @param Swift_Mime_SimpleMessage $message The message to store
+     *
+     * @throws Swift_IoException
+     *
+     * @return bool
+     */
+    public function queueMessage(Swift_Mime_SimpleMessage $message)
+    {
+        $ser = serialize($message);
+        $fileName = $this->path.'/'.$this->getRandomString(10);
+        for ($i = 0; $i < $this->retryLimit; ++$i) {
+            /* We try an exclusive creation of the file. This is an atomic operation, it avoid locking mechanism */
+            $fp = @fopen($fileName.'.message', 'x');
+            if (false !== $fp) {
+                if (false === fwrite($fp, $ser)) {
+                    return false;
+                }
+
+                return fclose($fp);
+            } else {
+                /* The file already exists, we try a longer fileName */
+                $fileName .= $this->getRandomString(1);
+            }
+        }
+
+        throw new Swift_IoException(sprintf('Unable to create a file for enqueuing Message in "%s".', $this->path));
+    }
+
+    /**
+     * Execute a recovery if for any reason a process is sending for too long.
+     *
+     * @param int $timeout in second Defaults is for very slow smtp responses
+     */
+    public function recover($timeout = 900)
+    {
+        foreach (new DirectoryIterator($this->path) as $file) {
+            $file = $file->getRealPath();
+
+            if (substr($file, -16) == '.message.sending') {
+                $lockedtime = filectime($file);
+                if ((time() - $lockedtime) > $timeout) {
+                    rename($file, substr($file, 0, -8));
+                }
+            }
+        }
+    }
+
+    /**
+     * Sends messages using the given transport instance.
+     *
+     * @param Swift_Transport $transport        A transport instance
+     * @param string[]        $failedRecipients An array of failures by-reference
+     *
+     * @return int The number of sent e-mail's
+     */
+    public function flushQueue(Swift_Transport $transport, &$failedRecipients = null)
+    {
+        $directoryIterator = new DirectoryIterator($this->path);
+
+        /* Start the transport only if there are queued files to send */
+        if (!$transport->isStarted()) {
+            foreach ($directoryIterator as $file) {
+                if (substr($file->getRealPath(), -8) == '.message') {
+                    $transport->start();
+                    break;
+                }
+            }
+        }
+
+        $failedRecipients = (array) $failedRecipients;
+        $count = 0;
+        $time = time();
+        foreach ($directoryIterator as $file) {
+            $file = $file->getRealPath();
+
+            if (substr($file, -8) != '.message') {
+                continue;
+            }
+
+            /* We try a rename, it's an atomic operation, and avoid locking the file */
+            if (rename($file, $file.'.sending')) {
+                $message = unserialize(file_get_contents($file.'.sending'));
+
+                $count += $transport->send($message, $failedRecipients);
+
+                unlink($file.'.sending');
+            } else {
+                /* This message has just been catched by another process */
+                continue;
+            }
+
+            if ($this->getMessageLimit() && $count >= $this->getMessageLimit()) {
+                break;
+            }
+
+            if ($this->getTimeLimit() && (time() - $time) >= $this->getTimeLimit()) {
+                break;
+            }
+        }
+
+        return $count;
+    }
+
+    /**
+     * Returns a random string needed to generate a fileName for the queue.
+     *
+     * @param int $count
+     *
+     * @return string
+     */
+    protected function getRandomString($count)
+    {
+        // This string MUST stay FS safe, avoid special chars
+        $base = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-';
+        $ret = '';
+        $strlen = strlen($base);
+        for ($i = 0; $i < $count; ++$i) {
+            $ret .= $base[((int) rand(0, $strlen - 1))];
+        }
+
+        return $ret;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/FileStream.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An OutputByteStream which specifically reads from a file.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_FileStream extends Swift_OutputByteStream
+{
+    /**
+     * Get the complete path to the file.
+     *
+     * @return string
+     */
+    public function getPath();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Filterable.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Filterable.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Filterable.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Filterable.php	(date 1495187412000)
@@ -0,0 +1,32 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Allows StreamFilters to operate on a stream.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Filterable
+{
+    /**
+     * Add a new StreamFilter, referenced by $key.
+     *
+     * @param Swift_StreamFilter $filter
+     * @param string             $key
+     */
+    public function addFilter(Swift_StreamFilter $filter, $key);
+
+    /**
+     * Remove an existing filter using $key.
+     *
+     * @param string $key
+     */
+    public function removeFilter($key);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/IdGenerator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/IdGenerator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/IdGenerator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/IdGenerator.php	(date 1495187412000)
@@ -0,0 +1,22 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Message ID generator.
+ */
+interface Swift_IdGenerator
+{
+    /**
+     * Returns a globally unique string to use for Message-ID or Content-ID.
+     *
+     * @return string
+     */
+    public function generateId();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/MemorySpool.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/MemorySpool.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/MemorySpool.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/MemorySpool.php	(date 1495187412000)
@@ -0,0 +1,110 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2011 Fabien Potencier <fabien.potencier@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Stores Messages in memory.
+ *
+ * @author Fabien Potencier
+ */
+class Swift_MemorySpool implements Swift_Spool
+{
+    protected $messages = array();
+    private $flushRetries = 3;
+
+    /**
+     * Tests if this Transport mechanism has started.
+     *
+     * @return bool
+     */
+    public function isStarted()
+    {
+        return true;
+    }
+
+    /**
+     * Starts this Transport mechanism.
+     */
+    public function start()
+    {
+    }
+
+    /**
+     * Stops this Transport mechanism.
+     */
+    public function stop()
+    {
+    }
+
+    /**
+     * @param int $retries
+     */
+    public function setFlushRetries($retries)
+    {
+        $this->flushRetries = $retries;
+    }
+
+    /**
+     * Stores a message in the queue.
+     *
+     * @param Swift_Mime_SimpleMessage $message The message to store
+     *
+     * @return bool Whether the operation has succeeded
+     */
+    public function queueMessage(Swift_Mime_SimpleMessage $message)
+    {
+        //clone the message to make sure it is not changed while in the queue
+        $this->messages[] = clone $message;
+
+        return true;
+    }
+
+    /**
+     * Sends messages using the given transport instance.
+     *
+     * @param Swift_Transport $transport        A transport instance
+     * @param string[]        $failedRecipients An array of failures by-reference
+     *
+     * @return int The number of sent emails
+     */
+    public function flushQueue(Swift_Transport $transport, &$failedRecipients = null)
+    {
+        if (!$this->messages) {
+            return 0;
+        }
+
+        if (!$transport->isStarted()) {
+            $transport->start();
+        }
+
+        $count = 0;
+        $retries = $this->flushRetries;
+        while ($retries--) {
+            try {
+                while ($message = array_pop($this->messages)) {
+                    $count += $transport->send($message, $failedRecipients);
+                }
+            } catch (Swift_TransportException $exception) {
+                if ($retries) {
+                    // re-queue the message at the end of the queue to give a chance
+                    // to the other messages to be sent, in case the failure was due to
+                    // this message and not just the transport failing
+                    array_unshift($this->messages, $message);
+
+                    // wait half a second before we try again
+                    usleep(500000);
+                } else {
+                    throw $exception;
+                }
+            }
+        }
+
+        return $count;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Message.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Message.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Message.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Message.php	(date 1495187412000)
@@ -0,0 +1,274 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * The Message class for building emails.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Message extends Swift_Mime_SimpleMessage
+{
+    /**
+     * @var Swift_Signers_HeaderSigner[]
+     */
+    private $headerSigners = array();
+
+    /**
+     * @var Swift_Signers_BodySigner[]
+     */
+    private $bodySigners = array();
+
+    /**
+     * @var array
+     */
+    private $savedMessage = array();
+
+    /**
+     * Create a new Message.
+     *
+     * Details may be optionally passed into the constructor.
+     *
+     * @param string $subject
+     * @param string $body
+     * @param string $contentType
+     * @param string $charset
+     */
+    public function __construct($subject = null, $body = null, $contentType = null, $charset = null)
+    {
+        call_user_func_array(
+            array($this, 'Swift_Mime_SimpleMessage::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('mime.message')
+            );
+
+        if (!isset($charset)) {
+            $charset = Swift_DependencyContainer::getInstance()
+                ->lookup('properties.charset');
+        }
+        $this->setSubject($subject);
+        $this->setBody($body);
+        $this->setCharset($charset);
+        if ($contentType) {
+            $this->setContentType($contentType);
+        }
+    }
+
+    /**
+     * Add a MimePart to this Message.
+     *
+     * @param string|Swift_OutputByteStream $body
+     * @param string                        $contentType
+     * @param string                        $charset
+     *
+     * @return $this
+     */
+    public function addPart($body, $contentType = null, $charset = null)
+    {
+        return $this->attach((new Swift_MimePart($body, $contentType, $charset))->setEncoder($this->getEncoder()));
+    }
+
+    /**
+     * Detach a signature handler from a message.
+     *
+     * @param Swift_Signer $signer
+     *
+     * @return $this
+     */
+    public function attachSigner(Swift_Signer $signer)
+    {
+        if ($signer instanceof Swift_Signers_HeaderSigner) {
+            $this->headerSigners[] = $signer;
+        } elseif ($signer instanceof Swift_Signers_BodySigner) {
+            $this->bodySigners[] = $signer;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Attach a new signature handler to the message.
+     *
+     * @param Swift_Signer $signer
+     *
+     * @return $this
+     */
+    public function detachSigner(Swift_Signer $signer)
+    {
+        if ($signer instanceof Swift_Signers_HeaderSigner) {
+            foreach ($this->headerSigners as $k => $headerSigner) {
+                if ($headerSigner === $signer) {
+                    unset($this->headerSigners[$k]);
+
+                    return $this;
+                }
+            }
+        } elseif ($signer instanceof Swift_Signers_BodySigner) {
+            foreach ($this->bodySigners as $k => $bodySigner) {
+                if ($bodySigner === $signer) {
+                    unset($this->bodySigners[$k]);
+
+                    return $this;
+                }
+            }
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get this message as a complete string.
+     *
+     * @return string
+     */
+    public function toString()
+    {
+        if (empty($this->headerSigners) && empty($this->bodySigners)) {
+            return parent::toString();
+        }
+
+        $this->saveMessage();
+
+        $this->doSign();
+
+        $string = parent::toString();
+
+        $this->restoreMessage();
+
+        return $string;
+    }
+
+    /**
+     * Write this message to a {@link Swift_InputByteStream}.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function toByteStream(Swift_InputByteStream $is)
+    {
+        if (empty($this->headerSigners) && empty($this->bodySigners)) {
+            parent::toByteStream($is);
+
+            return;
+        }
+
+        $this->saveMessage();
+
+        $this->doSign();
+
+        parent::toByteStream($is);
+
+        $this->restoreMessage();
+    }
+
+    public function __wakeup()
+    {
+        Swift_DependencyContainer::getInstance()->createDependenciesFor('mime.message');
+    }
+
+    /**
+     * loops through signers and apply the signatures.
+     */
+    protected function doSign()
+    {
+        foreach ($this->bodySigners as $signer) {
+            $altered = $signer->getAlteredHeaders();
+            $this->saveHeaders($altered);
+            $signer->signMessage($this);
+        }
+
+        foreach ($this->headerSigners as $signer) {
+            $altered = $signer->getAlteredHeaders();
+            $this->saveHeaders($altered);
+            $signer->reset();
+
+            $signer->setHeaders($this->getHeaders());
+
+            $signer->startBody();
+            $this->bodyToByteStream($signer);
+            $signer->endBody();
+
+            $signer->addSignature($this->getHeaders());
+        }
+    }
+
+    /**
+     * save the message before any signature is applied.
+     */
+    protected function saveMessage()
+    {
+        $this->savedMessage = array('headers' => array());
+        $this->savedMessage['body'] = $this->getBody();
+        $this->savedMessage['children'] = $this->getChildren();
+        if (count($this->savedMessage['children']) > 0 && $this->getBody() != '') {
+            $this->setChildren(array_merge(array($this->becomeMimePart()), $this->savedMessage['children']));
+            $this->setBody('');
+        }
+    }
+
+    /**
+     * save the original headers.
+     *
+     * @param array $altered
+     */
+    protected function saveHeaders(array $altered)
+    {
+        foreach ($altered as $head) {
+            $lc = strtolower($head);
+
+            if (!isset($this->savedMessage['headers'][$lc])) {
+                $this->savedMessage['headers'][$lc] = $this->getHeaders()->getAll($head);
+            }
+        }
+    }
+
+    /**
+     * Remove or restore altered headers.
+     */
+    protected function restoreHeaders()
+    {
+        foreach ($this->savedMessage['headers'] as $name => $savedValue) {
+            $headers = $this->getHeaders()->getAll($name);
+
+            foreach ($headers as $key => $value) {
+                if (!isset($savedValue[$key])) {
+                    $this->getHeaders()->remove($name, $key);
+                }
+            }
+        }
+    }
+
+    /**
+     * Restore message body.
+     */
+    protected function restoreMessage()
+    {
+        $this->setBody($this->savedMessage['body']);
+        $this->setChildren($this->savedMessage['children']);
+
+        $this->restoreHeaders();
+        $this->savedMessage = array();
+    }
+
+    /**
+     * Clone Message Signers.
+     *
+     * @see Swift_Mime_SimpleMimeEntity::__clone()
+     */
+    public function __clone()
+    {
+        parent::__clone();
+        foreach ($this->bodySigners as $key => $bodySigner) {
+            $this->bodySigners[$key] = clone $bodySigner;
+        }
+
+        foreach ($this->headerSigners as $key => $headerSigner) {
+            $this->headerSigners[$key] = clone $headerSigner;
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/MimePart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/MimePart.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/MimePart.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/MimePart.php	(date 1495187412000)
@@ -0,0 +1,45 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A MIME part, in a multipart message.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_MimePart extends Swift_Mime_MimePart
+{
+    /**
+     * Create a new MimePart.
+     *
+     * Details may be optionally passed into the constructor.
+     *
+     * @param string $body
+     * @param string $contentType
+     * @param string $charset
+     */
+    public function __construct($body = null, $contentType = null, $charset = null)
+    {
+        call_user_func_array(
+            array($this, 'Swift_Mime_MimePart::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('mime.part')
+            );
+
+        if (!isset($charset)) {
+            $charset = Swift_DependencyContainer::getInstance()
+                ->lookup('properties.charset');
+        }
+        $this->setBody($body);
+        $this->setCharset($charset);
+        if ($contentType) {
+            $this->setContentType($contentType);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache.php	(date 1495187412000)
@@ -0,0 +1,105 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Provides a mechanism for storing data using two keys.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_KeyCache
+{
+    /** Mode for replacing existing cached data */
+    const MODE_WRITE = 1;
+
+    /** Mode for appending data to the end of existing cached data */
+    const MODE_APPEND = 2;
+
+    /**
+     * Set a string into the cache under $itemKey for the namespace $nsKey.
+     *
+     * @see MODE_WRITE, MODE_APPEND
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     * @param string $string
+     * @param int    $mode
+     */
+    public function setString($nsKey, $itemKey, $string, $mode);
+
+    /**
+     * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
+     *
+     * @see MODE_WRITE, MODE_APPEND
+     *
+     * @param string                 $nsKey
+     * @param string                 $itemKey
+     * @param Swift_OutputByteStream $os
+     * @param int                    $mode
+     */
+    public function importFromByteStream($nsKey, $itemKey, Swift_OutputByteStream $os, $mode);
+
+    /**
+     * Provides a ByteStream which when written to, writes data to $itemKey.
+     *
+     * NOTE: The stream will always write in append mode.
+     * If the optional third parameter is passed all writes will go through $is.
+     *
+     * @param string                $nsKey
+     * @param string                $itemKey
+     * @param Swift_InputByteStream $is      optional input stream
+     *
+     * @return Swift_InputByteStream
+     */
+    public function getInputByteStream($nsKey, $itemKey, Swift_InputByteStream $is = null);
+
+    /**
+     * Get data back out of the cache as a string.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     *
+     * @return string
+     */
+    public function getString($nsKey, $itemKey);
+
+    /**
+     * Get data back out of the cache as a ByteStream.
+     *
+     * @param string                $nsKey
+     * @param string                $itemKey
+     * @param Swift_InputByteStream $is      stream to write the data to
+     */
+    public function exportToByteStream($nsKey, $itemKey, Swift_InputByteStream $is);
+
+    /**
+     * Check if the given $itemKey exists in the namespace $nsKey.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     *
+     * @return bool
+     */
+    public function hasKey($nsKey, $itemKey);
+
+    /**
+     * Clear data for $itemKey in the namespace $nsKey if it exists.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     */
+    public function clearKey($nsKey, $itemKey);
+
+    /**
+     * Clear all data in the namespace $nsKey if it exists.
+     *
+     * @param string $nsKey
+     */
+    public function clearAll($nsKey);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/LoadBalancedTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/LoadBalancedTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/LoadBalancedTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/LoadBalancedTransport.php	(date 1495187412000)
@@ -0,0 +1,33 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Redundantly and rotationally uses several Transport implementations when sending.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_LoadBalancedTransport extends Swift_Transport_LoadBalancedTransport
+{
+    /**
+     * Creates a new LoadBalancedTransport with $transports.
+     *
+     * @param array $transports
+     */
+    public function __construct($transports = array())
+    {
+        call_user_func_array(
+            array($this, 'Swift_Transport_LoadBalancedTransport::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('transport.loadbalanced')
+            );
+
+        $this->setTransports($transports);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer.php	(date 1495187412000)
@@ -0,0 +1,102 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Swift Mailer class.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mailer
+{
+    /** The Transport used to send messages */
+    private $transport;
+
+    /**
+     * Create a new Mailer using $transport for delivery.
+     *
+     * @param Swift_Transport $transport
+     */
+    public function __construct(Swift_Transport $transport)
+    {
+        $this->transport = $transport;
+    }
+
+    /**
+     * Create a new class instance of one of the message services.
+     *
+     * For example 'mimepart' would create a 'message.mimepart' instance
+     *
+     * @param string $service
+     *
+     * @return object
+     */
+    public function createMessage($service = 'message')
+    {
+        return Swift_DependencyContainer::getInstance()
+            ->lookup('message.'.$service);
+    }
+
+    /**
+     * Send the given Message like it would be sent in a mail client.
+     *
+     * All recipients (with the exception of Bcc) will be able to see the other
+     * recipients this message was sent to.
+     *
+     * Recipient/sender data will be retrieved from the Message object.
+     *
+     * The return value is the number of recipients who were accepted for
+     * delivery.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param array                    $failedRecipients An array of failures by-reference
+     *
+     * @return int The number of successful recipients. Can be 0 which indicates failure
+     */
+    public function send(Swift_Mime_SimpleMessage $message, &$failedRecipients = null)
+    {
+        $failedRecipients = (array) $failedRecipients;
+
+        if (!$this->transport->isStarted()) {
+            $this->transport->start();
+        }
+
+        $sent = 0;
+
+        try {
+            $sent = $this->transport->send($message, $failedRecipients);
+        } catch (Swift_RfcComplianceException $e) {
+            foreach ($message->getTo() as $address => $name) {
+                $failedRecipients[] = $address;
+            }
+        }
+
+        return $sent;
+    }
+
+    /**
+     * Register a plugin using a known unique key (e.g. myPlugin).
+     *
+     * @param Swift_Events_EventListener $plugin
+     */
+    public function registerPlugin(Swift_Events_EventListener $plugin)
+    {
+        $this->transport->registerPlugin($plugin);
+    }
+
+    /**
+     * The Transport used to send messages.
+     *
+     * @return Swift_Transport
+     */
+    public function getTransport()
+    {
+        return $this->transport;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/ReplacementFilterFactory.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ReplacementFilterFactory.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ReplacementFilterFactory.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ReplacementFilterFactory.php	(date 1495187412000)
@@ -0,0 +1,27 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Creates StreamFilters.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_ReplacementFilterFactory
+{
+    /**
+     * Create a filter to replace $search with $replace.
+     *
+     * @param mixed $search
+     * @param mixed $replace
+     *
+     * @return Swift_StreamFilter
+     */
+    public function createFilter($search, $replace);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/RfcComplianceException.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/RfcComplianceException.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/RfcComplianceException.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/RfcComplianceException.php	(date 1495187412000)
@@ -0,0 +1,27 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * RFC Compliance Exception class.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_RfcComplianceException extends Swift_SwiftException
+{
+    /**
+     * Create a new RfcComplianceException with $message.
+     *
+     * @param string $message
+     */
+    public function __construct($message)
+    {
+        parent::__construct($message);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/SendmailTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SendmailTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SendmailTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SendmailTransport.php	(date 1495187412000)
@@ -0,0 +1,33 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * SendmailTransport for sending mail through a Sendmail/Postfix (etc..) binary.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_SendmailTransport extends Swift_Transport_SendmailTransport
+{
+    /**
+     * Create a new SendmailTransport, optionally using $command for sending.
+     *
+     * @param string $command
+     */
+    public function __construct($command = '/usr/sbin/sendmail -bs')
+    {
+        call_user_func_array(
+            array($this, 'Swift_Transport_SendmailTransport::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('transport.sendmail')
+            );
+
+        $this->setCommand($command);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signer.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signer.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signer.php	(date 1495187412000)
@@ -0,0 +1,20 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Base Class of Signer Infrastructure.
+ *
+ *
+ * @author Xavier De Cock <xdecock@gmail.com>
+ */
+interface Swift_Signer
+{
+    public function reset();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/NullTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/NullTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/NullTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/NullTransport.php	(date 1495187412000)
@@ -0,0 +1,26 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier <fabien.potencier@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Pretends messages have been sent, but just ignores them.
+ *
+ * @author Fabien Potencier
+ */
+class Swift_NullTransport extends Swift_Transport_NullTransport
+{
+    public function __construct()
+    {
+        call_user_func_array(
+            array($this, 'Swift_Transport_NullTransport::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('transport.null')
+        );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/OutputByteStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/OutputByteStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/OutputByteStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/OutputByteStream.php	(date 1495187412000)
@@ -0,0 +1,46 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An abstract means of reading data.
+ *
+ * Classes implementing this interface may use a subsystem which requires less
+ * memory than working with large strings of data.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_OutputByteStream
+{
+    /**
+     * Reads $length bytes from the stream into a string and moves the pointer
+     * through the stream by $length.
+     *
+     * If less bytes exist than are requested the remaining bytes are given instead.
+     * If no bytes are remaining at all, boolean false is returned.
+     *
+     * @param int $length
+     *
+     * @throws Swift_IoException
+     *
+     * @return string|bool
+     */
+    public function read($length);
+
+    /**
+     * Move the internal read pointer to $byteOffset in the stream.
+     *
+     * @param int $byteOffset
+     *
+     * @throws Swift_IoException
+     *
+     * @return bool
+     */
+    public function setReadPointer($byteOffset);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Preferences.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Preferences.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Preferences.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Preferences.php	(date 1495187412000)
@@ -0,0 +1,100 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Changes some global preference settings in Swift Mailer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Preferences
+{
+    /** Singleton instance */
+    private static $instance = null;
+
+    /** Constructor not to be used */
+    private function __construct()
+    {
+    }
+
+    /**
+     * Gets the instance of Preferences.
+     *
+     * @return self
+     */
+    public static function getInstance()
+    {
+        if (!isset(self::$instance)) {
+            self::$instance = new self();
+        }
+
+        return self::$instance;
+    }
+
+    /**
+     * Set the default charset used.
+     *
+     * @param string $charset
+     *
+     * @return $this
+     */
+    public function setCharset($charset)
+    {
+        Swift_DependencyContainer::getInstance()->register('properties.charset')->asValue($charset);
+
+        return $this;
+    }
+
+    /**
+     * Set the directory where temporary files can be saved.
+     *
+     * @param string $dir
+     *
+     * @return $this
+     */
+    public function setTempDir($dir)
+    {
+        Swift_DependencyContainer::getInstance()->register('tempdir')->asValue($dir);
+
+        return $this;
+    }
+
+    /**
+     * Set the type of cache to use (i.e. "disk" or "array").
+     *
+     * @param string $type
+     *
+     * @return $this
+     */
+    public function setCacheType($type)
+    {
+        Swift_DependencyContainer::getInstance()->register('cache')->asAliasOf(sprintf('cache.%s', $type));
+
+        return $this;
+    }
+
+    /**
+     * Set the QuotedPrintable dot escaper preference.
+     *
+     * @param bool $dotEscape
+     *
+     * @return $this
+     */
+    public function setQPDotEscape($dotEscape)
+    {
+        $dotEscape = !empty($dotEscape);
+        Swift_DependencyContainer::getInstance()
+            ->register('mime.qpcontentencoder')
+            ->asNewInstanceOf('Swift_Mime_ContentEncoder_QpContentEncoder')
+            ->withDependencies(array('mime.charstream', 'mime.bytecanonicalizer'))
+            ->addConstructorValue($dotEscape);
+
+        return $this;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilter.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilter.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilter.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilter.php	(date 1495187412000)
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Processes bytes as they pass through a stream and performs filtering.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_StreamFilter
+{
+    /**
+     * Based on the buffer given, this returns true if more buffering is needed.
+     *
+     * @param mixed $buffer
+     *
+     * @return bool
+     */
+    public function shouldBuffer($buffer);
+
+    /**
+     * Filters $buffer and returns the changes.
+     *
+     * @param mixed $buffer
+     *
+     * @return mixed
+     */
+    public function filter($buffer);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/SwiftException.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SwiftException.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SwiftException.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SwiftException.php	(date 1495187412000)
@@ -0,0 +1,29 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Base Exception class.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_SwiftException extends Exception
+{
+    /**
+     * Create a new SwiftException with $message.
+     *
+     * @param string    $message
+     * @param int       $code
+     * @param Exception $previous
+     */
+    public function __construct($message, $code = 0, Exception $previous = null)
+    {
+        parent::__construct($message, $code, $previous);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/SmtpTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SmtpTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SmtpTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SmtpTransport.php	(date 1495187412000)
@@ -0,0 +1,44 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Sends Messages over SMTP with ESMTP support.
+ *
+ * @author     Chris Corbyn
+ *
+ * @method Swift_SmtpTransport setUsername(string $username) Set the username to authenticate with.
+ * @method string              getUsername()                 Get the username to authenticate with.
+ * @method Swift_SmtpTransport setPassword(string $password) Set the password to authenticate with.
+ * @method string              getPassword()                 Get the password to authenticate with.
+ * @method Swift_SmtpTransport setAuthMode(string $mode)     Set the auth mode to use to authenticate.
+ * @method string              getAuthMode()                 Get the auth mode to use to authenticate.
+ */
+class Swift_SmtpTransport extends Swift_Transport_EsmtpTransport
+{
+    /**
+     * Create a new SmtpTransport, optionally with $host, $port and $security.
+     *
+     * @param string $host
+     * @param int    $port
+     * @param string $security
+     */
+    public function __construct($host = 'localhost', $port = 25, $security = null)
+    {
+        call_user_func_array(
+            array($this, 'Swift_Transport_EsmtpTransport::__construct'),
+            Swift_DependencyContainer::getInstance()
+                ->createDependenciesFor('transport.smtp')
+            );
+
+        $this->setHost($host);
+        $this->setPort($port);
+        $this->setEncryption($security);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Spool.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Spool.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Spool.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Spool.php	(date 1495187412000)
@@ -0,0 +1,53 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier <fabien.potencier@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Interface for spools.
+ *
+ * @author Fabien Potencier
+ */
+interface Swift_Spool
+{
+    /**
+     * Starts this Spool mechanism.
+     */
+    public function start();
+
+    /**
+     * Stops this Spool mechanism.
+     */
+    public function stop();
+
+    /**
+     * Tests if this Spool mechanism has started.
+     *
+     * @return bool
+     */
+    public function isStarted();
+
+    /**
+     * Queues a message.
+     *
+     * @param Swift_Mime_SimpleMessage $message The message to store
+     *
+     * @return bool Whether the operation has succeeded
+     */
+    public function queueMessage(Swift_Mime_SimpleMessage $message);
+
+    /**
+     * Sends messages using the given transport instance.
+     *
+     * @param Swift_Transport $transport        A transport instance
+     * @param string[]        $failedRecipients An array of failures by-reference
+     *
+     * @return int The number of sent emails
+     */
+    public function flushQueue(Swift_Transport $transport, &$failedRecipients = null);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/SpoolTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SpoolTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SpoolTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SpoolTransport.php	(date 1495187412000)
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier <fabien.potencier@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Stores Messages in a queue.
+ *
+ * @author Fabien Potencier
+ */
+class Swift_SpoolTransport extends Swift_Transport_SpoolTransport
+{
+    /**
+     * Create a new SpoolTransport.
+     *
+     * @param Swift_Spool $spool
+     */
+    public function __construct(Swift_Spool $spool)
+    {
+        $arguments = Swift_DependencyContainer::getInstance()
+            ->createDependenciesFor('transport.spool');
+
+        $arguments[] = $spool;
+
+        call_user_func_array(
+            array($this, 'Swift_Transport_SpoolTransport::__construct'),
+            $arguments
+        );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug206Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug206Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug206Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug206Test.php	(date 1495187412000)
@@ -0,0 +1,40 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Bug206Test extends \PHPUnit\Framework\TestCase
+{
+    private $factory;
+
+    protected function setUp()
+    {
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
+        );
+        $paramEncoder = new Swift_Encoder_Rfc2231Encoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
+        );
+        $emailValidator = new EmailValidator();
+        $this->factory = new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $emailValidator);
+    }
+
+    public function testMailboxHeaderEncoding()
+    {
+        $this->doTestHeaderIsFullyEncoded('email@example.org', 'Family Name, Name', ' "Family Name, Name" <email@example.org>');
+        $this->doTestHeaderIsFullyEncoded('email@example.org', 'Family Namé, Name', ' Family =?utf-8?Q?Nam=C3=A9=2C?= Name');
+        $this->doTestHeaderIsFullyEncoded('email@example.org', 'Family Namé , Name', ' Family =?utf-8?Q?Nam=C3=A9_=2C?= Name');
+        $this->doTestHeaderIsFullyEncoded('email@example.org', 'Family Namé ;Name', ' Family =?utf-8?Q?Nam=C3=A9_=3BName?= ');
+    }
+
+    private function doTestHeaderIsFullyEncoded($email, $name, $expected)
+    {
+        $mailboxHeader = $this->factory->createMailboxHeader('To', array(
+            $email => $name,
+        ));
+
+        $headerBody = substr($mailboxHeader->toString(), 3, strlen($expected));
+
+        $this->assertEquals($expected, $headerBody);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug274Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug274Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug274Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug274Test.php	(date 1495187412000)
@@ -0,0 +1,25 @@
+<?php
+
+class Swift_Bug274Test extends \PHPUnit\Framework\TestCase
+{
+    /**
+     * @expectedException \Swift_IoException
+     * @expectedMessageException The path cannot be empty
+     */
+    public function testEmptyFileNameAsAttachment()
+    {
+        $message = new Swift_Message();
+        $message->attach(Swift_Attachment::fromPath(''));
+    }
+
+    public function testNonEmptyFileNameAsAttachment()
+    {
+        $message = new Swift_Message();
+        try {
+            $message->attach(Swift_Attachment::fromPath(__FILE__));
+        } catch (Exception $e) {
+            $this->fail('Path should not be empty');
+        }
+        $this->addToAssertionCount(1);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug34Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug34Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug34Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug34Test.php	(date 1495187412000)
@@ -0,0 +1,75 @@
+<?php
+
+class Swift_Bug34Test extends \PHPUnit\Framework\TestCase
+{
+    protected function setUp()
+    {
+        Swift_Preferences::getInstance()->setCharset('utf-8');
+    }
+
+    public function testEmbeddedFilesWithMultipartDataCreateMultipartRelatedContentAsAnAlternative()
+    {
+        $message = new Swift_Message();
+        $message->setCharset('utf-8');
+        $message->setSubject('test subject');
+        $message->addPart('plain part', 'text/plain');
+
+        $image = new Swift_Image('<image data>', 'image.gif', 'image/gif');
+        $cid = $message->embed($image);
+
+        $message->setBody('<img src="'.$cid.'" />', 'text/html');
+
+        $message->setTo(array('user@domain.tld' => 'User'));
+
+        $message->setFrom(array('other@domain.tld' => 'Other'));
+        $message->setSender(array('other@domain.tld' => 'Other'));
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+        $cidVal = $image->getId();
+
+        $this->assertRegExp(
+        '~^'.
+        'Sender: Other <other@domain.tld>'."\r\n".
+        'Message-ID: <'.$id.'>'."\r\n".
+        'Date: '.$date."\r\n".
+        'Subject: test subject'."\r\n".
+        'From: Other <other@domain.tld>'."\r\n".
+        'To: User <user@domain.tld>'."\r\n".
+        'MIME-Version: 1.0'."\r\n".
+        'Content-Type: multipart/alternative;'."\r\n".
+        ' boundary="'.$boundary.'"'."\r\n".
+        "\r\n\r\n".
+        '--'.$boundary."\r\n".
+        'Content-Type: text/plain; charset=utf-8'."\r\n".
+        'Content-Transfer-Encoding: quoted-printable'."\r\n".
+        "\r\n".
+        'plain part'.
+        "\r\n\r\n".
+        '--'.$boundary."\r\n".
+        'Content-Type: multipart/related;'."\r\n".
+        ' boundary="(.*?)"'."\r\n".
+        "\r\n\r\n".
+        '--\\1'."\r\n".
+        'Content-Type: text/html; charset=utf-8'."\r\n".
+        'Content-Transfer-Encoding: quoted-printable'."\r\n".
+        "\r\n".
+        '<img.*?/>'.
+        "\r\n\r\n".
+        '--\\1'."\r\n".
+        'Content-Type: image/gif; name=image.gif'."\r\n".
+        'Content-Transfer-Encoding: base64'."\r\n".
+        'Content-ID: <'.$cidVal.'>'."\r\n".
+        'Content-Disposition: inline; filename=image.gif'."\r\n".
+        "\r\n".
+        preg_quote(base64_encode('<image data>'), '~').
+        "\r\n\r\n".
+        '--\\1--'."\r\n".
+        "\r\n\r\n".
+        '--'.$boundary.'--'."\r\n".
+        '$~D',
+        $message->toString()
+        );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug35Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug35Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug35Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug35Test.php	(date 1495187412000)
@@ -0,0 +1,73 @@
+<?php
+
+class Swift_Bug35Test extends \PHPUnit\Framework\TestCase
+{
+    protected function setUp()
+    {
+        Swift_Preferences::getInstance()->setCharset('utf-8');
+    }
+
+    public function testHTMLPartAppearsLastEvenWhenAttachmentsAdded()
+    {
+        $message = new Swift_Message();
+        $message->setCharset('utf-8');
+        $message->setSubject('test subject');
+        $message->addPart('plain part', 'text/plain');
+
+        $attachment = new Swift_Attachment('<data>', 'image.gif', 'image/gif');
+        $message->attach($attachment);
+
+        $message->setBody('HTML part', 'text/html');
+
+        $message->setTo(array('user@domain.tld' => 'User'));
+
+        $message->setFrom(array('other@domain.tld' => 'Other'));
+        $message->setSender(array('other@domain.tld' => 'Other'));
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+
+        $this->assertRegExp(
+        '~^'.
+        'Sender: Other <other@domain.tld>'."\r\n".
+        'Message-ID: <'.$id.'>'."\r\n".
+        'Date: '.$date."\r\n".
+        'Subject: test subject'."\r\n".
+        'From: Other <other@domain.tld>'."\r\n".
+        'To: User <user@domain.tld>'."\r\n".
+        'MIME-Version: 1.0'."\r\n".
+        'Content-Type: multipart/mixed;'."\r\n".
+        ' boundary="'.$boundary.'"'."\r\n".
+        "\r\n\r\n".
+        '--'.$boundary."\r\n".
+        'Content-Type: multipart/alternative;'."\r\n".
+        ' boundary="(.*?)"'."\r\n".
+        "\r\n\r\n".
+        '--\\1'."\r\n".
+        'Content-Type: text/plain; charset=utf-8'."\r\n".
+        'Content-Transfer-Encoding: quoted-printable'."\r\n".
+        "\r\n".
+        'plain part'.
+        "\r\n\r\n".
+        '--\\1'."\r\n".
+        'Content-Type: text/html; charset=utf-8'."\r\n".
+        'Content-Transfer-Encoding: quoted-printable'."\r\n".
+        "\r\n".
+        'HTML part'.
+        "\r\n\r\n".
+        '--\\1--'."\r\n".
+        "\r\n\r\n".
+        '--'.$boundary."\r\n".
+        'Content-Type: image/gif; name=image.gif'."\r\n".
+        'Content-Transfer-Encoding: base64'."\r\n".
+        'Content-Disposition: attachment; filename=image.gif'."\r\n".
+        "\r\n".
+        preg_quote(base64_encode('<data>'), '~').
+        "\r\n\r\n".
+        '--'.$boundary.'--'."\r\n".
+        '$~D',
+        $message->toString()
+        );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport.php	(date 1495187412000)
@@ -0,0 +1,77 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Sends Messages via an abstract Transport subsystem.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Transport
+{
+    /**
+     * Test if this Transport mechanism has started.
+     *
+     * @return bool
+     */
+    public function isStarted();
+
+    /**
+     * Start this Transport mechanism.
+     */
+    public function start();
+
+    /**
+     * Stop this Transport mechanism.
+     */
+    public function stop();
+
+    /**
+     * Check if this Transport mechanism is alive.
+     *
+     * If a Transport mechanism session is no longer functional, the method
+     * returns FALSE. It is the responsibility of the developer to handle this
+     * case and restart the Transport mechanism manually.
+     *
+     * @example
+     *
+     *   if (!$transport->ping()) {
+     *      $transport->stop();
+     *      $transport->start();
+     *   }
+     *
+     * The Transport mechanism will be started, if it is not already.
+     *
+     * It is undefined if the Transport mechanism attempts to restart as long as
+     * the return value reflects whether the mechanism is now functional.
+     *
+     * @return bool TRUE if the transport is alive
+     */
+    public function ping();
+
+    /**
+     * Send the given Message.
+     *
+     * Recipient/sender data will be retrieved from the Message API.
+     * The return value is the number of recipients who were accepted for delivery.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string[]           $failedRecipients An array of failures by-reference
+     *
+     * @return int
+     */
+    public function send(Swift_Mime_SimpleMessage $message, &$failedRecipients = null);
+
+    /**
+     * Register a plugin in the Transport.
+     *
+     * @param Swift_Events_EventListener $plugin
+     */
+    public function registerPlugin(Swift_Events_EventListener $plugin);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/TransportException.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/TransportException.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/TransportException.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/TransportException.php	(date 1495187412000)
@@ -0,0 +1,29 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * TransportException thrown when an error occurs in the Transport subsystem.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_TransportException extends Swift_IoException
+{
+    /**
+     * Create a new TransportException with $message.
+     *
+     * @param string    $message
+     * @param int       $code
+     * @param Exception $previous
+     */
+    public function __construct($message, $code = 0, Exception $previous = null)
+    {
+        parent::__construct($message, $code, $previous);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug111Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug111Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug111Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug111Test.php	(date 1495187412000)
@@ -0,0 +1,42 @@
+<?php
+
+class Swift_Bug111Test extends \PHPUnit\Framework\TestCase
+{
+    public function testUnstructuredHeaderSlashesShouldNotBeEscaped()
+    {
+        $complicated_header = array(
+            'to' => array(
+                'email1@example.com',
+                'email2@example.com',
+                'email3@example.com',
+                'email4@example.com',
+                'email5@example.com',
+            ),
+            'sub' => array(
+                '-name-' => array(
+                    'email1',
+                    '"email2"',
+                    'email3\\',
+                    'email4',
+                    'email5',
+                ),
+                '-url-' => array(
+                    'http://google.com',
+                    'http://yahoo.com',
+                    'http://hotmail.com',
+                    'http://aol.com',
+                    'http://facebook.com',
+                ),
+            ),
+        );
+        $json = json_encode($complicated_header);
+
+        $message = new Swift_Message();
+        $headers = $message->getHeaders();
+        $headers->addTextHeader('X-SMTPAPI', $json);
+        $header = $headers->get('X-SMTPAPI');
+
+        $this->assertEquals('Swift_Mime_Headers_UnstructuredHeader', get_class($header));
+        $this->assertEquals($json, $header->getFieldBody());
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug118Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug118Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug118Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug118Test.php	(date 1495187412000)
@@ -0,0 +1,20 @@
+<?php
+
+class Swift_Bug118Test extends \PHPUnit\Framework\TestCase
+{
+    private $message;
+
+    protected function setUp()
+    {
+        $this->message = new Swift_Message();
+    }
+
+    public function testCallingGenerateIdChangesTheMessageId()
+    {
+        $currentId = $this->message->getId();
+        $this->message->generateId();
+        $newId = $this->message->getId();
+
+        $this->assertNotEquals($currentId, $newId);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug650Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug650Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug650Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug650Test.php	(date 1495187412000)
@@ -0,0 +1,38 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Bug650Test extends \PHPUnit\Framework\TestCase
+{
+    /**
+     * @dataProvider encodingDataProvider
+     *
+     * @param string $name
+     * @param string $expectedEncodedName
+     */
+    public function testMailboxHeaderEncoding($name, $expectedEncodedName)
+    {
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $charStream = new Swift_CharacterStream_NgCharacterStream($factory, 'utf-8');
+        $encoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder($charStream);
+        $header = new Swift_Mime_Headers_MailboxHeader('To', $encoder, new EmailValidator());
+        $header->setCharset('utf-8');
+
+        $header->setNameAddresses(array(
+            'test@example.com' => $name,
+        ));
+
+        $this->assertSame('To: '.$expectedEncodedName." <test@example.com>\r\n", $header->toString());
+    }
+
+    public function encodingDataProvider()
+    {
+        return array(
+            array('this is " a test ö', 'this is =?utf-8?Q?=22?= a test =?utf-8?Q?=C3=B6?='),
+            array(': this is a test ö', '=?utf-8?Q?=3A?= this is a test =?utf-8?Q?=C3=B6?='),
+            array('( test ö', '=?utf-8?Q?=28?= test =?utf-8?Q?=C3=B6?='),
+            array('[ test ö', '=?utf-8?Q?=5B?= test =?utf-8?Q?=C3=B6?='),
+            array('@ test ö)', '=?utf-8?Q?=40?= test =?utf-8?Q?=C3=B6=29?='),
+        );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug71Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug71Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug71Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug71Test.php	(date 1495187412000)
@@ -0,0 +1,20 @@
+<?php
+
+class Swift_Bug71Test extends \PHPUnit\Framework\TestCase
+{
+    private $message;
+
+    protected function setUp()
+    {
+        $this->message = new Swift_Message('test');
+    }
+
+    public function testCallingToStringAfterSettingNewBodyReflectsChanges()
+    {
+        $this->message->setBody('BODY1');
+        $this->assertRegExp('/BODY1/', $this->message->toString());
+
+        $this->message->setBody('BODY2');
+        $this->assertRegExp('/BODY2/', $this->message->toString());
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug76Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug76Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug76Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug76Test.php	(date 1495187412000)
@@ -0,0 +1,71 @@
+<?php
+
+class Swift_Bug76Test extends \PHPUnit\Framework\TestCase
+{
+    private $inputFile;
+    private $outputFile;
+    private $encoder;
+
+    protected function setUp()
+    {
+        $this->inputFile = sys_get_temp_dir().'/in.bin';
+        file_put_contents($this->inputFile, '');
+
+        $this->outputFile = sys_get_temp_dir().'/out.bin';
+        file_put_contents($this->outputFile, '');
+
+        $this->encoder = $this->createEncoder();
+    }
+
+    protected function tearDown()
+    {
+        unlink($this->inputFile);
+        unlink($this->outputFile);
+    }
+
+    public function testBase64EncodedLineLengthNeverExceeds76CharactersEvenIfArgsDo()
+    {
+        $this->fillFileWithRandomBytes(1000, $this->inputFile);
+
+        $os = $this->createStream($this->inputFile);
+        $is = $this->createStream($this->outputFile);
+
+        $this->encoder->encodeByteStream($os, $is, 0, 80); //Exceeds 76
+
+        $this->assertMaxLineLength(76, $this->outputFile,
+            '%s: Line length should not exceed 76 characters'
+        );
+    }
+
+    public function assertMaxLineLength($length, $filePath, $message = '%s')
+    {
+        $lines = file($filePath);
+        foreach ($lines as $line) {
+            $this->assertTrue((strlen(trim($line)) <= 76), $message);
+        }
+    }
+
+    private function fillFileWithRandomBytes($byteCount, $file)
+    {
+        // I was going to use dd with if=/dev/random but this way seems more
+        // cross platform even if a hella expensive!!
+
+        file_put_contents($file, '');
+        $fp = fopen($file, 'wb');
+        for ($i = 0; $i < $byteCount; ++$i) {
+            $byteVal = rand(0, 255);
+            fwrite($fp, pack('i', $byteVal));
+        }
+        fclose($fp);
+    }
+
+    private function createEncoder()
+    {
+        return new Swift_Mime_ContentEncoder_Base64ContentEncoder();
+    }
+
+    private function createStream($file)
+    {
+        return new Swift_ByteStream_FileByteStream($file, true);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/BugFileByteStreamConsecutiveReadCallsTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/BugFileByteStreamConsecutiveReadCallsTest.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/BugFileByteStreamConsecutiveReadCallsTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/BugFileByteStreamConsecutiveReadCallsTest.php	(date 1495187412000)
@@ -0,0 +1,18 @@
+<?php
+
+class Swift_FileByteStreamConsecutiveReadCalls extends \PHPUnit\Framework\TestCase
+{
+    /**
+     * @test
+     * @expectedException \Swift_IoException
+     */
+    public function shouldThrowExceptionOnConsecutiveRead()
+    {
+        $fbs = new \Swift_ByteStream_FileByteStream('does not exist');
+        try {
+            $fbs->read(100);
+        } catch (\Swift_IoException $exc) {
+            $fbs->read(100);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug38Test.php	(date 1495187412000)
@@ -0,0 +1,192 @@
+<?php
+
+class Swift_Bug38Test extends \PHPUnit\Framework\TestCase
+{
+    private $attFile;
+    private $attFileName;
+    private $attFileType;
+
+    protected function setUp()
+    {
+        $this->attFileName = 'data.txt';
+        $this->attFileType = 'text/plain';
+        $this->attFile = __DIR__.'/../../_samples/files/data.txt';
+        Swift_Preferences::getInstance()->setCharset('utf-8');
+    }
+
+    public function testWritingMessageToByteStreamProducesCorrectStructure()
+    {
+        $message = new Swift_Message();
+        $message->setSubject('test subject');
+        $message->setTo('user@domain.tld');
+        $message->setCc('other@domain.tld');
+        $message->setFrom('user@domain.tld');
+
+        $image = new Swift_Image('<data>', 'image.gif', 'image/gif');
+
+        $cid = $message->embed($image);
+        $message->setBody('HTML part', 'text/html');
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+        $imgId = $image->getId();
+
+        $stream = new Swift_ByteStream_ArrayByteStream();
+
+        $message->toByteStream($stream);
+
+        $this->assertPatternInStream(
+            '~^'.
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: test subject'."\r\n".
+            'From: user@domain.tld'."\r\n".
+            'To: user@domain.tld'."\r\n".
+            'Cc: other@domain.tld'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/related;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/html; charset=utf-8'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'HTML part'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: image/gif; name=image.gif'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.preg_quote($imgId, '~').'>'."\r\n".
+            'Content-Disposition: inline; filename=image.gif'."\r\n".
+            "\r\n".
+            preg_quote(base64_encode('<data>'), '~').
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n".
+            '$~D',
+            $stream
+        );
+    }
+
+    public function testWritingMessageToByteStreamTwiceProducesCorrectStructure()
+    {
+        $message = new Swift_Message();
+        $message->setSubject('test subject');
+        $message->setTo('user@domain.tld');
+        $message->setCc('other@domain.tld');
+        $message->setFrom('user@domain.tld');
+
+        $image = new Swift_Image('<data>', 'image.gif', 'image/gif');
+
+        $cid = $message->embed($image);
+        $message->setBody('HTML part', 'text/html');
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+        $imgId = $image->getId();
+
+        $pattern = '~^'.
+        'Message-ID: <'.$id.'>'."\r\n".
+        'Date: '.$date."\r\n".
+        'Subject: test subject'."\r\n".
+        'From: user@domain.tld'."\r\n".
+        'To: user@domain.tld'."\r\n".
+        'Cc: other@domain.tld'."\r\n".
+        'MIME-Version: 1.0'."\r\n".
+        'Content-Type: multipart/related;'."\r\n".
+        ' boundary="'.$boundary.'"'."\r\n".
+        "\r\n\r\n".
+        '--'.$boundary."\r\n".
+        'Content-Type: text/html; charset=utf-8'."\r\n".
+        'Content-Transfer-Encoding: quoted-printable'."\r\n".
+        "\r\n".
+        'HTML part'.
+        "\r\n\r\n".
+        '--'.$boundary."\r\n".
+        'Content-Type: image/gif; name=image.gif'."\r\n".
+        'Content-Transfer-Encoding: base64'."\r\n".
+        'Content-ID: <'.preg_quote($imgId, '~').'>'."\r\n".
+        'Content-Disposition: inline; filename=image.gif'."\r\n".
+        "\r\n".
+        preg_quote(base64_encode('<data>'), '~').
+        "\r\n\r\n".
+        '--'.$boundary.'--'."\r\n".
+        '$~D'
+        ;
+
+        $streamA = new Swift_ByteStream_ArrayByteStream();
+        $streamB = new Swift_ByteStream_ArrayByteStream();
+
+        $message->toByteStream($streamA);
+        $message->toByteStream($streamB);
+
+        $this->assertPatternInStream($pattern, $streamA);
+        $this->assertPatternInStream($pattern, $streamB);
+    }
+
+    public function testWritingMessageToByteStreamTwiceUsingAFileAttachment()
+    {
+        $message = new Swift_Message();
+        $message->setSubject('test subject');
+        $message->setTo('user@domain.tld');
+        $message->setCc('other@domain.tld');
+        $message->setFrom('user@domain.tld');
+
+        $attachment = Swift_Attachment::fromPath($this->attFile);
+
+        $message->attach($attachment);
+
+        $message->setBody('HTML part', 'text/html');
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+
+        $streamA = new Swift_ByteStream_ArrayByteStream();
+        $streamB = new Swift_ByteStream_ArrayByteStream();
+
+        $pattern = '~^'.
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: test subject'."\r\n".
+            'From: user@domain.tld'."\r\n".
+            'To: user@domain.tld'."\r\n".
+            'Cc: other@domain.tld'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/mixed;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/html; charset=utf-8'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'HTML part'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: '.$this->attFileType.'; name='.$this->attFileName."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; filename='.$this->attFileName."\r\n".
+            "\r\n".
+            preg_quote(base64_encode(file_get_contents($this->attFile)), '~').
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n".
+            '$~D'
+            ;
+
+        $message->toByteStream($streamA);
+        $message->toByteStream($streamB);
+
+        $this->assertPatternInStream($pattern, $streamA);
+        $this->assertPatternInStream($pattern, $streamB);
+    }
+
+    public function assertPatternInStream($pattern, $stream, $message = '%s')
+    {
+        $string = '';
+        while (false !== $bytes = $stream->read(8192)) {
+            $string .= $bytes;
+        }
+        $this->assertRegExp($pattern, $string, $message);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug518Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug518Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug518Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug518Test.php	(date 1495187412000)
@@ -0,0 +1,38 @@
+<?php
+
+use Mockery as m;
+
+class Swift_Bug518Test extends \SwiftMailerTestCase
+{
+    public function testIfEmailChangesAfterQueued()
+    {
+        $failedRecipients = 'value';
+        $message = new Swift_Message();
+        $message->setTo('foo@bar.com');
+
+        $that = $this;
+        $messageValidation = function ($m) use ($that) {
+            //the getTo should return the same value as we put in
+            $that->assertEquals('foo@bar.com', key($m->getTo()), 'The message has changed after it was put to the memory queue');
+
+            return true;
+        };
+
+        $transport = m::mock('Swift_Transport');
+        $transport->shouldReceive('isStarted')->andReturn(true);
+        $transport->shouldReceive('send')
+            ->with(m::on($messageValidation), $failedRecipients)
+            ->andReturn(1);
+
+        $memorySpool = new Swift_MemorySpool();
+        $memorySpool->queueMessage($message);
+
+        /*
+         * The message is queued in memory.
+         * Lets change the message
+         */
+        $message->setTo('other@value.com');
+
+        $memorySpool->flushQueue($transport, $failedRecipients);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug51Test.php	(date 1495187412000)
@@ -0,0 +1,110 @@
+<?php
+
+class Swift_Bug51Test extends \SwiftMailerTestCase
+{
+    private $attachmentFile;
+    private $outputFile;
+
+    protected function setUp()
+    {
+        $this->attachmentFile = sys_get_temp_dir().'/attach.rand.bin';
+        file_put_contents($this->attachmentFile, '');
+
+        $this->outputFile = sys_get_temp_dir().'/attach.out.bin';
+        file_put_contents($this->outputFile, '');
+    }
+
+    protected function tearDown()
+    {
+        unlink($this->attachmentFile);
+        unlink($this->outputFile);
+    }
+
+    public function testAttachmentsDoNotGetTruncatedUsingToByteStream()
+    {
+        //Run 100 times with 10KB attachments
+        for ($i = 0; $i < 10; ++$i) {
+            $message = $this->createMessageWithRandomAttachment(
+                10000, $this->attachmentFile
+            );
+
+            file_put_contents($this->outputFile, '');
+            $message->toByteStream(
+                new Swift_ByteStream_FileByteStream($this->outputFile, true)
+            );
+
+            $emailSource = file_get_contents($this->outputFile);
+
+            $this->assertAttachmentFromSourceMatches(
+                file_get_contents($this->attachmentFile),
+                $emailSource
+            );
+        }
+    }
+
+    public function testAttachmentsDoNotGetTruncatedUsingToString()
+    {
+        //Run 100 times with 10KB attachments
+        for ($i = 0; $i < 10; ++$i) {
+            $message = $this->createMessageWithRandomAttachment(
+                10000, $this->attachmentFile
+            );
+
+            $emailSource = $message->toString();
+
+            $this->assertAttachmentFromSourceMatches(
+                file_get_contents($this->attachmentFile),
+                $emailSource
+            );
+        }
+    }
+
+    public function assertAttachmentFromSourceMatches($attachmentData, $source)
+    {
+        $encHeader = 'Content-Transfer-Encoding: base64';
+        $base64declaration = strpos($source, $encHeader);
+
+        $attachmentDataStart = strpos($source, "\r\n\r\n", $base64declaration);
+        $attachmentDataEnd = strpos($source, "\r\n--", $attachmentDataStart);
+
+        if (false === $attachmentDataEnd) {
+            $attachmentBase64 = trim(substr($source, $attachmentDataStart));
+        } else {
+            $attachmentBase64 = trim(substr(
+                $source, $attachmentDataStart,
+                $attachmentDataEnd - $attachmentDataStart
+            ));
+        }
+
+        $this->assertIdenticalBinary($attachmentData, base64_decode($attachmentBase64));
+    }
+
+    private function fillFileWithRandomBytes($byteCount, $file)
+    {
+        // I was going to use dd with if=/dev/random but this way seems more
+        // cross platform even if a hella expensive!!
+
+        file_put_contents($file, '');
+        $fp = fopen($file, 'wb');
+        for ($i = 0; $i < $byteCount; ++$i) {
+            $byteVal = rand(0, 255);
+            fwrite($fp, pack('i', $byteVal));
+        }
+        fclose($fp);
+    }
+
+    private function createMessageWithRandomAttachment($size, $attachmentPath)
+    {
+        $this->fillFileWithRandomBytes($size, $attachmentPath);
+
+        $message = (new Swift_Message())
+            ->setSubject('test')
+            ->setBody('test')
+            ->setFrom('a@b.c')
+            ->setTo('d@e.f')
+            ->attach(Swift_Attachment::fromPath($attachmentPath))
+            ;
+
+        return $message;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug534Test.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug534Test.php b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug534Test.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/bug/Swift/Bug534Test.php	(date 1495187412000)
@@ -0,0 +1,38 @@
+<?php
+
+use Mockery as m;
+
+class Swift_Bug534Test extends \SwiftMailerTestCase
+{
+    public function testEmbeddedImagesAreEmbedded()
+    {
+        $message = (new Swift_Message())
+            ->setFrom('from@example.com')
+            ->setTo('to@example.com')
+            ->setSubject('test')
+        ;
+        $cid = $message->embed(Swift_Image::fromPath(__DIR__.'/../../_samples/files/swiftmailer.png'));
+        $message->setBody('<img src="'.$cid.'" />', 'text/html');
+
+        $that = $this;
+        $messageValidation = function (Swift_Mime_SimpleMessage $message) use ($that) {
+            preg_match('/cid:(.*)"/', $message->toString(), $matches);
+            $cid = $matches[1];
+            preg_match('/Content-ID: <(.*)>/', $message->toString(), $matches);
+            $contentId = $matches[1];
+            $that->assertEquals($cid, $contentId, 'cid in body and mime part Content-ID differ');
+
+            return true;
+        };
+
+        $failedRecipients = array();
+
+        $transport = m::mock('Swift_Transport');
+        $transport->shouldReceive('isStarted')->andReturn(true);
+        $transport->shouldReceive('send')->with(m::on($messageValidation), $failedRecipients)->andReturn(1);
+
+        $memorySpool = new Swift_MemorySpool();
+        $memorySpool->queueMessage($message);
+        $memorySpool->flushQueue($transport, $failedRecipients);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/DependencyContainerTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/DependencyContainerTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/DependencyContainerTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/DependencyContainerTest.php	(date 1495187412000)
@@ -0,0 +1,176 @@
+<?php
+
+class One
+{
+    public $arg1;
+    public $arg2;
+
+    public function __construct($arg1 = null, $arg2 = null)
+    {
+        $this->arg1 = $arg1;
+        $this->arg2 = $arg2;
+    }
+}
+
+class Swift_DependencyContainerTest extends \PHPUnit\Framework\TestCase
+{
+    private $container;
+
+    protected function setUp()
+    {
+        $this->container = new Swift_DependencyContainer();
+    }
+
+    public function testRegisterAndLookupValue()
+    {
+        $this->container->register('foo')->asValue('bar');
+        $this->assertEquals('bar', $this->container->lookup('foo'));
+    }
+
+    public function testHasReturnsTrueForRegisteredValue()
+    {
+        $this->container->register('foo')->asValue('bar');
+        $this->assertTrue($this->container->has('foo'));
+    }
+
+    public function testHasReturnsFalseForUnregisteredValue()
+    {
+        $this->assertFalse($this->container->has('foo'));
+    }
+
+    public function testRegisterAndLookupNewInstance()
+    {
+        $this->container->register('one')->asNewInstanceOf('One');
+        $this->assertInstanceOf('One', $this->container->lookup('one'));
+    }
+
+    public function testHasReturnsTrueForRegisteredInstance()
+    {
+        $this->container->register('one')->asNewInstanceOf('One');
+        $this->assertTrue($this->container->has('one'));
+    }
+
+    public function testNewInstanceIsAlwaysNew()
+    {
+        $this->container->register('one')->asNewInstanceOf('One');
+        $a = $this->container->lookup('one');
+        $b = $this->container->lookup('one');
+        $this->assertEquals($a, $b);
+    }
+
+    public function testRegisterAndLookupSharedInstance()
+    {
+        $this->container->register('one')->asSharedInstanceOf('One');
+        $this->assertInstanceOf('One', $this->container->lookup('one'));
+    }
+
+    public function testHasReturnsTrueForSharedInstance()
+    {
+        $this->container->register('one')->asSharedInstanceOf('One');
+        $this->assertTrue($this->container->has('one'));
+    }
+
+    public function testMultipleSharedInstancesAreSameInstance()
+    {
+        $this->container->register('one')->asSharedInstanceOf('One');
+        $a = $this->container->lookup('one');
+        $b = $this->container->lookup('one');
+        $this->assertEquals($a, $b);
+    }
+
+    public function testNewInstanceWithDependencies()
+    {
+        $this->container->register('foo')->asValue('FOO');
+        $this->container->register('one')->asNewInstanceOf('One')
+            ->withDependencies(array('foo'));
+        $obj = $this->container->lookup('one');
+        $this->assertSame('FOO', $obj->arg1);
+    }
+
+    public function testNewInstanceWithMultipleDependencies()
+    {
+        $this->container->register('foo')->asValue('FOO');
+        $this->container->register('bar')->asValue(42);
+        $this->container->register('one')->asNewInstanceOf('One')
+            ->withDependencies(array('foo', 'bar'));
+        $obj = $this->container->lookup('one');
+        $this->assertSame('FOO', $obj->arg1);
+        $this->assertSame(42, $obj->arg2);
+    }
+
+    public function testNewInstanceWithInjectedObjects()
+    {
+        $this->container->register('foo')->asValue('FOO');
+        $this->container->register('one')->asNewInstanceOf('One');
+        $this->container->register('two')->asNewInstanceOf('One')
+            ->withDependencies(array('one', 'foo'));
+        $obj = $this->container->lookup('two');
+        $this->assertEquals($this->container->lookup('one'), $obj->arg1);
+        $this->assertSame('FOO', $obj->arg2);
+    }
+
+    public function testNewInstanceWithAddConstructorValue()
+    {
+        $this->container->register('one')->asNewInstanceOf('One')
+            ->addConstructorValue('x')
+            ->addConstructorValue(99);
+        $obj = $this->container->lookup('one');
+        $this->assertSame('x', $obj->arg1);
+        $this->assertSame(99, $obj->arg2);
+    }
+
+    public function testNewInstanceWithAddConstructorLookup()
+    {
+        $this->container->register('foo')->asValue('FOO');
+        $this->container->register('bar')->asValue(42);
+        $this->container->register('one')->asNewInstanceOf('One')
+            ->addConstructorLookup('foo')
+            ->addConstructorLookup('bar');
+
+        $obj = $this->container->lookup('one');
+        $this->assertSame('FOO', $obj->arg1);
+        $this->assertSame(42, $obj->arg2);
+    }
+
+    public function testResolvedDependenciesCanBeLookedUp()
+    {
+        $this->container->register('foo')->asValue('FOO');
+        $this->container->register('one')->asNewInstanceOf('One');
+        $this->container->register('two')->asNewInstanceOf('One')
+            ->withDependencies(array('one', 'foo'));
+        $deps = $this->container->createDependenciesFor('two');
+        $this->assertEquals(
+            array($this->container->lookup('one'), 'FOO'), $deps
+            );
+    }
+
+    public function testArrayOfDependenciesCanBeSpecified()
+    {
+        $this->container->register('foo')->asValue('FOO');
+        $this->container->register('one')->asNewInstanceOf('One');
+        $this->container->register('two')->asNewInstanceOf('One')
+            ->withDependencies(array(array('one', 'foo'), 'foo'));
+
+        $obj = $this->container->lookup('two');
+        $this->assertEquals(array($this->container->lookup('one'), 'FOO'), $obj->arg1);
+        $this->assertSame('FOO', $obj->arg2);
+    }
+
+    public function testAliasCanBeSet()
+    {
+        $this->container->register('foo')->asValue('FOO');
+        $this->container->register('bar')->asAliasOf('foo');
+
+        $this->assertSame('FOO', $this->container->lookup('bar'));
+    }
+
+    public function testAliasOfAliasCanBeSet()
+    {
+        $this->container->register('foo')->asValue('FOO');
+        $this->container->register('bar')->asAliasOf('foo');
+        $this->container->register('zip')->asAliasOf('bar');
+        $this->container->register('button')->asAliasOf('zip');
+
+        $this->assertSame('FOO', $this->container->lookup('button'));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/MailerTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/MailerTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/MailerTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/MailerTest.php	(date 1495187412000)
@@ -0,0 +1,145 @@
+<?php
+
+class Swift_MailerTest extends \SwiftMailerTestCase
+{
+    public function testTransportIsStartedWhenSending()
+    {
+        $transport = $this->createTransport();
+        $message = $this->createMessage();
+
+        $started = false;
+        $transport->shouldReceive('isStarted')
+                  ->zeroOrMoreTimes()
+                  ->andReturnUsing(function () use (&$started) {
+                      return $started;
+                  });
+        $transport->shouldReceive('start')
+                  ->once()
+                  ->andReturnUsing(function () use (&$started) {
+                      $started = true;
+
+                      return;
+                  });
+
+        $mailer = $this->createMailer($transport);
+        $mailer->send($message);
+    }
+
+    public function testTransportIsOnlyStartedOnce()
+    {
+        $transport = $this->createTransport();
+        $message = $this->createMessage();
+
+        $started = false;
+        $transport->shouldReceive('isStarted')
+                  ->zeroOrMoreTimes()
+                  ->andReturnUsing(function () use (&$started) {
+                      return $started;
+                  });
+        $transport->shouldReceive('start')
+                  ->once()
+                  ->andReturnUsing(function () use (&$started) {
+                      $started = true;
+
+                      return;
+                  });
+
+        $mailer = $this->createMailer($transport);
+        for ($i = 0; $i < 10; ++$i) {
+            $mailer->send($message);
+        }
+    }
+
+    public function testMessageIsPassedToTransport()
+    {
+        $transport = $this->createTransport();
+        $message = $this->createMessage();
+        $transport->shouldReceive('send')
+                  ->once()
+                  ->with($message, \Mockery::any());
+
+        $mailer = $this->createMailer($transport);
+        $mailer->send($message);
+    }
+
+    public function testSendReturnsCountFromTransport()
+    {
+        $transport = $this->createTransport();
+        $message = $this->createMessage();
+        $transport->shouldReceive('send')
+                  ->once()
+                  ->with($message, \Mockery::any())
+                  ->andReturn(57);
+
+        $mailer = $this->createMailer($transport);
+        $this->assertEquals(57, $mailer->send($message));
+    }
+
+    public function testFailedRecipientReferenceIsPassedToTransport()
+    {
+        $failures = array();
+
+        $transport = $this->createTransport();
+        $message = $this->createMessage();
+        $transport->shouldReceive('send')
+                  ->once()
+                  ->with($message, $failures)
+                  ->andReturn(57);
+
+        $mailer = $this->createMailer($transport);
+        $mailer->send($message, $failures);
+    }
+
+    public function testSendRecordsRfcComplianceExceptionAsEntireSendFailure()
+    {
+        $failures = array();
+
+        $rfcException = new Swift_RfcComplianceException('test');
+        $transport = $this->createTransport();
+        $message = $this->createMessage();
+        $message->shouldReceive('getTo')
+                  ->once()
+                  ->andReturn(array('foo&invalid' => 'Foo', 'bar@valid.tld' => 'Bar'));
+        $transport->shouldReceive('send')
+                  ->once()
+                  ->with($message, $failures)
+                  ->andThrow($rfcException);
+
+        $mailer = $this->createMailer($transport);
+        $this->assertEquals(0, $mailer->send($message, $failures), '%s: Should return 0');
+        $this->assertEquals(array('foo&invalid', 'bar@valid.tld'), $failures, '%s: Failures should contain all addresses since the entire message failed to compile');
+    }
+
+    public function testRegisterPluginDelegatesToTransport()
+    {
+        $plugin = $this->createPlugin();
+        $transport = $this->createTransport();
+        $mailer = $this->createMailer($transport);
+
+        $transport->shouldReceive('registerPlugin')
+                  ->once()
+                  ->with($plugin);
+
+        $mailer->registerPlugin($plugin);
+    }
+
+    private function createPlugin()
+    {
+        return $this->getMockery('Swift_Events_EventListener')->shouldIgnoreMissing();
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockery('Swift_Transport')->shouldIgnoreMissing();
+    }
+
+    private function createMessage()
+    {
+        return $this->getMockery('Swift_Mime_SimpleMessage')->shouldIgnoreMissing();
+    }
+
+    private function createMailer(Swift_Transport $transport)
+    {
+        return new Swift_Mailer($transport);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/MessageTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/MessageTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/MessageTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/MessageTest.php	(date 1495187412000)
@@ -0,0 +1,133 @@
+<?php
+
+class Swift_MessageTest extends \PHPUnit\Framework\TestCase
+{
+    public function testCloning()
+    {
+        $message1 = new Swift_Message('subj', 'body', 'ctype');
+        $message2 = new Swift_Message('subj', 'body', 'ctype');
+        $message1_clone = clone $message1;
+
+        $this->recursiveObjectCloningCheck($message1, $message2, $message1_clone);
+        // the test above will fail if the two messages are not identical
+        $this->addToAssertionCount(1);
+    }
+
+    public function testCloningWithSigners()
+    {
+        $message1 = new Swift_Message('subj', 'body', 'ctype');
+        $signer = new Swift_Signers_DKIMSigner(dirname(dirname(__DIR__)).'/_samples/dkim/dkim.test.priv', 'test.example', 'example');
+        $message1->attachSigner($signer);
+        $message2 = new Swift_Message('subj', 'body', 'ctype');
+        $signer = new Swift_Signers_DKIMSigner(dirname(dirname(__DIR__)).'/_samples/dkim/dkim.test.priv', 'test.example', 'example');
+        $message2->attachSigner($signer);
+        $message1_clone = clone $message1;
+
+        $this->recursiveObjectCloningCheck($message1, $message2, $message1_clone);
+        // the test above will fail if the two messages are not identical
+        $this->addToAssertionCount(1);
+    }
+
+    public function testBodySwap()
+    {
+        $message1 = new Swift_Message('Test');
+        $html = new Swift_MimePart('<html></html>', 'text/html');
+        $html->getHeaders()->addTextHeader('X-Test-Remove', 'Test-Value');
+        $html->getHeaders()->addTextHeader('X-Test-Alter', 'Test-Value');
+        $message1->attach($html);
+        $source = $message1->toString();
+        $message2 = clone $message1;
+        $message2->setSubject('Message2');
+        foreach ($message2->getChildren() as $child) {
+            $child->setBody('Test');
+            $child->getHeaders()->removeAll('X-Test-Remove');
+            $child->getHeaders()->get('X-Test-Alter')->setValue('Altered');
+        }
+        $final = $message1->toString();
+        if ($source != $final) {
+            $this->fail("Difference although object cloned \n [".$source."]\n[".$final."]\n");
+        }
+        $final = $message2->toString();
+        if ($final == $source) {
+            $this->fail('Two body matches although they should differ'."\n [".$source."]\n[".$final."]\n");
+        }
+        $id_1 = $message1->getId();
+        $id_2 = $message2->getId();
+        $this->assertEquals($id_1, $id_2, 'Message Ids differ');
+        $id_2 = $message2->generateId();
+        $this->assertNotEquals($id_1, $id_2, 'Message Ids are the same');
+    }
+
+    protected function recursiveObjectCloningCheck($obj1, $obj2, $obj1_clone)
+    {
+        $obj1_properties = (array) $obj1;
+        $obj2_properties = (array) $obj2;
+        $obj1_clone_properties = (array) $obj1_clone;
+
+        foreach ($obj1_properties as $property => $value) {
+            if (is_object($value)) {
+                $obj1_value = $obj1_properties[$property];
+                $obj2_value = $obj2_properties[$property];
+                $obj1_clone_value = $obj1_clone_properties[$property];
+
+                if ($obj1_value !== $obj2_value) {
+                    // two separetely instanciated objects property not referencing same object
+                    $this->assertFalse(
+                        // but object's clone does - not everything copied
+                        $obj1_value === $obj1_clone_value,
+                        "Property `$property` cloning error: source and cloned objects property is referencing same object"
+                    );
+                } else {
+                    // two separetely instanciated objects have same reference
+                    $this->assertFalse(
+                        // but object's clone doesn't - overdone making copies
+                        $obj1_value !== $obj1_clone_value,
+                        "Property `$property` not properly cloned: it should reference same object as cloning source (overdone copping)"
+                    );
+                }
+                // recurse
+                $this->recursiveObjectCloningCheck($obj1_value, $obj2_value, $obj1_clone_value);
+            } elseif (is_array($value)) {
+                $obj1_value = $obj1_properties[$property];
+                $obj2_value = $obj2_properties[$property];
+                $obj1_clone_value = $obj1_clone_properties[$property];
+
+                return $this->recursiveArrayCloningCheck($obj1_value, $obj2_value, $obj1_clone_value);
+            }
+        }
+    }
+
+    protected function recursiveArrayCloningCheck($array1, $array2, $array1_clone)
+    {
+        foreach ($array1 as $key => $value) {
+            if (is_object($value)) {
+                $arr1_value = $array1[$key];
+                $arr2_value = $array2[$key];
+                $arr1_clone_value = $array1_clone[$key];
+                if ($arr1_value !== $arr2_value) {
+                    // two separetely instanciated objects property not referencing same object
+                    $this->assertFalse(
+                        // but object's clone does - not everything copied
+                        $arr1_value === $arr1_clone_value,
+                        "Key `$key` cloning error: source and cloned objects property is referencing same object"
+                    );
+                } else {
+                    // two separetely instanciated objects have same reference
+                    $this->assertFalse(
+                        // but object's clone doesn't - overdone making copies
+                        $arr1_value !== $arr1_clone_value,
+                        "Key `$key` not properly cloned: it should reference same object as cloning source (overdone copping)"
+                    );
+                }
+                // recurse
+                $this->recursiveObjectCloningCheck($arr1_value, $arr2_value, $arr1_clone_value);
+            } elseif (is_array($value)) {
+                $arr1_value = $array1[$key];
+                $arr2_value = $array2[$key];
+                $arr1_clone_value = $array1_clone[$key];
+
+                return $this->recursiveArrayCloningCheck($arr1_value, $arr2_value, $arr1_clone_value);
+            }
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/ca.crt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/ca.crt b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/ca.crt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/ca.crt	(date 1495187412000)
@@ -0,0 +1,21 @@
+-----BEGIN CERTIFICATE-----
+MIIDazCCAlOgAwIBAgIJAKJCGQYLxWT1MA0GCSqGSIb3DQEBBQUAMEwxFzAVBgNV
+BAMMDlN3aWZ0bWFpbGVyIENBMRQwEgYDVQQKDAtTd2lmdG1haWxlcjEOMAwGA1UE
+BwwFUGFyaXMxCzAJBgNVBAYTAkZSMB4XDTEzMTEyNzA4MzkxMFoXDTE3MTEyNjA4
+MzkxMFowTDEXMBUGA1UEAwwOU3dpZnRtYWlsZXIgQ0ExFDASBgNVBAoMC1N3aWZ0
+bWFpbGVyMQ4wDAYDVQQHDAVQYXJpczELMAkGA1UEBhMCRlIwggEiMA0GCSqGSIb3
+DQEBAQUAA4IBDwAwggEKAoIBAQC7RLdHE3OWo9aZwv1xA/cYyPui/gegxpTqClRp
+gGcVQ+jxIfnJQDQndyoAvFDiqOiZ+gAjZGJeUHDp9C/2IZp05MLh+omt9N8pBykm
+3nj/3ZwPXOAO0uyDPAOHhISITAxEuZCqDnq7iYujywtwfQ7bpW1hCK9PfNZYMStM
+kw7LsGr5BqcKkPuOWTvxE3+NqK8HxydYolsoApEGhgonyImVh1Pg1Kjkt5ojvwAX
+zOdjfw5poY5NArwuLORUH+XocetRo8DC6S42HkU/MoqcYxa9EuRuwuQh7GtE6baR
+PgrDsEYaY4Asy43sK81V51F/8Q1bHZKN/goQdxQwzv+/nOLTAgMBAAGjUDBOMB0G
+A1UdDgQWBBRHgqkl543tKhsVAvcx1I0JFU7JuDAfBgNVHSMEGDAWgBRHgqkl543t
+KhsVAvcx1I0JFU7JuDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQAz
+OJiEQcygKGkkXXDiXGBvP/cSznj3nG9FolON0yHUBgdvLfNnctRMStGzPke0siLt
+RJvjqiL0Uw+blmLJU8lgMyLJ9ctXkiLJ/WflabN7VzmwYRWe5HzafGQJAg5uFjae
+VtAAHQgvbmdXB6brWvcMQmB8di7wjVedeigZvkt1z2V0FtBy8ybJaT5H6bX9Bf5C
+dS9r4mLhk/0ThthpRhRxsmupSL6e49nJaIk9q0UTEQVnorJXPcs4SPTIY51bCp6u
+cOebhNgndSxCiy0zSD7vRjNiyB/YNGZ9Uv/3DNTLleMZ9kZgfoKVpwYKrRL0IFT/
+cfS2OV1wxRxq668qaOfK
+-----END CERTIFICATE-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/ca.key
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/ca.key b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/ca.key
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/ca.key	(date 1495187412000)
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEogIBAAKCAQEAu0S3RxNzlqPWmcL9cQP3GMj7ov4HoMaU6gpUaYBnFUPo8SH5
+yUA0J3cqALxQ4qjomfoAI2RiXlBw6fQv9iGadOTC4fqJrfTfKQcpJt54/92cD1zg
+DtLsgzwDh4SEiEwMRLmQqg56u4mLo8sLcH0O26VtYQivT3zWWDErTJMOy7Bq+Qan
+CpD7jlk78RN/jaivB8cnWKJbKAKRBoYKJ8iJlYdT4NSo5LeaI78AF8znY38OaaGO
+TQK8LizkVB/l6HHrUaPAwukuNh5FPzKKnGMWvRLkbsLkIexrROm2kT4Kw7BGGmOA
+LMuN7CvNVedRf/ENWx2Sjf4KEHcUMM7/v5zi0wIDAQABAoIBAGyaWkvu/O7Uz2TW
+z1JWgVuvWzfYaKYV5FCicvfITn/npVUKZikPge+NTR+mFqaMXHDHqoLb+axGrGUR
+hysPq9q0vEx/lo763tyVWYlAJh4E8Dd8njganK0zBbz23kGJEOheUYY95XGTQBda
+bqTq8c3x7zAB8GGBvXDh+wFqm38GLyMF6T+YEzWJZqXfg31f1ldRvf6+VFwlLfz6
+cvTR7oUpYIsUeGE47kBs13SN7Oju6a355o/7wy9tOCRiu+r/ikXFh8rFGLfeTiwv
+R1dhYjcEYGxZUD8u64U+Cj4qR1P0gHJL0kbh22VMMqgALOc8FpndkjNdg1Nun2X8
+BWpsPwECgYEA7C9PfTOIZfxGBlCl05rmWex++/h5E5PbH1Cw/NGjIH1HjmAkO3+5
+WyMXhySOJ8yWyCBQ/nxqc0w7+TO4C7wQcEdZdUak25KJ74v0sfmWWrVw6kcnLU6k
+oawW/L2F2w7ET3zDoxKh4fOF34pfHpSbZk7XJ68YOfHpYVnP4efkQVMCgYEAyvrM
+KA7xjnsKumWh206ag3QEI0M/9uPHWmrh2164p7w1MtawccZTxYYJ5o5SsjTwbxkf
+0cAamp4qLInmRUxU1gk76tPYC3Ndp6Yf1C+dt0q/vtzyJetCDrdz8HHT1SpKbW0l
+g6z1I5FMwa6oWvWsfS++W51vsxUheNsOJ4uxKIECgYBwM7GRiw+7U3N4wItm0Wmp
+Qp642Tu7vzwTzmOmV3klkB6UVrwfv/ewgiVFQGqAIcNn42JW44g2qfq70oQWnws4
+K80l15+t6Bm7QUPH4Qg6o4O26IKGFZxEadqpyudyP7um/2B5cfqRuvzYS4YQowyI
+N+AirB3YOUJjyyTk7yMSnQKBgGNLpSvDg6+ryWe96Bwcq8G6s3t8noHsk81LlAl4
+oOSNUYj5NX+zAbATDizXWuUKuMPgioxVaa5RyVfYbelgme/KvKD32Sxg12P4BIIM
+eR79VifMdjjOiZYhcHojdPlGovo89qkfpxwrLF1jT8CPhj4HaRvwPIBiyekRYC9A
+Sv4BAoGAXCIC1xxAJP15osUuQjcM8KdsL1qw+LiPB2+cJJ2VMAZGV7CR2K0aCsis
+OwRaYM0jZKUpxzp1uwtfrfqbhdYsv+jIBkfwoShYZuo6MhbUrj0sffkhJC3WrT2z
+xafCFLFv1idzGvvNxatlp1DNKrndG2NS3syVAox9MnL5OMsvGM8=
+-----END RSA PRIVATE KEY-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/CA.srl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/CA.srl b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/CA.srl
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/CA.srl	(date 1495187412000)
@@ -0,0 +1,1 @@
+D42DA34CF90FA0DE
Index: vendor/swiftmailer/swiftmailer/tests/_samples/dkim/dkim.test.priv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/dkim/dkim.test.priv b/vendor/swiftmailer/swiftmailer/tests/_samples/dkim/dkim.test.priv
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/dkim/dkim.test.priv	(date 1495187412000)
@@ -0,0 +1,15 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIICXAIBAAKBgQDZeUdi1RKnm9cRYNn6E24xxrRTouh3Va8JOEHQ5SB018lvbjwH
+2lW5mZ/I0kh/dHsTN0zcN0VE62WIbnLreMk/af/4Pg1i93+c9TmfXmoropsmdLos
+w0tjq50jGbBqtHZNJYAokP/u3uUuRw8g0V/O4zlQ3GlO/PDH7xDQzekl9wIDAQAB
+AoGAaoCBXD5a72hbb/BNb7HaUlgscZUjYWW93bcGTGYZef8/b+m9Tl83gjhgzvlk
+db62k1eOtX3/11uskp78eqLhctv7yWc0mQQhgOogY2qCwHTCH8wja8kJkUAnKQhs
+P9sa5iJvgckiuX3SdxgTMwib9d1VyGq6YywiORiZF9rxyhECQQD/xhiZSi7y0ciB
+g4bassy0GVMS7EDRumMHc8wC23E1H2mj5yPE/QLqkW4ddmCv2BbJnYmyNvOaK9tk
+T2W+mn3/AkEA2aqDGja9CaTlY4BCXfiT166n+xVl5+d+1DENQ4FK9O2jpSi1265J
+tjEkXVxUOpV1ZEcUVOdK6RpvsKpc7vVICQJBALEFO5UsQJ4SD0GD9Ft8kCy9sj9Q
+f/Qnmc5YmIQJuKpZmVW07Y6yxcfu61U8zuIlHnBftiM/4Q18+RTN1s86QaUCQHoL
+9MTfCnH85q46/XuJZQRbp07O+bvlfqTl+CTwuyHImaiCwi2ydRxWQ6ihm4zZvuAC
+RvEwWz2HGDc73y4RlFkCQDDdnN9e46l1nMDLDI4cyyGBVg4Z2IZ3IAu5GaoUCGjM
+a8w6kxE8f1d8DD5vvqVbmfK89TA/DjT+7/arBNBCiCM=
+-----END RSA PRIVATE KEY-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/dkim/dkim.test.pub
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/dkim/dkim.test.pub b/vendor/swiftmailer/swiftmailer/tests/_samples/dkim/dkim.test.pub
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/dkim/dkim.test.pub	(date 1495187412000)
@@ -0,0 +1,6 @@
+-----BEGIN PUBLIC KEY-----
+MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZeUdi1RKnm9cRYNn6E24xxrRT
+ouh3Va8JOEHQ5SB018lvbjwH2lW5mZ/I0kh/dHsTN0zcN0VE62WIbnLreMk/af/4
+Pg1i93+c9TmfXmoropsmdLosw0tjq50jGbBqtHZNJYAokP/u3uUuRw8g0V/O4zlQ
+3GlO/PDH7xDQzekl9wIDAQAB
+-----END PUBLIC KEY-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/files/data.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/files/data.txt b/vendor/swiftmailer/swiftmailer/tests/_samples/files/data.txt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/files/data.txt	(date 1495187412000)
@@ -0,0 +1,1 @@
+<data>
\ No newline at end of file
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt2.key
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt2.key b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt2.key
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt2.key	(date 1495187412000)
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEpAIBAAKCAQEAw4AoYVYss2sa1BWJAJpK6gVemjXrp1mVXVpb1/z6SH15AGsp
+3kiNXsMpgvsdofbqC/5HXrw2G8gWqo+uh6GuK67+Tvp7tO2aD4+8CZzUK1cffj7P
+bx95DUPwXckv79PT5ZcuyeFaVo92aug11+gS/P8n0WXSlzZxNuZ1f3G2r/IgwfNK
+ZlarEf1Ih781L2SwmyveW/dtsV2pdrd4IZwsV5SOF2zBFIXSuhPN0c+mmtwSJe+O
+w1udLX4KJkAX8sGVFJ5P5q4s2nS9vLkkj7X6YRQscbyJO9L7e1TksRqLDLxZwiko
+6gUhp4/bIs1wDj5tzkQBi4qXviRq3i7A9b2d0QIDAQABAoIBAH8RvK1PmqxfkEeL
+W8oVf13OcafgJjRW6NuNkKa5mmAlldFs1gDRvXl7dm7ZE3CjkYqMEw2DXdP+4KSp
+0TH9J7zi+A6ThnaZ/QniTcEdu1YUQbcH0kIS/dZec0wyKUNDtrXC5zl2jQY4Jyrj
+laOpBzaEDfhvq0p3q2yYrIRSgACpSEVEsfPoHrxtlLhfMkVNe8P0nkQkzdwou5MQ
+MZKV4JUopLHLgPH6IXQCqA1wzlU32yZ86w88GFcBVLkwlLJCKbuAo7yxMCD+nzvA
+xm5NuF1kzpP0gk+kZRXF+rFEV4av/2kSS+n8IeUBQZrxovLBuQHVDvJXoqcEjmlh
+ZUltznUCgYEA4inwieePfb7kh7L/ma5OLLn+uCNwzVw9LayzXT1dyPravOnkHl6h
+MgaoTspqDyU8k8pStedRrr5dVYbseni/A4WSMGvi4innqSXBQGp64TyeJy/e+LrS
+ypSWQ6RSJkCxI5t8s4mOpR7FMcdE34I5qeA4G5RS1HIacn7Hxc7uXtcCgYEA3Uqn
+E7EDfNfYdZm6AikvE6x64oihWI0x47rlkLu6lf6ihiF1dbfaEN+IAaIxQ/unGYwU
+130F0TUwarXnVkeBIRlij4fXhExyd7USSQH1VpqmIqDwsS2ojrzQVMo5UcH+A22G
+bbHPtwJNmw8a7yzTPWo2/vnjgV2OaXEQ9vCVG5cCgYEAu1kEoihJDGBijSqxY4wp
+xBE7OSxamDNtlnV2i6l3FDMBmfaieqnnHDq5l7NDklJFUSQLyhXZ60hUprHDGV0G
+1pMCW8wzQSh3d/4HjSXnrsd5N3sHWMHiNeBKbbQkPP3f/2AhN9SebpgDwE2S9xe4
+TsmnkOkYiFYRJIFzWaAmhDcCgYEAwxRCgZt0xaPKULG6RpljxOYyVm24PsYKCwYB
+xjuYWw5k2/W3BJWVCXblAPuojpPUVTMmVGkErc9D5W6Ch471iOZF+t334cs6xci8
+W9v8GeKvPqu+Q5NKmrpctcKoESkA8qik7yLnSCAhpeYFCn/roKJ35QMJyktddhqU
+p/yilfUCgYBxZ6YmFjYH6l5SxQdcfa5JQ2To8lZCfRJwB65EyWj4pKH4TaWFS7vb
+50WOGTBwJgyhTKLCO3lOmXIUyIwC+OO9xzaeRCBjqEhpup/Ih3MsfMEd6BZRVK5E
+IxtmIWba5HQ52k8FKHeRrRB7PSVSADUN2pUFkLudH+j/01kSZyJoLA==
+-----END RSA PRIVATE KEY-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/intermediate.crt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/intermediate.crt b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/intermediate.crt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/intermediate.crt	(date 1495187412000)
@@ -0,0 +1,19 @@
+-----BEGIN CERTIFICATE-----
+MIIDFjCCAf4CAQEwDQYJKoZIhvcNAQEFBQAwTDEXMBUGA1UEAwwOU3dpZnRtYWls
+ZXIgQ0ExFDASBgNVBAoMC1N3aWZ0bWFpbGVyMQ4wDAYDVQQHDAVQYXJpczELMAkG
+A1UEBhMCRlIwHhcNMTQxMTIwMTMyNTQxWhcNMTgxMTE5MTMyNTQxWjBWMSEwHwYD
+VQQDDBhTd2lmdG1haWxlciBJbnRlcm1lZGlhdGUxFDASBgNVBAoMC1N3aWZ0bWFp
+bGVyMQ4wDAYDVQQHDAVQYXJpczELMAkGA1UEBhMCRlIwggEiMA0GCSqGSIb3DQEB
+AQUAA4IBDwAwggEKAoIBAQDSgEhftX6f1wV+uqWl4J+zwCn8fHaLZT6GZ0Gs9ThE
+4e+4mkLG1rvSEIJon8U0ic8Zph1UGa1Grveh5bgbldHlFxYSsCCyDGgixRvRWNhI
+KuO+SxaIZChqqKwVn3aNQ4BZOSo/MjJ/jQyr9BMgMmdxlHR3e1wkkeAkW//sOsfu
+xQGF1h9yeQvuu/GbG6K7vHSGOGd5O3G7bftfQ7l78TMqeJ7jV32AdJeuO5MD4dRn
+W4CQLTaeribLN0MKn35UdSiFoZxKHqqWcgtl5xcJWPOmq6CsAJ2Eo90kW/BHOrLv
+10h6Oan9R1PdXSvSCvVnXY3Kz30zofw305oA/KJk/hVzAgMBAAEwDQYJKoZIhvcN
+AQEFBQADggEBABijZ2NNd05Js5VFNr4uyaydam9Yqu/nnrxbPRbAXPlCduydu2Gd
+d1ekn3nblMJ87Bc7zVyHdAQD8/AfS1LOKuoWHpTzmlpIL+8T5sbCYG5J1jKdeLkh
+7L/UD5v1ACgA33oKtN8GzcrIq8Zp73r0n+c3hFCfDYRSZRCxGyIf3qgU2LBOD0A3
+wTff/N8E/p3WaJX9VnuQ7xyRMOubDuqJnlo5YsFv7wjyGOIAz9afZzcEbH6czt/t
+g0Xc/kGr/fkAjUu+z3ZfE4247Gut5m3hEVwWkpEEzQo4osX/BEX20Q2nPz9WBq4a
+pK3qNNGwAqS4gdE3ihOExMWxAKgr9d2CcU4=
+-----END CERTIFICATE-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/intermediate.key
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/intermediate.key b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/intermediate.key
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/intermediate.key	(date 1495187412000)
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEpQIBAAKCAQEA0oBIX7V+n9cFfrqlpeCfs8Ap/Hx2i2U+hmdBrPU4ROHvuJpC
+xta70hCCaJ/FNInPGaYdVBmtRq73oeW4G5XR5RcWErAgsgxoIsUb0VjYSCrjvksW
+iGQoaqisFZ92jUOAWTkqPzIyf40Mq/QTIDJncZR0d3tcJJHgJFv/7DrH7sUBhdYf
+cnkL7rvxmxuiu7x0hjhneTtxu237X0O5e/EzKnie41d9gHSXrjuTA+HUZ1uAkC02
+nq4myzdDCp9+VHUohaGcSh6qlnILZecXCVjzpqugrACdhKPdJFvwRzqy79dIejmp
+/UdT3V0r0gr1Z12Nys99M6H8N9OaAPyiZP4VcwIDAQABAoIBAQDLJiKyu2XIvKsA
+8wCKZY262+mpUjTVso/1BhHL6Zy0XZgMgFORsgrxYB16+zZGzfiguD/1uhIP9Svn
+gtt7Q8udW/phbrkfG/okFDYUg7m3bCz+qVjFqGOZC8+Hzq2LB2oGsbSj6L3zexyP
+lq4elIZghvUfml4CrQW0EVWbld79/kF7XHABcIOk2+3f63XAQWkjdFNxj5+z6TR0
+52Rv7SmRioAsukW9wr77G3Luv/0cEzDFXgGW5s0wO+rJg28smlsIaj+Y0KsptTig
+reQvReAT/S5ZxEp4H6WtXQ1WmaliMB0Gcu4TKB0yE8DoTeCePuslo9DqGokXYT66
+oqtcVMqBAoGBAPoOL9byNNU/bBNDWSCiq8PqhSjl0M4vYBGqtgMXM4GFOJU+W2nX
+YRJbbxoSd/DKjnxEsR6V0vDTDHj4ZSkgmpEmVhEdAiwUwaZ0T8YUaCPhdiAENo5+
+zRBWVJcvAC2XKTK1hy5D7Z5vlC32HHygYqitU+JsK4ylvhrdeOcGx5cfAoGBANeB
+X0JbeuqBEwwEHZqYSpzmtB+IEiuYc9ARTttHEvIWgCThK4ldAzbXhDUIQy3Hm0sL
+PzDA33furNl2WwB+vmOuioYMNjArKrfg689Aim1byg4AHM5XVQcqoDSOABtI55iP
+E0hYDe/d4ema2gk1uR/mT4pnLnk2VzRKsHUbP9stAoGBAKjyIuJwPMADnMqbC0Hg
+hnrVHejW9TAJlDf7hgQqjdMppmQ3gF3PdjeH7VXJOp5GzOQrKRxIEABEJ74n3Xlf
+HO+K3kWrusb7syb6mNd0/DOZ5kyVbCL0iypJmdeXmuAyrFQlj9LzdD1Cl/RBv1d4
+qY/bo7xsZzQc24edMU2uJ/XzAoGBAMHChA95iK5HlwR6vtM8kfk4REMFaLDhxV8R
+8MCeyp33NQfzm91JT5aDd07nOt9yVGHInuwKveFrKuXq0C9FxZCCYfHcEOyGI0Zo
+aBxTfyKMIMMtvriXNM/Yt2oJMndVuUUlfsTQxtcfu/r5S4h0URopTOK3msVI4mcV
+sEnaUjORAoGAGDnslKYtROQMXTe4sh6CoJ32J8UZVV9M+8NLus9rO0v/eZ/pIFxo
+MXGrrrl51ScqahCQ+DXHzpLvInsdlAJvDP3ymhb7H2xGsyvb3x2YgsLmr1YVOnli
+ISbCssno3vZyFU1TDjeEIKqZHc92byHNMjMuhmlaA25g8kb0cCO76EA=
+-----END RSA PRIVATE KEY-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign.crt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign.crt b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign.crt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign.crt	(date 1495187412000)
@@ -0,0 +1,19 @@
+-----BEGIN CERTIFICATE-----
+MIIDFjCCAf4CCQDULaNM+Q+g3DANBgkqhkiG9w0BAQUFADBMMRcwFQYDVQQDDA5T
+d2lmdG1haWxlciBDQTEUMBIGA1UECgwLU3dpZnRtYWlsZXIxDjAMBgNVBAcMBVBh
+cmlzMQswCQYDVQQGEwJGUjAeFw0xMzExMjcwODM5MTBaFw0xNzExMjYwODM5MTBa
+ME4xGTAXBgNVBAMMEFN3aWZ0bWFpbGVyLVVzZXIxFDASBgNVBAoMC1N3aWZ0bWFp
+bGVyMQ4wDAYDVQQHDAVQYXJpczELMAkGA1UEBhMCRlIwggEiMA0GCSqGSIb3DQEB
+AQUAA4IBDwAwggEKAoIBAQCTe8ZouyjVGgqlljhaswYqLj7icMoHq+Qg13CE+zJg
+tl2/UzyPhAd3WWOIvlQ0lu+E/n0bXrS6+q28DrQ3UgJ9BskzzLz15qUO12b92AvG
+vLJ+9kKuiM5KXDljOAsXc7/A9UUGwEFA1D0mkeMmkHuiQavAMkzBLha22hGpg/hz
+VbE6W9MGna0szd8yh38IY1M5uR+OZ0dG3KbVZb7H3N0OLOP8j8n+4YtAGAW+Onz/
+2CGPfZ1kaDMvY/WTZwyGeA4FwCPy1D8tfeswqKnWDB9Sfl8hns5VxnoJ3dqKQHeX
+iC4OMfQ0U4CcuM5sVYJZRNNwP7/TeUh3HegnOnuZ1hy9AgMBAAEwDQYJKoZIhvcN
+AQEFBQADggEBAAEPjGt98GIK6ecAEat52aG+8UP7TuZaxoH3cbZdhFTafrP8187F
+Rk5G3LCPTeA/QIzbHppA4fPAiS07OVSwVCknpTJbtKKn0gmtTZxThacFHF2NlzTH
+XxM5bIbkK3jzIF+WattyTSj34UHHfaNAmvmS7Jyq6MhjSDbcQ+/dZ9eo2tF/AmrC
++MBhyH8aUYwKhTOQQh8yC11niziHhGO99FQ4tpuD9AKlun5snHq4uK9AOFe8VhoR
+q2CqX5g5v8OAtdlvzhp50IqD4BNOP+JrUxjGLHDG76BZZIK2Ai1eBz+GhRlIQru/
+8EhQzd94mdFEPblGbmuD2QXWLFFKLiYOwOc=
+-----END CERTIFICATE-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/create-cert.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/create-cert.sh b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/create-cert.sh
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/create-cert.sh	(date 1495187412000)
@@ -0,0 +1,40 @@
+#!/bin/sh
+
+openssl genrsa -out CA.key 2048
+openssl req -x509 -new -nodes -key CA.key -days 1460 -subj '/CN=Swiftmailer CA/O=Swiftmailer/L=Paris/C=FR' -out CA.crt
+openssl x509 -in CA.crt -clrtrust -out CA.crt
+
+openssl genrsa -out sign.key 2048
+openssl req -new -key sign.key -subj '/CN=Swiftmailer-User/O=Swiftmailer/L=Paris/C=FR' -out sign.csr
+openssl x509 -req -in sign.csr -CA CA.crt -CAkey CA.key -out sign.crt -days 1460 -addtrust emailProtection
+openssl x509 -in sign.crt -clrtrust -out sign.crt
+
+rm sign.csr
+
+openssl genrsa -out intermediate.key 2048
+openssl req -new -key intermediate.key -subj '/CN=Swiftmailer Intermediate/O=Swiftmailer/L=Paris/C=FR' -out intermediate.csr
+openssl x509 -req -in intermediate.csr -CA CA.crt -CAkey CA.key -set_serial 01 -out intermediate.crt -days 1460
+openssl x509 -in intermediate.crt -clrtrust -out intermediate.crt
+
+rm intermediate.csr
+
+openssl genrsa -out sign2.key 2048
+openssl req -new -key sign2.key -subj '/CN=Swiftmailer-User2/O=Swiftmailer/L=Paris/C=FR' -out sign2.csr
+openssl x509 -req -in sign2.csr -CA intermediate.crt -CAkey intermediate.key -set_serial 01 -out sign2.crt -days 1460 -addtrust emailProtection
+openssl x509 -in sign2.crt -clrtrust -out sign2.crt
+
+rm sign2.csr
+
+openssl genrsa -out encrypt.key 2048
+openssl req -new -key encrypt.key -subj '/CN=Swiftmailer-User/O=Swiftmailer/L=Paris/C=FR' -out encrypt.csr
+openssl x509 -req -in encrypt.csr -CA CA.crt -CAkey CA.key -CAcreateserial -out encrypt.crt -days 1460 -addtrust emailProtection
+openssl x509 -in encrypt.crt -clrtrust -out encrypt.crt
+
+rm encrypt.csr
+
+openssl genrsa -out encrypt2.key 2048
+openssl req -new -key encrypt2.key -subj '/CN=Swiftmailer-User2/O=Swiftmailer/L=Paris/C=FR' -out encrypt2.csr
+openssl x509 -req -in encrypt2.csr -CA CA.crt -CAkey CA.key -CAcreateserial -out encrypt2.crt -days 1460 -addtrust emailProtection
+openssl x509 -in encrypt2.crt -clrtrust -out encrypt2.crt
+
+rm encrypt2.csr
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt.crt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt.crt b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt.crt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt.crt	(date 1495187412000)
@@ -0,0 +1,19 @@
+-----BEGIN CERTIFICATE-----
+MIIDFjCCAf4CCQDULaNM+Q+g3TANBgkqhkiG9w0BAQUFADBMMRcwFQYDVQQDDA5T
+d2lmdG1haWxlciBDQTEUMBIGA1UECgwLU3dpZnRtYWlsZXIxDjAMBgNVBAcMBVBh
+cmlzMQswCQYDVQQGEwJGUjAeFw0xMzExMjcwODM5MTFaFw0xNzExMjYwODM5MTFa
+ME4xGTAXBgNVBAMMEFN3aWZ0bWFpbGVyLVVzZXIxFDASBgNVBAoMC1N3aWZ0bWFp
+bGVyMQ4wDAYDVQQHDAVQYXJpczELMAkGA1UEBhMCRlIwggEiMA0GCSqGSIb3DQEB
+AQUAA4IBDwAwggEKAoIBAQCcNO+fVZBT2znmVwXXZ08n3G5WA1kyvqh9z4RBBZOD
+V46Gc1X9MMXr9+wzZBFkAckKaa6KsTkeUr4pC8XUBpQnakxH/kW9CaDPdOE+7wNo
+FkPfc6pjWWgpAVxdkrtk7pb4/aGQ++HUkqVu0cMpIcj/7ht7H+3QLZHybn+oMr2+
+FDnn8vPmHxVioinSrxKTlUITuLWS9ZZUTrDa0dG8UAv55A/Tba4T4McCPDpJSA4m
+9jrW321NGQUntQoItOJxagaueSvh6PveGV826gTXoU5X+YJ3I2OZUEQ2l6yByAzf
+nT+QlxPj5ikotFwL72HsenYtetynOO/k43FblAF/V/l7AgMBAAEwDQYJKoZIhvcN
+AQEFBQADggEBAJ048Sdb9Sw5OJM5L00OtGHgcT1B/phqdzSjkM/s64cg3Q20VN+F
+fZIIkOnxgyYWcpOWXcdNw2tm5OWhWPGsBcYgMac7uK/ukgoOJSjICg+TTS5kRo96
+iHtmImqkWc6WjNODh7uMnQ6DsZsscdl7Bkx5pKhgGnEdHr5GW8sztgXgyPQO5LUs
+YzCmR1RK1WoNMxwbPrGLgYdcpJw69ns5hJbZbMWwrdufiMjYWvTfBPABkk1JRCcY
+K6rRTAx4fApsw1kEIY8grGxyAzfRXLArpro7thJr0SIquZ8GpXkQT/mgRR8JD9Hp
+z9yhr98EnKzITE/yclGN4pUsuk9S3jiyzUU=
+-----END CERTIFICATE-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt.key
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt.key b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt.key
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt.key	(date 1495187412000)
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEpAIBAAKCAQEAnDTvn1WQU9s55lcF12dPJ9xuVgNZMr6ofc+EQQWTg1eOhnNV
+/TDF6/fsM2QRZAHJCmmuirE5HlK+KQvF1AaUJ2pMR/5FvQmgz3ThPu8DaBZD33Oq
+Y1loKQFcXZK7ZO6W+P2hkPvh1JKlbtHDKSHI/+4bex/t0C2R8m5/qDK9vhQ55/Lz
+5h8VYqIp0q8Sk5VCE7i1kvWWVE6w2tHRvFAL+eQP022uE+DHAjw6SUgOJvY61t9t
+TRkFJ7UKCLTicWoGrnkr4ej73hlfNuoE16FOV/mCdyNjmVBENpesgcgM350/kJcT
+4+YpKLRcC+9h7Hp2LXrcpzjv5ONxW5QBf1f5ewIDAQABAoIBADmuMm2botfUM+Ui
+bT3FIC2P8A5C3kUmsgEDB8sazAXL5w0uuanswKkJu2aepO1Q23PE4nbESlswIpf1
+iO9qHnsPfWt4MThEveTdO++JQrDEx/tTMq/M6/F4VysWa6wxjf4Taf2nhRSBsiTh
+wDcICri2q98jQyWELkhfFTR+yCHPsn6iNtzE2OpNv9ojKiSqck/sVjC39Z+uU/HD
+N4v0CPf9pDGkO+modaVGKf2TpvZT7Hpq/jsPzkk1h7BY7aWdZiIY4YkBkWYqZk8f
+0dsxKkOR2glfuEYNtcywG+4UGx3i1AY0mMu96hH5M1ACFmFrTCoodmWDnWy9wUpm
+leLmG8ECgYEAywWdryqcvLyhcmqHbnmUhCL9Vl4/5w5fr/5/FNvqArxSGwd2CxcN
+Jtkvu22cxWAUoe155eMc6GlPIdNRG8KdWg4sg0TN3Jb2jiHQ3QkHXUJlWU6onjP1
+g2n5h052JxVNGBEb7hr3U7ZMW6wnuYnGdYwCB9P3r5oGxxtfVRB8ygUCgYEAxPfy
+tAd3SNT8Sv/cciw76GYKbztUjJRXkLo6GOBGq/AQxP1NDWMuL2AES11YIahidMsF
+TMmM+zhkNHsd5P69p87FTMWx0cLoH0M9iQNK7Q6C1luTjLf5DTFuk+nHGErM4Drs
++6Ly1Z4KLXfXgBDD8Ce6U9+W3RrCc36poGZvjX8CgYEAna0P6WJr9r19mhIYevmc
+Gf/ex7xNXxMvx80dP8MIfPVrwyhJSpWtljVpt+SKtFRJ0fVRDfUUl4Bqf/fR74B3
+muCVO6ItTBxHAt5Ki9CeUpTlh7XqiWwLSvP8Y1TRuMr3ZDCtg4CYBAD6Ttxmwde6
+NcL2NMQwgsZaazrcEIHMmU0CgYEAl/Mn2tZ/oUIdt8YWzEVvmeNOXW0J1sGBo/bm
+ZtZt7qpuZWl7jb5bnNSXu4QxPxXljnAokIpUJmHke9AWydfze4c6EfXZLhcMd0Gq
+MQ7HOIWfTbqr4zzx9smRoq4Ql57s2nba521XpJAdDeKL7xH/9j7PsXCls8C3Dd5D
+AajEmgUCgYAGEdn6tYxIdX7jF39E3x7zHQf8jHIoQ7+cLTLtd944mSGgeqMfbiww
+CoUa+AAUqjdAD5ViAyJrA+gmDtWpkFnJZtToXYwfUF2o3zRo4k1DeBrVbFqwSQkE
+omrfiBGtviYIPdqQLE34LYpWEooNPraqO9qTyc+9w5038u2OFS+WmQ==
+-----END RSA PRIVATE KEY-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt2.crt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt2.crt b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt2.crt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/encrypt2.crt	(date 1495187412000)
@@ -0,0 +1,19 @@
+-----BEGIN CERTIFICATE-----
+MIIDFzCCAf8CCQDULaNM+Q+g3jANBgkqhkiG9w0BAQUFADBMMRcwFQYDVQQDDA5T
+d2lmdG1haWxlciBDQTEUMBIGA1UECgwLU3dpZnRtYWlsZXIxDjAMBgNVBAcMBVBh
+cmlzMQswCQYDVQQGEwJGUjAeFw0xMzExMjcwODM5MTJaFw0xNzExMjYwODM5MTJa
+ME8xGjAYBgNVBAMMEVN3aWZ0bWFpbGVyLVVzZXIyMRQwEgYDVQQKDAtTd2lmdG1h
+aWxlcjEOMAwGA1UEBwwFUGFyaXMxCzAJBgNVBAYTAkZSMIIBIjANBgkqhkiG9w0B
+AQEFAAOCAQ8AMIIBCgKCAQEAw4AoYVYss2sa1BWJAJpK6gVemjXrp1mVXVpb1/z6
+SH15AGsp3kiNXsMpgvsdofbqC/5HXrw2G8gWqo+uh6GuK67+Tvp7tO2aD4+8CZzU
+K1cffj7Pbx95DUPwXckv79PT5ZcuyeFaVo92aug11+gS/P8n0WXSlzZxNuZ1f3G2
+r/IgwfNKZlarEf1Ih781L2SwmyveW/dtsV2pdrd4IZwsV5SOF2zBFIXSuhPN0c+m
+mtwSJe+Ow1udLX4KJkAX8sGVFJ5P5q4s2nS9vLkkj7X6YRQscbyJO9L7e1TksRqL
+DLxZwiko6gUhp4/bIs1wDj5tzkQBi4qXviRq3i7A9b2d0QIDAQABMA0GCSqGSIb3
+DQEBBQUAA4IBAQAj8iARhPB2DA3YfT5mJJrgU156Sm0Z3mekAECsr+VqFZtU/9Dz
+pPFYEf0hg61cjvwhLtOmaTB+50hu1KNNlu8QlxAfPJqNxtH85W0CYiZHJwW9eSTr
+z1swaHpRHLDUgo3oAXdh5syMbdl0MWos0Z14WP5yYu4IwJXs+j2JRW70BICyrNjm
+d+AjCzoYjKMdJkSj4uxQEOuW2/5veAoDyU+kHDdfT7SmbyoKu+Pw4Xg/XDuKoWYg
+w5/sRiw5vxsmOr9+anspDHdP9rUe1JEfwAJqZB3fwdqEyxu54Xw/GedG4wZBEJf0
+ZcS1eh31emcjYUHQa1IA93jcFSmXzJ+ftJrY
+-----END CERTIFICATE-----
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/AttachmentAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/AttachmentAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/AttachmentAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/AttachmentAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,12 @@
+<?php
+
+require_once 'swift_required.php';
+require_once __DIR__.'/Mime/AttachmentAcceptanceTest.php';
+
+class Swift_AttachmentAcceptanceTest extends Swift_Mime_AttachmentAcceptanceTest
+{
+    protected function createAttachment()
+    {
+        return new Swift_Attachment();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign.key
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign.key b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign.key
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign.key	(date 1495187412000)
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEowIBAAKCAQEAk3vGaLso1RoKpZY4WrMGKi4+4nDKB6vkINdwhPsyYLZdv1M8
+j4QHd1ljiL5UNJbvhP59G160uvqtvA60N1ICfQbJM8y89ealDtdm/dgLxryyfvZC
+rojOSlw5YzgLF3O/wPVFBsBBQNQ9JpHjJpB7okGrwDJMwS4WttoRqYP4c1WxOlvT
+Bp2tLM3fMod/CGNTObkfjmdHRtym1WW+x9zdDizj/I/J/uGLQBgFvjp8/9ghj32d
+ZGgzL2P1k2cMhngOBcAj8tQ/LX3rMKip1gwfUn5fIZ7OVcZ6Cd3aikB3l4guDjH0
+NFOAnLjObFWCWUTTcD+/03lIdx3oJzp7mdYcvQIDAQABAoIBAH2vrw/T6GFrlwU0
+twP8q1VJIghCDLpq77hZQafilzU6VTxWyDaaUu6QPDXt1b8Xnjnd02p+1FDAj0zD
+zyuR9VLtdIxzf9mj3KiAQ2IzOx3787YlUgCB0CQo4jM/MJyk5RahL1kogLOp7A8x
+pr5XxTUq+B6L/0Nmbq8XupOXRyWp53amZ5N8sgWDv4oKh9fqgAhxbSG6KUkTmhYs
+DLinWg86Q28pSn+eivf4dehR56YwtTBVguXW3WKO70+GW1RotSrS6e6SSxfKYksZ
+a7/J1hCmJkEE3+4C8BpcI0MelgaK66ocN0pOqDF9ByxphARqyD7tYCfoS2P8gi81
+XoiZJaECgYEAwqx4AnDX63AANsfKuKVsEQfMSAG47SnKOVwHB7prTAgchTRcDph1
+EVOPtJ+4ssanosXzLcN/dCRlvqLEqnKYAOizy3C56CyRguCpO1AGbRpJjRmHTRgA
+w8iArhM07HgJ3XLFn99V/0bsPCMxW8dje1ZMjKjoQtDrXRQMtWaVY+UCgYEAwfGi
+f0If6z7wJj9gQUkGimWDAg/bxDkvEeh3nSD/PQyNiW0XDclcb3roNPQsal2ZoMwt
+f1bwkclw7yUCIZBvXWEkZapjKCdseTp6nglScxr8GAzfN9p5KQl+OS3GzC6xZf6C
+BsZQ5ucsHTHsCAi3WbwGK829z9c7x0qRwgwu9/kCgYEAsqwEwYi8Q/RZ3e1lXC9H
+jiHwFi6ugc2XMyoJscghbnkLZB54V1UKLUraXFcz97FobnbsCJajxf8Z+uv9QMtI
+Q51QV2ow1q0BKHP2HuAF5eD4nK5Phix/lzHRGPO74UUTGNKcG22pylBXxaIvTSMl
+ZTABth/YfGqvepBKUbvDZRkCgYB5ykbUCW9H6D8glZ3ZgYU09ag+bD0CzTIs2cH7
+j1QZPz/GdBYNF00PyKv3TPpzVRH7cxyDIdJyioB7/M6Iy03T4wPbQBOCjLdGrZ2A
+jrQTCngSlkq6pVx+k7KLL57ua8gFF70JihIV3kfKkaX6KZcSJ8vsSAgRc8TbUo2T
+wNjh6QKBgDyxw4bG2ULs+LVaHcnp7nizLgRGXJsCkDICjla6y0eCgAnG8fSt8CcG
+s5DIfJeVs/NXe/NVNuVrfwsUx0gBOirtFwQStvi5wJnY/maGAyjmgafisNFgAroT
+aM5f+wyGPQeGCs7bj7JWY7Nx9lkyuUV7DdKBTZNMOe51K3+PTEL3
+-----END RSA PRIVATE KEY-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign2.crt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign2.crt b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign2.crt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign2.crt	(date 1495187412000)
@@ -0,0 +1,19 @@
+-----BEGIN CERTIFICATE-----
+MIIDGTCCAgECAQEwDQYJKoZIhvcNAQEFBQAwVjEhMB8GA1UEAwwYU3dpZnRtYWls
+ZXIgSW50ZXJtZWRpYXRlMRQwEgYDVQQKDAtTd2lmdG1haWxlcjEOMAwGA1UEBwwF
+UGFyaXMxCzAJBgNVBAYTAkZSMB4XDTE0MTEyMDEzMjYyNloXDTE4MTExOTEzMjYy
+NlowTzEaMBgGA1UEAwwRU3dpZnRtYWlsZXItVXNlcjIxFDASBgNVBAoMC1N3aWZ0
+bWFpbGVyMQ4wDAYDVQQHDAVQYXJpczELMAkGA1UEBhMCRlIwggEiMA0GCSqGSIb3
+DQEBAQUAA4IBDwAwggEKAoIBAQDbr1m4z/rzFS/DxUUQIhKNx19oAeGYLt3niaEP
+twfvBMNB80gMgM9d+XtqrPAMPeY/2C8t5NlChNPKMcR70JBKdmlSH4/aTjaIfWmD
+PoZJjvRRXINZgSHNKIt4ZGAN/EPFr19CBisV4iPxzu+lyIbbkaZJ/qtyatlP7m/q
+8TnykFRlyxNEveCakpcXeRd3YTFGKWoED+/URhVc0cCPZVjoeSTtPHAYBnC29lG5
+VFbq6NBQiyF4tpjOHRarq6G8PtQFH9CpAZg5bPk3bqka9C8mEr5jWfrM4EHtUkTl
+CwVLOQRBsz/nMBT27pXZh18GU0hc3geNDN4kqaeqgNBo0mblAgMBAAEwDQYJKoZI
+hvcNAQEFBQADggEBAAHDMuv6oxWPsTQWWGWWFIk7QZu3iogMqFuxhhQxg8BE37CT
+Vt1mBVEjYGMkWhMSwWBMWuP6yuOZecWtpp6eOie/UKGg1XoW7Y7zq2aQaP7YPug0
+8Lgq1jIo7iO2b6gZeMtLiTZrxyte0z1XzS3wy7ZC9mZjYd7QE7mZ+/rzQ0x5zjOp
+G8b3msS/yYYJCMN+HtHln++HOGmm6uhvbsHTfvvZvtl7F5vJ5WhGGlUfjhanSEtZ
+1RKx+cbgIv1eFOGO1OTuZfEuKdLb0T38d/rjLeI99nVVKEIGtLmX4dj327GHe/D3
+aPr2blF2gOvlzkfN9Vz6ZUE2s3rVBeCg2AVseYQ=
+-----END CERTIFICATE-----
Index: vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign2.key
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign2.key b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign2.key
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/smime/sign2.key	(date 1495187412000)
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEpAIBAAKCAQEA269ZuM/68xUvw8VFECISjcdfaAHhmC7d54mhD7cH7wTDQfNI
+DIDPXfl7aqzwDD3mP9gvLeTZQoTTyjHEe9CQSnZpUh+P2k42iH1pgz6GSY70UVyD
+WYEhzSiLeGRgDfxDxa9fQgYrFeIj8c7vpciG25GmSf6rcmrZT+5v6vE58pBUZcsT
+RL3gmpKXF3kXd2ExRilqBA/v1EYVXNHAj2VY6Hkk7TxwGAZwtvZRuVRW6ujQUIsh
+eLaYzh0Wq6uhvD7UBR/QqQGYOWz5N26pGvQvJhK+Y1n6zOBB7VJE5QsFSzkEQbM/
+5zAU9u6V2YdfBlNIXN4HjQzeJKmnqoDQaNJm5QIDAQABAoIBAAM2FvuqnqJ7Bs23
+zoCj3t2PsodUr7WHydqemmoeZNFLoocORVlZcK6Q/QrcKE4lgX4hbN8g30QnqOjl
+vVeJ/vH3tSZsK7AnQIjSPH6cpV3h5xRhY9IlHxdepltGLFlH/L2hCKVwbaTOP3RD
+cCFeQwpmoKWoQV1UzoRqmdw3Vn+DMaUULomLVR9aSW9PnKeFL+tPWShf7GmVISfM
+2H6xKw/qT0XAX59ZHA1laxSFVvbV5ZcKrBOFMV407Vzw2d3ojmfEzNsHjUVBXX8j
+B5nK1VeJiTVmcoVhnRX7tXESDaZy+Kv38pqOmc8Svn70lDJ35SM2EpWnX39w5LsQ
+29NsIUECgYEA/vNKiMfVmmZNQrpcuHQe5adlmz9+I4xJ4wbRzrS7czpbKF0/iaPf
+dKoVz67yYHOJCBHTVaXWkElQsq1mkyuFt/cc0ReJXO8709+t+6ULsE50cLQm/HN5
+npg3gw0Ls/9dy/cHM5SdVIHMBm9oQ65rXup/dqWC8Dz2cAAOQhIPwx0CgYEA3Jbk
+DPdUlrj4sXcE3V/CtmBuK9Xq1xolJt026fYCrle0YhdMKmchRBDCc6BzM+F/vDyC
+llPfQu8TDXK40Oan7GbxMdoLqKK9gSIq1dvfG1YMMz8OrBcX8xKe61KFRWd7QSBJ
+BcY575NzYHapOHVGnUJ68j8zCow0gfb7q6iK4GkCgYEAz2mUuKSCxYL21hORfUqT
+HFjMU7oa38axEa6pn9XvLjZKlRMPruWP1HTPG9ADRa6Yy+TcnrA1V9sdeM+TRKXC
+usCiRAU27lF+xccS30gNs1iQaGRX10gGqJzDhK1nWP+nClmlFTSRrn+OQan/FBjh
+Jy31lsveM54VC1cwQlY5Vo0CgYEArtjfnLNzFiE55xjq/znHUd4vlYlzItrzddHE
+lEBOsbiNH29ODRI/2P7b0uDsT8Q/BoqEC/ohLqHn3TIA8nzRv91880HdGecdBL17
+bJZiSv2yn/AshhWsAxzQYMDBKFk05lNb7jrIc3DR9DU6PqketsoaP+f+Yi7t89I8
+fD0VD3kCgYAaJCoQshng/ijiHF/RJXLrXXHJSUmaOfbweX/mzFup0YR1LxUjcv85
+cxvwc41Y2iI5MwUXyX97/GYKeoobzWZy3XflNWtg04rcInVaPsb/OOFDDqI+MkzT
+B4PcCurOmjzcxHMVE34CYvl3YVwWrPb5JO1rYG9T2gKUJnLU6qG4Bw==
+-----END RSA PRIVATE KEY-----
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/MessageAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/MessageAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/MessageAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/MessageAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,55 @@
+<?php
+
+require_once 'swift_required.php';
+require_once __DIR__.'/Mime/SimpleMessageAcceptanceTest.php';
+
+class Swift_MessageAcceptanceTest extends Swift_Mime_SimpleMessageAcceptanceTest
+{
+    public function testAddPartWrapper()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+
+        $id = $message->getId();
+        $date = $message->getDate();
+        $boundary = $message->getBoundary();
+
+        $message->addPart('foo', 'text/plain', 'iso-8859-1');
+        $message->addPart('test <b>foo</b>', 'text/html', 'iso-8859-1');
+
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/alternative;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/plain; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/html; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'test <b>foo</b>'.
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n",
+            $message->toString()
+            );
+    }
+
+    protected function createMessage()
+    {
+        Swift_DependencyContainer::getInstance()
+            ->register('properties.charset')->asValue(null);
+
+        return new Swift_Message();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/MimePartAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/MimePartAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/MimePartAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/MimePartAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,15 @@
+<?php
+
+require_once 'swift_required.php';
+require_once __DIR__.'/Mime/MimePartAcceptanceTest.php';
+
+class Swift_MimePartAcceptanceTest extends Swift_Mime_MimePartAcceptanceTest
+{
+    protected function createMimePart()
+    {
+        Swift_DependencyContainer::getInstance()
+            ->register('properties.charset')->asValue(null);
+
+        return new Swift_MimePart();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/DependencyContainerAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/DependencyContainerAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/DependencyContainerAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/DependencyContainerAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,22 @@
+<?php
+
+require_once 'swift_required.php';
+
+//This is more of a "cross your fingers and hope it works" test!
+
+class Swift_DependencyContainerAcceptanceTest extends PHPUnit\Framework\TestCase
+{
+    public function testNoLookupsFail()
+    {
+        $di = Swift_DependencyContainer::getInstance();
+        foreach ($di->listItems() as $itemName) {
+            try {
+                $di->lookup($itemName);
+            } catch (Swift_DependencyException $e) {
+                $this->fail($e->getMessage());
+            }
+        }
+        // previous loop would fail if there is an issue
+        $this->addToAssertionCount(1);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/EmbeddedFileAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/EmbeddedFileAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/EmbeddedFileAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/EmbeddedFileAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,12 @@
+<?php
+
+require_once 'swift_required.php';
+require_once __DIR__.'/Mime/EmbeddedFileAcceptanceTest.php';
+
+class Swift_EmbeddedFileAcceptanceTest extends Swift_Mime_EmbeddedFileAcceptanceTest
+{
+    protected function createEmbeddedFile()
+    {
+        return new Swift_EmbeddedFile();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder.php	(date 1495187412000)
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Interface for all Transfer Encoding schemes.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Mime_ContentEncoder extends Swift_Encoder
+{
+    /**
+     * Encode $in to $out.
+     *
+     * @param Swift_OutputByteStream $os              to read from
+     * @param Swift_InputByteStream  $is              to write to
+     * @param int                    $firstLineOffset
+     * @param int                    $maxLineLength   - 0 indicates the default length for this encoding
+     */
+    public function encodeByteStream(Swift_OutputByteStream $os, Swift_InputByteStream $is, $firstLineOffset = 0, $maxLineLength = 0);
+
+    /**
+     * Get the MIME name of this content encoding scheme.
+     *
+     * @return string
+     */
+    public function getName();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EmbeddedFile.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EmbeddedFile.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EmbeddedFile.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EmbeddedFile.php	(date 1495187412000)
@@ -0,0 +1,45 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An embedded file, in a multipart message.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_EmbeddedFile extends Swift_Mime_Attachment
+{
+    /**
+     * Creates a new Attachment with $headers and $encoder.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     * @param Swift_Mime_ContentEncoder  $encoder
+     * @param Swift_KeyCache             $cache
+     * @param Swift_IdGenerator          $idGenerator
+     * @param array                      $mimeTypes   optional
+     */
+    public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator, $mimeTypes = array())
+    {
+        parent::__construct($headers, $encoder, $cache, $idGenerator, $mimeTypes);
+        $this->setDisposition('inline');
+        $this->setId($this->getId());
+    }
+
+    /**
+     * Get the nesting level of this EmbeddedFile.
+     *
+     * Returns {@see LEVEL_RELATED}.
+     *
+     * @return int
+     */
+    public function getNestingLevel()
+    {
+        return self::LEVEL_RELATED;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EncodingObserver.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EncodingObserver.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EncodingObserver.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/EncodingObserver.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Observes changes for a Mime entity's ContentEncoder.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Mime_EncodingObserver
+{
+    /**
+     * Notify this observer that the observed entity's ContentEncoder has changed.
+     *
+     * @param Swift_Mime_ContentEncoder $encoder
+     */
+    public function encoderChanged(Swift_Mime_ContentEncoder $encoder);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Header.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Header.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Header.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Header.php	(date 1495187412000)
@@ -0,0 +1,93 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A MIME Header.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Mime_Header
+{
+    /** Text headers */
+    const TYPE_TEXT = 2;
+
+    /**  headers (text + params) */
+    const TYPE_PARAMETERIZED = 6;
+
+    /** Mailbox and address headers */
+    const TYPE_MAILBOX = 8;
+
+    /** Date and time headers */
+    const TYPE_DATE = 16;
+
+    /** Identification headers */
+    const TYPE_ID = 32;
+
+    /** Address path headers */
+    const TYPE_PATH = 64;
+
+    /**
+     * Get the type of Header that this instance represents.
+     *
+     * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
+     * @see TYPE_DATE, TYPE_ID, TYPE_PATH
+     *
+     * @return int
+     */
+    public function getFieldType();
+
+    /**
+     * Set the model for the field body.
+     *
+     * The actual types needed will vary depending upon the type of Header.
+     *
+     * @param mixed $model
+     */
+    public function setFieldBodyModel($model);
+
+    /**
+     * Set the charset used when rendering the Header.
+     *
+     * @param string $charset
+     */
+    public function setCharset($charset);
+
+    /**
+     * Get the model for the field body.
+     *
+     * The return type depends on the specifics of the Header.
+     *
+     * @return mixed
+     */
+    public function getFieldBodyModel();
+
+    /**
+     * Get the name of this header (e.g. Subject).
+     *
+     * The name is an identifier and as such will be immutable.
+     *
+     * @return string
+     */
+    public function getFieldName();
+
+    /**
+     * Get the field body, prepared for folding into a final header value.
+     *
+     * @return string
+     */
+    public function getFieldBody();
+
+    /**
+     * Get this Header rendered as a compliant string.
+     *
+     * @return string
+     */
+    public function toString();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Attachment.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Attachment.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Attachment.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Attachment.php	(date 1495187412000)
@@ -0,0 +1,149 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An attachment, in a multipart message.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_Attachment extends Swift_Mime_SimpleMimeEntity
+{
+    /** Recognized MIME types */
+    private $mimeTypes = array();
+
+    /**
+     * Create a new Attachment with $headers, $encoder and $cache.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     * @param Swift_Mime_ContentEncoder  $encoder
+     * @param Swift_KeyCache             $cache
+     * @param Swift_IdGenerator          $idGenerator
+     * @param array                      $mimeTypes
+     */
+    public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator, $mimeTypes = array())
+    {
+        parent::__construct($headers, $encoder, $cache, $idGenerator);
+        $this->setDisposition('attachment');
+        $this->setContentType('application/octet-stream');
+        $this->mimeTypes = $mimeTypes;
+    }
+
+    /**
+     * Get the nesting level used for this attachment.
+     *
+     * Always returns {@link LEVEL_MIXED}.
+     *
+     * @return int
+     */
+    public function getNestingLevel()
+    {
+        return self::LEVEL_MIXED;
+    }
+
+    /**
+     * Get the Content-Disposition of this attachment.
+     *
+     * By default attachments have a disposition of "attachment".
+     *
+     * @return string
+     */
+    public function getDisposition()
+    {
+        return $this->getHeaderFieldModel('Content-Disposition');
+    }
+
+    /**
+     * Set the Content-Disposition of this attachment.
+     *
+     * @param string $disposition
+     *
+     * @return $this
+     */
+    public function setDisposition($disposition)
+    {
+        if (!$this->setHeaderFieldModel('Content-Disposition', $disposition)) {
+            $this->getHeaders()->addParameterizedHeader('Content-Disposition', $disposition);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the filename of this attachment when downloaded.
+     *
+     * @return string
+     */
+    public function getFilename()
+    {
+        return $this->getHeaderParameter('Content-Disposition', 'filename');
+    }
+
+    /**
+     * Set the filename of this attachment.
+     *
+     * @param string $filename
+     *
+     * @return $this
+     */
+    public function setFilename($filename)
+    {
+        $this->setHeaderParameter('Content-Disposition', 'filename', $filename);
+        $this->setHeaderParameter('Content-Type', 'name', $filename);
+
+        return $this;
+    }
+
+    /**
+     * Get the file size of this attachment.
+     *
+     * @return int
+     */
+    public function getSize()
+    {
+        return $this->getHeaderParameter('Content-Disposition', 'size');
+    }
+
+    /**
+     * Set the file size of this attachment.
+     *
+     * @param int $size
+     *
+     * @return $this
+     */
+    public function setSize($size)
+    {
+        $this->setHeaderParameter('Content-Disposition', 'size', $size);
+
+        return $this;
+    }
+
+    /**
+     * Set the file that this attachment is for.
+     *
+     * @param Swift_FileStream $file
+     * @param string           $contentType optional
+     *
+     * @return $this
+     */
+    public function setFile(Swift_FileStream $file, $contentType = null)
+    {
+        $this->setFilename(basename($file->getPath()));
+        $this->setBody($file, $contentType);
+        if (!isset($contentType)) {
+            $extension = strtolower(substr($file->getPath(), strrpos($file->getPath(), '.') + 1));
+
+            if (array_key_exists($extension, $this->mimeTypes)) {
+                $this->setContentType($this->mimeTypes[$extension]);
+            }
+        }
+
+        return $this;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/CharsetObserver.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/CharsetObserver.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/CharsetObserver.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/CharsetObserver.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Observes changes in an Mime entity's character set.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Mime_CharsetObserver
+{
+    /**
+     * Notify this observer that the entity's charset has changed.
+     *
+     * @param string $charset
+     */
+    public function charsetChanged($charset);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/MimePart.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/MimePart.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/MimePart.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/MimePart.php	(date 1495187412000)
@@ -0,0 +1,212 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A MIME part, in a multipart message.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_MimePart extends Swift_Mime_SimpleMimeEntity
+{
+    /** The format parameter last specified by the user */
+    protected $userFormat;
+
+    /** The charset last specified by the user */
+    protected $userCharset;
+
+    /** The delsp parameter last specified by the user */
+    protected $userDelSp;
+
+    /** The nesting level of this MimePart */
+    private $nestingLevel = self::LEVEL_ALTERNATIVE;
+
+    /**
+     * Create a new MimePart with $headers, $encoder and $cache.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     * @param Swift_Mime_ContentEncoder  $encoder
+     * @param Swift_KeyCache             $cache
+     * @param Swift_IdGenerator          $idGenerator
+     * @param string                     $charset
+     */
+    public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator, $charset = null)
+    {
+        parent::__construct($headers, $encoder, $cache, $idGenerator);
+        $this->setContentType('text/plain');
+        if (null !== $charset) {
+            $this->setCharset($charset);
+        }
+    }
+
+    /**
+     * Set the body of this entity, either as a string, or as an instance of
+     * {@link Swift_OutputByteStream}.
+     *
+     * @param mixed  $body
+     * @param string $contentType optional
+     * @param string $charset     optional
+     *
+     * @return $this
+     */
+    public function setBody($body, $contentType = null, $charset = null)
+    {
+        if (isset($charset)) {
+            $this->setCharset($charset);
+        }
+        $body = $this->convertString($body);
+
+        parent::setBody($body, $contentType);
+
+        return $this;
+    }
+
+    /**
+     * Get the character set of this entity.
+     *
+     * @return string
+     */
+    public function getCharset()
+    {
+        return $this->getHeaderParameter('Content-Type', 'charset');
+    }
+
+    /**
+     * Set the character set of this entity.
+     *
+     * @param string $charset
+     *
+     * @return $this
+     */
+    public function setCharset($charset)
+    {
+        $this->setHeaderParameter('Content-Type', 'charset', $charset);
+        if ($charset !== $this->userCharset) {
+            $this->clearCache();
+        }
+        $this->userCharset = $charset;
+        parent::charsetChanged($charset);
+
+        return $this;
+    }
+
+    /**
+     * Get the format of this entity (i.e. flowed or fixed).
+     *
+     * @return string
+     */
+    public function getFormat()
+    {
+        return $this->getHeaderParameter('Content-Type', 'format');
+    }
+
+    /**
+     * Set the format of this entity (flowed or fixed).
+     *
+     * @param string $format
+     *
+     * @return $this
+     */
+    public function setFormat($format)
+    {
+        $this->setHeaderParameter('Content-Type', 'format', $format);
+        $this->userFormat = $format;
+
+        return $this;
+    }
+
+    /**
+     * Test if delsp is being used for this entity.
+     *
+     * @return bool
+     */
+    public function getDelSp()
+    {
+        return 'yes' == $this->getHeaderParameter('Content-Type', 'delsp') ? true : false;
+    }
+
+    /**
+     * Turn delsp on or off for this entity.
+     *
+     * @param bool $delsp
+     *
+     * @return $this
+     */
+    public function setDelSp($delsp = true)
+    {
+        $this->setHeaderParameter('Content-Type', 'delsp', $delsp ? 'yes' : null);
+        $this->userDelSp = $delsp;
+
+        return $this;
+    }
+
+    /**
+     * Get the nesting level of this entity.
+     *
+     * @see LEVEL_TOP, LEVEL_ALTERNATIVE, LEVEL_MIXED, LEVEL_RELATED
+     *
+     * @return int
+     */
+    public function getNestingLevel()
+    {
+        return $this->nestingLevel;
+    }
+
+    /**
+     * Receive notification that the charset has changed on this document, or a
+     * parent document.
+     *
+     * @param string $charset
+     */
+    public function charsetChanged($charset)
+    {
+        $this->setCharset($charset);
+    }
+
+    /** Fix the content-type and encoding of this entity */
+    protected function fixHeaders()
+    {
+        parent::fixHeaders();
+        if (count($this->getChildren())) {
+            $this->setHeaderParameter('Content-Type', 'charset', null);
+            $this->setHeaderParameter('Content-Type', 'format', null);
+            $this->setHeaderParameter('Content-Type', 'delsp', null);
+        } else {
+            $this->setCharset($this->userCharset);
+            $this->setFormat($this->userFormat);
+            $this->setDelSp($this->userDelSp);
+        }
+    }
+
+    /** Set the nesting level of this entity */
+    protected function setNestingLevel($level)
+    {
+        $this->nestingLevel = $level;
+    }
+
+    /** Encode charset when charset is not utf-8 */
+    protected function convertString($string)
+    {
+        $charset = strtolower($this->getCharset());
+        if (!in_array($charset, array('utf-8', 'iso-8859-1', 'iso-8859-15', ''))) {
+            // mb_convert_encoding must be the first one to check, since iconv cannot convert some words.
+            if (function_exists('mb_convert_encoding')) {
+                $string = mb_convert_encoding($string, $charset, 'utf-8');
+            } elseif (function_exists('iconv')) {
+                $string = iconv('utf-8//TRANSLIT//IGNORE', $charset, $string);
+            } else {
+                throw new Swift_SwiftException('No suitable convert encoding function (use UTF-8 as your charset or install the mbstring or iconv extension).');
+            }
+
+            return $string;
+        }
+
+        return $string;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderFactory.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderFactory.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderFactory.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderFactory.php	(date 1495187412000)
@@ -0,0 +1,197 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+use Egulias\EmailValidator\EmailValidator;
+
+/**
+ * Creates MIME headers.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_SimpleHeaderFactory implements Swift_Mime_CharsetObserver
+{
+    /** The HeaderEncoder used by these headers */
+    private $encoder;
+
+    /** The Encoder used by parameters */
+    private $paramEncoder;
+
+    /** The Grammar */
+    private $grammar;
+
+    /** Strict EmailValidator */
+    private $emailValidator;
+
+    /** The charset of created Headers */
+    private $charset;
+
+    /**
+     * Creates a new SimpleHeaderFactory using $encoder and $paramEncoder.
+     *
+     * @param Swift_Mime_HeaderEncoder $encoder
+     * @param Swift_Encoder            $paramEncoder
+     * @param EmailValidator           $emailValidator
+     * @param string|null              $charset
+     */
+    public function __construct(Swift_Mime_HeaderEncoder $encoder, Swift_Encoder $paramEncoder, EmailValidator $emailValidator, $charset = null)
+    {
+        $this->encoder = $encoder;
+        $this->paramEncoder = $paramEncoder;
+        $this->emailValidator = $emailValidator;
+        $this->charset = $charset;
+    }
+
+    /**
+     * Create a new Mailbox Header with a list of $addresses.
+     *
+     * @param string            $name
+     * @param array|string|null $addresses
+     *
+     * @return Swift_Mime_Header
+     */
+    public function createMailboxHeader($name, $addresses = null)
+    {
+        $header = new Swift_Mime_Headers_MailboxHeader($name, $this->encoder, $this->emailValidator);
+        if (isset($addresses)) {
+            $header->setFieldBodyModel($addresses);
+        }
+        $this->setHeaderCharset($header);
+
+        return $header;
+    }
+
+    /**
+     * Create a new Date header using $dateTime.
+     *
+     * @param string                 $name
+     * @param DateTimeInterface|null $dateTime
+     *
+     * @return Swift_Mime_Header
+     */
+    public function createDateHeader($name, DateTimeInterface $dateTime = null)
+    {
+        $header = new Swift_Mime_Headers_DateHeader($name);
+        if (isset($dateTime)) {
+            $header->setFieldBodyModel($dateTime);
+        }
+        $this->setHeaderCharset($header);
+
+        return $header;
+    }
+
+    /**
+     * Create a new basic text header with $name and $value.
+     *
+     * @param string $name
+     * @param string $value
+     *
+     * @return Swift_Mime_Header
+     */
+    public function createTextHeader($name, $value = null)
+    {
+        $header = new Swift_Mime_Headers_UnstructuredHeader($name, $this->encoder);
+        if (isset($value)) {
+            $header->setFieldBodyModel($value);
+        }
+        $this->setHeaderCharset($header);
+
+        return $header;
+    }
+
+    /**
+     * Create a new ParameterizedHeader with $name, $value and $params.
+     *
+     * @param string $name
+     * @param string $value
+     * @param array  $params
+     *
+     * @return Swift_Mime_Headers_ParameterizedHeader
+     */
+    public function createParameterizedHeader($name, $value = null, $params = array())
+    {
+        $header = new Swift_Mime_Headers_ParameterizedHeader($name, $this->encoder, (strtolower($name) == 'content-disposition') ? $this->paramEncoder : null);
+        if (isset($value)) {
+            $header->setFieldBodyModel($value);
+        }
+        foreach ($params as $k => $v) {
+            $header->setParameter($k, $v);
+        }
+        $this->setHeaderCharset($header);
+
+        return $header;
+    }
+
+    /**
+     * Create a new ID header for Message-ID or Content-ID.
+     *
+     * @param string       $name
+     * @param string|array $ids
+     *
+     * @return Swift_Mime_Header
+     */
+    public function createIdHeader($name, $ids = null)
+    {
+        $header = new Swift_Mime_Headers_IdentificationHeader($name, $this->emailValidator);
+        if (isset($ids)) {
+            $header->setFieldBodyModel($ids);
+        }
+        $this->setHeaderCharset($header);
+
+        return $header;
+    }
+
+    /**
+     * Create a new Path header with an address (path) in it.
+     *
+     * @param string $name
+     * @param string $path
+     *
+     * @return Swift_Mime_Header
+     */
+    public function createPathHeader($name, $path = null)
+    {
+        $header = new Swift_Mime_Headers_PathHeader($name, $this->emailValidator);
+        if (isset($path)) {
+            $header->setFieldBodyModel($path);
+        }
+        $this->setHeaderCharset($header);
+
+        return $header;
+    }
+
+    /**
+     * Notify this observer that the entity's charset has changed.
+     *
+     * @param string $charset
+     */
+    public function charsetChanged($charset)
+    {
+        $this->charset = $charset;
+        $this->encoder->charsetChanged($charset);
+        $this->paramEncoder->charsetChanged($charset);
+    }
+
+    /**
+     * Make a deep copy of object.
+     */
+    public function __clone()
+    {
+        $this->encoder = clone $this->encoder;
+        $this->paramEncoder = clone $this->paramEncoder;
+    }
+
+    /** Apply the charset to the Header */
+    private function setHeaderCharset(Swift_Mime_Header $header)
+    {
+        if (isset($this->charset)) {
+            $header->setCharset($this->charset);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderSet.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderSet.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderSet.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleHeaderSet.php	(date 1495187412000)
@@ -0,0 +1,409 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A collection of MIME headers.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_SimpleHeaderSet implements Swift_Mime_CharsetObserver
+{
+    /** HeaderFactory */
+    private $factory;
+
+    /** Collection of set Headers */
+    private $headers = array();
+
+    /** Field ordering details */
+    private $order = array();
+
+    /** List of fields which are required to be displayed */
+    private $required = array();
+
+    /** The charset used by Headers */
+    private $charset;
+
+    /**
+     * Create a new SimpleHeaderSet with the given $factory.
+     *
+     * @param Swift_Mime_SimpleHeaderFactory $factory
+     * @param string                         $charset
+     */
+    public function __construct(Swift_Mime_SimpleHeaderFactory $factory, $charset = null)
+    {
+        $this->factory = $factory;
+        if (isset($charset)) {
+            $this->setCharset($charset);
+        }
+    }
+
+    public function newInstance()
+    {
+        return new self($this->factory);
+    }
+
+    /**
+     * Set the charset used by these headers.
+     *
+     * @param string $charset
+     */
+    public function setCharset($charset)
+    {
+        $this->charset = $charset;
+        $this->factory->charsetChanged($charset);
+        $this->notifyHeadersOfCharset($charset);
+    }
+
+    /**
+     * Add a new Mailbox Header with a list of $addresses.
+     *
+     * @param string       $name
+     * @param array|string $addresses
+     */
+    public function addMailboxHeader($name, $addresses = null)
+    {
+        $this->storeHeader($name,
+        $this->factory->createMailboxHeader($name, $addresses));
+    }
+
+    /**
+     * Add a new Date header using $dateTime.
+     *
+     * @param string            $name
+     * @param DateTimeInterface $dateTime
+     */
+    public function addDateHeader($name, DateTimeInterface $dateTime = null)
+    {
+        $this->storeHeader($name,
+        $this->factory->createDateHeader($name, $dateTime));
+    }
+
+    /**
+     * Add a new basic text header with $name and $value.
+     *
+     * @param string $name
+     * @param string $value
+     */
+    public function addTextHeader($name, $value = null)
+    {
+        $this->storeHeader($name,
+        $this->factory->createTextHeader($name, $value));
+    }
+
+    /**
+     * Add a new ParameterizedHeader with $name, $value and $params.
+     *
+     * @param string $name
+     * @param string $value
+     * @param array  $params
+     */
+    public function addParameterizedHeader($name, $value = null, $params = array())
+    {
+        $this->storeHeader($name, $this->factory->createParameterizedHeader($name, $value, $params));
+    }
+
+    /**
+     * Add a new ID header for Message-ID or Content-ID.
+     *
+     * @param string       $name
+     * @param string|array $ids
+     */
+    public function addIdHeader($name, $ids = null)
+    {
+        $this->storeHeader($name, $this->factory->createIdHeader($name, $ids));
+    }
+
+    /**
+     * Add a new Path header with an address (path) in it.
+     *
+     * @param string $name
+     * @param string $path
+     */
+    public function addPathHeader($name, $path = null)
+    {
+        $this->storeHeader($name, $this->factory->createPathHeader($name, $path));
+    }
+
+    /**
+     * Returns true if at least one header with the given $name exists.
+     *
+     * If multiple headers match, the actual one may be specified by $index.
+     *
+     * @param string $name
+     * @param int    $index
+     *
+     * @return bool
+     */
+    public function has($name, $index = 0)
+    {
+        $lowerName = strtolower($name);
+
+        if (!array_key_exists($lowerName, $this->headers)) {
+            return false;
+        }
+
+        if (func_num_args() < 2) {
+            // index was not specified, so we only need to check that there is at least one header value set
+            return (bool) count($this->headers[$lowerName]);
+        }
+
+        return array_key_exists($index, $this->headers[$lowerName]);
+    }
+
+    /**
+     * Set a header in the HeaderSet.
+     *
+     * The header may be a previously fetched header via {@link get()} or it may
+     * be one that has been created separately.
+     *
+     * If $index is specified, the header will be inserted into the set at this
+     * offset.
+     *
+     * @param Swift_Mime_Header $header
+     * @param int               $index
+     */
+    public function set(Swift_Mime_Header $header, $index = 0)
+    {
+        $this->storeHeader($header->getFieldName(), $header, $index);
+    }
+
+    /**
+     * Get the header with the given $name.
+     *
+     * If multiple headers match, the actual one may be specified by $index.
+     * Returns NULL if none present.
+     *
+     * @param string $name
+     * @param int    $index
+     *
+     * @return Swift_Mime_Header
+     */
+    public function get($name, $index = 0)
+    {
+        $name = strtolower($name);
+
+        if (func_num_args() < 2) {
+            if ($this->has($name)) {
+                $values = array_values($this->headers[$name]);
+
+                return array_shift($values);
+            }
+        } else {
+            if ($this->has($name, $index)) {
+                return $this->headers[$name][$index];
+            }
+        }
+    }
+
+    /**
+     * Get all headers with the given $name.
+     *
+     * @param string $name
+     *
+     * @return array
+     */
+    public function getAll($name = null)
+    {
+        if (!isset($name)) {
+            $headers = array();
+            foreach ($this->headers as $collection) {
+                $headers = array_merge($headers, $collection);
+            }
+
+            return $headers;
+        }
+
+        $lowerName = strtolower($name);
+        if (!array_key_exists($lowerName, $this->headers)) {
+            return array();
+        }
+
+        return $this->headers[$lowerName];
+    }
+
+    /**
+     * Return the name of all Headers.
+     *
+     * @return array
+     */
+    public function listAll()
+    {
+        $headers = $this->headers;
+        if ($this->canSort()) {
+            uksort($headers, array($this, 'sortHeaders'));
+        }
+
+        return array_keys($headers);
+    }
+
+    /**
+     * Remove the header with the given $name if it's set.
+     *
+     * If multiple headers match, the actual one may be specified by $index.
+     *
+     * @param string $name
+     * @param int    $index
+     */
+    public function remove($name, $index = 0)
+    {
+        $lowerName = strtolower($name);
+        unset($this->headers[$lowerName][$index]);
+    }
+
+    /**
+     * Remove all headers with the given $name.
+     *
+     * @param string $name
+     */
+    public function removeAll($name)
+    {
+        $lowerName = strtolower($name);
+        unset($this->headers[$lowerName]);
+    }
+
+    /**
+     * Define a list of Header names as an array in the correct order.
+     *
+     * These Headers will be output in the given order where present.
+     *
+     * @param array $sequence
+     */
+    public function defineOrdering(array $sequence)
+    {
+        $this->order = array_flip(array_map('strtolower', $sequence));
+    }
+
+    /**
+     * Set a list of header names which must always be displayed when set.
+     *
+     * Usually headers without a field value won't be output unless set here.
+     *
+     * @param array $names
+     */
+    public function setAlwaysDisplayed(array $names)
+    {
+        $this->required = array_flip(array_map('strtolower', $names));
+    }
+
+    /**
+     * Notify this observer that the entity's charset has changed.
+     *
+     * @param string $charset
+     */
+    public function charsetChanged($charset)
+    {
+        $this->setCharset($charset);
+    }
+
+    /**
+     * Returns a string with a representation of all headers.
+     *
+     * @return string
+     */
+    public function toString()
+    {
+        $string = '';
+        $headers = $this->headers;
+        if ($this->canSort()) {
+            uksort($headers, array($this, 'sortHeaders'));
+        }
+        foreach ($headers as $collection) {
+            foreach ($collection as $header) {
+                if ($this->isDisplayed($header) || $header->getFieldBody() != '') {
+                    $string .= $header->toString();
+                }
+            }
+        }
+
+        return $string;
+    }
+
+    /**
+     * Returns a string representation of this object.
+     *
+     * @return string
+     *
+     * @see toString()
+     */
+    public function __toString()
+    {
+        return $this->toString();
+    }
+
+    /** Save a Header to the internal collection */
+    private function storeHeader($name, Swift_Mime_Header $header, $offset = null)
+    {
+        if (!isset($this->headers[strtolower($name)])) {
+            $this->headers[strtolower($name)] = array();
+        }
+        if (!isset($offset)) {
+            $this->headers[strtolower($name)][] = $header;
+        } else {
+            $this->headers[strtolower($name)][$offset] = $header;
+        }
+    }
+
+    /** Test if the headers can be sorted */
+    private function canSort()
+    {
+        return count($this->order) > 0;
+    }
+
+    /** uksort() algorithm for Header ordering */
+    private function sortHeaders($a, $b)
+    {
+        $lowerA = strtolower($a);
+        $lowerB = strtolower($b);
+        $aPos = array_key_exists($lowerA, $this->order) ? $this->order[$lowerA] : -1;
+        $bPos = array_key_exists($lowerB, $this->order) ? $this->order[$lowerB] : -1;
+
+        if (-1 === $aPos && -1 === $bPos) {
+            // just be sure to be determinist here
+            return $a > $b ? -1 : 1;
+        }
+
+        if ($aPos == -1) {
+            return 1;
+        } elseif ($bPos == -1) {
+            return -1;
+        }
+
+        return $aPos < $bPos ? -1 : 1;
+    }
+
+    /** Test if the given Header is always displayed */
+    private function isDisplayed(Swift_Mime_Header $header)
+    {
+        return array_key_exists(strtolower($header->getFieldName()), $this->required);
+    }
+
+    /** Notify all Headers of the new charset */
+    private function notifyHeadersOfCharset($charset)
+    {
+        foreach ($this->headers as $headerGroup) {
+            foreach ($headerGroup as $header) {
+                $header->setCharset($charset);
+            }
+        }
+    }
+
+    /**
+     * Make a deep copy of object.
+     */
+    public function __clone()
+    {
+        $this->factory = clone $this->factory;
+        foreach ($this->headers as $groupKey => $headerGroup) {
+            foreach ($headerGroup as $key => $header) {
+                $this->headers[$groupKey][$key] = clone $header;
+            }
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMessage.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMessage.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMessage.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMessage.php	(date 1495187412000)
@@ -0,0 +1,655 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * The default email message class.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_SimpleMessage extends Swift_Mime_MimePart
+{
+    const PRIORITY_HIGHEST = 1;
+    const PRIORITY_HIGH = 2;
+    const PRIORITY_NORMAL = 3;
+    const PRIORITY_LOW = 4;
+    const PRIORITY_LOWEST = 5;
+
+    /**
+     * Create a new SimpleMessage with $headers, $encoder and $cache.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     * @param Swift_Mime_ContentEncoder  $encoder
+     * @param Swift_KeyCache             $cache
+     * @param Swift_IdGenerator          $idGenerator
+     * @param string                     $charset
+     */
+    public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator, $charset = null)
+    {
+        parent::__construct($headers, $encoder, $cache, $idGenerator, $charset);
+        $this->getHeaders()->defineOrdering(array(
+            'Return-Path',
+            'Received',
+            'DKIM-Signature',
+            'DomainKey-Signature',
+            'Sender',
+            'Message-ID',
+            'Date',
+            'Subject',
+            'From',
+            'Reply-To',
+            'To',
+            'Cc',
+            'Bcc',
+            'MIME-Version',
+            'Content-Type',
+            'Content-Transfer-Encoding',
+            ));
+        $this->getHeaders()->setAlwaysDisplayed(array('Date', 'Message-ID', 'From'));
+        $this->getHeaders()->addTextHeader('MIME-Version', '1.0');
+        $this->setDate(new DateTimeImmutable());
+        $this->setId($this->getId());
+        $this->getHeaders()->addMailboxHeader('From');
+    }
+
+    /**
+     * Always returns {@link LEVEL_TOP} for a message instance.
+     *
+     * @return int
+     */
+    public function getNestingLevel()
+    {
+        return self::LEVEL_TOP;
+    }
+
+    /**
+     * Set the subject of this message.
+     *
+     * @param string $subject
+     *
+     * @return $this
+     */
+    public function setSubject($subject)
+    {
+        if (!$this->setHeaderFieldModel('Subject', $subject)) {
+            $this->getHeaders()->addTextHeader('Subject', $subject);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the subject of this message.
+     *
+     * @return string
+     */
+    public function getSubject()
+    {
+        return $this->getHeaderFieldModel('Subject');
+    }
+
+    /**
+     * Set the date at which this message was created.
+     *
+     * @param DateTimeInterface $dateTime
+     *
+     * @return $this
+     */
+    public function setDate(DateTimeInterface $dateTime)
+    {
+        if (!$this->setHeaderFieldModel('Date', $dateTime)) {
+            $this->getHeaders()->addDateHeader('Date', $dateTime);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the date at which this message was created.
+     *
+     * @return DateTimeInterface
+     */
+    public function getDate()
+    {
+        return $this->getHeaderFieldModel('Date');
+    }
+
+    /**
+     * Set the return-path (the bounce address) of this message.
+     *
+     * @param string $address
+     *
+     * @return $this
+     */
+    public function setReturnPath($address)
+    {
+        if (!$this->setHeaderFieldModel('Return-Path', $address)) {
+            $this->getHeaders()->addPathHeader('Return-Path', $address);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the return-path (bounce address) of this message.
+     *
+     * @return string
+     */
+    public function getReturnPath()
+    {
+        return $this->getHeaderFieldModel('Return-Path');
+    }
+
+    /**
+     * Set the sender of this message.
+     *
+     * This does not override the From field, but it has a higher significance.
+     *
+     * @param string $address
+     * @param string $name    optional
+     *
+     * @return $this
+     */
+    public function setSender($address, $name = null)
+    {
+        if (!is_array($address) && isset($name)) {
+            $address = array($address => $name);
+        }
+
+        if (!$this->setHeaderFieldModel('Sender', (array) $address)) {
+            $this->getHeaders()->addMailboxHeader('Sender', (array) $address);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the sender of this message.
+     *
+     * @return string
+     */
+    public function getSender()
+    {
+        return $this->getHeaderFieldModel('Sender');
+    }
+
+    /**
+     * Add a From: address to this message.
+     *
+     * If $name is passed this name will be associated with the address.
+     *
+     * @param string $address
+     * @param string $name    optional
+     *
+     * @return $this
+     */
+    public function addFrom($address, $name = null)
+    {
+        $current = $this->getFrom();
+        $current[$address] = $name;
+
+        return $this->setFrom($current);
+    }
+
+    /**
+     * Set the from address of this message.
+     *
+     * You may pass an array of addresses if this message is from multiple people.
+     *
+     * If $name is passed and the first parameter is a string, this name will be
+     * associated with the address.
+     *
+     * @param string|array $addresses
+     * @param string       $name      optional
+     *
+     * @return $this
+     */
+    public function setFrom($addresses, $name = null)
+    {
+        if (!is_array($addresses) && isset($name)) {
+            $addresses = array($addresses => $name);
+        }
+
+        if (!$this->setHeaderFieldModel('From', (array) $addresses)) {
+            $this->getHeaders()->addMailboxHeader('From', (array) $addresses);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the from address of this message.
+     *
+     * @return mixed
+     */
+    public function getFrom()
+    {
+        return $this->getHeaderFieldModel('From');
+    }
+
+    /**
+     * Add a Reply-To: address to this message.
+     *
+     * If $name is passed this name will be associated with the address.
+     *
+     * @param string $address
+     * @param string $name    optional
+     *
+     * @return $this
+     */
+    public function addReplyTo($address, $name = null)
+    {
+        $current = $this->getReplyTo();
+        $current[$address] = $name;
+
+        return $this->setReplyTo($current);
+    }
+
+    /**
+     * Set the reply-to address of this message.
+     *
+     * You may pass an array of addresses if replies will go to multiple people.
+     *
+     * If $name is passed and the first parameter is a string, this name will be
+     * associated with the address.
+     *
+     * @param mixed  $addresses
+     * @param string $name      optional
+     *
+     * @return $this
+     */
+    public function setReplyTo($addresses, $name = null)
+    {
+        if (!is_array($addresses) && isset($name)) {
+            $addresses = array($addresses => $name);
+        }
+
+        if (!$this->setHeaderFieldModel('Reply-To', (array) $addresses)) {
+            $this->getHeaders()->addMailboxHeader('Reply-To', (array) $addresses);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the reply-to address of this message.
+     *
+     * @return string
+     */
+    public function getReplyTo()
+    {
+        return $this->getHeaderFieldModel('Reply-To');
+    }
+
+    /**
+     * Add a To: address to this message.
+     *
+     * If $name is passed this name will be associated with the address.
+     *
+     * @param string $address
+     * @param string $name    optional
+     *
+     * @return $this
+     */
+    public function addTo($address, $name = null)
+    {
+        $current = $this->getTo();
+        $current[$address] = $name;
+
+        return $this->setTo($current);
+    }
+
+    /**
+     * Set the to addresses of this message.
+     *
+     * If multiple recipients will receive the message an array should be used.
+     * Example: array('receiver@domain.org', 'other@domain.org' => 'A name')
+     *
+     * If $name is passed and the first parameter is a string, this name will be
+     * associated with the address.
+     *
+     * @param mixed  $addresses
+     * @param string $name      optional
+     *
+     * @return $this
+     */
+    public function setTo($addresses, $name = null)
+    {
+        if (!is_array($addresses) && isset($name)) {
+            $addresses = array($addresses => $name);
+        }
+
+        if (!$this->setHeaderFieldModel('To', (array) $addresses)) {
+            $this->getHeaders()->addMailboxHeader('To', (array) $addresses);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the To addresses of this message.
+     *
+     * @return array
+     */
+    public function getTo()
+    {
+        return $this->getHeaderFieldModel('To');
+    }
+
+    /**
+     * Add a Cc: address to this message.
+     *
+     * If $name is passed this name will be associated with the address.
+     *
+     * @param string $address
+     * @param string $name    optional
+     *
+     * @return $this
+     */
+    public function addCc($address, $name = null)
+    {
+        $current = $this->getCc();
+        $current[$address] = $name;
+
+        return $this->setCc($current);
+    }
+
+    /**
+     * Set the Cc addresses of this message.
+     *
+     * If $name is passed and the first parameter is a string, this name will be
+     * associated with the address.
+     *
+     * @param mixed  $addresses
+     * @param string $name      optional
+     *
+     * @return $this
+     */
+    public function setCc($addresses, $name = null)
+    {
+        if (!is_array($addresses) && isset($name)) {
+            $addresses = array($addresses => $name);
+        }
+
+        if (!$this->setHeaderFieldModel('Cc', (array) $addresses)) {
+            $this->getHeaders()->addMailboxHeader('Cc', (array) $addresses);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the Cc address of this message.
+     *
+     * @return array
+     */
+    public function getCc()
+    {
+        return $this->getHeaderFieldModel('Cc');
+    }
+
+    /**
+     * Add a Bcc: address to this message.
+     *
+     * If $name is passed this name will be associated with the address.
+     *
+     * @param string $address
+     * @param string $name    optional
+     *
+     * @return $this
+     */
+    public function addBcc($address, $name = null)
+    {
+        $current = $this->getBcc();
+        $current[$address] = $name;
+
+        return $this->setBcc($current);
+    }
+
+    /**
+     * Set the Bcc addresses of this message.
+     *
+     * If $name is passed and the first parameter is a string, this name will be
+     * associated with the address.
+     *
+     * @param mixed  $addresses
+     * @param string $name      optional
+     *
+     * @return $this
+     */
+    public function setBcc($addresses, $name = null)
+    {
+        if (!is_array($addresses) && isset($name)) {
+            $addresses = array($addresses => $name);
+        }
+
+        if (!$this->setHeaderFieldModel('Bcc', (array) $addresses)) {
+            $this->getHeaders()->addMailboxHeader('Bcc', (array) $addresses);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the Bcc addresses of this message.
+     *
+     * @return array
+     */
+    public function getBcc()
+    {
+        return $this->getHeaderFieldModel('Bcc');
+    }
+
+    /**
+     * Set the priority of this message.
+     *
+     * The value is an integer where 1 is the highest priority and 5 is the lowest.
+     *
+     * @param int $priority
+     *
+     * @return $this
+     */
+    public function setPriority($priority)
+    {
+        $priorityMap = array(
+            self::PRIORITY_HIGHEST => 'Highest',
+            self::PRIORITY_HIGH => 'High',
+            self::PRIORITY_NORMAL => 'Normal',
+            self::PRIORITY_LOW => 'Low',
+            self::PRIORITY_LOWEST => 'Lowest',
+            );
+        $pMapKeys = array_keys($priorityMap);
+        if ($priority > max($pMapKeys)) {
+            $priority = max($pMapKeys);
+        } elseif ($priority < min($pMapKeys)) {
+            $priority = min($pMapKeys);
+        }
+        if (!$this->setHeaderFieldModel('X-Priority',
+            sprintf('%d (%s)', $priority, $priorityMap[$priority]))) {
+            $this->getHeaders()->addTextHeader('X-Priority',
+                sprintf('%d (%s)', $priority, $priorityMap[$priority]));
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the priority of this message.
+     *
+     * The returned value is an integer where 1 is the highest priority and 5
+     * is the lowest.
+     *
+     * @return int
+     */
+    public function getPriority()
+    {
+        list($priority) = sscanf($this->getHeaderFieldModel('X-Priority'),
+            '%[1-5]'
+            );
+
+        return isset($priority) ? $priority : 3;
+    }
+
+    /**
+     * Ask for a delivery receipt from the recipient to be sent to $addresses.
+     *
+     * @param array $addresses
+     *
+     * @return $this
+     */
+    public function setReadReceiptTo($addresses)
+    {
+        if (!$this->setHeaderFieldModel('Disposition-Notification-To', $addresses)) {
+            $this->getHeaders()
+                ->addMailboxHeader('Disposition-Notification-To', $addresses);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the addresses to which a read-receipt will be sent.
+     *
+     * @return string
+     */
+    public function getReadReceiptTo()
+    {
+        return $this->getHeaderFieldModel('Disposition-Notification-To');
+    }
+
+    /**
+     * Attach a {@link Swift_Mime_SimpleMimeEntity} such as an Attachment or MimePart.
+     *
+     * @param Swift_Mime_SimpleMimeEntity $entity
+     *
+     * @return $this
+     */
+    public function attach(Swift_Mime_SimpleMimeEntity $entity)
+    {
+        $this->setChildren(array_merge($this->getChildren(), array($entity)));
+
+        return $this;
+    }
+
+    /**
+     * Remove an already attached entity.
+     *
+     * @param Swift_Mime_SimpleMimeEntity $entity
+     *
+     * @return $this
+     */
+    public function detach(Swift_Mime_SimpleMimeEntity $entity)
+    {
+        $newChildren = array();
+        foreach ($this->getChildren() as $child) {
+            if ($entity !== $child) {
+                $newChildren[] = $child;
+            }
+        }
+        $this->setChildren($newChildren);
+
+        return $this;
+    }
+
+    /**
+     * Attach a {@link Swift_Mime_SimpleMimeEntity} and return it's CID source.
+     * This method should be used when embedding images or other data in a message.
+     *
+     * @param Swift_Mime_SimpleMimeEntity $entity
+     *
+     * @return string
+     */
+    public function embed(Swift_Mime_SimpleMimeEntity $entity)
+    {
+        $this->attach($entity);
+
+        return 'cid:'.$entity->getId();
+    }
+
+    /**
+     * Get this message as a complete string.
+     *
+     * @return string
+     */
+    public function toString()
+    {
+        if (count($children = $this->getChildren()) > 0 && $this->getBody() != '') {
+            $this->setChildren(array_merge(array($this->becomeMimePart()), $children));
+            $string = parent::toString();
+            $this->setChildren($children);
+        } else {
+            $string = parent::toString();
+        }
+
+        return $string;
+    }
+
+    /**
+     * Returns a string representation of this object.
+     *
+     * @see toString()
+     *
+     * @return string
+     */
+    public function __toString()
+    {
+        return $this->toString();
+    }
+
+    /**
+     * Write this message to a {@link Swift_InputByteStream}.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function toByteStream(Swift_InputByteStream $is)
+    {
+        if (count($children = $this->getChildren()) > 0 && $this->getBody() != '') {
+            $this->setChildren(array_merge(array($this->becomeMimePart()), $children));
+            parent::toByteStream($is);
+            $this->setChildren($children);
+        } else {
+            parent::toByteStream($is);
+        }
+    }
+
+    /** @see Swift_Mime_SimpleMimeEntity::getIdField() */
+    protected function getIdField()
+    {
+        return 'Message-ID';
+    }
+
+    /** Turn the body of this message into a child of itself if needed */
+    protected function becomeMimePart()
+    {
+        $part = new parent($this->getHeaders()->newInstance(), $this->getEncoder(),
+            $this->getCache(), $this->getIdGenerator(), $this->userCharset
+            );
+        $part->setContentType($this->userContentType);
+        $part->setBody($this->getBody());
+        $part->setFormat($this->userFormat);
+        $part->setDelSp($this->userDelSp);
+        $part->setNestingLevel($this->getTopNestingLevel());
+
+        return $part;
+    }
+
+    /** Get the highest nesting level nested inside this message */
+    private function getTopNestingLevel()
+    {
+        $highestLevel = $this->getNestingLevel();
+        foreach ($this->getChildren() as $child) {
+            $childLevel = $child->getNestingLevel();
+            if ($highestLevel < $childLevel) {
+                $highestLevel = $childLevel;
+            }
+        }
+
+        return $highestLevel;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Interface for all Header Encoding schemes.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Mime_HeaderEncoder extends Swift_Encoder
+{
+    /**
+     * Get the MIME name of this content encoding scheme.
+     *
+     * @return string
+     */
+    public function getName();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/IdGenerator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/IdGenerator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/IdGenerator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/IdGenerator.php	(date 1495187412000)
@@ -0,0 +1,53 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Message ID generator.
+ */
+class Swift_Mime_IdGenerator implements Swift_IdGenerator
+{
+    /**
+     * @param string $idRight
+     */
+    public function __construct($idRight)
+    {
+        $this->idRight = $idRight;
+    }
+
+    /**
+     * Returns the right-hand side of the "@" used in all generated IDs.
+     *
+     * @return string
+     */
+    public function getIdRight()
+    {
+        return $this->idRight;
+    }
+
+    /**
+     * Sets the right-hand side of the "@" to use in all generated IDs.
+     *
+     * @param string $idRight
+     */
+    public function setIdRight($idRight)
+    {
+        $this->idRight = $idRight;
+    }
+
+    /**
+     * @return string
+     */
+    public function generateId()
+    {
+        $idLeft = md5(getmypid().'.'.time().'.'.uniqid(mt_rand(), true));
+
+        return $idLeft.'@'.$this->idRight;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventDispatcher.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventDispatcher.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventDispatcher.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventDispatcher.php	(date 1495187412000)
@@ -0,0 +1,83 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Interface for the EventDispatcher which handles the event dispatching layer.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Events_EventDispatcher
+{
+    /**
+     * Create a new SendEvent for $source and $message.
+     *
+     * @param Swift_Transport $source
+     * @param Swift_Mime_SimpleMessage
+     *
+     * @return Swift_Events_SendEvent
+     */
+    public function createSendEvent(Swift_Transport $source, Swift_Mime_SimpleMessage $message);
+
+    /**
+     * Create a new CommandEvent for $source and $command.
+     *
+     * @param Swift_Transport $source
+     * @param string          $command      That will be executed
+     * @param array           $successCodes That are needed
+     *
+     * @return Swift_Events_CommandEvent
+     */
+    public function createCommandEvent(Swift_Transport $source, $command, $successCodes = array());
+
+    /**
+     * Create a new ResponseEvent for $source and $response.
+     *
+     * @param Swift_Transport $source
+     * @param string          $response
+     * @param bool            $valid    If the response is valid
+     *
+     * @return Swift_Events_ResponseEvent
+     */
+    public function createResponseEvent(Swift_Transport $source, $response, $valid);
+
+    /**
+     * Create a new TransportChangeEvent for $source.
+     *
+     * @param Swift_Transport $source
+     *
+     * @return Swift_Events_TransportChangeEvent
+     */
+    public function createTransportChangeEvent(Swift_Transport $source);
+
+    /**
+     * Create a new TransportExceptionEvent for $source.
+     *
+     * @param Swift_Transport          $source
+     * @param Swift_TransportException $ex
+     *
+     * @return Swift_Events_TransportExceptionEvent
+     */
+    public function createTransportExceptionEvent(Swift_Transport $source, Swift_TransportException $ex);
+
+    /**
+     * Bind an event listener to this dispatcher.
+     *
+     * @param Swift_Events_EventListener $listener
+     */
+    public function bindEventListener(Swift_Events_EventListener $listener);
+
+    /**
+     * Dispatch the given Event to all suitable listeners.
+     *
+     * @param Swift_Events_EventObject $evt
+     * @param string                   $target method
+     */
+    public function dispatchEvent(Swift_Events_EventObject $evt, $target);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventListener.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventListener.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventListener.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventListener.php	(date 1495187412000)
@@ -0,0 +1,18 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An identity interface which all EventListeners must extend.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Events_EventListener
+{
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventObject.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventObject.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventObject.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/EventObject.php	(date 1495187412000)
@@ -0,0 +1,63 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A base Event which all Event classes inherit from.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Events_EventObject implements Swift_Events_Event
+{
+    /** The source of this Event */
+    private $source;
+
+    /** The state of this Event (should it bubble up the stack?) */
+    private $bubbleCancelled = false;
+
+    /**
+     * Create a new EventObject originating at $source.
+     *
+     * @param object $source
+     */
+    public function __construct($source)
+    {
+        $this->source = $source;
+    }
+
+    /**
+     * Get the source object of this event.
+     *
+     * @return object
+     */
+    public function getSource()
+    {
+        return $this->source;
+    }
+
+    /**
+     * Prevent this Event from bubbling any further up the stack.
+     *
+     * @param bool $cancel, optional
+     */
+    public function cancelBubble($cancel = true)
+    {
+        $this->bubbleCancelled = $cancel;
+    }
+
+    /**
+     * Returns true if this Event will not bubble any further up the stack.
+     *
+     * @return bool
+     */
+    public function bubbleCancelled()
+    {
+        return $this->bubbleCancelled;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/ResponseEvent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/ResponseEvent.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/ResponseEvent.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/ResponseEvent.php	(date 1495187412000)
@@ -0,0 +1,65 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Generated when a response is received on a SMTP connection.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Events_ResponseEvent extends Swift_Events_EventObject
+{
+    /**
+     * The overall result.
+     *
+     * @var bool
+     */
+    private $valid;
+
+    /**
+     * The response received from the server.
+     *
+     * @var string
+     */
+    private $response;
+
+    /**
+     * Create a new ResponseEvent for $source and $response.
+     *
+     * @param Swift_Transport $source
+     * @param string          $response
+     * @param bool            $valid
+     */
+    public function __construct(Swift_Transport $source, $response, $valid = false)
+    {
+        parent::__construct($source);
+        $this->response = $response;
+        $this->valid = $valid;
+    }
+
+    /**
+     * Get the response which was received from the server.
+     *
+     * @return string
+     */
+    public function getResponse()
+    {
+        return $this->response;
+    }
+
+    /**
+     * Get the success status of this Event.
+     *
+     * @return bool
+     */
+    public function isValid()
+    {
+        return $this->valid;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMimeEntity.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMimeEntity.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMimeEntity.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMimeEntity.php	(date 1495187412000)
@@ -0,0 +1,823 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A MIME entity, in a multipart message.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_SimpleMimeEntity implements Swift_Mime_CharsetObserver, Swift_Mime_EncodingObserver
+{
+    /** Main message document; there can only be one of these */
+    const LEVEL_TOP = 16;
+
+    /** An entity which nests with the same precedence as an attachment */
+    const LEVEL_MIXED = 256;
+
+    /** An entity which nests with the same precedence as a mime part */
+    const LEVEL_ALTERNATIVE = 4096;
+
+    /** An entity which nests with the same precedence as embedded content */
+    const LEVEL_RELATED = 65536;
+
+    /** A collection of Headers for this mime entity */
+    private $headers;
+
+    /** The body as a string, or a stream */
+    private $body;
+
+    /** The encoder that encodes the body into a streamable format */
+    private $encoder;
+
+    /** Message ID generator */
+    private $idGenerator;
+
+    /** A mime boundary, if any is used */
+    private $boundary;
+
+    /** Mime types to be used based on the nesting level */
+    private $compositeRanges = array(
+        'multipart/mixed' => array(self::LEVEL_TOP, self::LEVEL_MIXED),
+        'multipart/alternative' => array(self::LEVEL_MIXED, self::LEVEL_ALTERNATIVE),
+        'multipart/related' => array(self::LEVEL_ALTERNATIVE, self::LEVEL_RELATED),
+    );
+
+    /** A set of filter rules to define what level an entity should be nested at */
+    private $compoundLevelFilters = array();
+
+    /** The nesting level of this entity */
+    private $nestingLevel = self::LEVEL_ALTERNATIVE;
+
+    /** A KeyCache instance used during encoding and streaming */
+    private $cache;
+
+    /** Direct descendants of this entity */
+    private $immediateChildren = array();
+
+    /** All descendants of this entity */
+    private $children = array();
+
+    /** The maximum line length of the body of this entity */
+    private $maxLineLength = 78;
+
+    /** The order in which alternative mime types should appear */
+    private $alternativePartOrder = array(
+        'text/plain' => 1,
+        'text/html' => 2,
+        'multipart/related' => 3,
+    );
+
+    /** The CID of this entity */
+    private $id;
+
+    /** The key used for accessing the cache */
+    private $cacheKey;
+
+    protected $userContentType;
+
+    /**
+     * Create a new SimpleMimeEntity with $headers, $encoder and $cache.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     * @param Swift_Mime_ContentEncoder  $encoder
+     * @param Swift_KeyCache             $cache
+     * @param Swift_IdGenerator          $idGenerator
+     */
+    public function __construct(Swift_Mime_SimpleHeaderSet $headers, Swift_Mime_ContentEncoder $encoder, Swift_KeyCache $cache, Swift_IdGenerator $idGenerator)
+    {
+        $this->cacheKey = md5(uniqid(getmypid().mt_rand(), true));
+        $this->cache = $cache;
+        $this->headers = $headers;
+        $this->idGenerator = $idGenerator;
+        $this->setEncoder($encoder);
+        $this->headers->defineOrdering(array('Content-Type', 'Content-Transfer-Encoding'));
+
+        // This array specifies that, when the entire MIME document contains
+        // $compoundLevel, then for each child within $level, if its Content-Type
+        // is $contentType then it should be treated as if it's level is
+        // $neededLevel instead.  I tried to write that unambiguously! :-\
+        // Data Structure:
+        // array (
+        //   $compoundLevel => array(
+        //     $level => array(
+        //       $contentType => $neededLevel
+        //     )
+        //   )
+        // )
+
+        $this->compoundLevelFilters = array(
+            (self::LEVEL_ALTERNATIVE + self::LEVEL_RELATED) => array(
+                self::LEVEL_ALTERNATIVE => array(
+                    'text/plain' => self::LEVEL_ALTERNATIVE,
+                    'text/html' => self::LEVEL_RELATED,
+                    ),
+                ),
+            );
+
+        $this->id = $this->idGenerator->generateId();
+    }
+
+    /**
+     * Generate a new Content-ID or Message-ID for this MIME entity.
+     *
+     * @return string
+     */
+    public function generateId()
+    {
+        $this->setId($this->idGenerator->generateId());
+
+        return $this->id;
+    }
+
+    /**
+     * Get the {@link Swift_Mime_SimpleHeaderSet} for this entity.
+     *
+     * @return Swift_Mime_SimpleHeaderSet
+     */
+    public function getHeaders()
+    {
+        return $this->headers;
+    }
+
+    /**
+     * Get the nesting level of this entity.
+     *
+     * @see LEVEL_TOP, LEVEL_MIXED, LEVEL_RELATED, LEVEL_ALTERNATIVE
+     *
+     * @return int
+     */
+    public function getNestingLevel()
+    {
+        return $this->nestingLevel;
+    }
+
+    /**
+     * Get the Content-type of this entity.
+     *
+     * @return string
+     */
+    public function getContentType()
+    {
+        return $this->getHeaderFieldModel('Content-Type');
+    }
+
+    /**
+     * Set the Content-type of this entity.
+     *
+     * @param string $type
+     *
+     * @return $this
+     */
+    public function setContentType($type)
+    {
+        $this->setContentTypeInHeaders($type);
+        // Keep track of the value so that if the content-type changes automatically
+        // due to added child entities, it can be restored if they are later removed
+        $this->userContentType = $type;
+
+        return $this;
+    }
+
+    /**
+     * Get the CID of this entity.
+     *
+     * The CID will only be present in headers if a Content-ID header is present.
+     *
+     * @return string
+     */
+    public function getId()
+    {
+        $tmp = (array) $this->getHeaderFieldModel($this->getIdField());
+
+        return $this->headers->has($this->getIdField()) ? current($tmp) : $this->id;
+    }
+
+    /**
+     * Set the CID of this entity.
+     *
+     * @param string $id
+     *
+     * @return $this
+     */
+    public function setId($id)
+    {
+        if (!$this->setHeaderFieldModel($this->getIdField(), $id)) {
+            $this->headers->addIdHeader($this->getIdField(), $id);
+        }
+        $this->id = $id;
+
+        return $this;
+    }
+
+    /**
+     * Get the description of this entity.
+     *
+     * This value comes from the Content-Description header if set.
+     *
+     * @return string
+     */
+    public function getDescription()
+    {
+        return $this->getHeaderFieldModel('Content-Description');
+    }
+
+    /**
+     * Set the description of this entity.
+     *
+     * This method sets a value in the Content-ID header.
+     *
+     * @param string $description
+     *
+     * @return $this
+     */
+    public function setDescription($description)
+    {
+        if (!$this->setHeaderFieldModel('Content-Description', $description)) {
+            $this->headers->addTextHeader('Content-Description', $description);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the maximum line length of the body of this entity.
+     *
+     * @return int
+     */
+    public function getMaxLineLength()
+    {
+        return $this->maxLineLength;
+    }
+
+    /**
+     * Set the maximum line length of lines in this body.
+     *
+     * Though not enforced by the library, lines should not exceed 1000 chars.
+     *
+     * @param int $length
+     *
+     * @return $this
+     */
+    public function setMaxLineLength($length)
+    {
+        $this->maxLineLength = $length;
+
+        return $this;
+    }
+
+    /**
+     * Get all children added to this entity.
+     *
+     * @return Swift_Mime_SimpleMimeEntity[]
+     */
+    public function getChildren()
+    {
+        return $this->children;
+    }
+
+    /**
+     * Set all children of this entity.
+     *
+     * @param Swift_Mime_SimpleMimeEntity[] $children
+     * @param int                           $compoundLevel For internal use only
+     *
+     * @return $this
+     */
+    public function setChildren(array $children, $compoundLevel = null)
+    {
+        // TODO: Try to refactor this logic
+        $compoundLevel = isset($compoundLevel) ? $compoundLevel : $this->getCompoundLevel($children);
+        $immediateChildren = array();
+        $grandchildren = array();
+        $newContentType = $this->userContentType;
+
+        foreach ($children as $child) {
+            $level = $this->getNeededChildLevel($child, $compoundLevel);
+            if (empty($immediateChildren)) {
+                //first iteration
+                $immediateChildren = array($child);
+            } else {
+                $nextLevel = $this->getNeededChildLevel($immediateChildren[0], $compoundLevel);
+                if ($nextLevel == $level) {
+                    $immediateChildren[] = $child;
+                } elseif ($level < $nextLevel) {
+                    // Re-assign immediateChildren to grandchildren
+                    $grandchildren = array_merge($grandchildren, $immediateChildren);
+                    // Set new children
+                    $immediateChildren = array($child);
+                } else {
+                    $grandchildren[] = $child;
+                }
+            }
+        }
+
+        if ($immediateChildren) {
+            $lowestLevel = $this->getNeededChildLevel($immediateChildren[0], $compoundLevel);
+
+            // Determine which composite media type is needed to accommodate the
+            // immediate children
+            foreach ($this->compositeRanges as $mediaType => $range) {
+                if ($lowestLevel > $range[0] && $lowestLevel <= $range[1]) {
+                    $newContentType = $mediaType;
+
+                    break;
+                }
+            }
+
+            // Put any grandchildren in a subpart
+            if (!empty($grandchildren)) {
+                $subentity = $this->createChild();
+                $subentity->setNestingLevel($lowestLevel);
+                $subentity->setChildren($grandchildren, $compoundLevel);
+                array_unshift($immediateChildren, $subentity);
+            }
+        }
+
+        $this->immediateChildren = $immediateChildren;
+        $this->children = $children;
+        $this->setContentTypeInHeaders($newContentType);
+        $this->fixHeaders();
+        $this->sortChildren();
+
+        return $this;
+    }
+
+    /**
+     * Get the body of this entity as a string.
+     *
+     * @return string
+     */
+    public function getBody()
+    {
+        return $this->body instanceof Swift_OutputByteStream ? $this->readStream($this->body) : $this->body;
+    }
+
+    /**
+     * Set the body of this entity, either as a string, or as an instance of
+     * {@link Swift_OutputByteStream}.
+     *
+     * @param mixed  $body
+     * @param string $contentType optional
+     *
+     * @return $this
+     */
+    public function setBody($body, $contentType = null)
+    {
+        if ($body !== $this->body) {
+            $this->clearCache();
+        }
+
+        $this->body = $body;
+        if (isset($contentType)) {
+            $this->setContentType($contentType);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the encoder used for the body of this entity.
+     *
+     * @return Swift_Mime_ContentEncoder
+     */
+    public function getEncoder()
+    {
+        return $this->encoder;
+    }
+
+    /**
+     * Set the encoder used for the body of this entity.
+     *
+     * @param Swift_Mime_ContentEncoder $encoder
+     *
+     * @return $this
+     */
+    public function setEncoder(Swift_Mime_ContentEncoder $encoder)
+    {
+        if ($encoder !== $this->encoder) {
+            $this->clearCache();
+        }
+
+        $this->encoder = $encoder;
+        $this->setEncoding($encoder->getName());
+        $this->notifyEncoderChanged($encoder);
+
+        return $this;
+    }
+
+    /**
+     * Get the boundary used to separate children in this entity.
+     *
+     * @return string
+     */
+    public function getBoundary()
+    {
+        if (!isset($this->boundary)) {
+            $this->boundary = '_=_swift_v4_'.time().'_'.md5(getmypid().mt_rand().uniqid('', true)).'_=_';
+        }
+
+        return $this->boundary;
+    }
+
+    /**
+     * Set the boundary used to separate children in this entity.
+     *
+     * @param string $boundary
+     *
+     * @throws Swift_RfcComplianceException
+     *
+     * @return $this
+     */
+    public function setBoundary($boundary)
+    {
+        $this->assertValidBoundary($boundary);
+        $this->boundary = $boundary;
+
+        return $this;
+    }
+
+    /**
+     * Receive notification that the charset of this entity, or a parent entity
+     * has changed.
+     *
+     * @param string $charset
+     */
+    public function charsetChanged($charset)
+    {
+        $this->notifyCharsetChanged($charset);
+    }
+
+    /**
+     * Receive notification that the encoder of this entity or a parent entity
+     * has changed.
+     *
+     * @param Swift_Mime_ContentEncoder $encoder
+     */
+    public function encoderChanged(Swift_Mime_ContentEncoder $encoder)
+    {
+        $this->notifyEncoderChanged($encoder);
+    }
+
+    /**
+     * Get this entire entity as a string.
+     *
+     * @return string
+     */
+    public function toString()
+    {
+        $string = $this->headers->toString();
+        $string .= $this->bodyToString();
+
+        return $string;
+    }
+
+    /**
+     * Get this entire entity as a string.
+     *
+     * @return string
+     */
+    protected function bodyToString()
+    {
+        $string = '';
+
+        if (isset($this->body) && empty($this->immediateChildren)) {
+            if ($this->cache->hasKey($this->cacheKey, 'body')) {
+                $body = $this->cache->getString($this->cacheKey, 'body');
+            } else {
+                $body = "\r\n".$this->encoder->encodeString($this->getBody(), 0, $this->getMaxLineLength());
+                $this->cache->setString($this->cacheKey, 'body', $body, Swift_KeyCache::MODE_WRITE);
+            }
+            $string .= $body;
+        }
+
+        if (!empty($this->immediateChildren)) {
+            foreach ($this->immediateChildren as $child) {
+                $string .= "\r\n\r\n--".$this->getBoundary()."\r\n";
+                $string .= $child->toString();
+            }
+            $string .= "\r\n\r\n--".$this->getBoundary()."--\r\n";
+        }
+
+        return $string;
+    }
+
+    /**
+     * Returns a string representation of this object.
+     *
+     * @see toString()
+     *
+     * @return string
+     */
+    public function __toString()
+    {
+        return $this->toString();
+    }
+
+    /**
+     * Write this entire entity to a {@see Swift_InputByteStream}.
+     *
+     * @param Swift_InputByteStream
+     */
+    public function toByteStream(Swift_InputByteStream $is)
+    {
+        $is->write($this->headers->toString());
+        $is->commit();
+
+        $this->bodyToByteStream($is);
+    }
+
+    /**
+     * Write this entire entity to a {@link Swift_InputByteStream}.
+     *
+     * @param Swift_InputByteStream
+     */
+    protected function bodyToByteStream(Swift_InputByteStream $is)
+    {
+        if (empty($this->immediateChildren)) {
+            if (isset($this->body)) {
+                if ($this->cache->hasKey($this->cacheKey, 'body')) {
+                    $this->cache->exportToByteStream($this->cacheKey, 'body', $is);
+                } else {
+                    $cacheIs = $this->cache->getInputByteStream($this->cacheKey, 'body');
+                    if ($cacheIs) {
+                        $is->bind($cacheIs);
+                    }
+
+                    $is->write("\r\n");
+
+                    if ($this->body instanceof Swift_OutputByteStream) {
+                        $this->body->setReadPointer(0);
+
+                        $this->encoder->encodeByteStream($this->body, $is, 0, $this->getMaxLineLength());
+                    } else {
+                        $is->write($this->encoder->encodeString($this->getBody(), 0, $this->getMaxLineLength()));
+                    }
+
+                    if ($cacheIs) {
+                        $is->unbind($cacheIs);
+                    }
+                }
+            }
+        }
+
+        if (!empty($this->immediateChildren)) {
+            foreach ($this->immediateChildren as $child) {
+                $is->write("\r\n\r\n--".$this->getBoundary()."\r\n");
+                $child->toByteStream($is);
+            }
+            $is->write("\r\n\r\n--".$this->getBoundary()."--\r\n");
+        }
+    }
+
+    /**
+     * Get the name of the header that provides the ID of this entity.
+     */
+    protected function getIdField()
+    {
+        return 'Content-ID';
+    }
+
+    /**
+     * Get the model data (usually an array or a string) for $field.
+     */
+    protected function getHeaderFieldModel($field)
+    {
+        if ($this->headers->has($field)) {
+            return $this->headers->get($field)->getFieldBodyModel();
+        }
+    }
+
+    /**
+     * Set the model data for $field.
+     */
+    protected function setHeaderFieldModel($field, $model)
+    {
+        if ($this->headers->has($field)) {
+            $this->headers->get($field)->setFieldBodyModel($model);
+
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Get the parameter value of $parameter on $field header.
+     */
+    protected function getHeaderParameter($field, $parameter)
+    {
+        if ($this->headers->has($field)) {
+            return $this->headers->get($field)->getParameter($parameter);
+        }
+    }
+
+    /**
+     * Set the parameter value of $parameter on $field header.
+     */
+    protected function setHeaderParameter($field, $parameter, $value)
+    {
+        if ($this->headers->has($field)) {
+            $this->headers->get($field)->setParameter($parameter, $value);
+
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Re-evaluate what content type and encoding should be used on this entity.
+     */
+    protected function fixHeaders()
+    {
+        if (count($this->immediateChildren)) {
+            $this->setHeaderParameter('Content-Type', 'boundary',
+                $this->getBoundary()
+                );
+            $this->headers->remove('Content-Transfer-Encoding');
+        } else {
+            $this->setHeaderParameter('Content-Type', 'boundary', null);
+            $this->setEncoding($this->encoder->getName());
+        }
+    }
+
+    /**
+     * Get the KeyCache used in this entity.
+     *
+     * @return Swift_KeyCache
+     */
+    protected function getCache()
+    {
+        return $this->cache;
+    }
+
+    /**
+     * Get the ID generator.
+     *
+     * @return Swift_IdGenerator
+     */
+    protected function getIdGenerator()
+    {
+        return $this->idGenerator;
+    }
+
+    /**
+     * Empty the KeyCache for this entity.
+     */
+    protected function clearCache()
+    {
+        $this->cache->clearKey($this->cacheKey, 'body');
+    }
+
+    private function readStream(Swift_OutputByteStream $os)
+    {
+        $string = '';
+        while (false !== $bytes = $os->read(8192)) {
+            $string .= $bytes;
+        }
+
+        $os->setReadPointer(0);
+
+        return $string;
+    }
+
+    private function setEncoding($encoding)
+    {
+        if (!$this->setHeaderFieldModel('Content-Transfer-Encoding', $encoding)) {
+            $this->headers->addTextHeader('Content-Transfer-Encoding', $encoding);
+        }
+    }
+
+    private function assertValidBoundary($boundary)
+    {
+        if (!preg_match('/^[a-z0-9\'\(\)\+_\-,\.\/:=\?\ ]{0,69}[a-z0-9\'\(\)\+_\-,\.\/:=\?]$/Di', $boundary)) {
+            throw new Swift_RfcComplianceException('Mime boundary set is not RFC 2046 compliant.');
+        }
+    }
+
+    private function setContentTypeInHeaders($type)
+    {
+        if (!$this->setHeaderFieldModel('Content-Type', $type)) {
+            $this->headers->addParameterizedHeader('Content-Type', $type);
+        }
+    }
+
+    private function setNestingLevel($level)
+    {
+        $this->nestingLevel = $level;
+    }
+
+    private function getCompoundLevel($children)
+    {
+        $level = 0;
+        foreach ($children as $child) {
+            $level |= $child->getNestingLevel();
+        }
+
+        return $level;
+    }
+
+    private function getNeededChildLevel($child, $compoundLevel)
+    {
+        $filter = array();
+        foreach ($this->compoundLevelFilters as $bitmask => $rules) {
+            if (($compoundLevel & $bitmask) === $bitmask) {
+                $filter = $rules + $filter;
+            }
+        }
+
+        $realLevel = $child->getNestingLevel();
+        $lowercaseType = strtolower($child->getContentType());
+
+        if (isset($filter[$realLevel]) && isset($filter[$realLevel][$lowercaseType])) {
+            return $filter[$realLevel][$lowercaseType];
+        }
+
+        return $realLevel;
+    }
+
+    private function createChild()
+    {
+        return new self($this->headers->newInstance(), $this->encoder, $this->cache, $this->idGenerator);
+    }
+
+    private function notifyEncoderChanged(Swift_Mime_ContentEncoder $encoder)
+    {
+        foreach ($this->immediateChildren as $child) {
+            $child->encoderChanged($encoder);
+        }
+    }
+
+    private function notifyCharsetChanged($charset)
+    {
+        $this->encoder->charsetChanged($charset);
+        $this->headers->charsetChanged($charset);
+        foreach ($this->immediateChildren as $child) {
+            $child->charsetChanged($charset);
+        }
+    }
+
+    private function sortChildren()
+    {
+        $shouldSort = false;
+        foreach ($this->immediateChildren as $child) {
+            // NOTE: This include alternative parts moved into a related part
+            if ($child->getNestingLevel() == self::LEVEL_ALTERNATIVE) {
+                $shouldSort = true;
+                break;
+            }
+        }
+
+        // Sort in order of preference, if there is one
+        if ($shouldSort) {
+            // Group the messages by order of preference
+            $sorted = array();
+            foreach ($this->immediateChildren as $child) {
+                $type = $child->getContentType();
+                $level = array_key_exists($type, $this->alternativePartOrder) ? $this->alternativePartOrder[$type] : max($this->alternativePartOrder) + 1;
+
+                if (empty($sorted[$level])) {
+                    $sorted[$level] = array();
+                }
+
+                $sorted[$level][] = $child;
+            }
+
+            ksort($sorted);
+
+            $this->immediateChildren = array_reduce($sorted, 'array_merge', array());
+        }
+    }
+
+    /**
+     * Empties it's own contents from the cache.
+     */
+    public function __destruct()
+    {
+        if ($this->cache instanceof Swift_KeyCache) {
+            $this->cache->clearAll($this->cacheKey);
+        }
+    }
+
+    /**
+     * Make a deep copy of object.
+     */
+    public function __clone()
+    {
+        $this->headers = clone $this->headers;
+        $this->encoder = clone $this->encoder;
+        $this->cacheKey = md5(uniqid(getmypid().mt_rand(), true));
+        $children = array();
+        foreach ($this->children as $pos => $child) {
+            $children[$pos] = clone $child;
+        }
+        $this->setChildren($children);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/CommandEvent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/CommandEvent.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/CommandEvent.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/CommandEvent.php	(date 1495187412000)
@@ -0,0 +1,65 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Generated when a command is sent over an SMTP connection.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Events_CommandEvent extends Swift_Events_EventObject
+{
+    /**
+     * The command sent to the server.
+     *
+     * @var string
+     */
+    private $command;
+
+    /**
+     * An array of codes which a successful response will contain.
+     *
+     * @var int[]
+     */
+    private $successCodes = array();
+
+    /**
+     * Create a new CommandEvent for $source with $command.
+     *
+     * @param Swift_Transport $source
+     * @param string          $command
+     * @param array           $successCodes
+     */
+    public function __construct(Swift_Transport $source, $command, $successCodes = array())
+    {
+        parent::__construct($source);
+        $this->command = $command;
+        $this->successCodes = $successCodes;
+    }
+
+    /**
+     * Get the command which was sent to the server.
+     *
+     * @return string
+     */
+    public function getCommand()
+    {
+        return $this->command;
+    }
+
+    /**
+     * Get the numeric response codes which indicate success for this command.
+     *
+     * @return int[]
+     */
+    public function getSuccessCodes()
+    {
+        return $this->successCodes;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/CommandListener.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/CommandListener.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/CommandListener.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/CommandListener.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Listens for Transports to send commands to the server.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Events_CommandListener extends Swift_Events_EventListener
+{
+    /**
+     * Invoked immediately following a command being sent.
+     *
+     * @param Swift_Events_CommandEvent $evt
+     */
+    public function commandSent(Swift_Events_CommandEvent $evt);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/Event.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/Event.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/Event.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/Event.php	(date 1495187412000)
@@ -0,0 +1,38 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * The minimum interface for an Event.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Events_Event
+{
+    /**
+     * Get the source object of this event.
+     *
+     * @return object
+     */
+    public function getSource();
+
+    /**
+     * Prevent this Event from bubbling any further up the stack.
+     *
+     * @param bool $cancel, optional
+     */
+    public function cancelBubble($cancel = true);
+
+    /**
+     * Returns true if this Event will not bubble any further up the stack.
+     *
+     * @return bool
+     */
+    public function bubbleCancelled();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportChangeEvent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportChangeEvent.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportChangeEvent.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportChangeEvent.php	(date 1495187412000)
@@ -0,0 +1,27 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Generated when the state of a Transport is changed (i.e. stopped/started).
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Events_TransportChangeEvent extends Swift_Events_EventObject
+{
+    /**
+     * Get the Transport.
+     *
+     * @return Swift_Transport
+     */
+    public function getTransport()
+    {
+        return $this->getSource();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportChangeListener.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportChangeListener.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportChangeListener.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportChangeListener.php	(date 1495187412000)
@@ -0,0 +1,45 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Listens for changes within the Transport system.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Events_TransportChangeListener extends Swift_Events_EventListener
+{
+    /**
+     * Invoked just before a Transport is started.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function beforeTransportStarted(Swift_Events_TransportChangeEvent $evt);
+
+    /**
+     * Invoked immediately after the Transport is started.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function transportStarted(Swift_Events_TransportChangeEvent $evt);
+
+    /**
+     * Invoked just before a Transport is stopped.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function beforeTransportStopped(Swift_Events_TransportChangeEvent $evt);
+
+    /**
+     * Invoked immediately after the Transport is stopped.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function transportStopped(Swift_Events_TransportChangeEvent $evt);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportExceptionEvent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportExceptionEvent.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportExceptionEvent.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportExceptionEvent.php	(date 1495187412000)
@@ -0,0 +1,46 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Generated when a TransportException is thrown from the Transport system.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Events_TransportExceptionEvent extends Swift_Events_EventObject
+{
+    /**
+     * The Exception thrown.
+     *
+     * @var Swift_TransportException
+     */
+    private $exception;
+
+    /**
+     * Create a new TransportExceptionEvent for $transport.
+     *
+     * @param Swift_Transport          $transport
+     * @param Swift_TransportException $ex
+     */
+    public function __construct(Swift_Transport $transport, Swift_TransportException $ex)
+    {
+        parent::__construct($transport);
+        $this->exception = $ex;
+    }
+
+    /**
+     * Get the TransportException thrown.
+     *
+     * @return Swift_TransportException
+     */
+    public function getException()
+    {
+        return $this->exception;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportExceptionListener.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportExceptionListener.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportExceptionListener.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/TransportExceptionListener.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Listens for Exceptions thrown from within the Transport system.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Events_TransportExceptionListener extends Swift_Events_EventListener
+{
+    /**
+     * Invoked as a TransportException is thrown in the Transport system.
+     *
+     * @param Swift_Events_TransportExceptionEvent $evt
+     */
+    public function exceptionThrown(Swift_Events_TransportExceptionEvent $evt);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/ResponseListener.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/ResponseListener.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/ResponseListener.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/ResponseListener.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Listens for responses from a remote SMTP server.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Events_ResponseListener extends Swift_Events_EventListener
+{
+    /**
+     * Invoked immediately following a response coming back.
+     *
+     * @param Swift_Events_ResponseEvent $evt
+     */
+    public function responseReceived(Swift_Events_ResponseEvent $evt);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SendEvent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SendEvent.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SendEvent.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SendEvent.php	(date 1495187412000)
@@ -0,0 +1,129 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Generated when a message is being sent.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Events_SendEvent extends Swift_Events_EventObject
+{
+    /** Sending has yet to occur */
+    const RESULT_PENDING = 0x0001;
+
+    /** Email is spooled, ready to be sent */
+    const RESULT_SPOOLED = 0x0011;
+
+    /** Sending was successful */
+    const RESULT_SUCCESS = 0x0010;
+
+    /** Sending worked, but there were some failures */
+    const RESULT_TENTATIVE = 0x0100;
+
+    /** Sending failed */
+    const RESULT_FAILED = 0x1000;
+
+    /**
+     * The Message being sent.
+     *
+     * @var Swift_Mime_SimpleMessage
+     */
+    private $message;
+
+    /**
+     * Any recipients which failed after sending.
+     *
+     * @var string[]
+     */
+    private $failedRecipients = array();
+
+    /**
+     * The overall result as a bitmask from the class constants.
+     *
+     * @var int
+     */
+    private $result;
+
+    /**
+     * Create a new SendEvent for $source and $message.
+     *
+     * @param Swift_Transport          $source
+     * @param Swift_Mime_SimpleMessage $message
+     */
+    public function __construct(Swift_Transport $source, Swift_Mime_SimpleMessage $message)
+    {
+        parent::__construct($source);
+        $this->message = $message;
+        $this->result = self::RESULT_PENDING;
+    }
+
+    /**
+     * Get the Transport used to send the Message.
+     *
+     * @return Swift_Transport
+     */
+    public function getTransport()
+    {
+        return $this->getSource();
+    }
+
+    /**
+     * Get the Message being sent.
+     *
+     * @return Swift_Mime_SimpleMessage
+     */
+    public function getMessage()
+    {
+        return $this->message;
+    }
+
+    /**
+     * Set the array of addresses that failed in sending.
+     *
+     * @param array $recipients
+     */
+    public function setFailedRecipients($recipients)
+    {
+        $this->failedRecipients = $recipients;
+    }
+
+    /**
+     * Get an recipient addresses which were not accepted for delivery.
+     *
+     * @return string[]
+     */
+    public function getFailedRecipients()
+    {
+        return $this->failedRecipients;
+    }
+
+    /**
+     * Set the result of sending.
+     *
+     * @param int $result
+     */
+    public function setResult($result)
+    {
+        $this->result = $result;
+    }
+
+    /**
+     * Get the result of this Event.
+     *
+     * The return value is a bitmask from
+     * {@see RESULT_PENDING, RESULT_SUCCESS, RESULT_TENTATIVE, RESULT_FAILED}
+     *
+     * @return int
+     */
+    public function getResult()
+    {
+        return $this->result;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SendListener.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SendListener.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SendListener.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SendListener.php	(date 1495187412000)
@@ -0,0 +1,31 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Listens for Messages being sent from within the Transport system.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Events_SendListener extends Swift_Events_EventListener
+{
+    /**
+     * Invoked immediately before the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt);
+
+    /**
+     * Invoked immediately after the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SimpleEventDispatcher.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SimpleEventDispatcher.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SimpleEventDispatcher.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Events/SimpleEventDispatcher.php	(date 1495187412000)
@@ -0,0 +1,156 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * The EventDispatcher which handles the event dispatching layer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Events_SimpleEventDispatcher implements Swift_Events_EventDispatcher
+{
+    /** A map of event types to their associated listener types */
+    private $eventMap = array();
+
+    /** Event listeners bound to this dispatcher */
+    private $listeners = array();
+
+    /** Listeners queued to have an Event bubbled up the stack to them */
+    private $bubbleQueue = array();
+
+    /**
+     * Create a new EventDispatcher.
+     */
+    public function __construct()
+    {
+        $this->eventMap = array(
+            'Swift_Events_CommandEvent' => 'Swift_Events_CommandListener',
+            'Swift_Events_ResponseEvent' => 'Swift_Events_ResponseListener',
+            'Swift_Events_SendEvent' => 'Swift_Events_SendListener',
+            'Swift_Events_TransportChangeEvent' => 'Swift_Events_TransportChangeListener',
+            'Swift_Events_TransportExceptionEvent' => 'Swift_Events_TransportExceptionListener',
+            );
+    }
+
+    /**
+     * Create a new SendEvent for $source and $message.
+     *
+     * @param Swift_Transport $source
+     * @param Swift_Mime_SimpleMessage
+     *
+     * @return Swift_Events_SendEvent
+     */
+    public function createSendEvent(Swift_Transport $source, Swift_Mime_SimpleMessage $message)
+    {
+        return new Swift_Events_SendEvent($source, $message);
+    }
+
+    /**
+     * Create a new CommandEvent for $source and $command.
+     *
+     * @param Swift_Transport $source
+     * @param string          $command      That will be executed
+     * @param array           $successCodes That are needed
+     *
+     * @return Swift_Events_CommandEvent
+     */
+    public function createCommandEvent(Swift_Transport $source, $command, $successCodes = array())
+    {
+        return new Swift_Events_CommandEvent($source, $command, $successCodes);
+    }
+
+    /**
+     * Create a new ResponseEvent for $source and $response.
+     *
+     * @param Swift_Transport $source
+     * @param string          $response
+     * @param bool            $valid    If the response is valid
+     *
+     * @return Swift_Events_ResponseEvent
+     */
+    public function createResponseEvent(Swift_Transport $source, $response, $valid)
+    {
+        return new Swift_Events_ResponseEvent($source, $response, $valid);
+    }
+
+    /**
+     * Create a new TransportChangeEvent for $source.
+     *
+     * @param Swift_Transport $source
+     *
+     * @return Swift_Events_TransportChangeEvent
+     */
+    public function createTransportChangeEvent(Swift_Transport $source)
+    {
+        return new Swift_Events_TransportChangeEvent($source);
+    }
+
+    /**
+     * Create a new TransportExceptionEvent for $source.
+     *
+     * @param Swift_Transport          $source
+     * @param Swift_TransportException $ex
+     *
+     * @return Swift_Events_TransportExceptionEvent
+     */
+    public function createTransportExceptionEvent(Swift_Transport $source, Swift_TransportException $ex)
+    {
+        return new Swift_Events_TransportExceptionEvent($source, $ex);
+    }
+
+    /**
+     * Bind an event listener to this dispatcher.
+     *
+     * @param Swift_Events_EventListener $listener
+     */
+    public function bindEventListener(Swift_Events_EventListener $listener)
+    {
+        foreach ($this->listeners as $l) {
+            // Already loaded
+            if ($l === $listener) {
+                return;
+            }
+        }
+        $this->listeners[] = $listener;
+    }
+
+    /**
+     * Dispatch the given Event to all suitable listeners.
+     *
+     * @param Swift_Events_EventObject $evt
+     * @param string                   $target method
+     */
+    public function dispatchEvent(Swift_Events_EventObject $evt, $target)
+    {
+        $this->prepareBubbleQueue($evt);
+        $this->bubble($evt, $target);
+    }
+
+    /** Queue listeners on a stack ready for $evt to be bubbled up it */
+    private function prepareBubbleQueue(Swift_Events_EventObject $evt)
+    {
+        $this->bubbleQueue = array();
+        $evtClass = get_class($evt);
+        foreach ($this->listeners as $listener) {
+            if (array_key_exists($evtClass, $this->eventMap)
+                && ($listener instanceof $this->eventMap[$evtClass])) {
+                $this->bubbleQueue[] = $listener;
+            }
+        }
+    }
+
+    /** Bubble $evt up the stack calling $target() on each listener */
+    private function bubble(Swift_Events_EventObject $evt, $target)
+    {
+        if (!$evt->bubbleCancelled() && $listener = array_shift($this->bubbleQueue)) {
+            $listener->$target($evt);
+            $this->bubble($evt, $target);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/Rfc2231Encoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/Rfc2231Encoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/Rfc2231Encoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/Rfc2231Encoder.php	(date 1495187412000)
@@ -0,0 +1,92 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles RFC 2231 specified Encoding in Swift Mailer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Encoder_Rfc2231Encoder implements Swift_Encoder
+{
+    /**
+     * A character stream to use when reading a string as characters instead of bytes.
+     *
+     * @var Swift_CharacterStream
+     */
+    private $charStream;
+
+    /**
+     * Creates a new Rfc2231Encoder using the given character stream instance.
+     *
+     * @param Swift_CharacterStream
+     */
+    public function __construct(Swift_CharacterStream $charStream)
+    {
+        $this->charStream = $charStream;
+    }
+
+    /**
+     * Takes an unencoded string and produces a string encoded according to
+     * RFC 2231 from it.
+     *
+     * @param string $string
+     * @param int    $firstLineOffset
+     * @param int    $maxLineLength   optional, 0 indicates the default of 75 bytes
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        $lines = array();
+        $lineCount = 0;
+        $lines[] = '';
+        $currentLine = &$lines[$lineCount++];
+
+        if (0 >= $maxLineLength) {
+            $maxLineLength = 75;
+        }
+
+        $this->charStream->flushContents();
+        $this->charStream->importString($string);
+
+        $thisLineLength = $maxLineLength - $firstLineOffset;
+
+        while (false !== $char = $this->charStream->read(4)) {
+            $encodedChar = rawurlencode($char);
+            if (0 != strlen($currentLine)
+                && strlen($currentLine.$encodedChar) > $thisLineLength) {
+                $lines[] = '';
+                $currentLine = &$lines[$lineCount++];
+                $thisLineLength = $maxLineLength;
+            }
+            $currentLine .= $encodedChar;
+        }
+
+        return implode("\r\n", $lines);
+    }
+
+    /**
+     * Updates the charset used.
+     *
+     * @param string $charset
+     */
+    public function charsetChanged($charset)
+    {
+        $this->charStream->setCharacterSet($charset);
+    }
+
+    /**
+     * Make a deep copy of object.
+     */
+    public function __clone()
+    {
+        $this->charStream = clone $this->charStream;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/AntiFloodPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/AntiFloodPlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/AntiFloodPlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/AntiFloodPlugin.php	(date 1495187412000)
@@ -0,0 +1,141 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Reduces network flooding when sending large amounts of mail.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_AntiFloodPlugin implements Swift_Events_SendListener, Swift_Plugins_Sleeper
+{
+    /**
+     * The number of emails to send before restarting Transport.
+     *
+     * @var int
+     */
+    private $threshold;
+
+    /**
+     * The number of seconds to sleep for during a restart.
+     *
+     * @var int
+     */
+    private $sleep;
+
+    /**
+     * The internal counter.
+     *
+     * @var int
+     */
+    private $counter = 0;
+
+    /**
+     * The Sleeper instance for sleeping.
+     *
+     * @var Swift_Plugins_Sleeper
+     */
+    private $sleeper;
+
+    /**
+     * Create a new AntiFloodPlugin with $threshold and $sleep time.
+     *
+     * @param int                   $threshold
+     * @param int                   $sleep     time
+     * @param Swift_Plugins_Sleeper $sleeper   (not needed really)
+     */
+    public function __construct($threshold = 99, $sleep = 0, Swift_Plugins_Sleeper $sleeper = null)
+    {
+        $this->setThreshold($threshold);
+        $this->setSleepTime($sleep);
+        $this->sleeper = $sleeper;
+    }
+
+    /**
+     * Set the number of emails to send before restarting.
+     *
+     * @param int $threshold
+     */
+    public function setThreshold($threshold)
+    {
+        $this->threshold = $threshold;
+    }
+
+    /**
+     * Get the number of emails to send before restarting.
+     *
+     * @return int
+     */
+    public function getThreshold()
+    {
+        return $this->threshold;
+    }
+
+    /**
+     * Set the number of seconds to sleep for during a restart.
+     *
+     * @param int $sleep time
+     */
+    public function setSleepTime($sleep)
+    {
+        $this->sleep = $sleep;
+    }
+
+    /**
+     * Get the number of seconds to sleep for during a restart.
+     *
+     * @return int
+     */
+    public function getSleepTime()
+    {
+        return $this->sleep;
+    }
+
+    /**
+     * Invoked immediately before the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt)
+    {
+    }
+
+    /**
+     * Invoked immediately after the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+        ++$this->counter;
+        if ($this->counter >= $this->threshold) {
+            $transport = $evt->getTransport();
+            $transport->stop();
+            if ($this->sleep) {
+                $this->sleep($this->sleep);
+            }
+            $transport->start();
+            $this->counter = 0;
+        }
+    }
+
+    /**
+     * Sleep for $seconds.
+     *
+     * @param int $seconds
+     */
+    public function sleep($seconds)
+    {
+        if (isset($this->sleeper)) {
+            $this->sleeper->sleep($seconds);
+        } else {
+            sleep($seconds);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/BandwidthMonitorPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/BandwidthMonitorPlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/BandwidthMonitorPlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/BandwidthMonitorPlugin.php	(date 1495187412000)
@@ -0,0 +1,164 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Reduces network flooding when sending large amounts of mail.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_BandwidthMonitorPlugin implements Swift_Events_SendListener, Swift_Events_CommandListener, Swift_Events_ResponseListener, Swift_InputByteStream
+{
+    /**
+     * The outgoing traffic counter.
+     *
+     * @var int
+     */
+    private $out = 0;
+
+    /**
+     * The incoming traffic counter.
+     *
+     * @var int
+     */
+    private $in = 0;
+
+    /** Bound byte streams */
+    private $mirrors = array();
+
+    /**
+     * Not used.
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt)
+    {
+    }
+
+    /**
+     * Invoked immediately after the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $message = $evt->getMessage();
+        $message->toByteStream($this);
+    }
+
+    /**
+     * Invoked immediately following a command being sent.
+     *
+     * @param Swift_Events_CommandEvent $evt
+     */
+    public function commandSent(Swift_Events_CommandEvent $evt)
+    {
+        $command = $evt->getCommand();
+        $this->out += strlen($command);
+    }
+
+    /**
+     * Invoked immediately following a response coming back.
+     *
+     * @param Swift_Events_ResponseEvent $evt
+     */
+    public function responseReceived(Swift_Events_ResponseEvent $evt)
+    {
+        $response = $evt->getResponse();
+        $this->in += strlen($response);
+    }
+
+    /**
+     * Called when a message is sent so that the outgoing counter can be increased.
+     *
+     * @param string $bytes
+     */
+    public function write($bytes)
+    {
+        $this->out += strlen($bytes);
+        foreach ($this->mirrors as $stream) {
+            $stream->write($bytes);
+        }
+    }
+
+    /**
+     * Not used.
+     */
+    public function commit()
+    {
+    }
+
+    /**
+     * Attach $is to this stream.
+     *
+     * The stream acts as an observer, receiving all data that is written.
+     * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function bind(Swift_InputByteStream $is)
+    {
+        $this->mirrors[] = $is;
+    }
+
+    /**
+     * Remove an already bound stream.
+     *
+     * If $is is not bound, no errors will be raised.
+     * If the stream currently has any buffered data it will be written to $is
+     * before unbinding occurs.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function unbind(Swift_InputByteStream $is)
+    {
+        foreach ($this->mirrors as $k => $stream) {
+            if ($is === $stream) {
+                unset($this->mirrors[$k]);
+            }
+        }
+    }
+
+    /**
+     * Not used.
+     */
+    public function flushBuffers()
+    {
+        foreach ($this->mirrors as $stream) {
+            $stream->flushBuffers();
+        }
+    }
+
+    /**
+     * Get the total number of bytes sent to the server.
+     *
+     * @return int
+     */
+    public function getBytesOut()
+    {
+        return $this->out;
+    }
+
+    /**
+     * Get the total number of bytes received from the server.
+     *
+     * @return int
+     */
+    public function getBytesIn()
+    {
+        return $this->in;
+    }
+
+    /**
+     * Reset the internal counters to zero.
+     */
+    public function reset()
+    {
+        $this->out = 0;
+        $this->in = 0;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer/ArrayRecipientIterator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer/ArrayRecipientIterator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer/ArrayRecipientIterator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer/ArrayRecipientIterator.php	(date 1495187412000)
@@ -0,0 +1,55 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Wraps a standard PHP array in an iterator.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mailer_ArrayRecipientIterator implements Swift_Mailer_RecipientIterator
+{
+    /**
+     * The list of recipients.
+     *
+     * @var array
+     */
+    private $recipients = array();
+
+    /**
+     * Create a new ArrayRecipientIterator from $recipients.
+     *
+     * @param array $recipients
+     */
+    public function __construct(array $recipients)
+    {
+        $this->recipients = $recipients;
+    }
+
+    /**
+     * Returns true only if there are more recipients to send to.
+     *
+     * @return bool
+     */
+    public function hasNext()
+    {
+        return !empty($this->recipients);
+    }
+
+    /**
+     * Returns an array where the keys are the addresses of recipients and the
+     * values are the names. e.g. ('foo@bar' => 'Foo') or ('foo@bar' => NULL).
+     *
+     * @return array
+     */
+    public function nextRecipient()
+    {
+        return array_splice($this->recipients, 0, 1);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer/RecipientIterator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer/RecipientIterator.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer/RecipientIterator.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mailer/RecipientIterator.php	(date 1495187412000)
@@ -0,0 +1,32 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Provides an abstract way of specifying recipients for batch sending.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Mailer_RecipientIterator
+{
+    /**
+     * Returns true only if there are more recipients to send to.
+     *
+     * @return bool
+     */
+    public function hasNext();
+
+    /**
+     * Returns an array where the keys are the addresses of recipients and the
+     * values are the names. e.g. ('foo@bar' => 'Foo') or ('foo@bar' => NULL).
+     *
+     * @return array
+     */
+    public function nextRecipient();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/Base64Encoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/Base64Encoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/Base64Encoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/Base64Encoder.php	(date 1495187412000)
@@ -0,0 +1,58 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles Base 64 Encoding in Swift Mailer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Encoder_Base64Encoder implements Swift_Encoder
+{
+    /**
+     * Takes an unencoded string and produces a Base64 encoded string from it.
+     *
+     * Base64 encoded strings have a maximum line length of 76 characters.
+     * If the first line needs to be shorter, indicate the difference with
+     * $firstLineOffset.
+     *
+     * @param string $string          to encode
+     * @param int    $firstLineOffset
+     * @param int    $maxLineLength   optional, 0 indicates the default of 76 bytes
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        if (0 >= $maxLineLength || 76 < $maxLineLength) {
+            $maxLineLength = 76;
+        }
+
+        $encodedString = base64_encode($string);
+        $firstLine = '';
+
+        if (0 != $firstLineOffset) {
+            $firstLine = substr(
+                $encodedString, 0, $maxLineLength - $firstLineOffset
+                )."\r\n";
+            $encodedString = substr(
+                $encodedString, $maxLineLength - $firstLineOffset
+                );
+        }
+
+        return $firstLine.trim(chunk_split($encodedString, $maxLineLength, "\r\n"));
+    }
+
+    /**
+     * Does nothing.
+     */
+    public function charsetChanged($charset)
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/QpEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/QpEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/QpEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Encoder/QpEncoder.php	(date 1495187412000)
@@ -0,0 +1,300 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles Quoted Printable (QP) Encoding in Swift Mailer.
+ *
+ * Possibly the most accurate RFC 2045 QP implementation found in PHP.
+ *
+ * @author     Chris Corbyn
+ */
+class Swift_Encoder_QpEncoder implements Swift_Encoder
+{
+    /**
+     * The CharacterStream used for reading characters (as opposed to bytes).
+     *
+     * @var Swift_CharacterStream
+     */
+    protected $charStream;
+
+    /**
+     * A filter used if input should be canonicalized.
+     *
+     * @var Swift_StreamFilter
+     */
+    protected $filter;
+
+    /**
+     * Pre-computed QP for HUGE optimization.
+     *
+     * @var string[]
+     */
+    protected static $qpMap = array(
+        0 => '=00', 1 => '=01', 2 => '=02', 3 => '=03', 4 => '=04',
+        5 => '=05', 6 => '=06', 7 => '=07', 8 => '=08', 9 => '=09',
+        10 => '=0A', 11 => '=0B', 12 => '=0C', 13 => '=0D', 14 => '=0E',
+        15 => '=0F', 16 => '=10', 17 => '=11', 18 => '=12', 19 => '=13',
+        20 => '=14', 21 => '=15', 22 => '=16', 23 => '=17', 24 => '=18',
+        25 => '=19', 26 => '=1A', 27 => '=1B', 28 => '=1C', 29 => '=1D',
+        30 => '=1E', 31 => '=1F', 32 => '=20', 33 => '=21', 34 => '=22',
+        35 => '=23', 36 => '=24', 37 => '=25', 38 => '=26', 39 => '=27',
+        40 => '=28', 41 => '=29', 42 => '=2A', 43 => '=2B', 44 => '=2C',
+        45 => '=2D', 46 => '=2E', 47 => '=2F', 48 => '=30', 49 => '=31',
+        50 => '=32', 51 => '=33', 52 => '=34', 53 => '=35', 54 => '=36',
+        55 => '=37', 56 => '=38', 57 => '=39', 58 => '=3A', 59 => '=3B',
+        60 => '=3C', 61 => '=3D', 62 => '=3E', 63 => '=3F', 64 => '=40',
+        65 => '=41', 66 => '=42', 67 => '=43', 68 => '=44', 69 => '=45',
+        70 => '=46', 71 => '=47', 72 => '=48', 73 => '=49', 74 => '=4A',
+        75 => '=4B', 76 => '=4C', 77 => '=4D', 78 => '=4E', 79 => '=4F',
+        80 => '=50', 81 => '=51', 82 => '=52', 83 => '=53', 84 => '=54',
+        85 => '=55', 86 => '=56', 87 => '=57', 88 => '=58', 89 => '=59',
+        90 => '=5A', 91 => '=5B', 92 => '=5C', 93 => '=5D', 94 => '=5E',
+        95 => '=5F', 96 => '=60', 97 => '=61', 98 => '=62', 99 => '=63',
+        100 => '=64', 101 => '=65', 102 => '=66', 103 => '=67', 104 => '=68',
+        105 => '=69', 106 => '=6A', 107 => '=6B', 108 => '=6C', 109 => '=6D',
+        110 => '=6E', 111 => '=6F', 112 => '=70', 113 => '=71', 114 => '=72',
+        115 => '=73', 116 => '=74', 117 => '=75', 118 => '=76', 119 => '=77',
+        120 => '=78', 121 => '=79', 122 => '=7A', 123 => '=7B', 124 => '=7C',
+        125 => '=7D', 126 => '=7E', 127 => '=7F', 128 => '=80', 129 => '=81',
+        130 => '=82', 131 => '=83', 132 => '=84', 133 => '=85', 134 => '=86',
+        135 => '=87', 136 => '=88', 137 => '=89', 138 => '=8A', 139 => '=8B',
+        140 => '=8C', 141 => '=8D', 142 => '=8E', 143 => '=8F', 144 => '=90',
+        145 => '=91', 146 => '=92', 147 => '=93', 148 => '=94', 149 => '=95',
+        150 => '=96', 151 => '=97', 152 => '=98', 153 => '=99', 154 => '=9A',
+        155 => '=9B', 156 => '=9C', 157 => '=9D', 158 => '=9E', 159 => '=9F',
+        160 => '=A0', 161 => '=A1', 162 => '=A2', 163 => '=A3', 164 => '=A4',
+        165 => '=A5', 166 => '=A6', 167 => '=A7', 168 => '=A8', 169 => '=A9',
+        170 => '=AA', 171 => '=AB', 172 => '=AC', 173 => '=AD', 174 => '=AE',
+        175 => '=AF', 176 => '=B0', 177 => '=B1', 178 => '=B2', 179 => '=B3',
+        180 => '=B4', 181 => '=B5', 182 => '=B6', 183 => '=B7', 184 => '=B8',
+        185 => '=B9', 186 => '=BA', 187 => '=BB', 188 => '=BC', 189 => '=BD',
+        190 => '=BE', 191 => '=BF', 192 => '=C0', 193 => '=C1', 194 => '=C2',
+        195 => '=C3', 196 => '=C4', 197 => '=C5', 198 => '=C6', 199 => '=C7',
+        200 => '=C8', 201 => '=C9', 202 => '=CA', 203 => '=CB', 204 => '=CC',
+        205 => '=CD', 206 => '=CE', 207 => '=CF', 208 => '=D0', 209 => '=D1',
+        210 => '=D2', 211 => '=D3', 212 => '=D4', 213 => '=D5', 214 => '=D6',
+        215 => '=D7', 216 => '=D8', 217 => '=D9', 218 => '=DA', 219 => '=DB',
+        220 => '=DC', 221 => '=DD', 222 => '=DE', 223 => '=DF', 224 => '=E0',
+        225 => '=E1', 226 => '=E2', 227 => '=E3', 228 => '=E4', 229 => '=E5',
+        230 => '=E6', 231 => '=E7', 232 => '=E8', 233 => '=E9', 234 => '=EA',
+        235 => '=EB', 236 => '=EC', 237 => '=ED', 238 => '=EE', 239 => '=EF',
+        240 => '=F0', 241 => '=F1', 242 => '=F2', 243 => '=F3', 244 => '=F4',
+        245 => '=F5', 246 => '=F6', 247 => '=F7', 248 => '=F8', 249 => '=F9',
+        250 => '=FA', 251 => '=FB', 252 => '=FC', 253 => '=FD', 254 => '=FE',
+        255 => '=FF',
+        );
+
+    protected static $safeMapShare = array();
+
+    /**
+     * A map of non-encoded ascii characters.
+     *
+     * @var string[]
+     */
+    protected $safeMap = array();
+
+    /**
+     * Creates a new QpEncoder for the given CharacterStream.
+     *
+     * @param Swift_CharacterStream $charStream to use for reading characters
+     * @param Swift_StreamFilter    $filter     if input should be canonicalized
+     */
+    public function __construct(Swift_CharacterStream $charStream, Swift_StreamFilter $filter = null)
+    {
+        $this->charStream = $charStream;
+        if (!isset(self::$safeMapShare[$this->getSafeMapShareId()])) {
+            $this->initSafeMap();
+            self::$safeMapShare[$this->getSafeMapShareId()] = $this->safeMap;
+        } else {
+            $this->safeMap = self::$safeMapShare[$this->getSafeMapShareId()];
+        }
+        $this->filter = $filter;
+    }
+
+    public function __sleep()
+    {
+        return array('charStream', 'filter');
+    }
+
+    public function __wakeup()
+    {
+        if (!isset(self::$safeMapShare[$this->getSafeMapShareId()])) {
+            $this->initSafeMap();
+            self::$safeMapShare[$this->getSafeMapShareId()] = $this->safeMap;
+        } else {
+            $this->safeMap = self::$safeMapShare[$this->getSafeMapShareId()];
+        }
+    }
+
+    protected function getSafeMapShareId()
+    {
+        return get_class($this);
+    }
+
+    protected function initSafeMap()
+    {
+        foreach (array_merge(
+            array(0x09, 0x20), range(0x21, 0x3C), range(0x3E, 0x7E)) as $byte) {
+            $this->safeMap[$byte] = chr($byte);
+        }
+    }
+
+    /**
+     * Takes an unencoded string and produces a QP encoded string from it.
+     *
+     * QP encoded strings have a maximum line length of 76 characters.
+     * If the first line needs to be shorter, indicate the difference with
+     * $firstLineOffset.
+     *
+     * @param string $string           to encode
+     * @param int    $firstLineOffset, optional
+     * @param int    $maxLineLength,   optional 0 indicates the default of 76 chars
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        if ($maxLineLength > 76 || $maxLineLength <= 0) {
+            $maxLineLength = 76;
+        }
+
+        $thisLineLength = $maxLineLength - $firstLineOffset;
+
+        $lines = array();
+        $lNo = 0;
+        $lines[$lNo] = '';
+        $currentLine = &$lines[$lNo++];
+        $size = $lineLen = 0;
+
+        $this->charStream->flushContents();
+        $this->charStream->importString($string);
+
+        // Fetching more than 4 chars at one is slower, as is fetching fewer bytes
+        // Conveniently 4 chars is the UTF-8 safe number since UTF-8 has up to 6
+        // bytes per char and (6 * 4 * 3 = 72 chars per line) * =NN is 3 bytes
+        while (false !== $bytes = $this->nextSequence()) {
+            // If we're filtering the input
+            if (isset($this->filter)) {
+                // If we can't filter because we need more bytes
+                while ($this->filter->shouldBuffer($bytes)) {
+                    // Then collect bytes into the buffer
+                    if (false === $moreBytes = $this->nextSequence(1)) {
+                        break;
+                    }
+
+                    foreach ($moreBytes as $b) {
+                        $bytes[] = $b;
+                    }
+                }
+                // And filter them
+                $bytes = $this->filter->filter($bytes);
+            }
+
+            $enc = $this->encodeByteSequence($bytes, $size);
+
+            $i = strpos($enc, '=0D=0A');
+            $newLineLength = $lineLen + ($i === false ? $size : $i);
+
+            if ($currentLine && $newLineLength >= $thisLineLength) {
+                $lines[$lNo] = '';
+                $currentLine = &$lines[$lNo++];
+                $thisLineLength = $maxLineLength;
+                $lineLen = 0;
+            }
+
+            $currentLine .= $enc;
+
+            if ($i === false) {
+                $lineLen += $size;
+            } else {
+                // 6 is the length of '=0D=0A'.
+                $lineLen = $size - strrpos($enc, '=0D=0A') - 6;
+            }
+        }
+
+        return $this->standardize(implode("=\r\n", $lines));
+    }
+
+    /**
+     * Updates the charset used.
+     *
+     * @param string $charset
+     */
+    public function charsetChanged($charset)
+    {
+        $this->charStream->setCharacterSet($charset);
+    }
+
+    /**
+     * Encode the given byte array into a verbatim QP form.
+     *
+     * @param int[] $bytes
+     * @param int   $size
+     *
+     * @return string
+     */
+    protected function encodeByteSequence(array $bytes, &$size)
+    {
+        $ret = '';
+        $size = 0;
+        foreach ($bytes as $b) {
+            if (isset($this->safeMap[$b])) {
+                $ret .= $this->safeMap[$b];
+                ++$size;
+            } else {
+                $ret .= self::$qpMap[$b];
+                $size += 3;
+            }
+        }
+
+        return $ret;
+    }
+
+    /**
+     * Get the next sequence of bytes to read from the char stream.
+     *
+     * @param int $size number of bytes to read
+     *
+     * @return int[]
+     */
+    protected function nextSequence($size = 4)
+    {
+        return $this->charStream->readBytes($size);
+    }
+
+    /**
+     * Make sure CRLF is correct and HT/SPACE are in valid places.
+     *
+     * @param string $string
+     *
+     * @return string
+     */
+    protected function standardize($string)
+    {
+        $string = str_replace(array("\t=0D=0A", ' =0D=0A', '=0D=0A'),
+            array("=09\r\n", "=20\r\n", "\r\n"), $string
+            );
+        switch ($end = ord(substr($string, -1))) {
+            case 0x09:
+            case 0x20:
+                $string = substr_replace($string, self::$qpMap[$end], -1);
+        }
+
+        return $string;
+    }
+
+    /**
+     * Make a deep copy of object.
+     */
+    public function __clone()
+    {
+        $this->charStream = clone $this->charStream;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/MessageLogger.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/MessageLogger.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/MessageLogger.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/MessageLogger.php	(date 1495187412000)
@@ -0,0 +1,74 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2011 Fabien Potencier
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Stores all sent emails for further usage.
+ *
+ * @author Fabien Potencier
+ */
+class Swift_Plugins_MessageLogger implements Swift_Events_SendListener
+{
+    /**
+     * @var Swift_Mime_Message[]
+     */
+    private $messages;
+
+    public function __construct()
+    {
+        $this->messages = array();
+    }
+
+    /**
+     * Get the message list.
+     *
+     * @return Swift_Mime_Message[]
+     */
+    public function getMessages()
+    {
+        return $this->messages;
+    }
+
+    /**
+     * Get the message count.
+     *
+     * @return int count
+     */
+    public function countMessages()
+    {
+        return count($this->messages);
+    }
+
+    /**
+     * Empty the message list.
+     */
+    public function clear()
+    {
+        $this->messages = array();
+    }
+
+    /**
+     * Invoked immediately before the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $this->messages[] = clone $evt->getMessage();
+    }
+
+    /**
+     * Invoked immediately after the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php	(date 1495187412000)
@@ -0,0 +1,259 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Makes sure a connection to a POP3 host has been established prior to connecting to SMTP.
+ *
+ * @author     Chris Corbyn
+ */
+class Swift_Plugins_PopBeforeSmtpPlugin implements Swift_Events_TransportChangeListener, Swift_Plugins_Pop_Pop3Connection
+{
+    /** A delegate connection to use (mostly a test hook) */
+    private $connection;
+
+    /** Hostname of the POP3 server */
+    private $host;
+
+    /** Port number to connect on */
+    private $port;
+
+    /** Encryption type to use (if any) */
+    private $crypto;
+
+    /** Username to use (if any) */
+    private $username;
+
+    /** Password to use (if any) */
+    private $password;
+
+    /** Established connection via TCP socket */
+    private $socket;
+
+    /** Connect timeout in seconds */
+    private $timeout = 10;
+
+    /** SMTP Transport to bind to */
+    private $transport;
+
+    /**
+     * Create a new PopBeforeSmtpPlugin for $host and $port.
+     *
+     * @param string $host
+     * @param int    $port
+     * @param string $crypto as "tls" or "ssl"
+     */
+    public function __construct($host, $port = 110, $crypto = null)
+    {
+        $this->host = $host;
+        $this->port = $port;
+        $this->crypto = $crypto;
+    }
+
+    /**
+     * Set a Pop3Connection to delegate to instead of connecting directly.
+     *
+     * @param Swift_Plugins_Pop_Pop3Connection $connection
+     *
+     * @return $this
+     */
+    public function setConnection(Swift_Plugins_Pop_Pop3Connection $connection)
+    {
+        $this->connection = $connection;
+
+        return $this;
+    }
+
+    /**
+     * Bind this plugin to a specific SMTP transport instance.
+     *
+     * @param Swift_Transport
+     */
+    public function bindSmtp(Swift_Transport $smtp)
+    {
+        $this->transport = $smtp;
+    }
+
+    /**
+     * Set the connection timeout in seconds (default 10).
+     *
+     * @param int $timeout
+     *
+     * @return $this
+     */
+    public function setTimeout($timeout)
+    {
+        $this->timeout = (int) $timeout;
+
+        return $this;
+    }
+
+    /**
+     * Set the username to use when connecting (if needed).
+     *
+     * @param string $username
+     *
+     * @return $this
+     */
+    public function setUsername($username)
+    {
+        $this->username = $username;
+
+        return $this;
+    }
+
+    /**
+     * Set the password to use when connecting (if needed).
+     *
+     * @param string $password
+     *
+     * @return $this
+     */
+    public function setPassword($password)
+    {
+        $this->password = $password;
+
+        return $this;
+    }
+
+    /**
+     * Connect to the POP3 host and authenticate.
+     *
+     * @throws Swift_Plugins_Pop_Pop3Exception if connection fails
+     */
+    public function connect()
+    {
+        if (isset($this->connection)) {
+            $this->connection->connect();
+        } else {
+            if (!isset($this->socket)) {
+                if (!$socket = fsockopen(
+                    $this->getHostString(), $this->port, $errno, $errstr, $this->timeout)) {
+                    throw new Swift_Plugins_Pop_Pop3Exception(
+                        sprintf('Failed to connect to POP3 host [%s]: %s', $this->host, $errstr)
+                    );
+                }
+                $this->socket = $socket;
+
+                if (false === $greeting = fgets($this->socket)) {
+                    throw new Swift_Plugins_Pop_Pop3Exception(
+                        sprintf('Failed to connect to POP3 host [%s]', trim($greeting))
+                    );
+                }
+
+                $this->assertOk($greeting);
+
+                if ($this->username) {
+                    $this->command(sprintf("USER %s\r\n", $this->username));
+                    $this->command(sprintf("PASS %s\r\n", $this->password));
+                }
+            }
+        }
+    }
+
+    /**
+     * Disconnect from the POP3 host.
+     */
+    public function disconnect()
+    {
+        if (isset($this->connection)) {
+            $this->connection->disconnect();
+        } else {
+            $this->command("QUIT\r\n");
+            if (!fclose($this->socket)) {
+                throw new Swift_Plugins_Pop_Pop3Exception(
+                    sprintf('POP3 host [%s] connection could not be stopped', $this->host)
+                );
+            }
+            $this->socket = null;
+        }
+    }
+
+    /**
+     * Invoked just before a Transport is started.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function beforeTransportStarted(Swift_Events_TransportChangeEvent $evt)
+    {
+        if (isset($this->transport)) {
+            if ($this->transport !== $evt->getTransport()) {
+                return;
+            }
+        }
+
+        $this->connect();
+        $this->disconnect();
+    }
+
+    /**
+     * Not used.
+     */
+    public function transportStarted(Swift_Events_TransportChangeEvent $evt)
+    {
+    }
+
+    /**
+     * Not used.
+     */
+    public function beforeTransportStopped(Swift_Events_TransportChangeEvent $evt)
+    {
+    }
+
+    /**
+     * Not used.
+     */
+    public function transportStopped(Swift_Events_TransportChangeEvent $evt)
+    {
+    }
+
+    private function command($command)
+    {
+        if (!fwrite($this->socket, $command)) {
+            throw new Swift_Plugins_Pop_Pop3Exception(
+                sprintf('Failed to write command [%s] to POP3 host', trim($command))
+            );
+        }
+
+        if (false === $response = fgets($this->socket)) {
+            throw new Swift_Plugins_Pop_Pop3Exception(
+                sprintf('Failed to read from POP3 host after command [%s]', trim($command))
+            );
+        }
+
+        $this->assertOk($response);
+
+        return $response;
+    }
+
+    private function assertOk($response)
+    {
+        if (substr($response, 0, 3) != '+OK') {
+            throw new Swift_Plugins_Pop_Pop3Exception(
+                sprintf('POP3 command failed [%s]', trim($response))
+            );
+        }
+    }
+
+    private function getHostString()
+    {
+        $host = $this->host;
+        switch (strtolower($this->crypto)) {
+            case 'ssl':
+                $host = 'ssl://'.$host;
+                break;
+
+            case 'tls':
+                $host = 'tls://'.$host;
+                break;
+        }
+
+        return $host;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/DecoratorPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/DecoratorPlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/DecoratorPlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/DecoratorPlugin.php	(date 1495187412000)
@@ -0,0 +1,204 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Allows customization of Messages on-the-fly.
+ *
+ * @author Chris Corbyn
+ * @author Fabien Potencier
+ */
+class Swift_Plugins_DecoratorPlugin implements Swift_Events_SendListener, Swift_Plugins_Decorator_Replacements
+{
+    /** The replacement map */
+    private $replacements;
+
+    /** The body as it was before replacements */
+    private $originalBody;
+
+    /** The original headers of the message, before replacements */
+    private $originalHeaders = array();
+
+    /** Bodies of children before they are replaced */
+    private $originalChildBodies = array();
+
+    /** The Message that was last replaced */
+    private $lastMessage;
+
+    /**
+     * Create a new DecoratorPlugin with $replacements.
+     *
+     * The $replacements can either be an associative array, or an implementation
+     * of {@link Swift_Plugins_Decorator_Replacements}.
+     *
+     * When using an array, it should be of the form:
+     * <code>
+     * $replacements = array(
+     *  "address1@domain.tld" => array("{a}" => "b", "{c}" => "d"),
+     *  "address2@domain.tld" => array("{a}" => "x", "{c}" => "y")
+     * )
+     * </code>
+     *
+     * When using an instance of {@link Swift_Plugins_Decorator_Replacements},
+     * the object should return just the array of replacements for the address
+     * given to {@link Swift_Plugins_Decorator_Replacements::getReplacementsFor()}.
+     *
+     * @param mixed $replacements Array or Swift_Plugins_Decorator_Replacements
+     */
+    public function __construct($replacements)
+    {
+        $this->setReplacements($replacements);
+    }
+
+    /**
+     * Sets replacements.
+     *
+     * @param mixed $replacements Array or Swift_Plugins_Decorator_Replacements
+     *
+     * @see __construct()
+     */
+    public function setReplacements($replacements)
+    {
+        if (!($replacements instanceof Swift_Plugins_Decorator_Replacements)) {
+            $this->replacements = (array) $replacements;
+        } else {
+            $this->replacements = $replacements;
+        }
+    }
+
+    /**
+     * Invoked immediately before the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $message = $evt->getMessage();
+        $this->restoreMessage($message);
+        $to = array_keys($message->getTo());
+        $address = array_shift($to);
+        if ($replacements = $this->getReplacementsFor($address)) {
+            $body = $message->getBody();
+            $search = array_keys($replacements);
+            $replace = array_values($replacements);
+            $bodyReplaced = str_replace(
+                $search, $replace, $body
+                );
+            if ($body != $bodyReplaced) {
+                $this->originalBody = $body;
+                $message->setBody($bodyReplaced);
+            }
+
+            foreach ($message->getHeaders()->getAll() as $header) {
+                $body = $header->getFieldBodyModel();
+                $count = 0;
+                if (is_array($body)) {
+                    $bodyReplaced = array();
+                    foreach ($body as $key => $value) {
+                        $count1 = 0;
+                        $count2 = 0;
+                        $key = is_string($key) ? str_replace($search, $replace, $key, $count1) : $key;
+                        $value = is_string($value) ? str_replace($search, $replace, $value, $count2) : $value;
+                        $bodyReplaced[$key] = $value;
+
+                        if (!$count && ($count1 || $count2)) {
+                            $count = 1;
+                        }
+                    }
+                } else {
+                    $bodyReplaced = str_replace($search, $replace, $body, $count);
+                }
+
+                if ($count) {
+                    $this->originalHeaders[$header->getFieldName()] = $body;
+                    $header->setFieldBodyModel($bodyReplaced);
+                }
+            }
+
+            $children = (array) $message->getChildren();
+            foreach ($children as $child) {
+                list($type) = sscanf($child->getContentType(), '%[^/]/%s');
+                if ('text' == $type) {
+                    $body = $child->getBody();
+                    $bodyReplaced = str_replace(
+                        $search, $replace, $body
+                        );
+                    if ($body != $bodyReplaced) {
+                        $child->setBody($bodyReplaced);
+                        $this->originalChildBodies[$child->getId()] = $body;
+                    }
+                }
+            }
+            $this->lastMessage = $message;
+        }
+    }
+
+    /**
+     * Find a map of replacements for the address.
+     *
+     * If this plugin was provided with a delegate instance of
+     * {@link Swift_Plugins_Decorator_Replacements} then the call will be
+     * delegated to it.  Otherwise, it will attempt to find the replacements
+     * from the array provided in the constructor.
+     *
+     * If no replacements can be found, an empty value (NULL) is returned.
+     *
+     * @param string $address
+     *
+     * @return array
+     */
+    public function getReplacementsFor($address)
+    {
+        if ($this->replacements instanceof Swift_Plugins_Decorator_Replacements) {
+            return $this->replacements->getReplacementsFor($address);
+        }
+
+        return isset($this->replacements[$address]) ? $this->replacements[$address] : null;
+    }
+
+    /**
+     * Invoked immediately after the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $this->restoreMessage($evt->getMessage());
+    }
+
+    /** Restore a changed message back to its original state */
+    private function restoreMessage(Swift_Mime_SimpleMessage $message)
+    {
+        if ($this->lastMessage === $message) {
+            if (isset($this->originalBody)) {
+                $message->setBody($this->originalBody);
+                $this->originalBody = null;
+            }
+            if (!empty($this->originalHeaders)) {
+                foreach ($message->getHeaders()->getAll() as $header) {
+                    if (array_key_exists($header->getFieldName(), $this->originalHeaders)) {
+                        $header->setFieldBodyModel($this->originalHeaders[$header->getFieldName()]);
+                    }
+                }
+                $this->originalHeaders = array();
+            }
+            if (!empty($this->originalChildBodies)) {
+                $children = (array) $message->getChildren();
+                foreach ($children as $child) {
+                    $id = $child->getId();
+                    if (array_key_exists($id, $this->originalChildBodies)) {
+                        $child->setBody($this->originalChildBodies[$id]);
+                    }
+                }
+                $this->originalChildBodies = array();
+            }
+            $this->lastMessage = null;
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ImpersonatePlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ImpersonatePlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ImpersonatePlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ImpersonatePlugin.php	(date 1495187412000)
@@ -0,0 +1,69 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Replaces the sender of a message.
+ *
+ * @author Arjen Brouwer
+ */
+class Swift_Plugins_ImpersonatePlugin implements Swift_Events_SendListener
+{
+    /**
+     * The sender to impersonate.
+     *
+     * @var string
+     */
+    private $sender;
+
+    /**
+     * Create a new ImpersonatePlugin to impersonate $sender.
+     *
+     * @param string $sender address
+     */
+    public function __construct($sender)
+    {
+        $this->sender = $sender;
+    }
+
+    /**
+     * Invoked immediately before the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $message = $evt->getMessage();
+        $headers = $message->getHeaders();
+
+        // save current recipients
+        $headers->addPathHeader('X-Swift-Return-Path', $message->getReturnPath());
+
+        // replace them with the one to send to
+        $message->setReturnPath($this->sender);
+    }
+
+    /**
+     * Invoked immediately after the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $message = $evt->getMessage();
+
+        // restore original headers
+        $headers = $message->getHeaders();
+
+        if ($headers->has('X-Swift-Return-Path')) {
+            $message->setReturnPath($headers->get('X-Swift-Return-Path')->getAddress());
+            $headers->removeAll('X-Swift-Return-Path');
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Logger.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Logger.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Logger.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Logger.php	(date 1495187412000)
@@ -0,0 +1,36 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Logs events in the Transport system.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Plugins_Logger
+{
+    /**
+     * Add a log entry.
+     *
+     * @param string $entry
+     */
+    public function add($entry);
+
+    /**
+     * Clear the log contents.
+     */
+    public function clear();
+
+    /**
+     * Get this log as a string.
+     *
+     * @return string
+     */
+    public function dump();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/LoggerPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/LoggerPlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/LoggerPlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/LoggerPlugin.php	(date 1495187412000)
@@ -0,0 +1,142 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Does real time logging of Transport level information.
+ *
+ * @author     Chris Corbyn
+ */
+class Swift_Plugins_LoggerPlugin implements Swift_Events_CommandListener, Swift_Events_ResponseListener, Swift_Events_TransportChangeListener, Swift_Events_TransportExceptionListener, Swift_Plugins_Logger
+{
+    /** The logger which is delegated to */
+    private $logger;
+
+    /**
+     * Create a new LoggerPlugin using $logger.
+     *
+     * @param Swift_Plugins_Logger $logger
+     */
+    public function __construct(Swift_Plugins_Logger $logger)
+    {
+        $this->logger = $logger;
+    }
+
+    /**
+     * Add a log entry.
+     *
+     * @param string $entry
+     */
+    public function add($entry)
+    {
+        $this->logger->add($entry);
+    }
+
+    /**
+     * Clear the log contents.
+     */
+    public function clear()
+    {
+        $this->logger->clear();
+    }
+
+    /**
+     * Get this log as a string.
+     *
+     * @return string
+     */
+    public function dump()
+    {
+        return $this->logger->dump();
+    }
+
+    /**
+     * Invoked immediately following a command being sent.
+     *
+     * @param Swift_Events_CommandEvent $evt
+     */
+    public function commandSent(Swift_Events_CommandEvent $evt)
+    {
+        $command = $evt->getCommand();
+        $this->logger->add(sprintf('>> %s', $command));
+    }
+
+    /**
+     * Invoked immediately following a response coming back.
+     *
+     * @param Swift_Events_ResponseEvent $evt
+     */
+    public function responseReceived(Swift_Events_ResponseEvent $evt)
+    {
+        $response = $evt->getResponse();
+        $this->logger->add(sprintf('<< %s', $response));
+    }
+
+    /**
+     * Invoked just before a Transport is started.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function beforeTransportStarted(Swift_Events_TransportChangeEvent $evt)
+    {
+        $transportName = get_class($evt->getSource());
+        $this->logger->add(sprintf('++ Starting %s', $transportName));
+    }
+
+    /**
+     * Invoked immediately after the Transport is started.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function transportStarted(Swift_Events_TransportChangeEvent $evt)
+    {
+        $transportName = get_class($evt->getSource());
+        $this->logger->add(sprintf('++ %s started', $transportName));
+    }
+
+    /**
+     * Invoked just before a Transport is stopped.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function beforeTransportStopped(Swift_Events_TransportChangeEvent $evt)
+    {
+        $transportName = get_class($evt->getSource());
+        $this->logger->add(sprintf('++ Stopping %s', $transportName));
+    }
+
+    /**
+     * Invoked immediately after the Transport is stopped.
+     *
+     * @param Swift_Events_TransportChangeEvent $evt
+     */
+    public function transportStopped(Swift_Events_TransportChangeEvent $evt)
+    {
+        $transportName = get_class($evt->getSource());
+        $this->logger->add(sprintf('++ %s stopped', $transportName));
+    }
+
+    /**
+     * Invoked as a TransportException is thrown in the Transport system.
+     *
+     * @param Swift_Events_TransportExceptionEvent $evt
+     */
+    public function exceptionThrown(Swift_Events_TransportExceptionEvent $evt)
+    {
+        $e = $evt->getException();
+        $message = $e->getMessage();
+        $code = $e->getCode();
+        $this->logger->add(sprintf('!! %s (code: %s)', $message, $code));
+        $message .= PHP_EOL;
+        $message .= 'Log data:'.PHP_EOL;
+        $message .= $this->logger->dump();
+        $evt->cancelBubble();
+        throw new Swift_TransportException($message, $code, $e->getPrevious());
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Sleeper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Sleeper.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Sleeper.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Sleeper.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Sleeps for a duration of time.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Plugins_Sleeper
+{
+    /**
+     * Sleep for $seconds.
+     *
+     * @param int $seconds
+     */
+    public function sleep($seconds);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ThrottlerPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ThrottlerPlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ThrottlerPlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ThrottlerPlugin.php	(date 1495187412000)
@@ -0,0 +1,200 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Throttles the rate at which emails are sent.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_ThrottlerPlugin extends Swift_Plugins_BandwidthMonitorPlugin implements Swift_Plugins_Sleeper, Swift_Plugins_Timer
+{
+    /** Flag for throttling in bytes per minute */
+    const BYTES_PER_MINUTE = 0x01;
+
+    /** Flag for throttling in emails per second (Amazon SES) */
+    const MESSAGES_PER_SECOND = 0x11;
+
+    /** Flag for throttling in emails per minute */
+    const MESSAGES_PER_MINUTE = 0x10;
+
+    /**
+     * The Sleeper instance for sleeping.
+     *
+     * @var Swift_Plugins_Sleeper
+     */
+    private $sleeper;
+
+    /**
+     * The Timer instance which provides the timestamp.
+     *
+     * @var Swift_Plugins_Timer
+     */
+    private $timer;
+
+    /**
+     * The time at which the first email was sent.
+     *
+     * @var int
+     */
+    private $start;
+
+    /**
+     * The rate at which messages should be sent.
+     *
+     * @var int
+     */
+    private $rate;
+
+    /**
+     * The mode for throttling.
+     *
+     * This is {@link BYTES_PER_MINUTE} or {@link MESSAGES_PER_MINUTE}
+     *
+     * @var int
+     */
+    private $mode;
+
+    /**
+     * An internal counter of the number of messages sent.
+     *
+     * @var int
+     */
+    private $messages = 0;
+
+    /**
+     * Create a new ThrottlerPlugin.
+     *
+     * @param int                   $rate
+     * @param int                   $mode,   defaults to {@link BYTES_PER_MINUTE}
+     * @param Swift_Plugins_Sleeper $sleeper (only needed in testing)
+     * @param Swift_Plugins_Timer   $timer   (only needed in testing)
+     */
+    public function __construct($rate, $mode = self::BYTES_PER_MINUTE, Swift_Plugins_Sleeper $sleeper = null, Swift_Plugins_Timer $timer = null)
+    {
+        $this->rate = $rate;
+        $this->mode = $mode;
+        $this->sleeper = $sleeper;
+        $this->timer = $timer;
+    }
+
+    /**
+     * Invoked immediately before the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $time = $this->getTimestamp();
+        if (!isset($this->start)) {
+            $this->start = $time;
+        }
+        $duration = $time - $this->start;
+
+        switch ($this->mode) {
+            case self::BYTES_PER_MINUTE:
+                $sleep = $this->throttleBytesPerMinute($duration);
+                break;
+            case self::MESSAGES_PER_SECOND:
+                $sleep = $this->throttleMessagesPerSecond($duration);
+                break;
+            case self::MESSAGES_PER_MINUTE:
+                $sleep = $this->throttleMessagesPerMinute($duration);
+                break;
+            default:
+                $sleep = 0;
+                break;
+        }
+
+        if ($sleep > 0) {
+            $this->sleep($sleep);
+        }
+    }
+
+    /**
+     * Invoked when a Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+        parent::sendPerformed($evt);
+        ++$this->messages;
+    }
+
+    /**
+     * Sleep for $seconds.
+     *
+     * @param int $seconds
+     */
+    public function sleep($seconds)
+    {
+        if (isset($this->sleeper)) {
+            $this->sleeper->sleep($seconds);
+        } else {
+            sleep($seconds);
+        }
+    }
+
+    /**
+     * Get the current UNIX timestamp.
+     *
+     * @return int
+     */
+    public function getTimestamp()
+    {
+        if (isset($this->timer)) {
+            return $this->timer->getTimestamp();
+        }
+
+        return time();
+    }
+
+    /**
+     * Get a number of seconds to sleep for.
+     *
+     * @param int $timePassed
+     *
+     * @return int
+     */
+    private function throttleBytesPerMinute($timePassed)
+    {
+        $expectedDuration = $this->getBytesOut() / ($this->rate / 60);
+
+        return (int) ceil($expectedDuration - $timePassed);
+    }
+
+    /**
+     * Get a number of seconds to sleep for.
+     *
+     * @param int $timePassed
+     *
+     * @return int
+     */
+    private function throttleMessagesPerSecond($timePassed)
+    {
+        $expectedDuration = $this->messages / ($this->rate);
+
+        return (int) ceil($expectedDuration - $timePassed);
+    }
+
+    /**
+     * Get a number of seconds to sleep for.
+     *
+     * @param int $timePassed
+     *
+     * @return int
+     */
+    private function throttleMessagesPerMinute($timePassed)
+    {
+        $expectedDuration = $this->messages / ($this->rate / 60);
+
+        return (int) ceil($expectedDuration - $timePassed);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Timer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Timer.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Timer.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Timer.php	(date 1495187412000)
@@ -0,0 +1,24 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Provides timestamp data.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Plugins_Timer
+{
+    /**
+     * Get the current UNIX timestamp.
+     *
+     * @return int
+     */
+    public function getTimestamp();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/BodySigner.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/BodySigner.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/BodySigner.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/BodySigner.php	(date 1495187412000)
@@ -0,0 +1,33 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Body Signer Interface used to apply Body-Based Signature to a message.
+ *
+ * @author Xavier De Cock <xdecock@gmail.com>
+ */
+interface Swift_Signers_BodySigner extends Swift_Signer
+{
+    /**
+     * Change the Swift_Signed_Message to apply the singing.
+     *
+     * @param Swift_Message $message
+     *
+     * @return self
+     */
+    public function signMessage(Swift_Message $message);
+
+    /**
+     * Return the list of header a signer might tamper.
+     *
+     * @return array
+     */
+    public function getAlteredHeaders();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/RedirectingPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/RedirectingPlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/RedirectingPlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/RedirectingPlugin.php	(date 1495187412000)
@@ -0,0 +1,213 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Redirects all email to a single recipient.
+ *
+ * @author     Fabien Potencier
+ */
+class Swift_Plugins_RedirectingPlugin implements Swift_Events_SendListener
+{
+    /**
+     * The recipient who will receive all messages.
+     *
+     * @var mixed
+     */
+    private $recipient;
+
+    /**
+     * List of regular expression for recipient whitelisting.
+     *
+     * @var array
+     */
+    private $whitelist = array();
+
+    /**
+     * Create a new RedirectingPlugin.
+     *
+     * @param mixed $recipient
+     * @param array $whitelist
+     */
+    public function __construct($recipient, array $whitelist = array())
+    {
+        $this->recipient = $recipient;
+        $this->whitelist = $whitelist;
+    }
+
+    /**
+     * Set the recipient of all messages.
+     *
+     * @param mixed $recipient
+     */
+    public function setRecipient($recipient)
+    {
+        $this->recipient = $recipient;
+    }
+
+    /**
+     * Get the recipient of all messages.
+     *
+     * @return mixed
+     */
+    public function getRecipient()
+    {
+        return $this->recipient;
+    }
+
+    /**
+     * Set a list of regular expressions to whitelist certain recipients.
+     *
+     * @param array $whitelist
+     */
+    public function setWhitelist(array $whitelist)
+    {
+        $this->whitelist = $whitelist;
+    }
+
+    /**
+     * Get the whitelist.
+     *
+     * @return array
+     */
+    public function getWhitelist()
+    {
+        return $this->whitelist;
+    }
+
+    /**
+     * Invoked immediately before the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $message = $evt->getMessage();
+        $headers = $message->getHeaders();
+
+        // conditionally save current recipients
+
+        if ($headers->has('to')) {
+            $headers->addMailboxHeader('X-Swift-To', $message->getTo());
+        }
+
+        if ($headers->has('cc')) {
+            $headers->addMailboxHeader('X-Swift-Cc', $message->getCc());
+        }
+
+        if ($headers->has('bcc')) {
+            $headers->addMailboxHeader('X-Swift-Bcc', $message->getBcc());
+        }
+
+        // Filter remaining headers against whitelist
+        $this->filterHeaderSet($headers, 'To');
+        $this->filterHeaderSet($headers, 'Cc');
+        $this->filterHeaderSet($headers, 'Bcc');
+
+        // Add each hard coded recipient
+        $to = $message->getTo();
+        if (null === $to) {
+            $to = array();
+        }
+
+        foreach ((array) $this->recipient as $recipient) {
+            if (!array_key_exists($recipient, $to)) {
+                $message->addTo($recipient);
+            }
+        }
+    }
+
+    /**
+     * Filter header set against a whitelist of regular expressions.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headerSet
+     * @param string                     $type
+     */
+    private function filterHeaderSet(Swift_Mime_SimpleHeaderSet $headerSet, $type)
+    {
+        foreach ($headerSet->getAll($type) as $headers) {
+            $headers->setNameAddresses($this->filterNameAddresses($headers->getNameAddresses()));
+        }
+    }
+
+    /**
+     * Filtered list of addresses => name pairs.
+     *
+     * @param array $recipients
+     *
+     * @return array
+     */
+    private function filterNameAddresses(array $recipients)
+    {
+        $filtered = array();
+
+        foreach ($recipients as $address => $name) {
+            if ($this->isWhitelisted($address)) {
+                $filtered[$address] = $name;
+            }
+        }
+
+        return $filtered;
+    }
+
+    /**
+     * Matches address against whitelist of regular expressions.
+     *
+     * @param $recipient
+     *
+     * @return bool
+     */
+    protected function isWhitelisted($recipient)
+    {
+        if (in_array($recipient, (array) $this->recipient)) {
+            return true;
+        }
+
+        foreach ($this->whitelist as $pattern) {
+            if (preg_match($pattern, $recipient)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    /**
+     * Invoked immediately after the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $this->restoreMessage($evt->getMessage());
+    }
+
+    private function restoreMessage(Swift_Mime_SimpleMessage $message)
+    {
+        // restore original headers
+        $headers = $message->getHeaders();
+
+        if ($headers->has('X-Swift-To')) {
+            $message->setTo($headers->get('X-Swift-To')->getNameAddresses());
+            $headers->removeAll('X-Swift-To');
+        } else {
+            $message->setTo(null);
+        }
+
+        if ($headers->has('X-Swift-Cc')) {
+            $message->setCc($headers->get('X-Swift-Cc')->getNameAddresses());
+            $headers->removeAll('X-Swift-Cc');
+        }
+
+        if ($headers->has('X-Swift-Bcc')) {
+            $message->setBcc($headers->get('X-Swift-Bcc')->getNameAddresses());
+            $headers->removeAll('X-Swift-Bcc');
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporter.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporter.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporter.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporter.php	(date 1495187412000)
@@ -0,0 +1,32 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * The Reporter plugin sends pass/fail notification to a Reporter.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Plugins_Reporter
+{
+    /** The recipient was accepted for delivery */
+    const RESULT_PASS = 0x01;
+
+    /** The recipient could not be accepted */
+    const RESULT_FAIL = 0x10;
+
+    /**
+     * Notifies this ReportNotifier that $address failed or succeeded.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string                   $address
+     * @param int                      $result  from {@link RESULT_PASS, RESULT_FAIL}
+     */
+    public function notify(Swift_Mime_SimpleMessage $message, $address, $result);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ReporterPlugin.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ReporterPlugin.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ReporterPlugin.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/ReporterPlugin.php	(date 1495187412000)
@@ -0,0 +1,61 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Does real time reporting of pass/fail for each recipient.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_ReporterPlugin implements Swift_Events_SendListener
+{
+    /**
+     * The reporter backend which takes notifications.
+     *
+     * @var Swift_Plugins_Reporter
+     */
+    private $reporter;
+
+    /**
+     * Create a new ReporterPlugin using $reporter.
+     *
+     * @param Swift_Plugins_Reporter $reporter
+     */
+    public function __construct(Swift_Plugins_Reporter $reporter)
+    {
+        $this->reporter = $reporter;
+    }
+
+    /**
+     * Not used.
+     */
+    public function beforeSendPerformed(Swift_Events_SendEvent $evt)
+    {
+    }
+
+    /**
+     * Invoked immediately after the Message is sent.
+     *
+     * @param Swift_Events_SendEvent $evt
+     */
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+        $message = $evt->getMessage();
+        $failures = array_flip($evt->getFailedRecipients());
+        foreach ((array) $message->getTo() as $address => $null) {
+            $this->reporter->notify($message, $address, (array_key_exists($address, $failures) ? Swift_Plugins_Reporter::RESULT_FAIL : Swift_Plugins_Reporter::RESULT_PASS));
+        }
+        foreach ((array) $message->getCc() as $address => $null) {
+            $this->reporter->notify($message, $address, (array_key_exists($address, $failures) ? Swift_Plugins_Reporter::RESULT_FAIL : Swift_Plugins_Reporter::RESULT_PASS));
+        }
+        foreach ((array) $message->getBcc() as $address => $null) {
+            $this->reporter->notify($message, $address, (array_key_exists($address, $failures) ? Swift_Plugins_Reporter::RESULT_FAIL : Swift_Plugins_Reporter::RESULT_PASS));
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/SMimeSigner.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/SMimeSigner.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/SMimeSigner.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/SMimeSigner.php	(date 1495187412000)
@@ -0,0 +1,417 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * MIME Message Signer used to apply S/MIME Signature/Encryption to a message.
+ *
+ *
+ * @author Romain-Geissler
+ * @author Sebastiaan Stok <s.stok@rollerscapes.net>
+ */
+class Swift_Signers_SMimeSigner implements Swift_Signers_BodySigner
+{
+    protected $signCertificate;
+    protected $signPrivateKey;
+    protected $encryptCert;
+    protected $signThenEncrypt = true;
+    protected $signLevel;
+    protected $encryptLevel;
+    protected $signOptions;
+    protected $encryptOptions;
+    protected $encryptCipher;
+    protected $extraCerts = null;
+
+    /**
+     * @var Swift_StreamFilters_StringReplacementFilterFactory
+     */
+    protected $replacementFactory;
+
+    /**
+     * @var Swift_Mime_SimpleHeaderFactory
+     */
+    protected $headerFactory;
+
+    /**
+     * Constructor.
+     *
+     * @param string|null $signCertificate
+     * @param string|null $signPrivateKey
+     * @param string|null $encryptCertificate
+     */
+    public function __construct($signCertificate = null, $signPrivateKey = null, $encryptCertificate = null)
+    {
+        if (null !== $signPrivateKey) {
+            $this->setSignCertificate($signCertificate, $signPrivateKey);
+        }
+
+        if (null !== $encryptCertificate) {
+            $this->setEncryptCertificate($encryptCertificate);
+        }
+
+        $this->replacementFactory = Swift_DependencyContainer::getInstance()
+            ->lookup('transport.replacementfactory');
+
+        $this->signOptions = PKCS7_DETACHED;
+        $this->encryptCipher = OPENSSL_CIPHER_AES_128_CBC;
+    }
+
+    /**
+     * Set the certificate location to use for signing.
+     *
+     * @see http://www.php.net/manual/en/openssl.pkcs7.flags.php
+     *
+     * @param string       $certificate
+     * @param string|array $privateKey  If the key needs an passphrase use array('file-location', 'passphrase') instead
+     * @param int          $signOptions Bitwise operator options for openssl_pkcs7_sign()
+     * @param string       $extraCerts  A file containing intermediate certificates needed by the signing certificate
+     *
+     * @return $this
+     */
+    public function setSignCertificate($certificate, $privateKey = null, $signOptions = PKCS7_DETACHED, $extraCerts = null)
+    {
+        $this->signCertificate = 'file://'.str_replace('\\', '/', realpath($certificate));
+
+        if (null !== $privateKey) {
+            if (is_array($privateKey)) {
+                $this->signPrivateKey = $privateKey;
+                $this->signPrivateKey[0] = 'file://'.str_replace('\\', '/', realpath($privateKey[0]));
+            } else {
+                $this->signPrivateKey = 'file://'.str_replace('\\', '/', realpath($privateKey));
+            }
+        }
+
+        $this->signOptions = $signOptions;
+        if (null !== $extraCerts) {
+            $this->extraCerts = str_replace('\\', '/', realpath($extraCerts));
+        }
+
+        return $this;
+    }
+
+    /**
+     * Set the certificate location to use for encryption.
+     *
+     * @see http://www.php.net/manual/en/openssl.pkcs7.flags.php
+     * @see http://nl3.php.net/manual/en/openssl.ciphers.php
+     *
+     * @param string|array $recipientCerts Either an single X.509 certificate, or an assoc array of X.509 certificates.
+     * @param int          $cipher
+     *
+     * @return $this
+     */
+    public function setEncryptCertificate($recipientCerts, $cipher = null)
+    {
+        if (is_array($recipientCerts)) {
+            $this->encryptCert = array();
+
+            foreach ($recipientCerts as $cert) {
+                $this->encryptCert[] = 'file://'.str_replace('\\', '/', realpath($cert));
+            }
+        } else {
+            $this->encryptCert = 'file://'.str_replace('\\', '/', realpath($recipientCerts));
+        }
+
+        if (null !== $cipher) {
+            $this->encryptCipher = $cipher;
+        }
+
+        return $this;
+    }
+
+    /**
+     * @return string
+     */
+    public function getSignCertificate()
+    {
+        return $this->signCertificate;
+    }
+
+    /**
+     * @return string
+     */
+    public function getSignPrivateKey()
+    {
+        return $this->signPrivateKey;
+    }
+
+    /**
+     * Set perform signing before encryption.
+     *
+     * The default is to first sign the message and then encrypt.
+     * But some older mail clients, namely Microsoft Outlook 2000 will work when the message first encrypted.
+     * As this goes against the official specs, its recommended to only use 'encryption -> signing' when specifically targeting these 'broken' clients.
+     *
+     * @param bool $signThenEncrypt
+     *
+     * @return $this
+     */
+    public function setSignThenEncrypt($signThenEncrypt = true)
+    {
+        $this->signThenEncrypt = $signThenEncrypt;
+
+        return $this;
+    }
+
+    /**
+     * @return bool
+     */
+    public function isSignThenEncrypt()
+    {
+        return $this->signThenEncrypt;
+    }
+
+    /**
+     * Resets internal states.
+     *
+     * @return $this
+     */
+    public function reset()
+    {
+        return $this;
+    }
+
+    /**
+     * Change the Swift_Message to apply the signing.
+     *
+     * @param Swift_Message $message
+     *
+     * @return $this
+     */
+    public function signMessage(Swift_Message $message)
+    {
+        if (null === $this->signCertificate && null === $this->encryptCert) {
+            return $this;
+        }
+
+        // Store the message using ByteStream to a file{1}
+        // Remove all Children
+        // Sign file{1}, parse the new MIME headers and set them on the primary MimeEntity
+        // Set the singed-body as the new body (without boundary)
+
+        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
+        $this->toSMimeByteStream($messageStream, $message);
+        $message->setEncoder(Swift_DependencyContainer::getInstance()->lookup('mime.rawcontentencoder'));
+
+        $message->setChildren(array());
+        $this->streamToMime($messageStream, $message);
+    }
+
+    /**
+     * Return the list of header a signer might tamper.
+     *
+     * @return array
+     */
+    public function getAlteredHeaders()
+    {
+        return array('Content-Type', 'Content-Transfer-Encoding', 'Content-Disposition');
+    }
+
+    /**
+     * @param Swift_InputByteStream $inputStream
+     * @param Swift_Message         $mimeEntity
+     */
+    protected function toSMimeByteStream(Swift_InputByteStream $inputStream, Swift_Message $message)
+    {
+        $mimeEntity = $this->createMessage($message);
+        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+        $mimeEntity->toByteStream($messageStream);
+        $messageStream->commit();
+
+        if (null !== $this->signCertificate && null !== $this->encryptCert) {
+            $temporaryStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+            if ($this->signThenEncrypt) {
+                $this->messageStreamToSignedByteStream($messageStream, $temporaryStream);
+                $this->messageStreamToEncryptedByteStream($temporaryStream, $inputStream);
+            } else {
+                $this->messageStreamToEncryptedByteStream($messageStream, $temporaryStream);
+                $this->messageStreamToSignedByteStream($temporaryStream, $inputStream);
+            }
+        } elseif ($this->signCertificate !== null) {
+            $this->messageStreamToSignedByteStream($messageStream, $inputStream);
+        } else {
+            $this->messageStreamToEncryptedByteStream($messageStream, $inputStream);
+        }
+    }
+
+    /**
+     * @param Swift_Message $message
+     *
+     * @return Swift_Message
+     */
+    protected function createMessage(Swift_Message $message)
+    {
+        $mimeEntity = new Swift_Message('', $message->getBody(), $message->getContentType(), $message->getCharset());
+        $mimeEntity->setChildren($message->getChildren());
+
+        $messageHeaders = $mimeEntity->getHeaders();
+        $messageHeaders->remove('Message-ID');
+        $messageHeaders->remove('Date');
+        $messageHeaders->remove('Subject');
+        $messageHeaders->remove('MIME-Version');
+        $messageHeaders->remove('To');
+        $messageHeaders->remove('From');
+
+        return $mimeEntity;
+    }
+
+    /**
+     * @param Swift_FileStream      $outputStream
+     * @param Swift_InputByteStream $inputStream
+     *
+     * @throws Swift_IoException
+     */
+    protected function messageStreamToSignedByteStream(Swift_FileStream $outputStream, Swift_InputByteStream $inputStream)
+    {
+        $signedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+        $args = array($outputStream->getPath(), $signedMessageStream->getPath(), $this->signCertificate, $this->signPrivateKey, array(), $this->signOptions);
+        if (null !== $this->extraCerts) {
+            $args[] = $this->extraCerts;
+        }
+
+        if (!call_user_func_array('openssl_pkcs7_sign', $args)) {
+            throw new Swift_IoException(sprintf('Failed to sign S/Mime message. Error: "%s".', openssl_error_string()));
+        }
+
+        $this->copyFromOpenSSLOutput($signedMessageStream, $inputStream);
+    }
+
+    /**
+     * @param Swift_FileStream      $outputStream
+     * @param Swift_InputByteStream $is
+     *
+     * @throws Swift_IoException
+     */
+    protected function messageStreamToEncryptedByteStream(Swift_FileStream $outputStream, Swift_InputByteStream $is)
+    {
+        $encryptedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+        if (!openssl_pkcs7_encrypt($outputStream->getPath(), $encryptedMessageStream->getPath(), $this->encryptCert, array(), 0, $this->encryptCipher)) {
+            throw new Swift_IoException(sprintf('Failed to encrypt S/Mime message. Error: "%s".', openssl_error_string()));
+        }
+
+        $this->copyFromOpenSSLOutput($encryptedMessageStream, $is);
+    }
+
+    /**
+     * @param Swift_OutputByteStream $fromStream
+     * @param Swift_InputByteStream  $toStream
+     */
+    protected function copyFromOpenSSLOutput(Swift_OutputByteStream $fromStream, Swift_InputByteStream $toStream)
+    {
+        $bufferLength = 4096;
+        $filteredStream = new Swift_ByteStream_TemporaryFileByteStream();
+        $filteredStream->addFilter($this->replacementFactory->createFilter("\r\n", "\n"), 'CRLF to LF');
+        $filteredStream->addFilter($this->replacementFactory->createFilter("\n", "\r\n"), 'LF to CRLF');
+
+        while (false !== ($buffer = $fromStream->read($bufferLength))) {
+            $filteredStream->write($buffer);
+        }
+
+        $filteredStream->flushBuffers();
+
+        while (false !== ($buffer = $filteredStream->read($bufferLength))) {
+            $toStream->write($buffer);
+        }
+
+        $toStream->commit();
+    }
+
+    /**
+     * Merges an OutputByteStream to Swift_Message.
+     *
+     * @param Swift_OutputByteStream $fromStream
+     * @param Swift_Message          $message
+     */
+    protected function streamToMime(Swift_OutputByteStream $fromStream, Swift_Message $message)
+    {
+        $bufferLength = 78;
+        $headerData = '';
+
+        $fromStream->setReadPointer(0);
+
+        while (($buffer = $fromStream->read($bufferLength)) !== false) {
+            $headerData .= $buffer;
+
+            if (false !== strpos($buffer, "\r\n\r\n")) {
+                break;
+            }
+        }
+
+        $headersPosEnd = strpos($headerData, "\r\n\r\n");
+        $headerData = trim($headerData);
+        $headerData = substr($headerData, 0, $headersPosEnd);
+        $headerLines = explode("\r\n", $headerData);
+        unset($headerData);
+
+        $headers = array();
+        $currentHeaderName = '';
+
+        foreach ($headerLines as $headerLine) {
+            // Line separated
+            if (ctype_space($headerLines[0]) || false === strpos($headerLine, ':')) {
+                $headers[$currentHeaderName] .= ' '.trim($headerLine);
+                continue;
+            }
+
+            $header = explode(':', $headerLine, 2);
+            $currentHeaderName = strtolower($header[0]);
+            $headers[$currentHeaderName] = trim($header[1]);
+        }
+
+        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
+        $messageStream->addFilter($this->replacementFactory->createFilter("\r\n", "\n"), 'CRLF to LF');
+        $messageStream->addFilter($this->replacementFactory->createFilter("\n", "\r\n"), 'LF to CRLF');
+
+        $messageHeaders = $message->getHeaders();
+
+        // No need to check for 'application/pkcs7-mime', as this is always base64
+        if ('multipart/signed;' === substr($headers['content-type'], 0, 17)) {
+            if (!preg_match('/boundary=("[^"]+"|(?:[^\s]+|$))/is', $headers['content-type'], $contentTypeData)) {
+                throw new Swift_SwiftException('Failed to find Boundary parameter');
+            }
+
+            $boundary = trim($contentTypeData['1'], '"');
+
+            // Skip the header and CRLF CRLF
+            $fromStream->setReadPointer($headersPosEnd + 4);
+
+            while (false !== ($buffer = $fromStream->read($bufferLength))) {
+                $messageStream->write($buffer);
+            }
+
+            $messageStream->commit();
+
+            $messageHeaders->remove('Content-Transfer-Encoding');
+            $message->setContentType($headers['content-type']);
+            $message->setBoundary($boundary);
+            $message->setBody($messageStream);
+        } else {
+            $fromStream->setReadPointer($headersPosEnd + 4);
+
+            if (null === $this->headerFactory) {
+                $this->headerFactory = Swift_DependencyContainer::getInstance()->lookup('mime.headerfactory');
+            }
+
+            $message->setContentType($headers['content-type']);
+            $messageHeaders->set($this->headerFactory->createTextHeader('Content-Transfer-Encoding', $headers['content-transfer-encoding']));
+            $messageHeaders->set($this->headerFactory->createTextHeader('Content-Disposition', $headers['content-disposition']));
+
+            while (false !== ($buffer = $fromStream->read($bufferLength))) {
+                $messageStream->write($buffer);
+            }
+
+            $messageStream->commit();
+            $message->setBody($messageStream);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/ArrayKeyCache.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/ArrayKeyCache.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/ArrayKeyCache.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/ArrayKeyCache.php	(date 1495187412000)
@@ -0,0 +1,206 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A basic KeyCache backed by an array.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_KeyCache_ArrayKeyCache implements Swift_KeyCache
+{
+    /**
+     * Cache contents.
+     *
+     * @var array
+     */
+    private $contents = array();
+
+    /**
+     * An InputStream for cloning.
+     *
+     * @var Swift_KeyCache_KeyCacheInputStream
+     */
+    private $stream;
+
+    /**
+     * Create a new ArrayKeyCache with the given $stream for cloning to make
+     * InputByteStreams.
+     *
+     * @param Swift_KeyCache_KeyCacheInputStream $stream
+     */
+    public function __construct(Swift_KeyCache_KeyCacheInputStream $stream)
+    {
+        $this->stream = $stream;
+    }
+
+    /**
+     * Set a string into the cache under $itemKey for the namespace $nsKey.
+     *
+     * @see MODE_WRITE, MODE_APPEND
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     * @param string $string
+     * @param int    $mode
+     */
+    public function setString($nsKey, $itemKey, $string, $mode)
+    {
+        $this->prepareCache($nsKey);
+        switch ($mode) {
+            case self::MODE_WRITE:
+                $this->contents[$nsKey][$itemKey] = $string;
+                break;
+            case self::MODE_APPEND:
+                if (!$this->hasKey($nsKey, $itemKey)) {
+                    $this->contents[$nsKey][$itemKey] = '';
+                }
+                $this->contents[$nsKey][$itemKey] .= $string;
+                break;
+            default:
+                throw new Swift_SwiftException(
+                    'Invalid mode ['.$mode.'] used to set nsKey='.
+                    $nsKey.', itemKey='.$itemKey
+                    );
+        }
+    }
+
+    /**
+     * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
+     *
+     * @see MODE_WRITE, MODE_APPEND
+     *
+     * @param string                 $nsKey
+     * @param string                 $itemKey
+     * @param Swift_OutputByteStream $os
+     * @param int                    $mode
+     */
+    public function importFromByteStream($nsKey, $itemKey, Swift_OutputByteStream $os, $mode)
+    {
+        $this->prepareCache($nsKey);
+        switch ($mode) {
+            case self::MODE_WRITE:
+                $this->clearKey($nsKey, $itemKey);
+            case self::MODE_APPEND:
+                if (!$this->hasKey($nsKey, $itemKey)) {
+                    $this->contents[$nsKey][$itemKey] = '';
+                }
+                while (false !== $bytes = $os->read(8192)) {
+                    $this->contents[$nsKey][$itemKey] .= $bytes;
+                }
+                break;
+            default:
+                throw new Swift_SwiftException(
+                    'Invalid mode ['.$mode.'] used to set nsKey='.
+                    $nsKey.', itemKey='.$itemKey
+                    );
+        }
+    }
+
+    /**
+     * Provides a ByteStream which when written to, writes data to $itemKey.
+     *
+     * NOTE: The stream will always write in append mode.
+     *
+     * @param string                $nsKey
+     * @param string                $itemKey
+     * @param Swift_InputByteStream $writeThrough
+     *
+     * @return Swift_InputByteStream
+     */
+    public function getInputByteStream($nsKey, $itemKey, Swift_InputByteStream $writeThrough = null)
+    {
+        $is = clone $this->stream;
+        $is->setKeyCache($this);
+        $is->setNsKey($nsKey);
+        $is->setItemKey($itemKey);
+        if (isset($writeThrough)) {
+            $is->setWriteThroughStream($writeThrough);
+        }
+
+        return $is;
+    }
+
+    /**
+     * Get data back out of the cache as a string.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     *
+     * @return string
+     */
+    public function getString($nsKey, $itemKey)
+    {
+        $this->prepareCache($nsKey);
+        if ($this->hasKey($nsKey, $itemKey)) {
+            return $this->contents[$nsKey][$itemKey];
+        }
+    }
+
+    /**
+     * Get data back out of the cache as a ByteStream.
+     *
+     * @param string                $nsKey
+     * @param string                $itemKey
+     * @param Swift_InputByteStream $is      to write the data to
+     */
+    public function exportToByteStream($nsKey, $itemKey, Swift_InputByteStream $is)
+    {
+        $this->prepareCache($nsKey);
+        $is->write($this->getString($nsKey, $itemKey));
+    }
+
+    /**
+     * Check if the given $itemKey exists in the namespace $nsKey.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     *
+     * @return bool
+     */
+    public function hasKey($nsKey, $itemKey)
+    {
+        $this->prepareCache($nsKey);
+
+        return array_key_exists($itemKey, $this->contents[$nsKey]);
+    }
+
+    /**
+     * Clear data for $itemKey in the namespace $nsKey if it exists.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     */
+    public function clearKey($nsKey, $itemKey)
+    {
+        unset($this->contents[$nsKey][$itemKey]);
+    }
+
+    /**
+     * Clear all data in the namespace $nsKey if it exists.
+     *
+     * @param string $nsKey
+     */
+    public function clearAll($nsKey)
+    {
+        unset($this->contents[$nsKey]);
+    }
+
+    /**
+     * Initialize the namespace of $nsKey if needed.
+     *
+     * @param string $nsKey
+     */
+    private function prepareCache($nsKey)
+    {
+        if (!array_key_exists($nsKey, $this->contents)) {
+            $this->contents[$nsKey] = array();
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php	(date 1495187412000)
@@ -0,0 +1,298 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A KeyCache which streams to and from disk.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_KeyCache_DiskKeyCache implements Swift_KeyCache
+{
+    /** Signal to place pointer at start of file */
+    const POSITION_START = 0;
+
+    /** Signal to place pointer at end of file */
+    const POSITION_END = 1;
+
+    /** Signal to leave pointer in whatever position it currently is */
+    const POSITION_CURRENT = 2;
+
+    /**
+     * An InputStream for cloning.
+     *
+     * @var Swift_KeyCache_KeyCacheInputStream
+     */
+    private $stream;
+
+    /**
+     * A path to write to.
+     *
+     * @var string
+     */
+    private $path;
+
+    /**
+     * Stored keys.
+     *
+     * @var array
+     */
+    private $keys = array();
+
+    /**
+     * Create a new DiskKeyCache with the given $stream for cloning to make
+     * InputByteStreams, and the given $path to save to.
+     *
+     * @param Swift_KeyCache_KeyCacheInputStream $stream
+     * @param string                             $path   to save to
+     */
+    public function __construct(Swift_KeyCache_KeyCacheInputStream $stream, $path)
+    {
+        $this->stream = $stream;
+        $this->path = $path;
+    }
+
+    /**
+     * Set a string into the cache under $itemKey for the namespace $nsKey.
+     *
+     * @see MODE_WRITE, MODE_APPEND
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     * @param string $string
+     * @param int    $mode
+     *
+     * @throws Swift_IoException
+     */
+    public function setString($nsKey, $itemKey, $string, $mode)
+    {
+        $this->prepareCache($nsKey);
+        switch ($mode) {
+            case self::MODE_WRITE:
+                $fp = $this->getHandle($nsKey, $itemKey, self::POSITION_START);
+                break;
+            case self::MODE_APPEND:
+                $fp = $this->getHandle($nsKey, $itemKey, self::POSITION_END);
+                break;
+            default:
+                throw new Swift_SwiftException(
+                    'Invalid mode ['.$mode.'] used to set nsKey='.
+                    $nsKey.', itemKey='.$itemKey
+                    );
+                break;
+        }
+        fwrite($fp, $string);
+        $this->freeHandle($nsKey, $itemKey);
+    }
+
+    /**
+     * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
+     *
+     * @see MODE_WRITE, MODE_APPEND
+     *
+     * @param string                 $nsKey
+     * @param string                 $itemKey
+     * @param Swift_OutputByteStream $os
+     * @param int                    $mode
+     *
+     * @throws Swift_IoException
+     */
+    public function importFromByteStream($nsKey, $itemKey, Swift_OutputByteStream $os, $mode)
+    {
+        $this->prepareCache($nsKey);
+        switch ($mode) {
+            case self::MODE_WRITE:
+                $fp = $this->getHandle($nsKey, $itemKey, self::POSITION_START);
+                break;
+            case self::MODE_APPEND:
+                $fp = $this->getHandle($nsKey, $itemKey, self::POSITION_END);
+                break;
+            default:
+                throw new Swift_SwiftException(
+                    'Invalid mode ['.$mode.'] used to set nsKey='.
+                    $nsKey.', itemKey='.$itemKey
+                    );
+                break;
+        }
+        while (false !== $bytes = $os->read(8192)) {
+            fwrite($fp, $bytes);
+        }
+        $this->freeHandle($nsKey, $itemKey);
+    }
+
+    /**
+     * Provides a ByteStream which when written to, writes data to $itemKey.
+     *
+     * NOTE: The stream will always write in append mode.
+     *
+     * @param string                $nsKey
+     * @param string                $itemKey
+     * @param Swift_InputByteStream $writeThrough
+     *
+     * @return Swift_InputByteStream
+     */
+    public function getInputByteStream($nsKey, $itemKey, Swift_InputByteStream $writeThrough = null)
+    {
+        $is = clone $this->stream;
+        $is->setKeyCache($this);
+        $is->setNsKey($nsKey);
+        $is->setItemKey($itemKey);
+        if (isset($writeThrough)) {
+            $is->setWriteThroughStream($writeThrough);
+        }
+
+        return $is;
+    }
+
+    /**
+     * Get data back out of the cache as a string.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     *
+     * @throws Swift_IoException
+     *
+     * @return string
+     */
+    public function getString($nsKey, $itemKey)
+    {
+        $this->prepareCache($nsKey);
+        if ($this->hasKey($nsKey, $itemKey)) {
+            $fp = $this->getHandle($nsKey, $itemKey, self::POSITION_START);
+            $str = '';
+            while (!feof($fp) && false !== $bytes = fread($fp, 8192)) {
+                $str .= $bytes;
+            }
+            $this->freeHandle($nsKey, $itemKey);
+
+            return $str;
+        }
+    }
+
+    /**
+     * Get data back out of the cache as a ByteStream.
+     *
+     * @param string                $nsKey
+     * @param string                $itemKey
+     * @param Swift_InputByteStream $is      to write the data to
+     */
+    public function exportToByteStream($nsKey, $itemKey, Swift_InputByteStream $is)
+    {
+        if ($this->hasKey($nsKey, $itemKey)) {
+            $fp = $this->getHandle($nsKey, $itemKey, self::POSITION_START);
+            while (!feof($fp) && false !== $bytes = fread($fp, 8192)) {
+                $is->write($bytes);
+            }
+            $this->freeHandle($nsKey, $itemKey);
+        }
+    }
+
+    /**
+     * Check if the given $itemKey exists in the namespace $nsKey.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     *
+     * @return bool
+     */
+    public function hasKey($nsKey, $itemKey)
+    {
+        return is_file($this->path.'/'.$nsKey.'/'.$itemKey);
+    }
+
+    /**
+     * Clear data for $itemKey in the namespace $nsKey if it exists.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     */
+    public function clearKey($nsKey, $itemKey)
+    {
+        if ($this->hasKey($nsKey, $itemKey)) {
+            $this->freeHandle($nsKey, $itemKey);
+            unlink($this->path.'/'.$nsKey.'/'.$itemKey);
+        }
+    }
+
+    /**
+     * Clear all data in the namespace $nsKey if it exists.
+     *
+     * @param string $nsKey
+     */
+    public function clearAll($nsKey)
+    {
+        if (array_key_exists($nsKey, $this->keys)) {
+            foreach ($this->keys[$nsKey] as $itemKey => $null) {
+                $this->clearKey($nsKey, $itemKey);
+            }
+            if (is_dir($this->path.'/'.$nsKey)) {
+                rmdir($this->path.'/'.$nsKey);
+            }
+            unset($this->keys[$nsKey]);
+        }
+    }
+
+    /**
+     * Initialize the namespace of $nsKey if needed.
+     *
+     * @param string $nsKey
+     */
+    private function prepareCache($nsKey)
+    {
+        $cacheDir = $this->path.'/'.$nsKey;
+        if (!is_dir($cacheDir)) {
+            if (!mkdir($cacheDir)) {
+                throw new Swift_IoException('Failed to create cache directory '.$cacheDir);
+            }
+            $this->keys[$nsKey] = array();
+        }
+    }
+
+    /**
+     * Get a file handle on the cache item.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     * @param int    $position
+     *
+     * @return resource
+     */
+    private function getHandle($nsKey, $itemKey, $position)
+    {
+        if (!isset($this->keys[$nsKey][$itemKey])) {
+            $openMode = $this->hasKey($nsKey, $itemKey) ? 'r+b' : 'w+b';
+            $fp = fopen($this->path.'/'.$nsKey.'/'.$itemKey, $openMode);
+            $this->keys[$nsKey][$itemKey] = $fp;
+        }
+        if (self::POSITION_START == $position) {
+            fseek($this->keys[$nsKey][$itemKey], 0, SEEK_SET);
+        } elseif (self::POSITION_END == $position) {
+            fseek($this->keys[$nsKey][$itemKey], 0, SEEK_END);
+        }
+
+        return $this->keys[$nsKey][$itemKey];
+    }
+
+    private function freeHandle($nsKey, $itemKey)
+    {
+        $fp = $this->getHandle($nsKey, $itemKey, self::POSITION_CURRENT);
+        fclose($fp);
+        $this->keys[$nsKey][$itemKey] = null;
+    }
+
+    /**
+     * Destructor.
+     */
+    public function __destruct()
+    {
+        foreach ($this->keys as $nsKey => $null) {
+            $this->clearAll($nsKey);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/KeyCacheInputStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/KeyCacheInputStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/KeyCacheInputStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/KeyCacheInputStream.php	(date 1495187412000)
@@ -0,0 +1,51 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Writes data to a KeyCache using a stream.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_KeyCache_KeyCacheInputStream extends Swift_InputByteStream
+{
+    /**
+     * Set the KeyCache to wrap.
+     *
+     * @param Swift_KeyCache $keyCache
+     */
+    public function setKeyCache(Swift_KeyCache $keyCache);
+
+    /**
+     * Set the nsKey which will be written to.
+     *
+     * @param string $nsKey
+     */
+    public function setNsKey($nsKey);
+
+    /**
+     * Set the itemKey which will be written to.
+     *
+     * @param string $itemKey
+     */
+    public function setItemKey($itemKey);
+
+    /**
+     * Specify a stream to write through for each write().
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function setWriteThroughStream(Swift_InputByteStream $is);
+
+    /**
+     * Any implementation should be cloneable, allowing the clone to access a
+     * separate $nsKey and $itemKey.
+     */
+    public function __clone();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php	(date 1495187412000)
@@ -0,0 +1,686 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * DKIM Signer used to apply DKIM Signature to a message.
+ *
+ * @author     Xavier De Cock <xdecock@gmail.com>
+ */
+class Swift_Signers_DKIMSigner implements Swift_Signers_HeaderSigner
+{
+    /**
+     * PrivateKey.
+     *
+     * @var string
+     */
+    protected $privateKey;
+
+    /**
+     * DomainName.
+     *
+     * @var string
+     */
+    protected $domainName;
+
+    /**
+     * Selector.
+     *
+     * @var string
+     */
+    protected $selector;
+
+    private $passphrase = '';
+
+    /**
+     * Hash algorithm used.
+     *
+     * @see RFC6376 3.3: Signers MUST implement and SHOULD sign using rsa-sha256.
+     *
+     * @var string
+     */
+    protected $hashAlgorithm = 'rsa-sha256';
+
+    /**
+     * Body canon method.
+     *
+     * @var string
+     */
+    protected $bodyCanon = 'simple';
+
+    /**
+     * Header canon method.
+     *
+     * @var string
+     */
+    protected $headerCanon = 'simple';
+
+    /**
+     * Headers not being signed.
+     *
+     * @var array
+     */
+    protected $ignoredHeaders = array('return-path' => true);
+
+    /**
+     * Signer identity.
+     *
+     * @var string
+     */
+    protected $signerIdentity;
+
+    /**
+     * BodyLength.
+     *
+     * @var int
+     */
+    protected $bodyLen = 0;
+
+    /**
+     * Maximum signedLen.
+     *
+     * @var int
+     */
+    protected $maxLen = PHP_INT_MAX;
+
+    /**
+     * Embbed bodyLen in signature.
+     *
+     * @var bool
+     */
+    protected $showLen = false;
+
+    /**
+     * When the signature has been applied (true means time()), false means not embedded.
+     *
+     * @var mixed
+     */
+    protected $signatureTimestamp = true;
+
+    /**
+     * When will the signature expires false means not embedded, if sigTimestamp is auto
+     * Expiration is relative, otherwise it's absolute.
+     *
+     * @var int
+     */
+    protected $signatureExpiration = false;
+
+    /**
+     * Must we embed signed headers?
+     *
+     * @var bool
+     */
+    protected $debugHeaders = false;
+
+    // work variables
+    /**
+     * Headers used to generate hash.
+     *
+     * @var array
+     */
+    protected $signedHeaders = array();
+
+    /**
+     * If debugHeaders is set store debugData here.
+     *
+     * @var string
+     */
+    private $debugHeadersData = '';
+
+    /**
+     * Stores the bodyHash.
+     *
+     * @var string
+     */
+    private $bodyHash = '';
+
+    /**
+     * Stores the signature header.
+     *
+     * @var Swift_Mime_Headers_ParameterizedHeader
+     */
+    protected $dkimHeader;
+
+    private $bodyHashHandler;
+
+    private $headerHash;
+
+    private $headerCanonData = '';
+
+    private $bodyCanonEmptyCounter = 0;
+
+    private $bodyCanonIgnoreStart = 2;
+
+    private $bodyCanonSpace = false;
+
+    private $bodyCanonLastChar = null;
+
+    private $bodyCanonLine = '';
+
+    private $bound = array();
+
+    /**
+     * Constructor.
+     *
+     * @param string $privateKey
+     * @param string $domainName
+     * @param string $selector
+     * @param string $passphrase
+     */
+    public function __construct($privateKey, $domainName, $selector, $passphrase = '')
+    {
+        $this->privateKey = $privateKey;
+        $this->domainName = $domainName;
+        $this->signerIdentity = '@'.$domainName;
+        $this->selector = $selector;
+        $this->passphrase = $passphrase;
+    }
+
+    /**
+     * Reset the Signer.
+     *
+     * @see Swift_Signer::reset()
+     */
+    public function reset()
+    {
+        $this->headerHash = null;
+        $this->signedHeaders = array();
+        $this->bodyHash = null;
+        $this->bodyHashHandler = null;
+        $this->bodyCanonIgnoreStart = 2;
+        $this->bodyCanonEmptyCounter = 0;
+        $this->bodyCanonLastChar = null;
+        $this->bodyCanonSpace = false;
+    }
+
+    /**
+     * Writes $bytes to the end of the stream.
+     *
+     * Writing may not happen immediately if the stream chooses to buffer.  If
+     * you want to write these bytes with immediate effect, call {@link commit()}
+     * after calling write().
+     *
+     * This method returns the sequence ID of the write (i.e. 1 for first, 2 for
+     * second, etc etc).
+     *
+     * @param string $bytes
+     *
+     * @return int
+     *
+     * @throws Swift_IoException
+     */
+    // TODO fix return
+    public function write($bytes)
+    {
+        $this->canonicalizeBody($bytes);
+        foreach ($this->bound as $is) {
+            $is->write($bytes);
+        }
+    }
+
+    /**
+     * For any bytes that are currently buffered inside the stream, force them
+     * off the buffer.
+     */
+    public function commit()
+    {
+        // Nothing to do
+        return;
+    }
+
+    /**
+     * Attach $is to this stream.
+     * The stream acts as an observer, receiving all data that is written.
+     * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function bind(Swift_InputByteStream $is)
+    {
+        // Don't have to mirror anything
+        $this->bound[] = $is;
+
+        return;
+    }
+
+    /**
+     * Remove an already bound stream.
+     * If $is is not bound, no errors will be raised.
+     * If the stream currently has any buffered data it will be written to $is
+     * before unbinding occurs.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function unbind(Swift_InputByteStream $is)
+    {
+        // Don't have to mirror anything
+        foreach ($this->bound as $k => $stream) {
+            if ($stream === $is) {
+                unset($this->bound[$k]);
+
+                return;
+            }
+        }
+    }
+
+    /**
+     * Flush the contents of the stream (empty it) and set the internal pointer
+     * to the beginning.
+     *
+     * @throws Swift_IoException
+     */
+    public function flushBuffers()
+    {
+        $this->reset();
+    }
+
+    /**
+     * Set hash_algorithm, must be one of rsa-sha256 | rsa-sha1.
+     *
+     * @param string $hash 'rsa-sha1' or 'rsa-sha256'
+     *
+     * @throws Swift_SwiftException
+     *
+     * @return $this
+     */
+    public function setHashAlgorithm($hash)
+    {
+        switch ($hash) {
+            case 'rsa-sha1':
+                $this->hashAlgorithm = 'rsa-sha1';
+                break;
+            case 'rsa-sha256':
+                $this->hashAlgorithm = 'rsa-sha256';
+                if (!defined('OPENSSL_ALGO_SHA256')) {
+                    throw new Swift_SwiftException('Unable to set sha256 as it is not supported by OpenSSL.');
+                }
+                break;
+            default:
+                throw new Swift_SwiftException('Unable to set the hash algorithm, must be one of rsa-sha1 or rsa-sha256 (%s given).', $hash);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Set the body canonicalization algorithm.
+     *
+     * @param string $canon
+     *
+     * @return $this
+     */
+    public function setBodyCanon($canon)
+    {
+        if ($canon == 'relaxed') {
+            $this->bodyCanon = 'relaxed';
+        } else {
+            $this->bodyCanon = 'simple';
+        }
+
+        return $this;
+    }
+
+    /**
+     * Set the header canonicalization algorithm.
+     *
+     * @param string $canon
+     *
+     * @return $this
+     */
+    public function setHeaderCanon($canon)
+    {
+        if ($canon == 'relaxed') {
+            $this->headerCanon = 'relaxed';
+        } else {
+            $this->headerCanon = 'simple';
+        }
+
+        return $this;
+    }
+
+    /**
+     * Set the signer identity.
+     *
+     * @param string $identity
+     *
+     * @return $this
+     */
+    public function setSignerIdentity($identity)
+    {
+        $this->signerIdentity = $identity;
+
+        return $this;
+    }
+
+    /**
+     * Set the length of the body to sign.
+     *
+     * @param mixed $len (bool or int)
+     *
+     * @return $this
+     */
+    public function setBodySignedLen($len)
+    {
+        if ($len === true) {
+            $this->showLen = true;
+            $this->maxLen = PHP_INT_MAX;
+        } elseif ($len === false) {
+            $this->showLen = false;
+            $this->maxLen = PHP_INT_MAX;
+        } else {
+            $this->showLen = true;
+            $this->maxLen = (int) $len;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Set the signature timestamp.
+     *
+     * @param int $time A timestamp
+     *
+     * @return $this
+     */
+    public function setSignatureTimestamp($time)
+    {
+        $this->signatureTimestamp = $time;
+
+        return $this;
+    }
+
+    /**
+     * Set the signature expiration timestamp.
+     *
+     * @param int $time A timestamp
+     *
+     * @return $this
+     */
+    public function setSignatureExpiration($time)
+    {
+        $this->signatureExpiration = $time;
+
+        return $this;
+    }
+
+    /**
+     * Enable / disable the DebugHeaders.
+     *
+     * @param bool $debug
+     *
+     * @return Swift_Signers_DKIMSigner
+     */
+    public function setDebugHeaders($debug)
+    {
+        $this->debugHeaders = (bool) $debug;
+
+        return $this;
+    }
+
+    /**
+     * Start Body.
+     */
+    public function startBody()
+    {
+        // Init
+        switch ($this->hashAlgorithm) {
+            case 'rsa-sha256':
+                $this->bodyHashHandler = hash_init('sha256');
+                break;
+            case 'rsa-sha1':
+                $this->bodyHashHandler = hash_init('sha1');
+                break;
+        }
+        $this->bodyCanonLine = '';
+    }
+
+    /**
+     * End Body.
+     */
+    public function endBody()
+    {
+        $this->endOfBody();
+    }
+
+    /**
+     * Returns the list of Headers Tampered by this plugin.
+     *
+     * @return array
+     */
+    public function getAlteredHeaders()
+    {
+        if ($this->debugHeaders) {
+            return array('DKIM-Signature', 'X-DebugHash');
+        } else {
+            return array('DKIM-Signature');
+        }
+    }
+
+    /**
+     * Adds an ignored Header.
+     *
+     * @param string $header_name
+     *
+     * @return Swift_Signers_DKIMSigner
+     */
+    public function ignoreHeader($header_name)
+    {
+        $this->ignoredHeaders[strtolower($header_name)] = true;
+
+        return $this;
+    }
+
+    /**
+     * Set the headers to sign.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     *
+     * @return Swift_Signers_DKIMSigner
+     */
+    public function setHeaders(Swift_Mime_SimpleHeaderSet $headers)
+    {
+        $this->headerCanonData = '';
+        // Loop through Headers
+        $listHeaders = $headers->listAll();
+        foreach ($listHeaders as $hName) {
+            // Check if we need to ignore Header
+            if (!isset($this->ignoredHeaders[strtolower($hName)])) {
+                if ($headers->has($hName)) {
+                    $tmp = $headers->getAll($hName);
+                    foreach ($tmp as $header) {
+                        if ($header->getFieldBody() != '') {
+                            $this->addHeader($header->toString());
+                            $this->signedHeaders[] = $header->getFieldName();
+                        }
+                    }
+                }
+            }
+        }
+
+        return $this;
+    }
+
+    /**
+     * Add the signature to the given Headers.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     *
+     * @return Swift_Signers_DKIMSigner
+     */
+    public function addSignature(Swift_Mime_SimpleHeaderSet $headers)
+    {
+        // Prepare the DKIM-Signature
+        $params = array('v' => '1', 'a' => $this->hashAlgorithm, 'bh' => base64_encode($this->bodyHash), 'd' => $this->domainName, 'h' => implode(': ', $this->signedHeaders), 'i' => $this->signerIdentity, 's' => $this->selector);
+        if ($this->bodyCanon != 'simple') {
+            $params['c'] = $this->headerCanon.'/'.$this->bodyCanon;
+        } elseif ($this->headerCanon != 'simple') {
+            $params['c'] = $this->headerCanon;
+        }
+        if ($this->showLen) {
+            $params['l'] = $this->bodyLen;
+        }
+        if ($this->signatureTimestamp === true) {
+            $params['t'] = time();
+            if ($this->signatureExpiration !== false) {
+                $params['x'] = $params['t'] + $this->signatureExpiration;
+            }
+        } else {
+            if ($this->signatureTimestamp !== false) {
+                $params['t'] = $this->signatureTimestamp;
+            }
+            if ($this->signatureExpiration !== false) {
+                $params['x'] = $this->signatureExpiration;
+            }
+        }
+        if ($this->debugHeaders) {
+            $params['z'] = implode('|', $this->debugHeadersData);
+        }
+        $string = '';
+        foreach ($params as $k => $v) {
+            $string .= $k.'='.$v.'; ';
+        }
+        $string = trim($string);
+        $headers->addTextHeader('DKIM-Signature', $string);
+        // Add the last DKIM-Signature
+        $tmp = $headers->getAll('DKIM-Signature');
+        $this->dkimHeader = end($tmp);
+        $this->addHeader(trim($this->dkimHeader->toString())."\r\n b=", true);
+        if ($this->debugHeaders) {
+            $headers->addTextHeader('X-DebugHash', base64_encode($this->headerHash));
+        }
+        $this->dkimHeader->setValue($string.' b='.trim(chunk_split(base64_encode($this->getEncryptedHash()), 73, ' ')));
+
+        return $this;
+    }
+
+    /* Private helpers */
+
+    protected function addHeader($header, $is_sig = false)
+    {
+        switch ($this->headerCanon) {
+            case 'relaxed':
+                // Prepare Header and cascade
+                $exploded = explode(':', $header, 2);
+                $name = strtolower(trim($exploded[0]));
+                $value = str_replace("\r\n", '', $exploded[1]);
+                $value = preg_replace("/[ \t][ \t]+/", ' ', $value);
+                $header = $name.':'.trim($value).($is_sig ? '' : "\r\n");
+            case 'simple':
+                // Nothing to do
+        }
+        $this->addToHeaderHash($header);
+    }
+
+    protected function canonicalizeBody($string)
+    {
+        $len = strlen($string);
+        $canon = '';
+        $method = ($this->bodyCanon == 'relaxed');
+        for ($i = 0; $i < $len; ++$i) {
+            if ($this->bodyCanonIgnoreStart > 0) {
+                --$this->bodyCanonIgnoreStart;
+                continue;
+            }
+            switch ($string[$i]) {
+                case "\r":
+                    $this->bodyCanonLastChar = "\r";
+                    break;
+                case "\n":
+                    if ($this->bodyCanonLastChar == "\r") {
+                        if ($method) {
+                            $this->bodyCanonSpace = false;
+                        }
+                        if ($this->bodyCanonLine == '') {
+                            ++$this->bodyCanonEmptyCounter;
+                        } else {
+                            $this->bodyCanonLine = '';
+                            $canon .= "\r\n";
+                        }
+                    } else {
+                        // Wooops Error
+                        // todo handle it but should never happen
+                    }
+                    break;
+                case ' ':
+                case "\t":
+                    if ($method) {
+                        $this->bodyCanonSpace = true;
+                        break;
+                    }
+                default:
+                    if ($this->bodyCanonEmptyCounter > 0) {
+                        $canon .= str_repeat("\r\n", $this->bodyCanonEmptyCounter);
+                        $this->bodyCanonEmptyCounter = 0;
+                    }
+                    if ($this->bodyCanonSpace) {
+                        $this->bodyCanonLine .= ' ';
+                        $canon .= ' ';
+                        $this->bodyCanonSpace = false;
+                    }
+                    $this->bodyCanonLine .= $string[$i];
+                    $canon .= $string[$i];
+            }
+        }
+        $this->addToBodyHash($canon);
+    }
+
+    protected function endOfBody()
+    {
+        // Add trailing Line return if last line is non empty
+        if (strlen($this->bodyCanonLine) > 0) {
+            $this->addToBodyHash("\r\n");
+        }
+        $this->bodyHash = hash_final($this->bodyHashHandler, true);
+    }
+
+    private function addToBodyHash($string)
+    {
+        $len = strlen($string);
+        if ($len > ($new_len = ($this->maxLen - $this->bodyLen))) {
+            $string = substr($string, 0, $new_len);
+            $len = $new_len;
+        }
+        hash_update($this->bodyHashHandler, $string);
+        $this->bodyLen += $len;
+    }
+
+    private function addToHeaderHash($header)
+    {
+        if ($this->debugHeaders) {
+            $this->debugHeadersData[] = trim($header);
+        }
+        $this->headerCanonData .= $header;
+    }
+
+    /**
+     * @throws Swift_SwiftException
+     *
+     * @return string
+     */
+    private function getEncryptedHash()
+    {
+        $signature = '';
+        switch ($this->hashAlgorithm) {
+            case 'rsa-sha1':
+                $algorithm = OPENSSL_ALGO_SHA1;
+                break;
+            case 'rsa-sha256':
+                $algorithm = OPENSSL_ALGO_SHA256;
+                break;
+        }
+        $pkeyId = openssl_get_privatekey($this->privateKey, $this->passphrase);
+        if (!$pkeyId) {
+            throw new Swift_SwiftException('Unable to load DKIM Private Key ['.openssl_error_string().']');
+        }
+        if (openssl_sign($this->headerCanonData, $signature, $pkeyId, $algorithm)) {
+            return $signature;
+        }
+        throw new Swift_SwiftException('Unable to sign DKIM Hash ['.openssl_error_string().']');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DomainKeySigner.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DomainKeySigner.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DomainKeySigner.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DomainKeySigner.php	(date 1495187412000)
@@ -0,0 +1,512 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * DomainKey Signer used to apply DomainKeys Signature to a message.
+ *
+ * @author     Xavier De Cock <xdecock@gmail.com>
+ */
+class Swift_Signers_DomainKeySigner implements Swift_Signers_HeaderSigner
+{
+    /**
+     * PrivateKey.
+     *
+     * @var string
+     */
+    protected $privateKey;
+
+    /**
+     * DomainName.
+     *
+     * @var string
+     */
+    protected $domainName;
+
+    /**
+     * Selector.
+     *
+     * @var string
+     */
+    protected $selector;
+
+    /**
+     * Hash algorithm used.
+     *
+     * @var string
+     */
+    protected $hashAlgorithm = 'rsa-sha1';
+
+    /**
+     * Canonisation method.
+     *
+     * @var string
+     */
+    protected $canon = 'simple';
+
+    /**
+     * Headers not being signed.
+     *
+     * @var array
+     */
+    protected $ignoredHeaders = array();
+
+    /**
+     * Signer identity.
+     *
+     * @var string
+     */
+    protected $signerIdentity;
+
+    /**
+     * Must we embed signed headers?
+     *
+     * @var bool
+     */
+    protected $debugHeaders = false;
+
+    // work variables
+    /**
+     * Headers used to generate hash.
+     *
+     * @var array
+     */
+    private $signedHeaders = array();
+
+    /**
+     * Stores the signature header.
+     *
+     * @var Swift_Mime_Headers_ParameterizedHeader
+     */
+    protected $domainKeyHeader;
+
+    /**
+     * Hash Handler.
+     *
+     * @var resource|null
+     */
+    private $hashHandler;
+
+    private $hash;
+
+    private $canonData = '';
+
+    private $bodyCanonEmptyCounter = 0;
+
+    private $bodyCanonIgnoreStart = 2;
+
+    private $bodyCanonSpace = false;
+
+    private $bodyCanonLastChar = null;
+
+    private $bodyCanonLine = '';
+
+    private $bound = array();
+
+    /**
+     * Constructor.
+     *
+     * @param string $privateKey
+     * @param string $domainName
+     * @param string $selector
+     */
+    public function __construct($privateKey, $domainName, $selector)
+    {
+        $this->privateKey = $privateKey;
+        $this->domainName = $domainName;
+        $this->signerIdentity = '@'.$domainName;
+        $this->selector = $selector;
+    }
+
+    /**
+     * Resets internal states.
+     *
+     * @return $this
+     */
+    public function reset()
+    {
+        $this->hash = null;
+        $this->hashHandler = null;
+        $this->bodyCanonIgnoreStart = 2;
+        $this->bodyCanonEmptyCounter = 0;
+        $this->bodyCanonLastChar = null;
+        $this->bodyCanonSpace = false;
+
+        return $this;
+    }
+
+    /**
+     * Writes $bytes to the end of the stream.
+     *
+     * Writing may not happen immediately if the stream chooses to buffer.  If
+     * you want to write these bytes with immediate effect, call {@link commit()}
+     * after calling write().
+     *
+     * This method returns the sequence ID of the write (i.e. 1 for first, 2 for
+     * second, etc etc).
+     *
+     * @param string $bytes
+     *
+     * @return int
+     *
+     * @throws Swift_IoException
+     *
+     * @return $this
+     */
+    public function write($bytes)
+    {
+        $this->canonicalizeBody($bytes);
+        foreach ($this->bound as $is) {
+            $is->write($bytes);
+        }
+
+        return $this;
+    }
+
+    /**
+     * For any bytes that are currently buffered inside the stream, force them
+     * off the buffer.
+     *
+     * @throws Swift_IoException
+     *
+     * @return $this
+     */
+    public function commit()
+    {
+        // Nothing to do
+        return $this;
+    }
+
+    /**
+     * Attach $is to this stream.
+     * The stream acts as an observer, receiving all data that is written.
+     * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
+     *
+     * @param Swift_InputByteStream $is
+     *
+     * @return $this
+     */
+    public function bind(Swift_InputByteStream $is)
+    {
+        // Don't have to mirror anything
+        $this->bound[] = $is;
+
+        return $this;
+    }
+
+    /**
+     * Remove an already bound stream.
+     * If $is is not bound, no errors will be raised.
+     * If the stream currently has any buffered data it will be written to $is
+     * before unbinding occurs.
+     *
+     * @param Swift_InputByteStream $is
+     *
+     * @return $this
+     */
+    public function unbind(Swift_InputByteStream $is)
+    {
+        // Don't have to mirror anything
+        foreach ($this->bound as $k => $stream) {
+            if ($stream === $is) {
+                unset($this->bound[$k]);
+
+                break;
+            }
+        }
+
+        return $this;
+    }
+
+    /**
+     * Flush the contents of the stream (empty it) and set the internal pointer
+     * to the beginning.
+     *
+     * @throws Swift_IoException
+     *
+     * @return $this
+     */
+    public function flushBuffers()
+    {
+        $this->reset();
+
+        return $this;
+    }
+
+    /**
+     * Set hash_algorithm, must be one of rsa-sha256 | rsa-sha1 defaults to rsa-sha256.
+     *
+     * @param string $hash
+     *
+     * @return $this
+     */
+    public function setHashAlgorithm($hash)
+    {
+        $this->hashAlgorithm = 'rsa-sha1';
+
+        return $this;
+    }
+
+    /**
+     * Set the canonicalization algorithm.
+     *
+     * @param string $canon simple | nofws defaults to simple
+     *
+     * @return $this
+     */
+    public function setCanon($canon)
+    {
+        if ($canon == 'nofws') {
+            $this->canon = 'nofws';
+        } else {
+            $this->canon = 'simple';
+        }
+
+        return $this;
+    }
+
+    /**
+     * Set the signer identity.
+     *
+     * @param string $identity
+     *
+     * @return $this
+     */
+    public function setSignerIdentity($identity)
+    {
+        $this->signerIdentity = $identity;
+
+        return $this;
+    }
+
+    /**
+     * Enable / disable the DebugHeaders.
+     *
+     * @param bool $debug
+     *
+     * @return $this
+     */
+    public function setDebugHeaders($debug)
+    {
+        $this->debugHeaders = (bool) $debug;
+
+        return $this;
+    }
+
+    /**
+     * Start Body.
+     */
+    public function startBody()
+    {
+    }
+
+    /**
+     * End Body.
+     */
+    public function endBody()
+    {
+        $this->endOfBody();
+    }
+
+    /**
+     * Returns the list of Headers Tampered by this plugin.
+     *
+     * @return array
+     */
+    public function getAlteredHeaders()
+    {
+        if ($this->debugHeaders) {
+            return array('DomainKey-Signature', 'X-DebugHash');
+        }
+
+        return array('DomainKey-Signature');
+    }
+
+    /**
+     * Adds an ignored Header.
+     *
+     * @param string $header_name
+     *
+     * @return $this
+     */
+    public function ignoreHeader($header_name)
+    {
+        $this->ignoredHeaders[strtolower($header_name)] = true;
+
+        return $this;
+    }
+
+    /**
+     * Set the headers to sign.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     *
+     * @return $this
+     */
+    public function setHeaders(Swift_Mime_SimpleHeaderSet $headers)
+    {
+        $this->startHash();
+        $this->canonData = '';
+        // Loop through Headers
+        $listHeaders = $headers->listAll();
+        foreach ($listHeaders as $hName) {
+            // Check if we need to ignore Header
+            if (!isset($this->ignoredHeaders[strtolower($hName)])) {
+                if ($headers->has($hName)) {
+                    $tmp = $headers->getAll($hName);
+                    foreach ($tmp as $header) {
+                        if ($header->getFieldBody() != '') {
+                            $this->addHeader($header->toString());
+                            $this->signedHeaders[] = $header->getFieldName();
+                        }
+                    }
+                }
+            }
+        }
+        $this->endOfHeaders();
+
+        return $this;
+    }
+
+    /**
+     * Add the signature to the given Headers.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     *
+     * @return $this
+     */
+    public function addSignature(Swift_Mime_SimpleHeaderSet $headers)
+    {
+        // Prepare the DomainKey-Signature Header
+        $params = array('a' => $this->hashAlgorithm, 'b' => chunk_split(base64_encode($this->getEncryptedHash()), 73, ' '), 'c' => $this->canon, 'd' => $this->domainName, 'h' => implode(': ', $this->signedHeaders), 'q' => 'dns', 's' => $this->selector);
+        $string = '';
+        foreach ($params as $k => $v) {
+            $string .= $k.'='.$v.'; ';
+        }
+        $string = trim($string);
+        $headers->addTextHeader('DomainKey-Signature', $string);
+
+        return $this;
+    }
+
+    /* Private helpers */
+
+    protected function addHeader($header)
+    {
+        switch ($this->canon) {
+            case 'nofws':
+                // Prepare Header and cascade
+                $exploded = explode(':', $header, 2);
+                $name = strtolower(trim($exploded[0]));
+                $value = str_replace("\r\n", '', $exploded[1]);
+                $value = preg_replace("/[ \t][ \t]+/", ' ', $value);
+                $header = $name.':'.trim($value)."\r\n";
+            case 'simple':
+                // Nothing to do
+        }
+        $this->addToHash($header);
+    }
+
+    protected function endOfHeaders()
+    {
+        $this->bodyCanonEmptyCounter = 1;
+    }
+
+    protected function canonicalizeBody($string)
+    {
+        $len = strlen($string);
+        $canon = '';
+        $nofws = ($this->canon == 'nofws');
+        for ($i = 0; $i < $len; ++$i) {
+            if ($this->bodyCanonIgnoreStart > 0) {
+                --$this->bodyCanonIgnoreStart;
+                continue;
+            }
+            switch ($string[$i]) {
+                case "\r":
+                    $this->bodyCanonLastChar = "\r";
+                    break;
+                case "\n":
+                    if ($this->bodyCanonLastChar == "\r") {
+                        if ($nofws) {
+                            $this->bodyCanonSpace = false;
+                        }
+                        if ($this->bodyCanonLine == '') {
+                            ++$this->bodyCanonEmptyCounter;
+                        } else {
+                            $this->bodyCanonLine = '';
+                            $canon .= "\r\n";
+                        }
+                    } else {
+                        // Wooops Error
+                        throw new Swift_SwiftException('Invalid new line sequence in mail found \n without preceding \r');
+                    }
+                    break;
+                case ' ':
+                case "\t":
+                case "\x09": //HTAB
+                    if ($nofws) {
+                        $this->bodyCanonSpace = true;
+                        break;
+                    }
+                default:
+                    if ($this->bodyCanonEmptyCounter > 0) {
+                        $canon .= str_repeat("\r\n", $this->bodyCanonEmptyCounter);
+                        $this->bodyCanonEmptyCounter = 0;
+                    }
+                    $this->bodyCanonLine .= $string[$i];
+                    $canon .= $string[$i];
+            }
+        }
+        $this->addToHash($canon);
+    }
+
+    protected function endOfBody()
+    {
+        if (strlen($this->bodyCanonLine) > 0) {
+            $this->addToHash("\r\n");
+        }
+        $this->hash = hash_final($this->hashHandler, true);
+    }
+
+    private function addToHash($string)
+    {
+        $this->canonData .= $string;
+        hash_update($this->hashHandler, $string);
+    }
+
+    private function startHash()
+    {
+        // Init
+        switch ($this->hashAlgorithm) {
+            case 'rsa-sha1':
+                $this->hashHandler = hash_init('sha1');
+                break;
+        }
+        $this->bodyCanonLine = '';
+    }
+
+    /**
+     * @throws Swift_SwiftException
+     *
+     * @return string
+     */
+    private function getEncryptedHash()
+    {
+        $signature = '';
+        $pkeyId = openssl_get_privatekey($this->privateKey);
+        if (!$pkeyId) {
+            throw new Swift_SwiftException('Unable to load DomainKey Private Key ['.openssl_error_string().']');
+        }
+        if (openssl_sign($this->canonData, $signature, $pkeyId, OPENSSL_ALGO_SHA1)) {
+            return $signature;
+        }
+        throw new Swift_SwiftException('Unable to sign DomainKey Hash  ['.openssl_error_string().']');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/HeaderSigner.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/HeaderSigner.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/HeaderSigner.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/HeaderSigner.php	(date 1495187412000)
@@ -0,0 +1,65 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Header Signer Interface used to apply Header-Based Signature to a message.
+ *
+ * @author Xavier De Cock <xdecock@gmail.com>
+ */
+interface Swift_Signers_HeaderSigner extends Swift_Signer, Swift_InputByteStream
+{
+    /**
+     * Exclude an header from the signed headers.
+     *
+     * @param string $header_name
+     *
+     * @return self
+     */
+    public function ignoreHeader($header_name);
+
+    /**
+     * Prepare the Signer to get a new Body.
+     *
+     * @return self
+     */
+    public function startBody();
+
+    /**
+     * Give the signal that the body has finished streaming.
+     *
+     * @return self
+     */
+    public function endBody();
+
+    /**
+     * Give the headers already given.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     *
+     * @return self
+     */
+    public function setHeaders(Swift_Mime_SimpleHeaderSet $headers);
+
+    /**
+     * Add the header(s) to the headerSet.
+     *
+     * @param Swift_Mime_SimpleHeaderSet $headers
+     *
+     * @return self
+     */
+    public function addSignature(Swift_Mime_SimpleHeaderSet $headers);
+
+    /**
+     * Return the list of header a signer might tamper.
+     *
+     * @return array
+     */
+    public function getAlteredHeaders();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/OpenDKIMSigner.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/OpenDKIMSigner.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/OpenDKIMSigner.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Signers/OpenDKIMSigner.php	(date 1495187412000)
@@ -0,0 +1,185 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * DKIM Signer used to apply DKIM Signature to a message
+ * Takes advantage of pecl extension.
+ *
+ * @author     Xavier De Cock <xdecock@gmail.com>
+ */
+class Swift_Signers_OpenDKIMSigner extends Swift_Signers_DKIMSigner
+{
+    private $peclLoaded = false;
+
+    private $dkimHandler = null;
+
+    private $dropFirstLF = true;
+
+    const CANON_RELAXED = 1;
+    const CANON_SIMPLE = 2;
+    const SIG_RSA_SHA1 = 3;
+    const SIG_RSA_SHA256 = 4;
+
+    public function __construct($privateKey, $domainName, $selector)
+    {
+        if (!extension_loaded('opendkim')) {
+            throw new Swift_SwiftException('php-opendkim extension not found');
+        }
+
+        $this->peclLoaded = true;
+
+        parent::__construct($privateKey, $domainName, $selector);
+    }
+
+    public function addSignature(Swift_Mime_SimpleHeaderSet $headers)
+    {
+        $header = new Swift_Mime_Headers_OpenDKIMHeader('DKIM-Signature');
+        $headerVal = $this->dkimHandler->getSignatureHeader();
+        if (!$headerVal) {
+            throw new Swift_SwiftException('OpenDKIM Error: '.$this->dkimHandler->getError());
+        }
+        $header->setValue($headerVal);
+        $headers->set($header);
+
+        return $this;
+    }
+
+    public function setHeaders(Swift_Mime_SimpleHeaderSet $headers)
+    {
+        $bodyLen = $this->bodyLen;
+        if (is_bool($bodyLen)) {
+            $bodyLen = -1;
+        }
+        $hash = $this->hashAlgorithm == 'rsa-sha1' ? OpenDKIMSign::ALG_RSASHA1 : OpenDKIMSign::ALG_RSASHA256;
+        $bodyCanon = $this->bodyCanon == 'simple' ? OpenDKIMSign::CANON_SIMPLE : OpenDKIMSign::CANON_RELAXED;
+        $headerCanon = $this->headerCanon == 'simple' ? OpenDKIMSign::CANON_SIMPLE : OpenDKIMSign::CANON_RELAXED;
+        $this->dkimHandler = new OpenDKIMSign($this->privateKey, $this->selector, $this->domainName, $headerCanon, $bodyCanon, $hash, $bodyLen);
+        // Hardcode signature Margin for now
+        $this->dkimHandler->setMargin(78);
+
+        if (!is_numeric($this->signatureTimestamp)) {
+            OpenDKIM::setOption(OpenDKIM::OPTS_FIXEDTIME, time());
+        } else {
+            if (!OpenDKIM::setOption(OpenDKIM::OPTS_FIXEDTIME, $this->signatureTimestamp)) {
+                throw new Swift_SwiftException('Unable to force signature timestamp ['.openssl_error_string().']');
+            }
+        }
+        if (isset($this->signerIdentity)) {
+            $this->dkimHandler->setSigner($this->signerIdentity);
+        }
+        $listHeaders = $headers->listAll();
+        foreach ($listHeaders as $hName) {
+            // Check if we need to ignore Header
+            if (!isset($this->ignoredHeaders[strtolower($hName)])) {
+                $tmp = $headers->getAll($hName);
+                if ($headers->has($hName)) {
+                    foreach ($tmp as $header) {
+                        if ($header->getFieldBody() != '') {
+                            $htosign = $header->toString();
+                            $this->dkimHandler->header($htosign);
+                            $this->signedHeaders[] = $header->getFieldName();
+                        }
+                    }
+                }
+            }
+        }
+
+        return $this;
+    }
+
+    public function startBody()
+    {
+        if (!$this->peclLoaded) {
+            return parent::startBody();
+        }
+        $this->dropFirstLF = true;
+        $this->dkimHandler->eoh();
+
+        return $this;
+    }
+
+    public function endBody()
+    {
+        if (!$this->peclLoaded) {
+            return parent::endBody();
+        }
+        $this->dkimHandler->eom();
+
+        return $this;
+    }
+
+    public function reset()
+    {
+        $this->dkimHandler = null;
+        parent::reset();
+
+        return $this;
+    }
+
+    /**
+     * Set the signature timestamp.
+     *
+     * @param int $time
+     *
+     * @return $this
+     */
+    public function setSignatureTimestamp($time)
+    {
+        $this->signatureTimestamp = $time;
+
+        return $this;
+    }
+
+    /**
+     * Set the signature expiration timestamp.
+     *
+     * @param int $time
+     *
+     * @return $this
+     */
+    public function setSignatureExpiration($time)
+    {
+        $this->signatureExpiration = $time;
+
+        return $this;
+    }
+
+    /**
+     * Enable / disable the DebugHeaders.
+     *
+     * @param bool $debug
+     *
+     * @return $this
+     */
+    public function setDebugHeaders($debug)
+    {
+        $this->debugHeaders = (bool) $debug;
+
+        return $this;
+    }
+
+    // Protected
+
+    protected function canonicalizeBody($string)
+    {
+        if (!$this->peclLoaded) {
+            return parent::canonicalizeBody($string);
+        }
+        if (false && $this->dropFirstLF === true) {
+            if ($string[0] == "\r" && $string[1] == "\n") {
+                $string = substr($string, 2);
+            }
+        }
+        $this->dropFirstLF = false;
+        if (strlen($string)) {
+            $this->dkimHandler->body($string);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpHandler.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpHandler.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpHandler.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpHandler.php	(date 1495187412000)
@@ -0,0 +1,86 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An ESMTP handler.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Transport_EsmtpHandler
+{
+    /**
+     * Get the name of the ESMTP extension this handles.
+     *
+     * @return bool
+     */
+    public function getHandledKeyword();
+
+    /**
+     * Set the parameters which the EHLO greeting indicated.
+     *
+     * @param string[] $parameters
+     */
+    public function setKeywordParams(array $parameters);
+
+    /**
+     * Runs immediately after a EHLO has been issued.
+     *
+     * @param Swift_Transport_SmtpAgent $agent to read/write
+     */
+    public function afterEhlo(Swift_Transport_SmtpAgent $agent);
+
+    /**
+     * Get params which are appended to MAIL FROM:<>.
+     *
+     * @return string[]
+     */
+    public function getMailParams();
+
+    /**
+     * Get params which are appended to RCPT TO:<>.
+     *
+     * @return string[]
+     */
+    public function getRcptParams();
+
+    /**
+     * Runs when a command is due to be sent.
+     *
+     * @param Swift_Transport_SmtpAgent $agent            to read/write
+     * @param string                    $command          to send
+     * @param int[]                     $codes            expected in response
+     * @param string[]                  $failedRecipients to collect failures
+     * @param bool                      $stop             to be set true  by-reference if the command is now sent
+     */
+    public function onCommand(Swift_Transport_SmtpAgent $agent, $command, $codes = array(), &$failedRecipients = null, &$stop = false);
+
+    /**
+     * Returns +1, -1 or 0 according to the rules for usort().
+     *
+     * This method is called to ensure extensions can be execute in an appropriate order.
+     *
+     * @param string $esmtpKeyword to compare with
+     *
+     * @return int
+     */
+    public function getPriorityOver($esmtpKeyword);
+
+    /**
+     * Returns an array of method names which are exposed to the Esmtp class.
+     *
+     * @return string[]
+     */
+    public function exposeMixinMethods();
+
+    /**
+     * Tells this handler to clear any buffers and reset its state.
+     */
+    public function resetState();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpTransport.php	(date 1495187412000)
@@ -0,0 +1,407 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Sends Messages over SMTP with ESMTP support.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Transport_EsmtpTransport extends Swift_Transport_AbstractSmtpTransport implements Swift_Transport_SmtpAgent
+{
+    /**
+     * ESMTP extension handlers.
+     *
+     * @var Swift_Transport_EsmtpHandler[]
+     */
+    private $handlers = array();
+
+    /**
+     * ESMTP capabilities.
+     *
+     * @var string[]
+     */
+    private $capabilities = array();
+
+    /**
+     * Connection buffer parameters.
+     *
+     * @var array
+     */
+    private $params = array(
+        'protocol' => 'tcp',
+        'host' => 'localhost',
+        'port' => 25,
+        'timeout' => 30,
+        'blocking' => 1,
+        'tls' => false,
+        'type' => Swift_Transport_IoBuffer::TYPE_SOCKET,
+        'stream_context_options' => array(),
+        );
+
+    /**
+     * Creates a new EsmtpTransport using the given I/O buffer.
+     *
+     * @param Swift_Transport_IoBuffer       $buf
+     * @param Swift_Transport_EsmtpHandler[] $extensionHandlers
+     * @param Swift_Events_EventDispatcher   $dispatcher
+     * @param string                         $localDomain
+     */
+    public function __construct(Swift_Transport_IoBuffer $buf, array $extensionHandlers, Swift_Events_EventDispatcher $dispatcher, $localDomain)
+    {
+        parent::__construct($buf, $dispatcher, $localDomain);
+        $this->setExtensionHandlers($extensionHandlers);
+    }
+
+    /**
+     * Set the host to connect to.
+     *
+     * @param string $host
+     *
+     * @return $this
+     */
+    public function setHost($host)
+    {
+        $this->params['host'] = $host;
+
+        return $this;
+    }
+
+    /**
+     * Get the host to connect to.
+     *
+     * @return string
+     */
+    public function getHost()
+    {
+        return $this->params['host'];
+    }
+
+    /**
+     * Set the port to connect to.
+     *
+     * @param int $port
+     *
+     * @return $this
+     */
+    public function setPort($port)
+    {
+        $this->params['port'] = (int) $port;
+
+        return $this;
+    }
+
+    /**
+     * Get the port to connect to.
+     *
+     * @return int
+     */
+    public function getPort()
+    {
+        return $this->params['port'];
+    }
+
+    /**
+     * Set the connection timeout.
+     *
+     * @param int $timeout seconds
+     *
+     * @return $this
+     */
+    public function setTimeout($timeout)
+    {
+        $this->params['timeout'] = (int) $timeout;
+        $this->buffer->setParam('timeout', (int) $timeout);
+
+        return $this;
+    }
+
+    /**
+     * Get the connection timeout.
+     *
+     * @return int
+     */
+    public function getTimeout()
+    {
+        return $this->params['timeout'];
+    }
+
+    /**
+     * Set the encryption type (tls or ssl).
+     *
+     * @param string $encryption
+     *
+     * @return $this
+     */
+    public function setEncryption($encryption)
+    {
+        $encryption = strtolower($encryption);
+        if ('tls' == $encryption) {
+            $this->params['protocol'] = 'tcp';
+            $this->params['tls'] = true;
+        } else {
+            $this->params['protocol'] = $encryption;
+            $this->params['tls'] = false;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get the encryption type.
+     *
+     * @return string
+     */
+    public function getEncryption()
+    {
+        return $this->params['tls'] ? 'tls' : $this->params['protocol'];
+    }
+
+    /**
+     * Sets the stream context options.
+     *
+     * @param array $options
+     *
+     * @return $this
+     */
+    public function setStreamOptions($options)
+    {
+        $this->params['stream_context_options'] = $options;
+
+        return $this;
+    }
+
+    /**
+     * Returns the stream context options.
+     *
+     * @return array
+     */
+    public function getStreamOptions()
+    {
+        return $this->params['stream_context_options'];
+    }
+
+    /**
+     * Sets the source IP.
+     *
+     * @param string $source
+     *
+     * @return $this
+     */
+    public function setSourceIp($source)
+    {
+        $this->params['sourceIp'] = $source;
+
+        return $this;
+    }
+
+    /**
+     * Returns the IP used to connect to the destination.
+     *
+     * @return string
+     */
+    public function getSourceIp()
+    {
+        return isset($this->params['sourceIp']) ? $this->params['sourceIp'] : null;
+    }
+
+    /**
+     * Set ESMTP extension handlers.
+     *
+     * @param Swift_Transport_EsmtpHandler[] $handlers
+     *
+     * @return $this
+     */
+    public function setExtensionHandlers(array $handlers)
+    {
+        $assoc = array();
+        foreach ($handlers as $handler) {
+            $assoc[$handler->getHandledKeyword()] = $handler;
+        }
+        uasort($assoc, function ($a, $b) {
+            return $a->getPriorityOver($b->getHandledKeyword());
+        });
+        $this->handlers = $assoc;
+        $this->setHandlerParams();
+
+        return $this;
+    }
+
+    /**
+     * Get ESMTP extension handlers.
+     *
+     * @return Swift_Transport_EsmtpHandler[]
+     */
+    public function getExtensionHandlers()
+    {
+        return array_values($this->handlers);
+    }
+
+    /**
+     * Run a command against the buffer, expecting the given response codes.
+     *
+     * If no response codes are given, the response will not be validated.
+     * If codes are given, an exception will be thrown on an invalid response.
+     *
+     * @param string   $command
+     * @param int[]    $codes
+     * @param string[] $failures An array of failures by-reference
+     *
+     * @return string
+     */
+    public function executeCommand($command, $codes = array(), &$failures = null)
+    {
+        $failures = (array) $failures;
+        $stopSignal = false;
+        $response = null;
+        foreach ($this->getActiveHandlers() as $handler) {
+            $response = $handler->onCommand(
+                $this, $command, $codes, $failures, $stopSignal
+                );
+            if ($stopSignal) {
+                return $response;
+            }
+        }
+
+        return parent::executeCommand($command, $codes, $failures);
+    }
+
+    /** Mixin handling method for ESMTP handlers */
+    public function __call($method, $args)
+    {
+        foreach ($this->handlers as $handler) {
+            if (in_array(strtolower($method),
+                array_map('strtolower', (array) $handler->exposeMixinMethods())
+                )) {
+                $return = call_user_func_array(array($handler, $method), $args);
+                // Allow fluid method calls
+                if (null === $return && substr($method, 0, 3) == 'set') {
+                    return $this;
+                } else {
+                    return $return;
+                }
+            }
+        }
+        trigger_error('Call to undefined method '.$method, E_USER_ERROR);
+    }
+
+    /** Get the params to initialize the buffer */
+    protected function getBufferParams()
+    {
+        return $this->params;
+    }
+
+    /** Overridden to perform EHLO instead */
+    protected function doHeloCommand()
+    {
+        try {
+            $response = $this->executeCommand(
+                sprintf("EHLO %s\r\n", $this->domain), array(250)
+                );
+        } catch (Swift_TransportException $e) {
+            return parent::doHeloCommand();
+        }
+
+        if ($this->params['tls']) {
+            try {
+                $this->executeCommand("STARTTLS\r\n", array(220));
+
+                if (!$this->buffer->startTLS()) {
+                    throw new Swift_TransportException('Unable to connect with TLS encryption');
+                }
+
+                try {
+                    $response = $this->executeCommand(
+                        sprintf("EHLO %s\r\n", $this->domain), array(250)
+                        );
+                } catch (Swift_TransportException $e) {
+                    return parent::doHeloCommand();
+                }
+            } catch (Swift_TransportException $e) {
+                $this->throwException($e);
+            }
+        }
+
+        $this->capabilities = $this->getCapabilities($response);
+        $this->setHandlerParams();
+        foreach ($this->getActiveHandlers() as $handler) {
+            $handler->afterEhlo($this);
+        }
+    }
+
+    /** Overridden to add Extension support */
+    protected function doMailFromCommand($address)
+    {
+        $handlers = $this->getActiveHandlers();
+        $params = array();
+        foreach ($handlers as $handler) {
+            $params = array_merge($params, (array) $handler->getMailParams());
+        }
+        $paramStr = !empty($params) ? ' '.implode(' ', $params) : '';
+        $this->executeCommand(
+            sprintf("MAIL FROM:<%s>%s\r\n", $address, $paramStr), array(250)
+            );
+    }
+
+    /** Overridden to add Extension support */
+    protected function doRcptToCommand($address)
+    {
+        $handlers = $this->getActiveHandlers();
+        $params = array();
+        foreach ($handlers as $handler) {
+            $params = array_merge($params, (array) $handler->getRcptParams());
+        }
+        $paramStr = !empty($params) ? ' '.implode(' ', $params) : '';
+        $this->executeCommand(
+            sprintf("RCPT TO:<%s>%s\r\n", $address, $paramStr), array(250, 251, 252)
+            );
+    }
+
+    /** Determine ESMTP capabilities by function group */
+    private function getCapabilities($ehloResponse)
+    {
+        $capabilities = array();
+        $ehloResponse = trim($ehloResponse);
+        $lines = explode("\r\n", $ehloResponse);
+        array_shift($lines);
+        foreach ($lines as $line) {
+            if (preg_match('/^[0-9]{3}[ -]([A-Z0-9-]+)((?:[ =].*)?)$/Di', $line, $matches)) {
+                $keyword = strtoupper($matches[1]);
+                $paramStr = strtoupper(ltrim($matches[2], ' ='));
+                $params = !empty($paramStr) ? explode(' ', $paramStr) : array();
+                $capabilities[$keyword] = $params;
+            }
+        }
+
+        return $capabilities;
+    }
+
+    /** Set parameters which are used by each extension handler */
+    private function setHandlerParams()
+    {
+        foreach ($this->handlers as $keyword => $handler) {
+            if (array_key_exists($keyword, $this->capabilities)) {
+                $handler->setKeywordParams($this->capabilities[$keyword]);
+            }
+        }
+    }
+
+    /** Get ESMTP handlers which are currently ok to use */
+    private function getActiveHandlers()
+    {
+        $handlers = array();
+        foreach ($this->handlers as $keyword => $handler) {
+            if (array_key_exists($keyword, $this->capabilities)) {
+                $handlers[] = $handler;
+            }
+        }
+
+        return $handlers;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/FailoverTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/FailoverTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/FailoverTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/FailoverTransport.php	(date 1495187412000)
@@ -0,0 +1,106 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Contains a list of redundant Transports so when one fails, the next is used.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Transport_FailoverTransport extends Swift_Transport_LoadBalancedTransport
+{
+    /**
+     * Registered transport currently used.
+     *
+     * @var Swift_Transport
+     */
+    private $currentTransport;
+
+    // needed as __construct is called from elsewhere explicitly
+    public function __construct()
+    {
+        parent::__construct();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function ping()
+    {
+        $maxTransports = count($this->transports);
+        for ($i = 0; $i < $maxTransports
+            && $transport = $this->getNextTransport(); ++$i) {
+            if ($transport->ping()) {
+                return true;
+            } else {
+                $this->killCurrentTransport();
+            }
+        }
+
+        return count($this->transports) > 0;
+    }
+
+    /**
+     * Send the given Message.
+     *
+     * Recipient/sender data will be retrieved from the Message API.
+     * The return value is the number of recipients who were accepted for delivery.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string[]           $failedRecipients An array of failures by-reference
+     *
+     * @return int
+     */
+    public function send(Swift_Mime_SimpleMessage $message, &$failedRecipients = null)
+    {
+        $maxTransports = count($this->transports);
+        $sent = 0;
+        $this->lastUsedTransport = null;
+
+        for ($i = 0; $i < $maxTransports
+            && $transport = $this->getNextTransport(); ++$i) {
+            try {
+                if (!$transport->isStarted()) {
+                    $transport->start();
+                }
+
+                if ($sent = $transport->send($message, $failedRecipients)) {
+                    $this->lastUsedTransport = $transport;
+
+                    return $sent;
+                }
+            } catch (Swift_TransportException $e) {
+                $this->killCurrentTransport();
+            }
+        }
+
+        if (count($this->transports) == 0) {
+            throw new Swift_TransportException(
+                'All Transports in FailoverTransport failed, or no Transports available'
+                );
+        }
+
+        return $sent;
+    }
+
+    protected function getNextTransport()
+    {
+        if (!isset($this->currentTransport)) {
+            $this->currentTransport = parent::getNextTransport();
+        }
+
+        return $this->currentTransport;
+    }
+
+    protected function killCurrentTransport()
+    {
+        $this->currentTransport = null;
+        parent::killCurrentTransport();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/IoBuffer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/IoBuffer.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/IoBuffer.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/IoBuffer.php	(date 1495187412000)
@@ -0,0 +1,67 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Buffers input and output to a resource.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Transport_IoBuffer extends Swift_InputByteStream, Swift_OutputByteStream
+{
+    /** A socket buffer over TCP */
+    const TYPE_SOCKET = 0x0001;
+
+    /** A process buffer with I/O support */
+    const TYPE_PROCESS = 0x0010;
+
+    /**
+     * Perform any initialization needed, using the given $params.
+     *
+     * Parameters will vary depending upon the type of IoBuffer used.
+     *
+     * @param array $params
+     */
+    public function initialize(array $params);
+
+    /**
+     * Set an individual param on the buffer (e.g. switching to SSL).
+     *
+     * @param string $param
+     * @param mixed  $value
+     */
+    public function setParam($param, $value);
+
+    /**
+     * Perform any shutdown logic needed.
+     */
+    public function terminate();
+
+    /**
+     * Set an array of string replacements which should be made on data written
+     * to the buffer.
+     *
+     * This could replace LF with CRLF for example.
+     *
+     * @param string[] $replacements
+     */
+    public function setWriteTranslations(array $replacements);
+
+    /**
+     * Get a line of output (including any CRLF).
+     *
+     * The $sequence number comes from any writes and may or may not be used
+     * depending upon the implementation.
+     *
+     * @param int $sequence of last write to scan from
+     *
+     * @return string
+     */
+    public function readLine($sequence);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/NullKeyCache.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/NullKeyCache.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/NullKeyCache.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/NullKeyCache.php	(date 1495187412000)
@@ -0,0 +1,115 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A null KeyCache that does not cache at all.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_KeyCache_NullKeyCache implements Swift_KeyCache
+{
+    /**
+     * Set a string into the cache under $itemKey for the namespace $nsKey.
+     *
+     * @see MODE_WRITE, MODE_APPEND
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     * @param string $string
+     * @param int    $mode
+     */
+    public function setString($nsKey, $itemKey, $string, $mode)
+    {
+    }
+
+    /**
+     * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
+     *
+     * @see MODE_WRITE, MODE_APPEND
+     *
+     * @param string                 $nsKey
+     * @param string                 $itemKey
+     * @param Swift_OutputByteStream $os
+     * @param int                    $mode
+     */
+    public function importFromByteStream($nsKey, $itemKey, Swift_OutputByteStream $os, $mode)
+    {
+    }
+
+    /**
+     * Provides a ByteStream which when written to, writes data to $itemKey.
+     *
+     * NOTE: The stream will always write in append mode.
+     *
+     * @param string                $nsKey
+     * @param string                $itemKey
+     * @param Swift_InputByteStream $writeThrough
+     *
+     * @return Swift_InputByteStream
+     */
+    public function getInputByteStream($nsKey, $itemKey, Swift_InputByteStream $writeThrough = null)
+    {
+    }
+
+    /**
+     * Get data back out of the cache as a string.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     *
+     * @return string
+     */
+    public function getString($nsKey, $itemKey)
+    {
+    }
+
+    /**
+     * Get data back out of the cache as a ByteStream.
+     *
+     * @param string                $nsKey
+     * @param string                $itemKey
+     * @param Swift_InputByteStream $is      to write the data to
+     */
+    public function exportToByteStream($nsKey, $itemKey, Swift_InputByteStream $is)
+    {
+    }
+
+    /**
+     * Check if the given $itemKey exists in the namespace $nsKey.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     *
+     * @return bool
+     */
+    public function hasKey($nsKey, $itemKey)
+    {
+        return false;
+    }
+
+    /**
+     * Clear data for $itemKey in the namespace $nsKey if it exists.
+     *
+     * @param string $nsKey
+     * @param string $itemKey
+     */
+    public function clearKey($nsKey, $itemKey)
+    {
+    }
+
+    /**
+     * Clear all data in the namespace $nsKey if it exists.
+     *
+     * @param string $nsKey
+     */
+    public function clearAll($nsKey)
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/SimpleKeyCacheInputStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/SimpleKeyCacheInputStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/SimpleKeyCacheInputStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/SimpleKeyCacheInputStream.php	(date 1495187412000)
@@ -0,0 +1,127 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Writes data to a KeyCache using a stream.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_KeyCache_SimpleKeyCacheInputStream implements Swift_KeyCache_KeyCacheInputStream
+{
+    /** The KeyCache being written to */
+    private $keyCache;
+
+    /** The nsKey of the KeyCache being written to */
+    private $nsKey;
+
+    /** The itemKey of the KeyCache being written to */
+    private $itemKey;
+
+    /** A stream to write through on each write() */
+    private $writeThrough = null;
+
+    /**
+     * Set the KeyCache to wrap.
+     *
+     * @param Swift_KeyCache $keyCache
+     */
+    public function setKeyCache(Swift_KeyCache $keyCache)
+    {
+        $this->keyCache = $keyCache;
+    }
+
+    /**
+     * Specify a stream to write through for each write().
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function setWriteThroughStream(Swift_InputByteStream $is)
+    {
+        $this->writeThrough = $is;
+    }
+
+    /**
+     * Writes $bytes to the end of the stream.
+     *
+     * @param string                $bytes
+     * @param Swift_InputByteStream $is    optional
+     */
+    public function write($bytes, Swift_InputByteStream $is = null)
+    {
+        $this->keyCache->setString(
+            $this->nsKey, $this->itemKey, $bytes, Swift_KeyCache::MODE_APPEND
+            );
+        if (isset($is)) {
+            $is->write($bytes);
+        }
+        if (isset($this->writeThrough)) {
+            $this->writeThrough->write($bytes);
+        }
+    }
+
+    /**
+     * Not used.
+     */
+    public function commit()
+    {
+    }
+
+    /**
+     * Not used.
+     */
+    public function bind(Swift_InputByteStream $is)
+    {
+    }
+
+    /**
+     * Not used.
+     */
+    public function unbind(Swift_InputByteStream $is)
+    {
+    }
+
+    /**
+     * Flush the contents of the stream (empty it) and set the internal pointer
+     * to the beginning.
+     */
+    public function flushBuffers()
+    {
+        $this->keyCache->clearKey($this->nsKey, $this->itemKey);
+    }
+
+    /**
+     * Set the nsKey which will be written to.
+     *
+     * @param string $nsKey
+     */
+    public function setNsKey($nsKey)
+    {
+        $this->nsKey = $nsKey;
+    }
+
+    /**
+     * Set the itemKey which will be written to.
+     *
+     * @param string $itemKey
+     */
+    public function setItemKey($itemKey)
+    {
+        $this->itemKey = $itemKey;
+    }
+
+    /**
+     * Any implementation should be cloneable, allowing the clone to access a
+     * separate $nsKey and $itemKey.
+     */
+    public function __clone()
+    {
+        $this->writeThrough = null;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php	(date 1495187412000)
@@ -0,0 +1,507 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Sends Messages over SMTP.
+ *
+ * @author Chris Corbyn
+ */
+abstract class Swift_Transport_AbstractSmtpTransport implements Swift_Transport
+{
+    /** Input-Output buffer for sending/receiving SMTP commands and responses */
+    protected $buffer;
+
+    /** Connection status */
+    protected $started = false;
+
+    /** The domain name to use in HELO command */
+    protected $domain = '[127.0.0.1]';
+
+    /** The event dispatching layer */
+    protected $eventDispatcher;
+
+    /** Source Ip */
+    protected $sourceIp;
+
+    /** Return an array of params for the Buffer */
+    abstract protected function getBufferParams();
+
+    /**
+     * Creates a new EsmtpTransport using the given I/O buffer.
+     *
+     * @param Swift_Transport_IoBuffer     $buf
+     * @param Swift_Events_EventDispatcher $dispatcher
+     * @param string                       $localDomain
+     */
+    public function __construct(Swift_Transport_IoBuffer $buf, Swift_Events_EventDispatcher $dispatcher, $localDomain)
+    {
+        $this->eventDispatcher = $dispatcher;
+        $this->buffer = $buf;
+        $this->setLocalDomain($localDomain);
+    }
+
+    /**
+     * Set the name of the local domain which Swift will identify itself as.
+     *
+     * This should be a fully-qualified domain name and should be truly the domain
+     * you're using.
+     *
+     * If your server does not have a domain name, use the IP address. This will
+     * automatically be wrapped in square brackets as described in RFC 5321,
+     * section 4.1.3.
+     *
+     * @param string $domain
+     *
+     * @return $this
+     */
+    public function setLocalDomain($domain)
+    {
+        if (substr($domain, 0, 1) !== '[') {
+            if (filter_var($domain, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {
+                $domain = '['.$domain.']';
+            } elseif (filter_var($domain, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {
+                $domain = '[IPv6:'.$domain.']';
+            }
+        }
+
+        $this->domain = $domain;
+
+        return $this;
+    }
+
+    /**
+     * Get the name of the domain Swift will identify as.
+     *
+     * If an IP address was specified, this will be returned wrapped in square
+     * brackets as described in RFC 5321, section 4.1.3.
+     *
+     * @return string
+     */
+    public function getLocalDomain()
+    {
+        return $this->domain;
+    }
+
+    /**
+     * Sets the source IP.
+     *
+     * @param string $source
+     */
+    public function setSourceIp($source)
+    {
+        $this->sourceIp = $source;
+    }
+
+    /**
+     * Returns the IP used to connect to the destination.
+     *
+     * @return string
+     */
+    public function getSourceIp()
+    {
+        return $this->sourceIp;
+    }
+
+    /**
+     * Start the SMTP connection.
+     */
+    public function start()
+    {
+        if (!$this->started) {
+            if ($evt = $this->eventDispatcher->createTransportChangeEvent($this)) {
+                $this->eventDispatcher->dispatchEvent($evt, 'beforeTransportStarted');
+                if ($evt->bubbleCancelled()) {
+                    return;
+                }
+            }
+
+            try {
+                $this->buffer->initialize($this->getBufferParams());
+            } catch (Swift_TransportException $e) {
+                $this->throwException($e);
+            }
+            $this->readGreeting();
+            $this->doHeloCommand();
+
+            if ($evt) {
+                $this->eventDispatcher->dispatchEvent($evt, 'transportStarted');
+            }
+
+            $this->started = true;
+        }
+    }
+
+    /**
+     * Test if an SMTP connection has been established.
+     *
+     * @return bool
+     */
+    public function isStarted()
+    {
+        return $this->started;
+    }
+
+    /**
+     * Send the given Message.
+     *
+     * Recipient/sender data will be retrieved from the Message API.
+     * The return value is the number of recipients who were accepted for delivery.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string[]           $failedRecipients An array of failures by-reference
+     *
+     * @return int
+     */
+    public function send(Swift_Mime_SimpleMessage $message, &$failedRecipients = null)
+    {
+        $sent = 0;
+        $failedRecipients = (array) $failedRecipients;
+
+        if ($evt = $this->eventDispatcher->createSendEvent($this, $message)) {
+            $this->eventDispatcher->dispatchEvent($evt, 'beforeSendPerformed');
+            if ($evt->bubbleCancelled()) {
+                return 0;
+            }
+        }
+
+        if (!$reversePath = $this->getReversePath($message)) {
+            $this->throwException(new Swift_TransportException(
+                'Cannot send message without a sender address'
+                )
+            );
+        }
+
+        $to = (array) $message->getTo();
+        $cc = (array) $message->getCc();
+        $tos = array_merge($to, $cc);
+        $bcc = (array) $message->getBcc();
+
+        $message->setBcc(array());
+
+        try {
+            $sent += $this->sendTo($message, $reversePath, $tos, $failedRecipients);
+            $sent += $this->sendBcc($message, $reversePath, $bcc, $failedRecipients);
+        } catch (Exception $e) {
+            $message->setBcc($bcc);
+            throw $e;
+        }
+
+        $message->setBcc($bcc);
+
+        if ($evt) {
+            if ($sent == count($to) + count($cc) + count($bcc)) {
+                $evt->setResult(Swift_Events_SendEvent::RESULT_SUCCESS);
+            } elseif ($sent > 0) {
+                $evt->setResult(Swift_Events_SendEvent::RESULT_TENTATIVE);
+            } else {
+                $evt->setResult(Swift_Events_SendEvent::RESULT_FAILED);
+            }
+            $evt->setFailedRecipients($failedRecipients);
+            $this->eventDispatcher->dispatchEvent($evt, 'sendPerformed');
+        }
+
+        $message->generateId(); //Make sure a new Message ID is used
+
+        return $sent;
+    }
+
+    /**
+     * Stop the SMTP connection.
+     */
+    public function stop()
+    {
+        if ($this->started) {
+            if ($evt = $this->eventDispatcher->createTransportChangeEvent($this)) {
+                $this->eventDispatcher->dispatchEvent($evt, 'beforeTransportStopped');
+                if ($evt->bubbleCancelled()) {
+                    return;
+                }
+            }
+
+            try {
+                $this->executeCommand("QUIT\r\n", array(221));
+            } catch (Swift_TransportException $e) {
+            }
+
+            try {
+                $this->buffer->terminate();
+
+                if ($evt) {
+                    $this->eventDispatcher->dispatchEvent($evt, 'transportStopped');
+                }
+            } catch (Swift_TransportException $e) {
+                $this->throwException($e);
+            }
+        }
+        $this->started = false;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function ping()
+    {
+        try {
+            if (!$this->isStarted()) {
+                $this->start();
+            }
+
+            $this->executeCommand("NOOP\r\n", array(250));
+        } catch (Swift_TransportException $e) {
+            try {
+                $this->stop();
+            } catch (Swift_TransportException $e) {
+            }
+
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Register a plugin.
+     *
+     * @param Swift_Events_EventListener $plugin
+     */
+    public function registerPlugin(Swift_Events_EventListener $plugin)
+    {
+        $this->eventDispatcher->bindEventListener($plugin);
+    }
+
+    /**
+     * Reset the current mail transaction.
+     */
+    public function reset()
+    {
+        $this->executeCommand("RSET\r\n", array(250));
+    }
+
+    /**
+     * Get the IoBuffer where read/writes are occurring.
+     *
+     * @return Swift_Transport_IoBuffer
+     */
+    public function getBuffer()
+    {
+        return $this->buffer;
+    }
+
+    /**
+     * Run a command against the buffer, expecting the given response codes.
+     *
+     * If no response codes are given, the response will not be validated.
+     * If codes are given, an exception will be thrown on an invalid response.
+     *
+     * @param string   $command
+     * @param int[]    $codes
+     * @param string[] $failures An array of failures by-reference
+     *
+     * @return string
+     */
+    public function executeCommand($command, $codes = array(), &$failures = null)
+    {
+        $failures = (array) $failures;
+        $seq = $this->buffer->write($command);
+        $response = $this->getFullResponse($seq);
+        if ($evt = $this->eventDispatcher->createCommandEvent($this, $command, $codes)) {
+            $this->eventDispatcher->dispatchEvent($evt, 'commandSent');
+        }
+        $this->assertResponseCode($response, $codes);
+
+        return $response;
+    }
+
+    /** Read the opening SMTP greeting */
+    protected function readGreeting()
+    {
+        $this->assertResponseCode($this->getFullResponse(0), array(220));
+    }
+
+    /** Send the HELO welcome */
+    protected function doHeloCommand()
+    {
+        $this->executeCommand(
+            sprintf("HELO %s\r\n", $this->domain), array(250)
+            );
+    }
+
+    /** Send the MAIL FROM command */
+    protected function doMailFromCommand($address)
+    {
+        $this->executeCommand(
+            sprintf("MAIL FROM:<%s>\r\n", $address), array(250)
+            );
+    }
+
+    /** Send the RCPT TO command */
+    protected function doRcptToCommand($address)
+    {
+        $this->executeCommand(
+            sprintf("RCPT TO:<%s>\r\n", $address), array(250, 251, 252)
+            );
+    }
+
+    /** Send the DATA command */
+    protected function doDataCommand()
+    {
+        $this->executeCommand("DATA\r\n", array(354));
+    }
+
+    /** Stream the contents of the message over the buffer */
+    protected function streamMessage(Swift_Mime_SimpleMessage $message)
+    {
+        $this->buffer->setWriteTranslations(array("\r\n." => "\r\n.."));
+        try {
+            $message->toByteStream($this->buffer);
+            $this->buffer->flushBuffers();
+        } catch (Swift_TransportException $e) {
+            $this->throwException($e);
+        }
+        $this->buffer->setWriteTranslations(array());
+        $this->executeCommand("\r\n.\r\n", array(250));
+    }
+
+    /** Determine the best-use reverse path for this message */
+    protected function getReversePath(Swift_Mime_SimpleMessage $message)
+    {
+        $return = $message->getReturnPath();
+        $sender = $message->getSender();
+        $from = $message->getFrom();
+        $path = null;
+        if (!empty($return)) {
+            $path = $return;
+        } elseif (!empty($sender)) {
+            // Don't use array_keys
+            reset($sender); // Reset Pointer to first pos
+            $path = key($sender); // Get key
+        } elseif (!empty($from)) {
+            reset($from); // Reset Pointer to first pos
+            $path = key($from); // Get key
+        }
+
+        return $path;
+    }
+
+    /** Throw a TransportException, first sending it to any listeners */
+    protected function throwException(Swift_TransportException $e)
+    {
+        if ($evt = $this->eventDispatcher->createTransportExceptionEvent($this, $e)) {
+            $this->eventDispatcher->dispatchEvent($evt, 'exceptionThrown');
+            if (!$evt->bubbleCancelled()) {
+                throw $e;
+            }
+        } else {
+            throw $e;
+        }
+    }
+
+    /** Throws an Exception if a response code is incorrect */
+    protected function assertResponseCode($response, $wanted)
+    {
+        list($code) = sscanf($response, '%3d');
+        $valid = (empty($wanted) || in_array($code, $wanted));
+
+        if ($evt = $this->eventDispatcher->createResponseEvent($this, $response,
+            $valid)) {
+            $this->eventDispatcher->dispatchEvent($evt, 'responseReceived');
+        }
+
+        if (!$valid) {
+            $this->throwException(
+                new Swift_TransportException(
+                    'Expected response code '.implode('/', $wanted).' but got code '.
+                    '"'.$code.'", with message "'.$response.'"',
+                    $code)
+                );
+        }
+    }
+
+    /** Get an entire multi-line response using its sequence number */
+    protected function getFullResponse($seq)
+    {
+        $response = '';
+        try {
+            do {
+                $line = $this->buffer->readLine($seq);
+                $response .= $line;
+            } while (null !== $line && false !== $line && ' ' != $line[3]);
+        } catch (Swift_TransportException $e) {
+            $this->throwException($e);
+        } catch (Swift_IoException $e) {
+            $this->throwException(
+                new Swift_TransportException(
+                    $e->getMessage())
+                );
+        }
+
+        return $response;
+    }
+
+    /** Send an email to the given recipients from the given reverse path */
+    private function doMailTransaction($message, $reversePath, array $recipients, array &$failedRecipients)
+    {
+        $sent = 0;
+        $this->doMailFromCommand($reversePath);
+        foreach ($recipients as $forwardPath) {
+            try {
+                $this->doRcptToCommand($forwardPath);
+                ++$sent;
+            } catch (Swift_TransportException $e) {
+                $failedRecipients[] = $forwardPath;
+            }
+        }
+
+        if ($sent != 0) {
+            $this->doDataCommand();
+            $this->streamMessage($message);
+        } else {
+            $this->reset();
+        }
+
+        return $sent;
+    }
+
+    /** Send a message to the given To: recipients */
+    private function sendTo(Swift_Mime_SimpleMessage $message, $reversePath, array $to, array &$failedRecipients)
+    {
+        if (empty($to)) {
+            return 0;
+        }
+
+        return $this->doMailTransaction($message, $reversePath, array_keys($to),
+            $failedRecipients);
+    }
+
+    /** Send a message to all Bcc: recipients */
+    private function sendBcc(Swift_Mime_SimpleMessage $message, $reversePath, array $bcc, array &$failedRecipients)
+    {
+        $sent = 0;
+        foreach ($bcc as $forwardPath => $name) {
+            $message->setBcc(array($forwardPath => $name));
+            $sent += $this->doMailTransaction(
+                $message, $reversePath, array($forwardPath), $failedRecipients
+                );
+        }
+
+        return $sent;
+    }
+
+    /**
+     * Destructor.
+     */
+    public function __destruct()
+    {
+        try {
+            $this->stop();
+        } catch (Exception $e) {
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SpoolTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SpoolTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SpoolTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SpoolTransport.php	(date 1495187412000)
@@ -0,0 +1,125 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier <fabien.potencier@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Stores Messages in a queue.
+ *
+ * @author Fabien Potencier
+ */
+class Swift_Transport_SpoolTransport implements Swift_Transport
+{
+    /** The spool instance */
+    private $spool;
+
+    /** The event dispatcher from the plugin API */
+    private $eventDispatcher;
+
+    /**
+     * Constructor.
+     */
+    public function __construct(Swift_Events_EventDispatcher $eventDispatcher, Swift_Spool $spool = null)
+    {
+        $this->eventDispatcher = $eventDispatcher;
+        $this->spool = $spool;
+    }
+
+    /**
+     * Sets the spool object.
+     *
+     * @param Swift_Spool $spool
+     *
+     * @return $this
+     */
+    public function setSpool(Swift_Spool $spool)
+    {
+        $this->spool = $spool;
+
+        return $this;
+    }
+
+    /**
+     * Get the spool object.
+     *
+     * @return Swift_Spool
+     */
+    public function getSpool()
+    {
+        return $this->spool;
+    }
+
+    /**
+     * Tests if this Transport mechanism has started.
+     *
+     * @return bool
+     */
+    public function isStarted()
+    {
+        return true;
+    }
+
+    /**
+     * Starts this Transport mechanism.
+     */
+    public function start()
+    {
+    }
+
+    /**
+     * Stops this Transport mechanism.
+     */
+    public function stop()
+    {
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function ping()
+    {
+        return true;
+    }
+
+    /**
+     * Sends the given message.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string[]           $failedRecipients An array of failures by-reference
+     *
+     * @return int The number of sent e-mail's
+     */
+    public function send(Swift_Mime_SimpleMessage $message, &$failedRecipients = null)
+    {
+        if ($evt = $this->eventDispatcher->createSendEvent($this, $message)) {
+            $this->eventDispatcher->dispatchEvent($evt, 'beforeSendPerformed');
+            if ($evt->bubbleCancelled()) {
+                return 0;
+            }
+        }
+
+        $success = $this->spool->queueMessage($message);
+
+        if ($evt) {
+            $evt->setResult($success ? Swift_Events_SendEvent::RESULT_SPOOLED : Swift_Events_SendEvent::RESULT_FAILED);
+            $this->eventDispatcher->dispatchEvent($evt, 'sendPerformed');
+        }
+
+        return 1;
+    }
+
+    /**
+     * Register a plugin.
+     *
+     * @param Swift_Events_EventListener $plugin
+     */
+    public function registerPlugin(Swift_Events_EventListener $plugin)
+    {
+        $this->eventDispatcher->bindEventListener($plugin);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/StreamBuffer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/StreamBuffer.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/StreamBuffer.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/StreamBuffer.php	(date 1495187412000)
@@ -0,0 +1,326 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A generic IoBuffer implementation supporting remote sockets and local processes.
+ *
+ * @author     Chris Corbyn
+ */
+class Swift_Transport_StreamBuffer extends Swift_ByteStream_AbstractFilterableInputStream implements Swift_Transport_IoBuffer
+{
+    /** A primary socket */
+    private $stream;
+
+    /** The input stream */
+    private $in;
+
+    /** The output stream */
+    private $out;
+
+    /** Buffer initialization parameters */
+    private $params = array();
+
+    /** The ReplacementFilterFactory */
+    private $replacementFactory;
+
+    /** Translations performed on data being streamed into the buffer */
+    private $translations = array();
+
+    /**
+     * Create a new StreamBuffer using $replacementFactory for transformations.
+     *
+     * @param Swift_ReplacementFilterFactory $replacementFactory
+     */
+    public function __construct(Swift_ReplacementFilterFactory $replacementFactory)
+    {
+        $this->replacementFactory = $replacementFactory;
+    }
+
+    /**
+     * Perform any initialization needed, using the given $params.
+     *
+     * Parameters will vary depending upon the type of IoBuffer used.
+     *
+     * @param array $params
+     */
+    public function initialize(array $params)
+    {
+        $this->params = $params;
+        switch ($params['type']) {
+            case self::TYPE_PROCESS:
+                $this->establishProcessConnection();
+                break;
+            case self::TYPE_SOCKET:
+            default:
+                $this->establishSocketConnection();
+                break;
+        }
+    }
+
+    /**
+     * Set an individual param on the buffer (e.g. switching to SSL).
+     *
+     * @param string $param
+     * @param mixed  $value
+     */
+    public function setParam($param, $value)
+    {
+        if (isset($this->stream)) {
+            switch ($param) {
+                case 'timeout':
+                    if ($this->stream) {
+                        stream_set_timeout($this->stream, $value);
+                    }
+                    break;
+
+                case 'blocking':
+                    if ($this->stream) {
+                        stream_set_blocking($this->stream, 1);
+                    }
+            }
+        }
+        $this->params[$param] = $value;
+    }
+
+    public function startTLS()
+    {
+        return stream_socket_enable_crypto($this->stream, true, STREAM_CRYPTO_METHOD_TLS_CLIENT);
+    }
+
+    /**
+     * Perform any shutdown logic needed.
+     */
+    public function terminate()
+    {
+        if (isset($this->stream)) {
+            switch ($this->params['type']) {
+                case self::TYPE_PROCESS:
+                    fclose($this->in);
+                    fclose($this->out);
+                    proc_close($this->stream);
+                    break;
+                case self::TYPE_SOCKET:
+                default:
+                    fclose($this->stream);
+                    break;
+            }
+        }
+        $this->stream = null;
+        $this->out = null;
+        $this->in = null;
+    }
+
+    /**
+     * Set an array of string replacements which should be made on data written
+     * to the buffer.
+     *
+     * This could replace LF with CRLF for example.
+     *
+     * @param string[] $replacements
+     */
+    public function setWriteTranslations(array $replacements)
+    {
+        foreach ($this->translations as $search => $replace) {
+            if (!isset($replacements[$search])) {
+                $this->removeFilter($search);
+                unset($this->translations[$search]);
+            }
+        }
+
+        foreach ($replacements as $search => $replace) {
+            if (!isset($this->translations[$search])) {
+                $this->addFilter(
+                    $this->replacementFactory->createFilter($search, $replace), $search
+                    );
+                $this->translations[$search] = true;
+            }
+        }
+    }
+
+    /**
+     * Get a line of output (including any CRLF).
+     *
+     * The $sequence number comes from any writes and may or may not be used
+     * depending upon the implementation.
+     *
+     * @param int $sequence of last write to scan from
+     *
+     * @return string
+     *
+     * @throws Swift_IoException
+     */
+    public function readLine($sequence)
+    {
+        if (isset($this->out) && !feof($this->out)) {
+            $line = fgets($this->out);
+            if (strlen($line) == 0) {
+                $metas = stream_get_meta_data($this->out);
+                if ($metas['timed_out']) {
+                    throw new Swift_IoException(
+                        'Connection to '.
+                            $this->getReadConnectionDescription().
+                        ' Timed Out'
+                    );
+                }
+            }
+
+            return $line;
+        }
+    }
+
+    /**
+     * Reads $length bytes from the stream into a string and moves the pointer
+     * through the stream by $length.
+     *
+     * If less bytes exist than are requested the remaining bytes are given instead.
+     * If no bytes are remaining at all, boolean false is returned.
+     *
+     * @param int $length
+     *
+     * @return string|bool
+     *
+     * @throws Swift_IoException
+     */
+    public function read($length)
+    {
+        if (isset($this->out) && !feof($this->out)) {
+            $ret = fread($this->out, $length);
+            if (strlen($ret) == 0) {
+                $metas = stream_get_meta_data($this->out);
+                if ($metas['timed_out']) {
+                    throw new Swift_IoException(
+                        'Connection to '.
+                            $this->getReadConnectionDescription().
+                        ' Timed Out'
+                    );
+                }
+            }
+
+            return $ret;
+        }
+    }
+
+    /** Not implemented */
+    public function setReadPointer($byteOffset)
+    {
+    }
+
+    /** Flush the stream contents */
+    protected function flush()
+    {
+        if (isset($this->in)) {
+            fflush($this->in);
+        }
+    }
+
+    /** Write this bytes to the stream */
+    protected function doCommit($bytes)
+    {
+        if (isset($this->in)) {
+            $bytesToWrite = strlen($bytes);
+            $totalBytesWritten = 0;
+
+            while ($totalBytesWritten < $bytesToWrite) {
+                $bytesWritten = fwrite($this->in, substr($bytes, $totalBytesWritten));
+                if (false === $bytesWritten || 0 === $bytesWritten) {
+                    break;
+                }
+
+                $totalBytesWritten += $bytesWritten;
+            }
+
+            if ($totalBytesWritten > 0) {
+                return ++$this->sequence;
+            }
+        }
+    }
+
+    /**
+     * Establishes a connection to a remote server.
+     */
+    private function establishSocketConnection()
+    {
+        $host = $this->params['host'];
+        if (!empty($this->params['protocol'])) {
+            $host = $this->params['protocol'].'://'.$host;
+        }
+        $timeout = 15;
+        if (!empty($this->params['timeout'])) {
+            $timeout = $this->params['timeout'];
+        }
+        $options = array();
+        if (!empty($this->params['sourceIp'])) {
+            $options['socket']['bindto'] = $this->params['sourceIp'].':0';
+        }
+
+        if (isset($this->params['stream_context_options'])) {
+            $options = array_merge($options, $this->params['stream_context_options']);
+        }
+        $streamContext = stream_context_create($options);
+        $this->stream = @stream_socket_client($host.':'.$this->params['port'], $errno, $errstr, $timeout, STREAM_CLIENT_CONNECT, $streamContext);
+        if (false === $this->stream) {
+            throw new Swift_TransportException(
+                'Connection could not be established with host '.$this->params['host'].
+                ' ['.$errstr.' #'.$errno.']'
+                );
+        }
+        if (!empty($this->params['blocking'])) {
+            stream_set_blocking($this->stream, 1);
+        } else {
+            stream_set_blocking($this->stream, 0);
+        }
+        stream_set_timeout($this->stream, $timeout);
+        $this->in = &$this->stream;
+        $this->out = &$this->stream;
+    }
+
+    /**
+     * Opens a process for input/output.
+     */
+    private function establishProcessConnection()
+    {
+        $command = $this->params['command'];
+        $descriptorSpec = array(
+            0 => array('pipe', 'r'),
+            1 => array('pipe', 'w'),
+            2 => array('pipe', 'w'),
+            );
+        $pipes = array();
+        $this->stream = proc_open($command, $descriptorSpec, $pipes);
+        stream_set_blocking($pipes[2], 0);
+        if ($err = stream_get_contents($pipes[2])) {
+            throw new Swift_TransportException(
+                'Process could not be started ['.$err.']'
+                );
+        }
+        $this->in = &$pipes[0];
+        $this->out = &$pipes[1];
+    }
+
+    private function getReadConnectionDescription()
+    {
+        switch ($this->params['type']) {
+            case self::TYPE_PROCESS:
+                return 'Process '.$this->params['command'];
+                break;
+
+            case self::TYPE_SOCKET:
+            default:
+                $host = $this->params['host'];
+                if (!empty($this->params['protocol'])) {
+                    $host = $this->params['protocol'].'://'.$host;
+                }
+                $host .= ':'.$this->params['port'];
+
+                return $host;
+                break;
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/AbstractFilterableInputStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/AbstractFilterableInputStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/AbstractFilterableInputStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/AbstractFilterableInputStream.php	(date 1495187412000)
@@ -0,0 +1,181 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Provides the base functionality for an InputStream supporting filters.
+ *
+ * @author Chris Corbyn
+ */
+abstract class Swift_ByteStream_AbstractFilterableInputStream implements Swift_InputByteStream, Swift_Filterable
+{
+    /**
+     * Write sequence.
+     */
+    protected $sequence = 0;
+
+    /**
+     * StreamFilters.
+     *
+     * @var Swift_StreamFilter[]
+     */
+    private $filters = array();
+
+    /**
+     * A buffer for writing.
+     */
+    private $writeBuffer = '';
+
+    /**
+     * Bound streams.
+     *
+     * @var Swift_InputByteStream[]
+     */
+    private $mirrors = array();
+
+    /**
+     * Commit the given bytes to the storage medium immediately.
+     *
+     * @param string $bytes
+     */
+    abstract protected function doCommit($bytes);
+
+    /**
+     * Flush any buffers/content with immediate effect.
+     */
+    abstract protected function flush();
+
+    /**
+     * Add a StreamFilter to this InputByteStream.
+     *
+     * @param Swift_StreamFilter $filter
+     * @param string             $key
+     */
+    public function addFilter(Swift_StreamFilter $filter, $key)
+    {
+        $this->filters[$key] = $filter;
+    }
+
+    /**
+     * Remove an already present StreamFilter based on its $key.
+     *
+     * @param string $key
+     */
+    public function removeFilter($key)
+    {
+        unset($this->filters[$key]);
+    }
+
+    /**
+     * Writes $bytes to the end of the stream.
+     *
+     * @param string $bytes
+     *
+     * @throws Swift_IoException
+     *
+     * @return int
+     */
+    public function write($bytes)
+    {
+        $this->writeBuffer .= $bytes;
+        foreach ($this->filters as $filter) {
+            if ($filter->shouldBuffer($this->writeBuffer)) {
+                return;
+            }
+        }
+        $this->doWrite($this->writeBuffer);
+
+        return ++$this->sequence;
+    }
+
+    /**
+     * For any bytes that are currently buffered inside the stream, force them
+     * off the buffer.
+     *
+     * @throws Swift_IoException
+     */
+    public function commit()
+    {
+        $this->doWrite($this->writeBuffer);
+    }
+
+    /**
+     * Attach $is to this stream.
+     *
+     * The stream acts as an observer, receiving all data that is written.
+     * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function bind(Swift_InputByteStream $is)
+    {
+        $this->mirrors[] = $is;
+    }
+
+    /**
+     * Remove an already bound stream.
+     *
+     * If $is is not bound, no errors will be raised.
+     * If the stream currently has any buffered data it will be written to $is
+     * before unbinding occurs.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function unbind(Swift_InputByteStream $is)
+    {
+        foreach ($this->mirrors as $k => $stream) {
+            if ($is === $stream) {
+                if ($this->writeBuffer !== '') {
+                    $stream->write($this->writeBuffer);
+                }
+                unset($this->mirrors[$k]);
+            }
+        }
+    }
+
+    /**
+     * Flush the contents of the stream (empty it) and set the internal pointer
+     * to the beginning.
+     *
+     * @throws Swift_IoException
+     */
+    public function flushBuffers()
+    {
+        if ($this->writeBuffer !== '') {
+            $this->doWrite($this->writeBuffer);
+        }
+        $this->flush();
+
+        foreach ($this->mirrors as $stream) {
+            $stream->flushBuffers();
+        }
+    }
+
+    /** Run $bytes through all filters */
+    private function filter($bytes)
+    {
+        foreach ($this->filters as $filter) {
+            $bytes = $filter->filter($bytes);
+        }
+
+        return $bytes;
+    }
+
+    /** Just write the bytes to the stream */
+    private function doWrite($bytes)
+    {
+        $this->doCommit($this->filter($bytes));
+
+        foreach ($this->mirrors as $stream) {
+            $stream->write($bytes);
+        }
+
+        $this->writeBuffer = '';
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/ArrayByteStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/ArrayByteStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/ArrayByteStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/ArrayByteStream.php	(date 1495187412000)
@@ -0,0 +1,182 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Allows reading and writing of bytes to and from an array.
+ *
+ * @author     Chris Corbyn
+ */
+class Swift_ByteStream_ArrayByteStream implements Swift_InputByteStream, Swift_OutputByteStream
+{
+    /**
+     * The internal stack of bytes.
+     *
+     * @var string[]
+     */
+    private $array = array();
+
+    /**
+     * The size of the stack.
+     *
+     * @var int
+     */
+    private $arraySize = 0;
+
+    /**
+     * The internal pointer offset.
+     *
+     * @var int
+     */
+    private $offset = 0;
+
+    /**
+     * Bound streams.
+     *
+     * @var Swift_InputByteStream[]
+     */
+    private $mirrors = array();
+
+    /**
+     * Create a new ArrayByteStream.
+     *
+     * If $stack is given the stream will be populated with the bytes it contains.
+     *
+     * @param mixed $stack of bytes in string or array form, optional
+     */
+    public function __construct($stack = null)
+    {
+        if (is_array($stack)) {
+            $this->array = $stack;
+            $this->arraySize = count($stack);
+        } elseif (is_string($stack)) {
+            $this->write($stack);
+        } else {
+            $this->array = array();
+        }
+    }
+
+    /**
+     * Reads $length bytes from the stream into a string and moves the pointer
+     * through the stream by $length.
+     *
+     * If less bytes exist than are requested the
+     * remaining bytes are given instead. If no bytes are remaining at all, boolean
+     * false is returned.
+     *
+     * @param int $length
+     *
+     * @return string
+     */
+    public function read($length)
+    {
+        if ($this->offset == $this->arraySize) {
+            return false;
+        }
+
+        // Don't use array slice
+        $end = $length + $this->offset;
+        $end = $this->arraySize < $end ? $this->arraySize : $end;
+        $ret = '';
+        for (; $this->offset < $end; ++$this->offset) {
+            $ret .= $this->array[$this->offset];
+        }
+
+        return $ret;
+    }
+
+    /**
+     * Writes $bytes to the end of the stream.
+     *
+     * @param string $bytes
+     */
+    public function write($bytes)
+    {
+        $to_add = str_split($bytes);
+        foreach ($to_add as $value) {
+            $this->array[] = $value;
+        }
+        $this->arraySize = count($this->array);
+
+        foreach ($this->mirrors as $stream) {
+            $stream->write($bytes);
+        }
+    }
+
+    /**
+     * Not used.
+     */
+    public function commit()
+    {
+    }
+
+    /**
+     * Attach $is to this stream.
+     *
+     * The stream acts as an observer, receiving all data that is written.
+     * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function bind(Swift_InputByteStream $is)
+    {
+        $this->mirrors[] = $is;
+    }
+
+    /**
+     * Remove an already bound stream.
+     *
+     * If $is is not bound, no errors will be raised.
+     * If the stream currently has any buffered data it will be written to $is
+     * before unbinding occurs.
+     *
+     * @param Swift_InputByteStream $is
+     */
+    public function unbind(Swift_InputByteStream $is)
+    {
+        foreach ($this->mirrors as $k => $stream) {
+            if ($is === $stream) {
+                unset($this->mirrors[$k]);
+            }
+        }
+    }
+
+    /**
+     * Move the internal read pointer to $byteOffset in the stream.
+     *
+     * @param int $byteOffset
+     *
+     * @return bool
+     */
+    public function setReadPointer($byteOffset)
+    {
+        if ($byteOffset > $this->arraySize) {
+            $byteOffset = $this->arraySize;
+        } elseif ($byteOffset < 0) {
+            $byteOffset = 0;
+        }
+
+        $this->offset = $byteOffset;
+    }
+
+    /**
+     * Flush the contents of the stream (empty it) and set the internal pointer
+     * to the beginning.
+     */
+    public function flushBuffers()
+    {
+        $this->offset = 0;
+        $this->array = array();
+        $this->arraySize = 0;
+
+        foreach ($this->mirrors as $stream) {
+            $stream->flushBuffers();
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/LoadBalancedTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/LoadBalancedTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/LoadBalancedTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/LoadBalancedTransport.php	(date 1495187412000)
@@ -0,0 +1,197 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Redundantly and rotationally uses several Transports when sending.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Transport_LoadBalancedTransport implements Swift_Transport
+{
+    /**
+     * Transports which are deemed useless.
+     *
+     * @var Swift_Transport[]
+     */
+    private $deadTransports = array();
+
+    /**
+     * The Transports which are used in rotation.
+     *
+     * @var Swift_Transport[]
+     */
+    protected $transports = array();
+
+    /**
+     * The Transport used in the last successful send operation.
+     *
+     * @var Swift_Transport
+     */
+    protected $lastUsedTransport = null;
+
+    // needed as __construct is called from elsewhere explicitly
+    public function __construct()
+    {
+    }
+
+    /**
+     * Set $transports to delegate to.
+     *
+     * @param Swift_Transport[] $transports
+     */
+    public function setTransports(array $transports)
+    {
+        $this->transports = $transports;
+        $this->deadTransports = array();
+    }
+
+    /**
+     * Get $transports to delegate to.
+     *
+     * @return Swift_Transport[]
+     */
+    public function getTransports()
+    {
+        return array_merge($this->transports, $this->deadTransports);
+    }
+
+    /**
+     * Get the Transport used in the last successful send operation.
+     *
+     * @return Swift_Transport
+     */
+    public function getLastUsedTransport()
+    {
+        return $this->lastUsedTransport;
+    }
+
+    /**
+     * Test if this Transport mechanism has started.
+     *
+     * @return bool
+     */
+    public function isStarted()
+    {
+        return count($this->transports) > 0;
+    }
+
+    /**
+     * Start this Transport mechanism.
+     */
+    public function start()
+    {
+        $this->transports = array_merge($this->transports, $this->deadTransports);
+    }
+
+    /**
+     * Stop this Transport mechanism.
+     */
+    public function stop()
+    {
+        foreach ($this->transports as $transport) {
+            $transport->stop();
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function ping()
+    {
+        foreach ($this->transports as $transport) {
+            if (!$transport->ping()) {
+                $this->killCurrentTransport();
+            }
+        }
+
+        return count($this->transports) > 0;
+    }
+
+    /**
+     * Send the given Message.
+     *
+     * Recipient/sender data will be retrieved from the Message API.
+     * The return value is the number of recipients who were accepted for delivery.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string[]           $failedRecipients An array of failures by-reference
+     *
+     * @return int
+     */
+    public function send(Swift_Mime_SimpleMessage $message, &$failedRecipients = null)
+    {
+        $maxTransports = count($this->transports);
+        $sent = 0;
+        $this->lastUsedTransport = null;
+
+        for ($i = 0; $i < $maxTransports
+            && $transport = $this->getNextTransport(); ++$i) {
+            try {
+                if (!$transport->isStarted()) {
+                    $transport->start();
+                }
+                if ($sent = $transport->send($message, $failedRecipients)) {
+                    $this->lastUsedTransport = $transport;
+                    break;
+                }
+            } catch (Swift_TransportException $e) {
+                $this->killCurrentTransport();
+            }
+        }
+
+        if (count($this->transports) == 0) {
+            throw new Swift_TransportException(
+                'All Transports in LoadBalancedTransport failed, or no Transports available'
+                );
+        }
+
+        return $sent;
+    }
+
+    /**
+     * Register a plugin.
+     *
+     * @param Swift_Events_EventListener $plugin
+     */
+    public function registerPlugin(Swift_Events_EventListener $plugin)
+    {
+        foreach ($this->transports as $transport) {
+            $transport->registerPlugin($plugin);
+        }
+    }
+
+    /**
+     * Rotates the transport list around and returns the first instance.
+     *
+     * @return Swift_Transport
+     */
+    protected function getNextTransport()
+    {
+        if ($next = array_shift($this->transports)) {
+            $this->transports[] = $next;
+        }
+
+        return $next;
+    }
+
+    /**
+     * Tag the currently used (top of stack) transport as dead/useless.
+     */
+    protected function killCurrentTransport()
+    {
+        if ($transport = array_pop($this->transports)) {
+            try {
+                $transport->stop();
+            } catch (Exception $e) {
+            }
+            $this->deadTransports[] = $transport;
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/NullTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/NullTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/NullTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/NullTransport.php	(date 1495187412000)
@@ -0,0 +1,101 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2009 Fabien Potencier <fabien.potencier@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Pretends messages have been sent, but just ignores them.
+ *
+ * @author Fabien Potencier
+ */
+class Swift_Transport_NullTransport implements Swift_Transport
+{
+    /** The event dispatcher from the plugin API */
+    private $eventDispatcher;
+
+    /**
+     * Constructor.
+     */
+    public function __construct(Swift_Events_EventDispatcher $eventDispatcher)
+    {
+        $this->eventDispatcher = $eventDispatcher;
+    }
+
+    /**
+     * Tests if this Transport mechanism has started.
+     *
+     * @return bool
+     */
+    public function isStarted()
+    {
+        return true;
+    }
+
+    /**
+     * Starts this Transport mechanism.
+     */
+    public function start()
+    {
+    }
+
+    /**
+     * Stops this Transport mechanism.
+     */
+    public function stop()
+    {
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function ping()
+    {
+        return true;
+    }
+
+    /**
+     * Sends the given message.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string[]           $failedRecipients An array of failures by-reference
+     *
+     * @return int The number of sent emails
+     */
+    public function send(Swift_Mime_SimpleMessage $message, &$failedRecipients = null)
+    {
+        if ($evt = $this->eventDispatcher->createSendEvent($this, $message)) {
+            $this->eventDispatcher->dispatchEvent($evt, 'beforeSendPerformed');
+            if ($evt->bubbleCancelled()) {
+                return 0;
+            }
+        }
+
+        if ($evt) {
+            $evt->setResult(Swift_Events_SendEvent::RESULT_SUCCESS);
+            $this->eventDispatcher->dispatchEvent($evt, 'sendPerformed');
+        }
+
+        $count = (
+            count((array) $message->getTo())
+            + count((array) $message->getCc())
+            + count((array) $message->getBcc())
+            );
+
+        return $count;
+    }
+
+    /**
+     * Register a plugin.
+     *
+     * @param Swift_Events_EventListener $plugin
+     */
+    public function registerPlugin(Swift_Events_EventListener $plugin)
+    {
+        $this->eventDispatcher->bindEventListener($plugin);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SendmailTransport.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SendmailTransport.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SendmailTransport.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SendmailTransport.php	(date 1495187412000)
@@ -0,0 +1,161 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * SendmailTransport for sending mail through a Sendmail/Postfix (etc..) binary.
+ *
+ * Supported modes are -bs and -t, with any additional flags desired.
+ * It is advised to use -bs mode since error reporting with -t mode is not
+ * possible.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Transport_SendmailTransport extends Swift_Transport_AbstractSmtpTransport
+{
+    /**
+     * Connection buffer parameters.
+     *
+     * @var array
+     */
+    private $params = array(
+        'timeout' => 30,
+        'blocking' => 1,
+        'command' => '/usr/sbin/sendmail -bs',
+        'type' => Swift_Transport_IoBuffer::TYPE_PROCESS,
+        );
+
+    /**
+     * Create a new SendmailTransport with $buf for I/O.
+     *
+     * @param Swift_Transport_IoBuffer     $buf
+     * @param Swift_Events_EventDispatcher $dispatcher
+     * @param string                       $localDomain
+     */
+    public function __construct(Swift_Transport_IoBuffer $buf, Swift_Events_EventDispatcher $dispatcher, $localDomain)
+    {
+        parent::__construct($buf, $dispatcher, $localDomain);
+    }
+
+    /**
+     * Start the standalone SMTP session if running in -bs mode.
+     */
+    public function start()
+    {
+        if (false !== strpos($this->getCommand(), ' -bs')) {
+            parent::start();
+        }
+    }
+
+    /**
+     * Set the command to invoke.
+     *
+     * If using -t mode you are strongly advised to include -oi or -i in the flags.
+     * For example: /usr/sbin/sendmail -oi -t
+     * Swift will append a -f<sender> flag if one is not present.
+     *
+     * The recommended mode is "-bs" since it is interactive and failure notifications
+     * are hence possible.
+     *
+     * @param string $command
+     *
+     * @return $this
+     */
+    public function setCommand($command)
+    {
+        $this->params['command'] = $command;
+
+        return $this;
+    }
+
+    /**
+     * Get the sendmail command which will be invoked.
+     *
+     * @return string
+     */
+    public function getCommand()
+    {
+        return $this->params['command'];
+    }
+
+    /**
+     * Send the given Message.
+     *
+     * Recipient/sender data will be retrieved from the Message API.
+     *
+     * The return value is the number of recipients who were accepted for delivery.
+     * NOTE: If using 'sendmail -t' you will not be aware of any failures until
+     * they bounce (i.e. send() will always return 100% success).
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string[]           $failedRecipients An array of failures by-reference
+     *
+     * @return int
+     */
+    public function send(Swift_Mime_SimpleMessage $message, &$failedRecipients = null)
+    {
+        $failedRecipients = (array) $failedRecipients;
+        $command = $this->getCommand();
+        $buffer = $this->getBuffer();
+        $count = 0;
+
+        if (false !== strpos($command, ' -t')) {
+            if ($evt = $this->eventDispatcher->createSendEvent($this, $message)) {
+                $this->eventDispatcher->dispatchEvent($evt, 'beforeSendPerformed');
+                if ($evt->bubbleCancelled()) {
+                    return 0;
+                }
+            }
+
+            if (false === strpos($command, ' -f')) {
+                $command .= ' -f'.escapeshellarg($this->getReversePath($message));
+            }
+
+            $buffer->initialize(array_merge($this->params, array('command' => $command)));
+
+            if (false === strpos($command, ' -i') && false === strpos($command, ' -oi')) {
+                $buffer->setWriteTranslations(array("\r\n" => "\n", "\n." => "\n.."));
+            } else {
+                $buffer->setWriteTranslations(array("\r\n" => "\n"));
+            }
+
+            $count = count((array) $message->getTo())
+                + count((array) $message->getCc())
+                + count((array) $message->getBcc())
+                ;
+            $message->toByteStream($buffer);
+            $buffer->flushBuffers();
+            $buffer->setWriteTranslations(array());
+            $buffer->terminate();
+
+            if ($evt) {
+                $evt->setResult(Swift_Events_SendEvent::RESULT_SUCCESS);
+                $evt->setFailedRecipients($failedRecipients);
+                $this->eventDispatcher->dispatchEvent($evt, 'sendPerformed');
+            }
+
+            $message->generateId();
+        } elseif (false !== strpos($command, ' -bs')) {
+            $count = parent::send($message, $failedRecipients);
+        } else {
+            $this->throwException(new Swift_TransportException(
+                'Unsupported sendmail command flags ['.$command.']. '.
+                'Must be one of "-bs" or "-t" but can include additional flags.'
+                ));
+        }
+
+        return $count;
+    }
+
+    /** Get the params to initialize the buffer */
+    protected function getBufferParams()
+    {
+        return $this->params;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SmtpAgent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SmtpAgent.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SmtpAgent.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/SmtpAgent.php	(date 1495187412000)
@@ -0,0 +1,36 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Wraps an IoBuffer to send/receive SMTP commands/responses.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Transport_SmtpAgent
+{
+    /**
+     * Get the IoBuffer where read/writes are occurring.
+     *
+     * @return Swift_Transport_IoBuffer
+     */
+    public function getBuffer();
+
+    /**
+     * Run a command against the buffer, expecting the given response codes.
+     *
+     * If no response codes are given, the response will not be validated.
+     * If codes are given, an exception will be thrown on an invalid response.
+     *
+     * @param string   $command
+     * @param int[]    $codes
+     * @param string[] $failures An array of failures by-reference
+     */
+    public function executeCommand($command, $codes = array(), &$failures = null);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/StringReplacementFilterFactory.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/StringReplacementFilterFactory.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/StringReplacementFilterFactory.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/StringReplacementFilterFactory.php	(date 1495187412000)
@@ -0,0 +1,45 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Creates filters for replacing needles in a string buffer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_StreamFilters_StringReplacementFilterFactory implements Swift_ReplacementFilterFactory
+{
+    /** Lazy-loaded filters */
+    private $filters = array();
+
+    /**
+     * Create a new StreamFilter to replace $search with $replace in a string.
+     *
+     * @param string $search
+     * @param string $replace
+     *
+     * @return Swift_StreamFilter
+     */
+    public function createFilter($search, $replace)
+    {
+        if (!isset($this->filters[$search][$replace])) {
+            if (!isset($this->filters[$search])) {
+                $this->filters[$search] = array();
+            }
+
+            if (!isset($this->filters[$search][$replace])) {
+                $this->filters[$search][$replace] = array();
+            }
+
+            $this->filters[$search][$replace] = new Swift_StreamFilters_StringReplacementFilter($search, $replace);
+        }
+
+        return $this->filters[$search][$replace];
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/GenericFixedWidthReader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/GenericFixedWidthReader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/GenericFixedWidthReader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/GenericFixedWidthReader.php	(date 1495187412000)
@@ -0,0 +1,97 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Provides fixed-width byte sizes for reading fixed-width character sets.
+ *
+ * @author     Chris Corbyn
+ * @author     Xavier De Cock <xdecock@gmail.com>
+ */
+class Swift_CharacterReader_GenericFixedWidthReader implements Swift_CharacterReader
+{
+    /**
+     * The number of bytes in a single character.
+     *
+     * @var int
+     */
+    private $width;
+
+    /**
+     * Creates a new GenericFixedWidthReader using $width bytes per character.
+     *
+     * @param int $width
+     */
+    public function __construct($width)
+    {
+        $this->width = $width;
+    }
+
+    /**
+     * Returns the complete character map.
+     *
+     * @param string $string
+     * @param int    $startOffset
+     * @param array  $currentMap
+     * @param mixed  $ignoredChars
+     *
+     * @return int
+     */
+    public function getCharPositions($string, $startOffset, &$currentMap, &$ignoredChars)
+    {
+        $strlen = strlen($string);
+        // % and / are CPU intensive, so, maybe find a better way
+        $ignored = $strlen % $this->width;
+        $ignoredChars = $ignored ? substr($string, -$ignored) : '';
+        $currentMap = $this->width;
+
+        return ($strlen - $ignored) / $this->width;
+    }
+
+    /**
+     * Returns the mapType.
+     *
+     * @return int
+     */
+    public function getMapType()
+    {
+        return self::MAP_TYPE_FIXED_LEN;
+    }
+
+    /**
+     * Returns an integer which specifies how many more bytes to read.
+     *
+     * A positive integer indicates the number of more bytes to fetch before invoking
+     * this method again.
+     *
+     * A value of zero means this is already a valid character.
+     * A value of -1 means this cannot possibly be a valid character.
+     *
+     * @param string $bytes
+     * @param int    $size
+     *
+     * @return int
+     */
+    public function validateByteSequence($bytes, $size)
+    {
+        $needed = $this->width - $size;
+
+        return $needed > -1 ? $needed : -1;
+    }
+
+    /**
+     * Returns the number of bytes which should be read to start each character.
+     *
+     * @return int
+     */
+    public function getInitialByteSize()
+    {
+        return $this->width;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/UsAsciiReader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/UsAsciiReader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/UsAsciiReader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/UsAsciiReader.php	(date 1495187412000)
@@ -0,0 +1,84 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Analyzes US-ASCII characters.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_CharacterReader_UsAsciiReader implements Swift_CharacterReader
+{
+    /**
+     * Returns the complete character map.
+     *
+     * @param string $string
+     * @param int    $startOffset
+     * @param array  $currentMap
+     * @param string $ignoredChars
+     *
+     * @return int
+     */
+    public function getCharPositions($string, $startOffset, &$currentMap, &$ignoredChars)
+    {
+        $strlen = strlen($string);
+        $ignoredChars = '';
+        for ($i = 0; $i < $strlen; ++$i) {
+            if ($string[$i] > "\x07F") {
+                // Invalid char
+                $currentMap[$i + $startOffset] = $string[$i];
+            }
+        }
+
+        return $strlen;
+    }
+
+    /**
+     * Returns mapType.
+     *
+     * @return int mapType
+     */
+    public function getMapType()
+    {
+        return self::MAP_TYPE_INVALID;
+    }
+
+    /**
+     * Returns an integer which specifies how many more bytes to read.
+     *
+     * A positive integer indicates the number of more bytes to fetch before invoking
+     * this method again.
+     * A value of zero means this is already a valid character.
+     * A value of -1 means this cannot possibly be a valid character.
+     *
+     * @param string $bytes
+     * @param int    $size
+     *
+     * @return int
+     */
+    public function validateByteSequence($bytes, $size)
+    {
+        $byte = reset($bytes);
+        if (1 == count($bytes) && $byte >= 0x00 && $byte <= 0x7F) {
+            return 0;
+        }
+
+        return -1;
+    }
+
+    /**
+     * Returns the number of bytes which should be read to start each character.
+     *
+     * @return int
+     */
+    public function getInitialByteSize()
+    {
+        return 1;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/Utf8Reader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/Utf8Reader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/Utf8Reader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReader/Utf8Reader.php	(date 1495187412000)
@@ -0,0 +1,176 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Analyzes UTF-8 characters.
+ *
+ * @author Chris Corbyn
+ * @author Xavier De Cock <xdecock@gmail.com>
+ */
+class Swift_CharacterReader_Utf8Reader implements Swift_CharacterReader
+{
+    /** Pre-computed for optimization */
+    private static $length_map = array(
+        // N=0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,
+        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x0N
+        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x1N
+        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x2N
+        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x3N
+        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x4N
+        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x5N
+        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x6N
+        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x7N
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x8N
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0x9N
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0xAN
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0xBN
+        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 0xCN
+        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 0xDN
+        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, // 0xEN
+        4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 0, 0,  // 0xFN
+    );
+
+    private static $s_length_map = array(
+        "\x00" => 1, "\x01" => 1, "\x02" => 1, "\x03" => 1, "\x04" => 1, "\x05" => 1, "\x06" => 1, "\x07" => 1,
+        "\x08" => 1, "\x09" => 1, "\x0a" => 1, "\x0b" => 1, "\x0c" => 1, "\x0d" => 1, "\x0e" => 1, "\x0f" => 1,
+        "\x10" => 1, "\x11" => 1, "\x12" => 1, "\x13" => 1, "\x14" => 1, "\x15" => 1, "\x16" => 1, "\x17" => 1,
+        "\x18" => 1, "\x19" => 1, "\x1a" => 1, "\x1b" => 1, "\x1c" => 1, "\x1d" => 1, "\x1e" => 1, "\x1f" => 1,
+        "\x20" => 1, "\x21" => 1, "\x22" => 1, "\x23" => 1, "\x24" => 1, "\x25" => 1, "\x26" => 1, "\x27" => 1,
+        "\x28" => 1, "\x29" => 1, "\x2a" => 1, "\x2b" => 1, "\x2c" => 1, "\x2d" => 1, "\x2e" => 1, "\x2f" => 1,
+        "\x30" => 1, "\x31" => 1, "\x32" => 1, "\x33" => 1, "\x34" => 1, "\x35" => 1, "\x36" => 1, "\x37" => 1,
+        "\x38" => 1, "\x39" => 1, "\x3a" => 1, "\x3b" => 1, "\x3c" => 1, "\x3d" => 1, "\x3e" => 1, "\x3f" => 1,
+        "\x40" => 1, "\x41" => 1, "\x42" => 1, "\x43" => 1, "\x44" => 1, "\x45" => 1, "\x46" => 1, "\x47" => 1,
+        "\x48" => 1, "\x49" => 1, "\x4a" => 1, "\x4b" => 1, "\x4c" => 1, "\x4d" => 1, "\x4e" => 1, "\x4f" => 1,
+        "\x50" => 1, "\x51" => 1, "\x52" => 1, "\x53" => 1, "\x54" => 1, "\x55" => 1, "\x56" => 1, "\x57" => 1,
+        "\x58" => 1, "\x59" => 1, "\x5a" => 1, "\x5b" => 1, "\x5c" => 1, "\x5d" => 1, "\x5e" => 1, "\x5f" => 1,
+        "\x60" => 1, "\x61" => 1, "\x62" => 1, "\x63" => 1, "\x64" => 1, "\x65" => 1, "\x66" => 1, "\x67" => 1,
+        "\x68" => 1, "\x69" => 1, "\x6a" => 1, "\x6b" => 1, "\x6c" => 1, "\x6d" => 1, "\x6e" => 1, "\x6f" => 1,
+        "\x70" => 1, "\x71" => 1, "\x72" => 1, "\x73" => 1, "\x74" => 1, "\x75" => 1, "\x76" => 1, "\x77" => 1,
+        "\x78" => 1, "\x79" => 1, "\x7a" => 1, "\x7b" => 1, "\x7c" => 1, "\x7d" => 1, "\x7e" => 1, "\x7f" => 1,
+        "\x80" => 0, "\x81" => 0, "\x82" => 0, "\x83" => 0, "\x84" => 0, "\x85" => 0, "\x86" => 0, "\x87" => 0,
+        "\x88" => 0, "\x89" => 0, "\x8a" => 0, "\x8b" => 0, "\x8c" => 0, "\x8d" => 0, "\x8e" => 0, "\x8f" => 0,
+        "\x90" => 0, "\x91" => 0, "\x92" => 0, "\x93" => 0, "\x94" => 0, "\x95" => 0, "\x96" => 0, "\x97" => 0,
+        "\x98" => 0, "\x99" => 0, "\x9a" => 0, "\x9b" => 0, "\x9c" => 0, "\x9d" => 0, "\x9e" => 0, "\x9f" => 0,
+        "\xa0" => 0, "\xa1" => 0, "\xa2" => 0, "\xa3" => 0, "\xa4" => 0, "\xa5" => 0, "\xa6" => 0, "\xa7" => 0,
+        "\xa8" => 0, "\xa9" => 0, "\xaa" => 0, "\xab" => 0, "\xac" => 0, "\xad" => 0, "\xae" => 0, "\xaf" => 0,
+        "\xb0" => 0, "\xb1" => 0, "\xb2" => 0, "\xb3" => 0, "\xb4" => 0, "\xb5" => 0, "\xb6" => 0, "\xb7" => 0,
+        "\xb8" => 0, "\xb9" => 0, "\xba" => 0, "\xbb" => 0, "\xbc" => 0, "\xbd" => 0, "\xbe" => 0, "\xbf" => 0,
+        "\xc0" => 2, "\xc1" => 2, "\xc2" => 2, "\xc3" => 2, "\xc4" => 2, "\xc5" => 2, "\xc6" => 2, "\xc7" => 2,
+        "\xc8" => 2, "\xc9" => 2, "\xca" => 2, "\xcb" => 2, "\xcc" => 2, "\xcd" => 2, "\xce" => 2, "\xcf" => 2,
+        "\xd0" => 2, "\xd1" => 2, "\xd2" => 2, "\xd3" => 2, "\xd4" => 2, "\xd5" => 2, "\xd6" => 2, "\xd7" => 2,
+        "\xd8" => 2, "\xd9" => 2, "\xda" => 2, "\xdb" => 2, "\xdc" => 2, "\xdd" => 2, "\xde" => 2, "\xdf" => 2,
+        "\xe0" => 3, "\xe1" => 3, "\xe2" => 3, "\xe3" => 3, "\xe4" => 3, "\xe5" => 3, "\xe6" => 3, "\xe7" => 3,
+        "\xe8" => 3, "\xe9" => 3, "\xea" => 3, "\xeb" => 3, "\xec" => 3, "\xed" => 3, "\xee" => 3, "\xef" => 3,
+        "\xf0" => 4, "\xf1" => 4, "\xf2" => 4, "\xf3" => 4, "\xf4" => 4, "\xf5" => 4, "\xf6" => 4, "\xf7" => 4,
+        "\xf8" => 5, "\xf9" => 5, "\xfa" => 5, "\xfb" => 5, "\xfc" => 6, "\xfd" => 6, "\xfe" => 0, "\xff" => 0,
+     );
+
+    /**
+     * Returns the complete character map.
+     *
+     * @param string $string
+     * @param int    $startOffset
+     * @param array  $currentMap
+     * @param mixed  $ignoredChars
+     *
+     * @return int
+     */
+    public function getCharPositions($string, $startOffset, &$currentMap, &$ignoredChars)
+    {
+        if (!isset($currentMap['i']) || !isset($currentMap['p'])) {
+            $currentMap['p'] = $currentMap['i'] = array();
+        }
+
+        $strlen = strlen($string);
+        $charPos = count($currentMap['p']);
+        $foundChars = 0;
+        $invalid = false;
+        for ($i = 0; $i < $strlen; ++$i) {
+            $char = $string[$i];
+            $size = self::$s_length_map[$char];
+            if ($size == 0) {
+                /* char is invalid, we must wait for a resync */
+                $invalid = true;
+                continue;
+            } else {
+                if ($invalid == true) {
+                    /* We mark the chars as invalid and start a new char */
+                    $currentMap['p'][$charPos + $foundChars] = $startOffset + $i;
+                    $currentMap['i'][$charPos + $foundChars] = true;
+                    ++$foundChars;
+                    $invalid = false;
+                }
+                if (($i + $size) > $strlen) {
+                    $ignoredChars = substr($string, $i);
+                    break;
+                }
+                for ($j = 1; $j < $size; ++$j) {
+                    $char = $string[$i + $j];
+                    if ($char > "\x7F" && $char < "\xC0") {
+                        // Valid - continue parsing
+                    } else {
+                        /* char is invalid, we must wait for a resync */
+                        $invalid = true;
+                        continue 2;
+                    }
+                }
+                /* Ok we got a complete char here */
+                $currentMap['p'][$charPos + $foundChars] = $startOffset + $i + $size;
+                $i += $j - 1;
+                ++$foundChars;
+            }
+        }
+
+        return $foundChars;
+    }
+
+    /**
+     * Returns mapType.
+     *
+     * @return int mapType
+     */
+    public function getMapType()
+    {
+        return self::MAP_TYPE_POSITIONS;
+    }
+
+    /**
+     * Returns an integer which specifies how many more bytes to read.
+     *
+     * A positive integer indicates the number of more bytes to fetch before invoking
+     * this method again.
+     * A value of zero means this is already a valid character.
+     * A value of -1 means this cannot possibly be a valid character.
+     *
+     * @param string $bytes
+     * @param int    $size
+     *
+     * @return int
+     */
+    public function validateByteSequence($bytes, $size)
+    {
+        if ($size < 1) {
+            return -1;
+        }
+        $needed = self::$length_map[$bytes[0]] - $size;
+
+        return $needed > -1 ? $needed : -1;
+    }
+
+    /**
+     * Returns the number of bytes which should be read to start each character.
+     *
+     * @return int
+     */
+    public function getInitialByteSize()
+    {
+        return 1;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php	(date 1495187412000)
@@ -0,0 +1,216 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Allows reading and writing of bytes to and from a file.
+ *
+ * @author     Chris Corbyn
+ */
+class Swift_ByteStream_FileByteStream extends Swift_ByteStream_AbstractFilterableInputStream implements Swift_FileStream
+{
+    /** The internal pointer offset */
+    private $offset = 0;
+
+    /** The path to the file */
+    private $path;
+
+    /** The mode this file is opened in for writing */
+    private $mode;
+
+    /** A lazy-loaded resource handle for reading the file */
+    private $reader;
+
+    /** A lazy-loaded resource handle for writing the file */
+    private $writer;
+
+    /** If stream is seekable true/false, or null if not known */
+    private $seekable = null;
+
+    /**
+     * Create a new FileByteStream for $path.
+     *
+     * @param string $path
+     * @param bool   $writable if true
+     */
+    public function __construct($path, $writable = false)
+    {
+        if (empty($path)) {
+            throw new Swift_IoException('The path cannot be empty');
+        }
+        $this->path = $path;
+        $this->mode = $writable ? 'w+b' : 'rb';
+    }
+
+    /**
+     * Get the complete path to the file.
+     *
+     * @return string
+     */
+    public function getPath()
+    {
+        return $this->path;
+    }
+
+    /**
+     * Reads $length bytes from the stream into a string and moves the pointer
+     * through the stream by $length.
+     *
+     * If less bytes exist than are requested the
+     * remaining bytes are given instead. If no bytes are remaining at all, boolean
+     * false is returned.
+     *
+     * @param int $length
+     *
+     * @return string|bool
+     *
+     * @throws Swift_IoException
+     */
+    public function read($length)
+    {
+        $fp = $this->getReadHandle();
+        if (!feof($fp)) {
+            $bytes = fread($fp, $length);
+            $this->offset = ftell($fp);
+
+            // If we read one byte after reaching the end of the file
+            // feof() will return false and an empty string is returned
+            if ($bytes === '' && feof($fp)) {
+                $this->resetReadHandle();
+
+                return false;
+            }
+
+            return $bytes;
+        }
+
+        $this->resetReadHandle();
+
+        return false;
+    }
+
+    /**
+     * Move the internal read pointer to $byteOffset in the stream.
+     *
+     * @param int $byteOffset
+     *
+     * @return bool
+     */
+    public function setReadPointer($byteOffset)
+    {
+        if (isset($this->reader)) {
+            $this->seekReadStreamToPosition($byteOffset);
+        }
+        $this->offset = $byteOffset;
+    }
+
+    /** Just write the bytes to the file */
+    protected function doCommit($bytes)
+    {
+        fwrite($this->getWriteHandle(), $bytes);
+        $this->resetReadHandle();
+    }
+
+    /** Not used */
+    protected function flush()
+    {
+    }
+
+    /** Get the resource for reading */
+    private function getReadHandle()
+    {
+        if (!isset($this->reader)) {
+            $pointer = @fopen($this->path, 'rb');
+            if (!$pointer) {
+                throw new Swift_IoException('Unable to open file for reading ['.$this->path.']');
+            }
+            $this->reader = $pointer;
+            if ($this->offset != 0) {
+                $this->getReadStreamSeekableStatus();
+                $this->seekReadStreamToPosition($this->offset);
+            }
+        }
+
+        return $this->reader;
+    }
+
+    /** Get the resource for writing */
+    private function getWriteHandle()
+    {
+        if (!isset($this->writer)) {
+            if (!$this->writer = fopen($this->path, $this->mode)) {
+                throw new Swift_IoException(
+                    'Unable to open file for writing ['.$this->path.']'
+                );
+            }
+        }
+
+        return $this->writer;
+    }
+
+    /** Force a reload of the resource for reading */
+    private function resetReadHandle()
+    {
+        if (isset($this->reader)) {
+            fclose($this->reader);
+            $this->reader = null;
+        }
+    }
+
+    /** Check if ReadOnly Stream is seekable */
+    private function getReadStreamSeekableStatus()
+    {
+        $metas = stream_get_meta_data($this->reader);
+        $this->seekable = $metas['seekable'];
+    }
+
+    /** Streams in a readOnly stream ensuring copy if needed */
+    private function seekReadStreamToPosition($offset)
+    {
+        if ($this->seekable === null) {
+            $this->getReadStreamSeekableStatus();
+        }
+        if ($this->seekable === false) {
+            $currentPos = ftell($this->reader);
+            if ($currentPos < $offset) {
+                $toDiscard = $offset - $currentPos;
+                fread($this->reader, $toDiscard);
+
+                return;
+            }
+            $this->copyReadStream();
+        }
+        fseek($this->reader, $offset, SEEK_SET);
+    }
+
+    /** Copy a readOnly Stream to ensure seekability */
+    private function copyReadStream()
+    {
+        if ($tmpFile = fopen('php://temp/maxmemory:4096', 'w+b')) {
+            /* We have opened a php:// Stream Should work without problem */
+        } elseif (function_exists('sys_get_temp_dir') && is_writable(sys_get_temp_dir()) && ($tmpFile = tmpfile())) {
+            /* We have opened a tmpfile */
+        } else {
+            throw new Swift_IoException('Unable to copy the file to make it seekable, sys_temp_dir is not writable, php://memory not available');
+        }
+        $currentPos = ftell($this->reader);
+        fclose($this->reader);
+        $source = fopen($this->path, 'rb');
+        if (!$source) {
+            throw new Swift_IoException('Unable to open file for copying ['.$this->path.']');
+        }
+        fseek($tmpFile, 0, SEEK_SET);
+        while (!feof($source)) {
+            fwrite($tmpFile, fread($source, 4096));
+        }
+        fseek($tmpFile, $currentPos, SEEK_SET);
+        fclose($source);
+        $this->reader = $tmpFile;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php	(date 1495187412000)
@@ -0,0 +1,42 @@
+<?php
+
+/*
+* This file is part of SwiftMailer.
+* (c) 2004-2009 Chris Corbyn
+*
+* For the full copyright and license information, please view the LICENSE
+* file that was distributed with this source code.
+*/
+
+/**
+ * @author Romain-Geissler
+ */
+class Swift_ByteStream_TemporaryFileByteStream extends Swift_ByteStream_FileByteStream
+{
+    public function __construct()
+    {
+        $filePath = tempnam(sys_get_temp_dir(), 'FileByteStream');
+
+        if ($filePath === false) {
+            throw new Swift_IoException('Failed to retrieve temporary file name.');
+        }
+
+        parent::__construct($filePath, true);
+    }
+
+    public function getContent()
+    {
+        if (($content = file_get_contents($this->getPath())) === false) {
+            throw new Swift_IoException('Failed to get temporary file content.');
+        }
+
+        return $content;
+    }
+
+    public function __destruct()
+    {
+        if (file_exists($this->getPath())) {
+            @unlink($this->getPath());
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/ByteArrayReplacementFilter.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/ByteArrayReplacementFilter.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/ByteArrayReplacementFilter.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/ByteArrayReplacementFilter.php	(date 1495187412000)
@@ -0,0 +1,170 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Processes bytes as they pass through a buffer and replaces sequences in it.
+ *
+ * This stream filter deals with Byte arrays rather than simple strings.
+ *
+ * @author  Chris Corbyn
+ */
+class Swift_StreamFilters_ByteArrayReplacementFilter implements Swift_StreamFilter
+{
+    /** The needle(s) to search for */
+    private $search;
+
+    /** The replacement(s) to make */
+    private $replace;
+
+    /** The Index for searching */
+    private $index;
+
+    /** The Search Tree */
+    private $tree = array();
+
+    /**  Gives the size of the largest search */
+    private $treeMaxLen = 0;
+
+    private $repSize;
+
+    /**
+     * Create a new ByteArrayReplacementFilter with $search and $replace.
+     *
+     * @param array $search
+     * @param array $replace
+     */
+    public function __construct($search, $replace)
+    {
+        $this->search = $search;
+        $this->index = array();
+        $this->tree = array();
+        $this->replace = array();
+        $this->repSize = array();
+
+        $tree = null;
+        $i = null;
+        $last_size = $size = 0;
+        foreach ($search as $i => $search_element) {
+            if ($tree !== null) {
+                $tree[-1] = min(count($replace) - 1, $i - 1);
+                $tree[-2] = $last_size;
+            }
+            $tree = &$this->tree;
+            if (is_array($search_element)) {
+                foreach ($search_element as $k => $char) {
+                    $this->index[$char] = true;
+                    if (!isset($tree[$char])) {
+                        $tree[$char] = array();
+                    }
+                    $tree = &$tree[$char];
+                }
+                $last_size = $k + 1;
+                $size = max($size, $last_size);
+            } else {
+                $last_size = 1;
+                if (!isset($tree[$search_element])) {
+                    $tree[$search_element] = array();
+                }
+                $tree = &$tree[$search_element];
+                $size = max($last_size, $size);
+                $this->index[$search_element] = true;
+            }
+        }
+        if ($i !== null) {
+            $tree[-1] = min(count($replace) - 1, $i);
+            $tree[-2] = $last_size;
+            $this->treeMaxLen = $size;
+        }
+        foreach ($replace as $rep) {
+            if (!is_array($rep)) {
+                $rep = array($rep);
+            }
+            $this->replace[] = $rep;
+        }
+        for ($i = count($this->replace) - 1; $i >= 0; --$i) {
+            $this->replace[$i] = $rep = $this->filter($this->replace[$i], $i);
+            $this->repSize[$i] = count($rep);
+        }
+    }
+
+    /**
+     * Returns true if based on the buffer passed more bytes should be buffered.
+     *
+     * @param array $buffer
+     *
+     * @return bool
+     */
+    public function shouldBuffer($buffer)
+    {
+        $endOfBuffer = end($buffer);
+
+        return isset($this->index[$endOfBuffer]);
+    }
+
+    /**
+     * Perform the actual replacements on $buffer and return the result.
+     *
+     * @param array $buffer
+     * @param int   $minReplaces
+     *
+     * @return array
+     */
+    public function filter($buffer, $minReplaces = -1)
+    {
+        if ($this->treeMaxLen == 0) {
+            return $buffer;
+        }
+
+        $newBuffer = array();
+        $buf_size = count($buffer);
+        $last_size = 0;
+        for ($i = 0; $i < $buf_size; ++$i) {
+            $search_pos = $this->tree;
+            $last_found = PHP_INT_MAX;
+            // We try to find if the next byte is part of a search pattern
+            for ($j = 0; $j <= $this->treeMaxLen; ++$j) {
+                // We have a new byte for a search pattern
+                if (isset($buffer[$p = $i + $j]) && isset($search_pos[$buffer[$p]])) {
+                    $search_pos = $search_pos[$buffer[$p]];
+                    // We have a complete pattern, save, in case we don't find a better match later
+                    if (isset($search_pos[-1]) && $search_pos[-1] < $last_found
+                        && $search_pos[-1] > $minReplaces) {
+                        $last_found = $search_pos[-1];
+                        $last_size = $search_pos[-2];
+                    }
+                }
+                // We got a complete pattern
+                elseif ($last_found !== PHP_INT_MAX) {
+                    // Adding replacement datas to output buffer
+                    $rep_size = $this->repSize[$last_found];
+                    for ($j = 0; $j < $rep_size; ++$j) {
+                        $newBuffer[] = $this->replace[$last_found][$j];
+                    }
+                    // We Move cursor forward
+                    $i += $last_size - 1;
+                    // Edge Case, last position in buffer
+                    if ($i >= $buf_size) {
+                        $newBuffer[] = $buffer[$i];
+                    }
+
+                    // We start the next loop
+                    continue 2;
+                } else {
+                    // this byte is not in a pattern and we haven't found another pattern
+                    break;
+                }
+            }
+            // Normal byte, move it to output buffer
+            $newBuffer[] = $buffer[$i];
+        }
+
+        return $newBuffer;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/StringReplacementFilter.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/StringReplacementFilter.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/StringReplacementFilter.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/StreamFilters/StringReplacementFilter.php	(date 1495187412000)
@@ -0,0 +1,70 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Processes bytes as they pass through a buffer and replaces sequences in it.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_StreamFilters_StringReplacementFilter implements Swift_StreamFilter
+{
+    /** The needle(s) to search for */
+    private $search;
+
+    /** The replacement(s) to make */
+    private $replace;
+
+    /**
+     * Create a new StringReplacementFilter with $search and $replace.
+     *
+     * @param string|array $search
+     * @param string|array $replace
+     */
+    public function __construct($search, $replace)
+    {
+        $this->search = $search;
+        $this->replace = $replace;
+    }
+
+    /**
+     * Returns true if based on the buffer passed more bytes should be buffered.
+     *
+     * @param string $buffer
+     *
+     * @return bool
+     */
+    public function shouldBuffer($buffer)
+    {
+        if ('' === $buffer) {
+            return false;
+        }
+
+        $endOfBuffer = substr($buffer, -1);
+        foreach ((array) $this->search as $needle) {
+            if (false !== strpos($needle, $endOfBuffer)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    /**
+     * Perform the actual replacements on $buffer and return the result.
+     *
+     * @param string $buffer
+     *
+     * @return string
+     */
+    public function filter($buffer)
+    {
+        return str_replace($this->search, $this->replace, $buffer);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AttachmentTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AttachmentTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AttachmentTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AttachmentTest.php	(date 1495187412000)
@@ -0,0 +1,321 @@
+<?php
+
+
+class Swift_Mime_AttachmentTest extends Swift_Mime_AbstractMimeEntityTest
+{
+    public function testNestingLevelIsAttachment()
+    {
+        $attachment = $this->createAttachment($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(
+            Swift_Mime_SimpleMimeEntity::LEVEL_MIXED, $attachment->getNestingLevel()
+            );
+    }
+
+    public function testDispositionIsReturnedFromHeader()
+    {
+        /* -- RFC 2183, 2.1, 2.2.
+     */
+
+        $disposition = $this->createHeader('Content-Disposition', 'attachment');
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Disposition' => $disposition, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals('attachment', $attachment->getDisposition());
+    }
+
+    public function testDispositionIsSetInHeader()
+    {
+        $disposition = $this->createHeader('Content-Disposition', 'attachment',
+            array(), false
+            );
+        $disposition->shouldReceive('setFieldBodyModel')
+                    ->once()
+                    ->with('inline');
+        $disposition->shouldReceive('setFieldBodyModel')
+                    ->zeroOrMoreTimes();
+
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Disposition' => $disposition, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $attachment->setDisposition('inline');
+    }
+
+    public function testDispositionIsAddedIfNonePresent()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addParameterizedHeader')
+                ->once()
+                ->with('Content-Disposition', 'inline');
+        $headers->shouldReceive('addParameterizedHeader')
+                ->zeroOrMoreTimes();
+
+        $attachment = $this->createAttachment($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $attachment->setDisposition('inline');
+    }
+
+    public function testDispositionIsAutoDefaultedToAttachment()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addParameterizedHeader')
+                ->once()
+                ->with('Content-Disposition', 'attachment');
+        $headers->shouldReceive('addParameterizedHeader')
+                ->zeroOrMoreTimes();
+
+        $attachment = $this->createAttachment($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+    }
+
+    public function testDefaultContentTypeInitializedToOctetStream()
+    {
+        $cType = $this->createHeader('Content-Type', '',
+            array(), false
+            );
+        $cType->shouldReceive('setFieldBodyModel')
+              ->once()
+              ->with('application/octet-stream');
+        $cType->shouldReceive('setFieldBodyModel')
+              ->zeroOrMoreTimes();
+
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+    }
+
+    public function testFilenameIsReturnedFromHeader()
+    {
+        /* -- RFC 2183, 2.3.
+     */
+
+        $disposition = $this->createHeader('Content-Disposition', 'attachment',
+            array('filename' => 'foo.txt')
+            );
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Disposition' => $disposition, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals('foo.txt', $attachment->getFilename());
+    }
+
+    public function testFilenameIsSetInHeader()
+    {
+        $disposition = $this->createHeader('Content-Disposition', 'attachment',
+            array('filename' => 'foo.txt'), false
+            );
+        $disposition->shouldReceive('setParameter')
+                    ->once()
+                    ->with('filename', 'bar.txt');
+        $disposition->shouldReceive('setParameter')
+                    ->zeroOrMoreTimes();
+
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Disposition' => $disposition, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $attachment->setFilename('bar.txt');
+    }
+
+    public function testSettingFilenameSetsNameInContentType()
+    {
+        /*
+     This is a legacy requirement which isn't covered by up-to-date RFCs.
+     */
+
+        $cType = $this->createHeader('Content-Type', 'text/plain',
+            array(), false
+            );
+        $cType->shouldReceive('setParameter')
+              ->once()
+              ->with('name', 'bar.txt');
+        $cType->shouldReceive('setParameter')
+              ->zeroOrMoreTimes();
+
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $attachment->setFilename('bar.txt');
+    }
+
+    public function testSizeIsReturnedFromHeader()
+    {
+        /* -- RFC 2183, 2.7.
+     */
+
+        $disposition = $this->createHeader('Content-Disposition', 'attachment',
+            array('size' => 1234)
+            );
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Disposition' => $disposition, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(1234, $attachment->getSize());
+    }
+
+    public function testSizeIsSetInHeader()
+    {
+        $disposition = $this->createHeader('Content-Disposition', 'attachment',
+            array(), false
+            );
+        $disposition->shouldReceive('setParameter')
+                    ->once()
+                    ->with('size', 12345);
+        $disposition->shouldReceive('setParameter')
+                    ->zeroOrMoreTimes();
+
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Disposition' => $disposition, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $attachment->setSize(12345);
+    }
+
+    public function testFilnameCanBeReadFromFileStream()
+    {
+        $file = $this->createFileStream('/bar/file.ext', '');
+        $disposition = $this->createHeader('Content-Disposition', 'attachment',
+            array('filename' => 'foo.txt'), false
+            );
+        $disposition->shouldReceive('setParameter')
+                    ->once()
+                    ->with('filename', 'file.ext');
+
+        $attachment = $this->createAttachment($this->createHeaderSet(array(
+            'Content-Disposition' => $disposition, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $attachment->setFile($file);
+    }
+
+    public function testContentTypeCanBeSetViaSetFile()
+    {
+        $file = $this->createFileStream('/bar/file.ext', '');
+        $disposition = $this->createHeader('Content-Disposition', 'attachment',
+            array('filename' => 'foo.txt'), false
+            );
+        $disposition->shouldReceive('setParameter')
+                    ->once()
+                    ->with('filename', 'file.ext');
+
+        $ctype = $this->createHeader('Content-Type', 'text/plain', array(), false);
+        $ctype->shouldReceive('setFieldBodyModel')
+              ->once()
+              ->with('text/html');
+        $ctype->shouldReceive('setFieldBodyModel')
+              ->zeroOrMoreTimes();
+
+        $headers = $this->createHeaderSet(array(
+            'Content-Disposition' => $disposition,
+            'Content-Type' => $ctype,
+            ));
+
+        $attachment = $this->createAttachment($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $attachment->setFile($file, 'text/html');
+    }
+
+    public function XtestContentTypeCanBeLookedUpFromCommonListIfNotProvided()
+    {
+        $file = $this->createFileStream('/bar/file.zip', '');
+        $disposition = $this->createHeader('Content-Disposition', 'attachment',
+            array('filename' => 'foo.zip'), false
+            );
+        $disposition->shouldReceive('setParameter')
+                    ->once()
+                    ->with('filename', 'file.zip');
+
+        $ctype = $this->createHeader('Content-Type', 'text/plain', array(), false);
+        $ctype->shouldReceive('setFieldBodyModel')
+              ->once()
+              ->with('application/zip');
+        $ctype->shouldReceive('setFieldBodyModel')
+              ->zeroOrMoreTimes();
+
+        $headers = $this->createHeaderSet(array(
+            'Content-Disposition' => $disposition,
+            'Content-Type' => $ctype,
+            ));
+
+        $attachment = $this->createAttachment($headers, $this->createEncoder(),
+            $this->createCache(), array('zip' => 'application/zip', 'txt' => 'text/plain')
+            );
+        $attachment->setFile($file);
+    }
+
+    public function testDataCanBeReadFromFile()
+    {
+        $file = $this->createFileStream('/foo/file.ext', '<some data>');
+        $attachment = $this->createAttachment($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $attachment->setFile($file);
+        $this->assertEquals('<some data>', $attachment->getBody());
+    }
+
+    public function testFluidInterface()
+    {
+        $attachment = $this->createAttachment($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertSame($attachment,
+            $attachment
+            ->setContentType('application/pdf')
+            ->setEncoder($this->createEncoder())
+            ->setId('foo@bar')
+            ->setDescription('my pdf')
+            ->setMaxLineLength(998)
+            ->setBody('xx')
+            ->setBoundary('xyz')
+            ->setChildren(array())
+            ->setDisposition('inline')
+            ->setFilename('afile.txt')
+            ->setSize(123)
+            ->setFile($this->createFileStream('foo.txt', ''))
+            );
+    }
+
+    protected function createEntity($headers, $encoder, $cache)
+    {
+        return $this->createAttachment($headers, $encoder, $cache);
+    }
+
+    protected function createAttachment($headers, $encoder, $cache, $mimeTypes = array())
+    {
+        $idGenerator = new Swift_Mime_IdGenerator('example.com');
+
+        return new Swift_Mime_Attachment($headers, $encoder, $cache, $idGenerator, $mimeTypes);
+    }
+
+    protected function createFileStream($path, $data, $stub = true)
+    {
+        $file = $this->getMockery('Swift_FileStream');
+        $file->shouldReceive('getPath')
+             ->zeroOrMoreTimes()
+             ->andReturn($path);
+        $file->shouldReceive('read')
+             ->zeroOrMoreTimes()
+             ->andReturnUsing(function () use ($data) {
+                 static $first = true;
+                 if (!$first) {
+                     return false;
+                 }
+
+                 $first = false;
+
+                 return $data;
+             });
+        $file->shouldReceive('setReadPointer')
+             ->zeroOrMoreTimes();
+
+        return $file;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php	(date 1495187412000)
@@ -0,0 +1,59 @@
+<?php
+
+
+class Swift_Mime_EmbeddedFileTest extends Swift_Mime_AttachmentTest
+{
+    public function testNestingLevelIsAttachment()
+    {
+        // previous loop would fail if there is an issue
+        $this->addToAssertionCount(1);
+    }
+
+    public function testNestingLevelIsEmbedded()
+    {
+        $file = $this->createEmbeddedFile($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(
+            Swift_Mime_SimpleMimeEntity::LEVEL_RELATED, $file->getNestingLevel()
+            );
+    }
+
+    public function testIdIsAutoGenerated()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addIdHeader')
+                ->once()
+                ->with('Content-ID', '/^.*?@.*?$/D');
+
+        $file = $this->createEmbeddedFile($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+    }
+
+    public function testDefaultDispositionIsInline()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addParameterizedHeader')
+                ->once()
+                ->with('Content-Disposition', 'inline');
+        $headers->shouldReceive('addParameterizedHeader')
+                ->zeroOrMoreTimes();
+
+        $file = $this->createEmbeddedFile($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+    }
+
+    protected function createAttachment($headers, $encoder, $cache, $mimeTypes = array())
+    {
+        return $this->createEmbeddedFile($headers, $encoder, $cache, $mimeTypes);
+    }
+
+    private function createEmbeddedFile($headers, $encoder, $cache)
+    {
+        $idGenerator = new Swift_Mime_IdGenerator('example.com');
+
+        return new Swift_Mime_EmbeddedFile($headers, $encoder, $cache, $idGenerator);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream/ArrayCharacterStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream/ArrayCharacterStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream/ArrayCharacterStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream/ArrayCharacterStream.php	(date 1495187412000)
@@ -0,0 +1,293 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A CharacterStream implementation which stores characters in an internal array.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_CharacterStream_ArrayCharacterStream implements Swift_CharacterStream
+{
+    /** A map of byte values and their respective characters */
+    private static $charMap;
+
+    /** A map of characters and their derivative byte values */
+    private static $byteMap;
+
+    /** The char reader (lazy-loaded) for the current charset */
+    private $charReader;
+
+    /** A factory for creating CharacterReader instances */
+    private $charReaderFactory;
+
+    /** The character set this stream is using */
+    private $charset;
+
+    /** Array of characters */
+    private $array = array();
+
+    /** Size of the array of character */
+    private $array_size = array();
+
+    /** The current character offset in the stream */
+    private $offset = 0;
+
+    /**
+     * Create a new CharacterStream with the given $chars, if set.
+     *
+     * @param Swift_CharacterReaderFactory $factory for loading validators
+     * @param string                       $charset used in the stream
+     */
+    public function __construct(Swift_CharacterReaderFactory $factory, $charset)
+    {
+        self::initializeMaps();
+        $this->setCharacterReaderFactory($factory);
+        $this->setCharacterSet($charset);
+    }
+
+    /**
+     * Set the character set used in this CharacterStream.
+     *
+     * @param string $charset
+     */
+    public function setCharacterSet($charset)
+    {
+        $this->charset = $charset;
+        $this->charReader = null;
+    }
+
+    /**
+     * Set the CharacterReaderFactory for multi charset support.
+     *
+     * @param Swift_CharacterReaderFactory $factory
+     */
+    public function setCharacterReaderFactory(Swift_CharacterReaderFactory $factory)
+    {
+        $this->charReaderFactory = $factory;
+    }
+
+    /**
+     * Overwrite this character stream using the byte sequence in the byte stream.
+     *
+     * @param Swift_OutputByteStream $os output stream to read from
+     */
+    public function importByteStream(Swift_OutputByteStream $os)
+    {
+        if (!isset($this->charReader)) {
+            $this->charReader = $this->charReaderFactory
+                ->getReaderFor($this->charset);
+        }
+
+        $startLength = $this->charReader->getInitialByteSize();
+        while (false !== $bytes = $os->read($startLength)) {
+            $c = array();
+            for ($i = 0, $len = strlen($bytes); $i < $len; ++$i) {
+                $c[] = self::$byteMap[$bytes[$i]];
+            }
+            $size = count($c);
+            $need = $this->charReader
+                ->validateByteSequence($c, $size);
+            if ($need > 0 &&
+                false !== $bytes = $os->read($need)) {
+                for ($i = 0, $len = strlen($bytes); $i < $len; ++$i) {
+                    $c[] = self::$byteMap[$bytes[$i]];
+                }
+            }
+            $this->array[] = $c;
+            ++$this->array_size;
+        }
+    }
+
+    /**
+     * Import a string a bytes into this CharacterStream, overwriting any existing
+     * data in the stream.
+     *
+     * @param string $string
+     */
+    public function importString($string)
+    {
+        $this->flushContents();
+        $this->write($string);
+    }
+
+    /**
+     * Read $length characters from the stream and move the internal pointer
+     * $length further into the stream.
+     *
+     * @param int $length
+     *
+     * @return string
+     */
+    public function read($length)
+    {
+        if ($this->offset == $this->array_size) {
+            return false;
+        }
+
+        // Don't use array slice
+        $arrays = array();
+        $end = $length + $this->offset;
+        for ($i = $this->offset; $i < $end; ++$i) {
+            if (!isset($this->array[$i])) {
+                break;
+            }
+            $arrays[] = $this->array[$i];
+        }
+        $this->offset += $i - $this->offset; // Limit function calls
+        $chars = false;
+        foreach ($arrays as $array) {
+            $chars .= implode('', array_map('chr', $array));
+        }
+
+        return $chars;
+    }
+
+    /**
+     * Read $length characters from the stream and return a 1-dimensional array
+     * containing there octet values.
+     *
+     * @param int $length
+     *
+     * @return int[]
+     */
+    public function readBytes($length)
+    {
+        if ($this->offset == $this->array_size) {
+            return false;
+        }
+        $arrays = array();
+        $end = $length + $this->offset;
+        for ($i = $this->offset; $i < $end; ++$i) {
+            if (!isset($this->array[$i])) {
+                break;
+            }
+            $arrays[] = $this->array[$i];
+        }
+        $this->offset += ($i - $this->offset); // Limit function calls
+
+        return call_user_func_array('array_merge', $arrays);
+    }
+
+    /**
+     * Write $chars to the end of the stream.
+     *
+     * @param string $chars
+     */
+    public function write($chars)
+    {
+        if (!isset($this->charReader)) {
+            $this->charReader = $this->charReaderFactory->getReaderFor(
+                $this->charset);
+        }
+
+        $startLength = $this->charReader->getInitialByteSize();
+
+        $fp = fopen('php://memory', 'w+b');
+        fwrite($fp, $chars);
+        unset($chars);
+        fseek($fp, 0, SEEK_SET);
+
+        $buffer = array(0);
+        $buf_pos = 1;
+        $buf_len = 1;
+        $has_datas = true;
+        do {
+            $bytes = array();
+            // Buffer Filing
+            if ($buf_len - $buf_pos < $startLength) {
+                $buf = array_splice($buffer, $buf_pos);
+                $new = $this->reloadBuffer($fp, 100);
+                if ($new) {
+                    $buffer = array_merge($buf, $new);
+                    $buf_len = count($buffer);
+                    $buf_pos = 0;
+                } else {
+                    $has_datas = false;
+                }
+            }
+            if ($buf_len - $buf_pos > 0) {
+                $size = 0;
+                for ($i = 0; $i < $startLength && isset($buffer[$buf_pos]); ++$i) {
+                    ++$size;
+                    $bytes[] = $buffer[$buf_pos++];
+                }
+                $need = $this->charReader->validateByteSequence(
+                    $bytes, $size);
+                if ($need > 0) {
+                    if ($buf_len - $buf_pos < $need) {
+                        $new = $this->reloadBuffer($fp, $need);
+
+                        if ($new) {
+                            $buffer = array_merge($buffer, $new);
+                            $buf_len = count($buffer);
+                        }
+                    }
+                    for ($i = 0; $i < $need && isset($buffer[$buf_pos]); ++$i) {
+                        $bytes[] = $buffer[$buf_pos++];
+                    }
+                }
+                $this->array[] = $bytes;
+                ++$this->array_size;
+            }
+        } while ($has_datas);
+
+        fclose($fp);
+    }
+
+    /**
+     * Move the internal pointer to $charOffset in the stream.
+     *
+     * @param int $charOffset
+     */
+    public function setPointer($charOffset)
+    {
+        if ($charOffset > $this->array_size) {
+            $charOffset = $this->array_size;
+        } elseif ($charOffset < 0) {
+            $charOffset = 0;
+        }
+        $this->offset = $charOffset;
+    }
+
+    /**
+     * Empty the stream and reset the internal pointer.
+     */
+    public function flushContents()
+    {
+        $this->offset = 0;
+        $this->array = array();
+        $this->array_size = 0;
+    }
+
+    private function reloadBuffer($fp, $len)
+    {
+        if (!feof($fp) && ($bytes = fread($fp, $len)) !== false) {
+            $buf = array();
+            for ($i = 0, $len = strlen($bytes); $i < $len; ++$i) {
+                $buf[] = self::$byteMap[$bytes[$i]];
+            }
+
+            return $buf;
+        }
+
+        return false;
+    }
+
+    private static function initializeMaps()
+    {
+        if (!isset(self::$charMap)) {
+            self::$charMap = array();
+            for ($byte = 0; $byte < 256; ++$byte) {
+                self::$charMap[$byte] = chr($byte);
+            }
+            self::$byteMap = array_flip(self::$charMap);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream/NgCharacterStream.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream/NgCharacterStream.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream/NgCharacterStream.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterStream/NgCharacterStream.php	(date 1495187412000)
@@ -0,0 +1,267 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A CharacterStream implementation which stores characters in an internal array.
+ *
+ * @author     Xavier De Cock <xdecock@gmail.com>
+ */
+class Swift_CharacterStream_NgCharacterStream implements Swift_CharacterStream
+{
+    /**
+     * The char reader (lazy-loaded) for the current charset.
+     *
+     * @var Swift_CharacterReader
+     */
+    private $charReader;
+
+    /**
+     * A factory for creating CharacterReader instances.
+     *
+     * @var Swift_CharacterReaderFactory
+     */
+    private $charReaderFactory;
+
+    /**
+     * The character set this stream is using.
+     *
+     * @var string
+     */
+    private $charset;
+
+    /**
+     * The data's stored as-is.
+     *
+     * @var string
+     */
+    private $datas = '';
+
+    /**
+     * Number of bytes in the stream.
+     *
+     * @var int
+     */
+    private $datasSize = 0;
+
+    /**
+     * Map.
+     *
+     * @var mixed
+     */
+    private $map;
+
+    /**
+     * Map Type.
+     *
+     * @var int
+     */
+    private $mapType = 0;
+
+    /**
+     * Number of characters in the stream.
+     *
+     * @var int
+     */
+    private $charCount = 0;
+
+    /**
+     * Position in the stream.
+     *
+     * @var int
+     */
+    private $currentPos = 0;
+
+    /**
+     * Constructor.
+     *
+     * @param Swift_CharacterReaderFactory $factory
+     * @param string                       $charset
+     */
+    public function __construct(Swift_CharacterReaderFactory $factory, $charset)
+    {
+        $this->setCharacterReaderFactory($factory);
+        $this->setCharacterSet($charset);
+    }
+
+    /* -- Changing parameters of the stream -- */
+
+    /**
+     * Set the character set used in this CharacterStream.
+     *
+     * @param string $charset
+     */
+    public function setCharacterSet($charset)
+    {
+        $this->charset = $charset;
+        $this->charReader = null;
+        $this->mapType = 0;
+    }
+
+    /**
+     * Set the CharacterReaderFactory for multi charset support.
+     *
+     * @param Swift_CharacterReaderFactory $factory
+     */
+    public function setCharacterReaderFactory(Swift_CharacterReaderFactory $factory)
+    {
+        $this->charReaderFactory = $factory;
+    }
+
+    /**
+     * @see Swift_CharacterStream::flushContents()
+     */
+    public function flushContents()
+    {
+        $this->datas = null;
+        $this->map = null;
+        $this->charCount = 0;
+        $this->currentPos = 0;
+        $this->datasSize = 0;
+    }
+
+    /**
+     * @see Swift_CharacterStream::importByteStream()
+     *
+     * @param Swift_OutputByteStream $os
+     */
+    public function importByteStream(Swift_OutputByteStream $os)
+    {
+        $this->flushContents();
+        $blocks = 512;
+        $os->setReadPointer(0);
+        while (false !== ($read = $os->read($blocks))) {
+            $this->write($read);
+        }
+    }
+
+    /**
+     * @see Swift_CharacterStream::importString()
+     *
+     * @param string $string
+     */
+    public function importString($string)
+    {
+        $this->flushContents();
+        $this->write($string);
+    }
+
+    /**
+     * @see Swift_CharacterStream::read()
+     *
+     * @param int $length
+     *
+     * @return string
+     */
+    public function read($length)
+    {
+        if ($this->currentPos >= $this->charCount) {
+            return false;
+        }
+        $ret = false;
+        $length = ($this->currentPos + $length > $this->charCount) ? $this->charCount - $this->currentPos : $length;
+        switch ($this->mapType) {
+            case Swift_CharacterReader::MAP_TYPE_FIXED_LEN:
+                $len = $length * $this->map;
+                $ret = substr($this->datas,
+                        $this->currentPos * $this->map,
+                        $len);
+                $this->currentPos += $length;
+                break;
+
+            case Swift_CharacterReader::MAP_TYPE_INVALID:
+                $ret = '';
+                for (; $this->currentPos < $length; ++$this->currentPos) {
+                    if (isset($this->map[$this->currentPos])) {
+                        $ret .= '?';
+                    } else {
+                        $ret .= $this->datas[$this->currentPos];
+                    }
+                }
+                break;
+
+            case Swift_CharacterReader::MAP_TYPE_POSITIONS:
+                $end = $this->currentPos + $length;
+                $end = $end > $this->charCount ? $this->charCount : $end;
+                $ret = '';
+                $start = 0;
+                if ($this->currentPos > 0) {
+                    $start = $this->map['p'][$this->currentPos - 1];
+                }
+                $to = $start;
+                for (; $this->currentPos < $end; ++$this->currentPos) {
+                    if (isset($this->map['i'][$this->currentPos])) {
+                        $ret .= substr($this->datas, $start, $to - $start).'?';
+                        $start = $this->map['p'][$this->currentPos];
+                    } else {
+                        $to = $this->map['p'][$this->currentPos];
+                    }
+                }
+                $ret .= substr($this->datas, $start, $to - $start);
+                break;
+        }
+
+        return $ret;
+    }
+
+    /**
+     * @see Swift_CharacterStream::readBytes()
+     *
+     * @param int $length
+     *
+     * @return int[]
+     */
+    public function readBytes($length)
+    {
+        $read = $this->read($length);
+        if ($read !== false) {
+            $ret = array_map('ord', str_split($read, 1));
+
+            return $ret;
+        }
+
+        return false;
+    }
+
+    /**
+     * @see Swift_CharacterStream::setPointer()
+     *
+     * @param int $charOffset
+     */
+    public function setPointer($charOffset)
+    {
+        if ($this->charCount < $charOffset) {
+            $charOffset = $this->charCount;
+        }
+        $this->currentPos = $charOffset;
+    }
+
+    /**
+     * @see Swift_CharacterStream::write()
+     *
+     * @param string $chars
+     */
+    public function write($chars)
+    {
+        if (!isset($this->charReader)) {
+            $this->charReader = $this->charReaderFactory->getReaderFor(
+                $this->charset);
+            $this->map = array();
+            $this->mapType = $this->charReader->getMapType();
+        }
+        $ignored = '';
+        $this->datas .= $chars;
+        $this->charCount += $this->charReader->getCharPositions(substr($this->datas, $this->datasSize), $this->datasSize, $this->map, $ignored);
+        if ($ignored !== false) {
+            $this->datasSize = strlen($this->datas) - strlen($ignored);
+        } else {
+            $this->datasSize = strlen($this->datas);
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReaderFactory/SimpleCharacterReaderFactory.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReaderFactory/SimpleCharacterReaderFactory.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReaderFactory/SimpleCharacterReaderFactory.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/CharacterReaderFactory/SimpleCharacterReaderFactory.php	(date 1495187412000)
@@ -0,0 +1,124 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Standard factory for creating CharacterReaders.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_CharacterReaderFactory_SimpleCharacterReaderFactory implements Swift_CharacterReaderFactory
+{
+    /**
+     * A map of charset patterns to their implementation classes.
+     *
+     * @var array
+     */
+    private static $map = array();
+
+    /**
+     * Factories which have already been loaded.
+     *
+     * @var Swift_CharacterReaderFactory[]
+     */
+    private static $loaded = array();
+
+    /**
+     * Creates a new CharacterReaderFactory.
+     */
+    public function __construct()
+    {
+        $this->init();
+    }
+
+    public function __wakeup()
+    {
+        $this->init();
+    }
+
+    public function init()
+    {
+        if (count(self::$map) > 0) {
+            return;
+        }
+
+        $prefix = 'Swift_CharacterReader_';
+
+        $singleByte = array(
+            'class' => $prefix.'GenericFixedWidthReader',
+            'constructor' => array(1),
+            );
+
+        $doubleByte = array(
+            'class' => $prefix.'GenericFixedWidthReader',
+            'constructor' => array(2),
+            );
+
+        $fourBytes = array(
+            'class' => $prefix.'GenericFixedWidthReader',
+            'constructor' => array(4),
+            );
+
+        // Utf-8
+        self::$map['utf-?8'] = array(
+            'class' => $prefix.'Utf8Reader',
+            'constructor' => array(),
+            );
+
+        //7-8 bit charsets
+        self::$map['(us-)?ascii'] = $singleByte;
+        self::$map['(iso|iec)-?8859-?[0-9]+'] = $singleByte;
+        self::$map['windows-?125[0-9]'] = $singleByte;
+        self::$map['cp-?[0-9]+'] = $singleByte;
+        self::$map['ansi'] = $singleByte;
+        self::$map['macintosh'] = $singleByte;
+        self::$map['koi-?7'] = $singleByte;
+        self::$map['koi-?8-?.+'] = $singleByte;
+        self::$map['mik'] = $singleByte;
+        self::$map['(cork|t1)'] = $singleByte;
+        self::$map['v?iscii'] = $singleByte;
+
+        //16 bits
+        self::$map['(ucs-?2|utf-?16)'] = $doubleByte;
+
+        //32 bits
+        self::$map['(ucs-?4|utf-?32)'] = $fourBytes;
+
+        // Fallback
+        self::$map['.*'] = $singleByte;
+    }
+
+    /**
+     * Returns a CharacterReader suitable for the charset applied.
+     *
+     * @param string $charset
+     *
+     * @return Swift_CharacterReader
+     */
+    public function getReaderFor($charset)
+    {
+        $charset = trim(strtolower($charset));
+        foreach (self::$map as $pattern => $spec) {
+            $re = '/^'.$pattern.'$/D';
+            if (preg_match($re, $charset)) {
+                if (!array_key_exists($pattern, self::$loaded)) {
+                    $reflector = new ReflectionClass($spec['class']);
+                    if ($reflector->getConstructor()) {
+                        $reader = $reflector->newInstanceArgs($spec['constructor']);
+                    } else {
+                        $reader = $reflector->newInstance();
+                    }
+                    self::$loaded[$pattern] = $reader;
+                }
+
+                return self::$loaded[$pattern];
+            }
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AbstractMimeEntityTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AbstractMimeEntityTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AbstractMimeEntityTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/AbstractMimeEntityTest.php	(date 1495187412000)
@@ -0,0 +1,1092 @@
+<?php
+
+require_once dirname(dirname(dirname(__DIR__))).'/fixtures/MimeEntityFixture.php';
+
+abstract class Swift_Mime_AbstractMimeEntityTest extends \SwiftMailerTestCase
+{
+    public function testGetHeadersReturnsHeaderSet()
+    {
+        $headers = $this->createHeaderSet();
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $this->assertSame($headers, $entity->getHeaders());
+    }
+
+    public function testContentTypeIsReturnedFromHeader()
+    {
+        $ctype = $this->createHeader('Content-Type', 'image/jpeg-test');
+        $headers = $this->createHeaderSet(array('Content-Type' => $ctype));
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $this->assertEquals('image/jpeg-test', $entity->getContentType());
+    }
+
+    public function testContentTypeIsSetInHeader()
+    {
+        $ctype = $this->createHeader('Content-Type', 'text/plain', array(), false);
+        $headers = $this->createHeaderSet(array('Content-Type' => $ctype));
+
+        $ctype->shouldReceive('setFieldBodyModel')
+              ->once()
+              ->with('image/jpeg');
+        $ctype->shouldReceive('setFieldBodyModel')
+              ->zeroOrMoreTimes()
+              ->with(\Mockery::not('image/jpeg'));
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setContentType('image/jpeg');
+    }
+
+    public function testContentTypeHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addParameterizedHeader')
+                ->once()
+                ->with('Content-Type', 'image/jpeg');
+        $headers->shouldReceive('addParameterizedHeader')
+                ->zeroOrMoreTimes();
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setContentType('image/jpeg');
+    }
+
+    public function testContentTypeCanBeSetViaSetBody()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addParameterizedHeader')
+                ->once()
+                ->with('Content-Type', 'text/html');
+        $headers->shouldReceive('addParameterizedHeader')
+                ->zeroOrMoreTimes();
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setBody('<b>foo</b>', 'text/html');
+    }
+
+    public function testGetEncoderFromConstructor()
+    {
+        $encoder = $this->createEncoder('base64');
+        $entity = $this->createEntity($this->createHeaderSet(), $encoder,
+            $this->createCache()
+            );
+        $this->assertSame($encoder, $entity->getEncoder());
+    }
+
+    public function testSetAndGetEncoder()
+    {
+        $encoder = $this->createEncoder('base64');
+        $headers = $this->createHeaderSet();
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setEncoder($encoder);
+        $this->assertSame($encoder, $entity->getEncoder());
+    }
+
+    public function testSettingEncoderUpdatesTransferEncoding()
+    {
+        $encoder = $this->createEncoder('base64');
+        $encoding = $this->createHeader(
+            'Content-Transfer-Encoding', '8bit', array(), false
+            );
+        $headers = $this->createHeaderSet(array(
+            'Content-Transfer-Encoding' => $encoding,
+            ));
+        $encoding->shouldReceive('setFieldBodyModel')
+                 ->once()
+                 ->with('base64');
+        $encoding->shouldReceive('setFieldBodyModel')
+                 ->zeroOrMoreTimes();
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setEncoder($encoder);
+    }
+
+    public function testSettingEncoderAddsEncodingHeaderIfNonePresent()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addTextHeader')
+                ->once()
+                ->with('Content-Transfer-Encoding', 'something');
+        $headers->shouldReceive('addTextHeader')
+                ->zeroOrMoreTimes();
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setEncoder($this->createEncoder('something'));
+    }
+
+    public function testIdIsReturnedFromHeader()
+    {
+        /* -- RFC 2045, 7.
+        In constructing a high-level user agent, it may be desirable to allow
+        one body to make reference to another.  Accordingly, bodies may be
+        labelled using the "Content-ID" header field, which is syntactically
+        identical to the "Message-ID" header field
+        */
+
+        $cid = $this->createHeader('Content-ID', 'zip@button');
+        $headers = $this->createHeaderSet(array('Content-ID' => $cid));
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $this->assertEquals('zip@button', $entity->getId());
+    }
+
+    public function testIdIsSetInHeader()
+    {
+        $cid = $this->createHeader('Content-ID', 'zip@button', array(), false);
+        $headers = $this->createHeaderSet(array('Content-ID' => $cid));
+
+        $cid->shouldReceive('setFieldBodyModel')
+            ->once()
+            ->with('foo@bar');
+        $cid->shouldReceive('setFieldBodyModel')
+            ->zeroOrMoreTimes();
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setId('foo@bar');
+    }
+
+    public function testIdIsAutoGenerated()
+    {
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertRegExp('/^.*?@.*?$/D', $entity->getId());
+    }
+
+    public function testGenerateIdCreatesNewId()
+    {
+        $headers = $this->createHeaderSet();
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $id1 = $entity->generateId();
+        $id2 = $entity->generateId();
+        $this->assertNotEquals($id1, $id2);
+    }
+
+    public function testGenerateIdSetsNewId()
+    {
+        $headers = $this->createHeaderSet();
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $id = $entity->generateId();
+        $this->assertEquals($id, $entity->getId());
+    }
+
+    public function testDescriptionIsReadFromHeader()
+    {
+        /* -- RFC 2045, 8.
+        The ability to associate some descriptive information with a given
+        body is often desirable.  For example, it may be useful to mark an
+        "image" body as "a picture of the Space Shuttle Endeavor."  Such text
+        may be placed in the Content-Description header field.  This header
+        field is always optional.
+        */
+
+        $desc = $this->createHeader('Content-Description', 'something');
+        $headers = $this->createHeaderSet(array('Content-Description' => $desc));
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $this->assertEquals('something', $entity->getDescription());
+    }
+
+    public function testDescriptionIsSetInHeader()
+    {
+        $desc = $this->createHeader('Content-Description', '', array(), false);
+        $desc->shouldReceive('setFieldBodyModel')->once()->with('whatever');
+
+        $headers = $this->createHeaderSet(array('Content-Description' => $desc));
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setDescription('whatever');
+    }
+
+    public function testDescriptionHeaderIsAddedIfNotPresent()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addTextHeader')
+                ->once()
+                ->with('Content-Description', 'whatever');
+        $headers->shouldReceive('addTextHeader')
+                ->zeroOrMoreTimes();
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setDescription('whatever');
+    }
+
+    public function testSetAndGetMaxLineLength()
+    {
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $entity->setMaxLineLength(60);
+        $this->assertEquals(60, $entity->getMaxLineLength());
+    }
+
+    public function testEncoderIsUsedForStringGeneration()
+    {
+        $encoder = $this->createEncoder('base64', false);
+        $encoder->expects($this->once())
+                ->method('encodeString')
+                ->with('blah');
+
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $encoder, $this->createCache()
+            );
+        $entity->setBody('blah');
+        $entity->toString();
+    }
+
+    public function testMaxLineLengthIsProvidedWhenEncoding()
+    {
+        $encoder = $this->createEncoder('base64', false);
+        $encoder->expects($this->once())
+                ->method('encodeString')
+                ->with('blah', 0, 65);
+
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $encoder, $this->createCache()
+            );
+        $entity->setBody('blah');
+        $entity->setMaxLineLength(65);
+        $entity->toString();
+    }
+
+    public function testHeadersAppearInString()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->once()
+                ->andReturn(
+                    "Content-Type: text/plain; charset=utf-8\r\n".
+                    "X-MyHeader: foobar\r\n"
+                );
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $this->assertEquals(
+            "Content-Type: text/plain; charset=utf-8\r\n".
+            "X-MyHeader: foobar\r\n",
+            $entity->toString()
+            );
+    }
+
+    public function testSetAndGetBody()
+    {
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $entity->setBody("blah\r\nblah!");
+        $this->assertEquals("blah\r\nblah!", $entity->getBody());
+    }
+
+    public function testBodyIsAppended()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->once()
+                ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setBody("blah\r\nblah!");
+        $this->assertEquals(
+            "Content-Type: text/plain; charset=utf-8\r\n".
+            "\r\n".
+            "blah\r\nblah!",
+            $entity->toString()
+            );
+    }
+
+    public function testGetBodyReturnsStringFromByteStream()
+    {
+        $os = $this->createOutputStream('byte stream string');
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $entity->setBody($os);
+        $this->assertEquals('byte stream string', $entity->getBody());
+    }
+
+    public function testByteStreamBodyIsAppended()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $os = $this->createOutputStream('streamed');
+        $headers->shouldReceive('toString')
+                ->once()
+                ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setBody($os);
+        $this->assertEquals(
+            "Content-Type: text/plain; charset=utf-8\r\n".
+            "\r\n".
+            'streamed',
+            $entity->toString()
+            );
+    }
+
+    public function testBoundaryCanBeRetrieved()
+    {
+        /* -- RFC 2046, 5.1.1.
+     boundary := 0*69<bchars> bcharsnospace
+
+     bchars := bcharsnospace / " "
+
+     bcharsnospace := DIGIT / ALPHA / "'" / "(" / ")" /
+                                            "+" / "_" / "," / "-" / "." /
+                                            "/" / ":" / "=" / "?"
+        */
+
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertRegExp(
+            '/^[a-zA-Z0-9\'\(\)\+_\-,\.\/:=\?\ ]{0,69}[a-zA-Z0-9\'\(\)\+_\-,\.\/:=\?]$/D',
+            $entity->getBoundary()
+            );
+    }
+
+    public function testBoundaryNeverChanges()
+    {
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $firstBoundary = $entity->getBoundary();
+        for ($i = 0; $i < 10; ++$i) {
+            $this->assertEquals($firstBoundary, $entity->getBoundary());
+        }
+    }
+
+    public function testBoundaryCanBeSet()
+    {
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $entity->setBoundary('foobar');
+        $this->assertEquals('foobar', $entity->getBoundary());
+    }
+
+    public function testAddingChildrenGeneratesBoundaryInHeaders()
+    {
+        $child = $this->createChild();
+        $cType = $this->createHeader('Content-Type', 'text/plain', array(), false);
+        $cType->shouldReceive('setParameter')
+              ->once()
+              ->with('boundary', \Mockery::any());
+        $cType->shouldReceive('setParameter')
+              ->zeroOrMoreTimes();
+
+        $entity = $this->createEntity($this->createHeaderSet(array(
+            'Content-Type' => $cType,
+            )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $entity->setChildren(array($child));
+    }
+
+    public function testChildrenOfLevelAttachmentAndLessCauseMultipartMixed()
+    {
+        for ($level = Swift_Mime_SimpleMimeEntity::LEVEL_MIXED;
+            $level > Swift_Mime_SimpleMimeEntity::LEVEL_TOP; $level /= 2) {
+            $child = $this->createChild($level);
+            $cType = $this->createHeader(
+                'Content-Type', 'text/plain', array(), false
+                );
+            $cType->shouldReceive('setFieldBodyModel')
+                  ->once()
+                  ->with('multipart/mixed');
+            $cType->shouldReceive('setFieldBodyModel')
+                  ->zeroOrMoreTimes();
+
+            $entity = $this->createEntity($this->createHeaderSet(array(
+                'Content-Type' => $cType, )),
+                $this->createEncoder(), $this->createCache()
+                );
+            $entity->setChildren(array($child));
+        }
+    }
+
+    public function testChildrenOfLevelAlternativeAndLessCauseMultipartAlternative()
+    {
+        for ($level = Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE;
+            $level > Swift_Mime_SimpleMimeEntity::LEVEL_MIXED; $level /= 2) {
+            $child = $this->createChild($level);
+            $cType = $this->createHeader(
+                'Content-Type', 'text/plain', array(), false
+                );
+            $cType->shouldReceive('setFieldBodyModel')
+                  ->once()
+                  ->with('multipart/alternative');
+            $cType->shouldReceive('setFieldBodyModel')
+                  ->zeroOrMoreTimes();
+
+            $entity = $this->createEntity($this->createHeaderSet(array(
+                'Content-Type' => $cType, )),
+                $this->createEncoder(), $this->createCache()
+                );
+            $entity->setChildren(array($child));
+        }
+    }
+
+    public function testChildrenOfLevelRelatedAndLessCauseMultipartRelated()
+    {
+        for ($level = Swift_Mime_SimpleMimeEntity::LEVEL_RELATED;
+            $level > Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE; $level /= 2) {
+            $child = $this->createChild($level);
+            $cType = $this->createHeader(
+                'Content-Type', 'text/plain', array(), false
+                );
+            $cType->shouldReceive('setFieldBodyModel')
+                  ->once()
+                  ->with('multipart/related');
+            $cType->shouldReceive('setFieldBodyModel')
+                  ->zeroOrMoreTimes();
+
+            $entity = $this->createEntity($this->createHeaderSet(array(
+                'Content-Type' => $cType, )),
+                $this->createEncoder(), $this->createCache()
+                );
+            $entity->setChildren(array($child));
+        }
+    }
+
+    public function testHighestLevelChildDeterminesContentType()
+    {
+        $combinations = array(
+            array('levels' => array(Swift_Mime_SimpleMimeEntity::LEVEL_MIXED,
+                Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+                Swift_Mime_SimpleMimeEntity::LEVEL_RELATED,
+                ),
+                'type' => 'multipart/mixed',
+                ),
+            array('levels' => array(Swift_Mime_SimpleMimeEntity::LEVEL_MIXED,
+                Swift_Mime_SimpleMimeEntity::LEVEL_RELATED,
+                ),
+                'type' => 'multipart/mixed',
+                ),
+            array('levels' => array(Swift_Mime_SimpleMimeEntity::LEVEL_MIXED,
+                Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+                ),
+                'type' => 'multipart/mixed',
+                ),
+            array('levels' => array(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+                Swift_Mime_SimpleMimeEntity::LEVEL_RELATED,
+                ),
+                'type' => 'multipart/alternative',
+                ),
+            );
+
+        foreach ($combinations as $combination) {
+            $children = array();
+            foreach ($combination['levels'] as $level) {
+                $children[] = $this->createChild($level);
+            }
+
+            $cType = $this->createHeader(
+                'Content-Type', 'text/plain', array(), false
+                );
+            $cType->shouldReceive('setFieldBodyModel')
+                  ->once()
+                  ->with($combination['type']);
+
+            $headerSet = $this->createHeaderSet(array('Content-Type' => $cType));
+            $headerSet->shouldReceive('newInstance')
+                      ->zeroOrMoreTimes()
+                      ->andReturnUsing(function () use ($headerSet) {
+                          return $headerSet;
+                      });
+            $entity = $this->createEntity($headerSet,
+                $this->createEncoder(), $this->createCache()
+                );
+            $entity->setChildren($children);
+        }
+    }
+
+    public function testChildrenAppearNestedInString()
+    {
+        /* -- RFC 2046, 5.1.1.
+     (excerpt too verbose to paste here)
+     */
+
+        $headers = $this->createHeaderSet(array(), false);
+
+        $child1 = new MimeEntityFixture(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'foobar', 'text/plain'
+            );
+
+        $child2 = new MimeEntityFixture(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+            "Content-Type: text/html\r\n".
+            "\r\n".
+            '<b>foobar</b>', 'text/html'
+            );
+
+        $headers->shouldReceive('toString')
+              ->zeroOrMoreTimes()
+              ->andReturn("Content-Type: multipart/alternative; boundary=\"xxx\"\r\n");
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setBoundary('xxx');
+        $entity->setChildren(array($child1, $child2));
+
+        $this->assertEquals(
+            "Content-Type: multipart/alternative; boundary=\"xxx\"\r\n".
+            "\r\n".
+            "\r\n--xxx\r\n".
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            "foobar\r\n".
+            "\r\n--xxx\r\n".
+            "Content-Type: text/html\r\n".
+            "\r\n".
+            "<b>foobar</b>\r\n".
+            "\r\n--xxx--\r\n",
+            $entity->toString()
+            );
+    }
+
+    public function testMixingLevelsIsHierarchical()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $newHeaders = $this->createHeaderSet(array(), false);
+
+        $part = $this->createChild(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'foobar'
+            );
+
+        $attachment = $this->createChild(Swift_Mime_SimpleMimeEntity::LEVEL_MIXED,
+            "Content-Type: application/octet-stream\r\n".
+            "\r\n".
+            'data'
+            );
+
+        $headers->shouldReceive('toString')
+              ->zeroOrMoreTimes()
+              ->andReturn("Content-Type: multipart/mixed; boundary=\"xxx\"\r\n");
+        $headers->shouldReceive('newInstance')
+              ->zeroOrMoreTimes()
+              ->andReturn($newHeaders);
+        $newHeaders->shouldReceive('toString')
+              ->zeroOrMoreTimes()
+              ->andReturn("Content-Type: multipart/alternative; boundary=\"yyy\"\r\n");
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setBoundary('xxx');
+        $entity->setChildren(array($part, $attachment));
+
+        $this->assertRegExp(
+            '~^'.
+            "Content-Type: multipart/mixed; boundary=\"xxx\"\r\n".
+            "\r\n\r\n--xxx\r\n".
+            "Content-Type: multipart/alternative; boundary=\"yyy\"\r\n".
+            "\r\n\r\n--(.*?)\r\n".
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'foobar'.
+            "\r\n\r\n--\\1--\r\n".
+            "\r\n\r\n--xxx\r\n".
+            "Content-Type: application/octet-stream\r\n".
+            "\r\n".
+            'data'.
+            "\r\n\r\n--xxx--\r\n".
+            '$~',
+            $entity->toString()
+            );
+    }
+
+    public function testSettingEncoderNotifiesChildren()
+    {
+        $child = $this->createChild(0, '', false);
+        $encoder = $this->createEncoder('base64');
+
+        $child->shouldReceive('encoderChanged')
+              ->once()
+              ->with($encoder);
+
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $entity->setChildren(array($child));
+        $entity->setEncoder($encoder);
+    }
+
+    public function testReceiptOfEncoderChangeNotifiesChildren()
+    {
+        $child = $this->createChild(0, '', false);
+        $encoder = $this->createEncoder('base64');
+
+        $child->shouldReceive('encoderChanged')
+              ->once()
+              ->with($encoder);
+
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $entity->setChildren(array($child));
+        $entity->encoderChanged($encoder);
+    }
+
+    public function testReceiptOfCharsetChangeNotifiesChildren()
+    {
+        $child = $this->createChild(0, '', false);
+        $child->shouldReceive('charsetChanged')
+              ->once()
+              ->with('windows-874');
+
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $entity->setChildren(array($child));
+        $entity->charsetChanged('windows-874');
+    }
+
+    public function testEntityIsWrittenToByteStream()
+    {
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $is = $this->createInputStream(false);
+        $is->expects($this->atLeastOnce())
+           ->method('write');
+
+        $entity->toByteStream($is);
+    }
+
+    public function testEntityHeadersAreComittedToByteStream()
+    {
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $is = $this->createInputStream(false);
+        $is->expects($this->atLeastOnce())
+           ->method('write');
+        $is->expects($this->atLeastOnce())
+           ->method('commit');
+
+        $entity->toByteStream($is);
+    }
+
+    public function testOrderingTextBeforeHtml()
+    {
+        $htmlChild = new MimeEntityFixture(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+            "Content-Type: text/html\r\n".
+            "\r\n".
+            'HTML PART',
+            'text/html'
+            );
+        $textChild = new MimeEntityFixture(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'TEXT PART',
+            'text/plain'
+            );
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->zeroOrMoreTimes()
+                ->andReturn("Content-Type: multipart/alternative; boundary=\"xxx\"\r\n");
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $entity->setBoundary('xxx');
+        $entity->setChildren(array($htmlChild, $textChild));
+
+        $this->assertEquals(
+            "Content-Type: multipart/alternative; boundary=\"xxx\"\r\n".
+            "\r\n\r\n--xxx\r\n".
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'TEXT PART'.
+            "\r\n\r\n--xxx\r\n".
+            "Content-Type: text/html\r\n".
+            "\r\n".
+            'HTML PART'.
+            "\r\n\r\n--xxx--\r\n",
+            $entity->toString()
+            );
+    }
+
+    public function testOrderingEqualContentTypesMaintainsOriginalOrdering()
+    {
+        $firstChild = new MimeEntityFixture(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'PART 1',
+            'text/plain'
+        );
+        $secondChild = new MimeEntityFixture(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE,
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'PART 2',
+            'text/plain'
+        );
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+            ->zeroOrMoreTimes()
+            ->andReturn("Content-Type: multipart/alternative; boundary=\"xxx\"\r\n");
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $this->createCache()
+        );
+        $entity->setBoundary('xxx');
+        $entity->setChildren(array($firstChild, $secondChild));
+
+        $this->assertEquals(
+            "Content-Type: multipart/alternative; boundary=\"xxx\"\r\n".
+            "\r\n\r\n--xxx\r\n".
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'PART 1'.
+            "\r\n\r\n--xxx\r\n".
+            "Content-Type: text/plain\r\n".
+            "\r\n".
+            'PART 2'.
+            "\r\n\r\n--xxx--\r\n",
+            $entity->toString()
+        );
+    }
+
+    public function testUnsettingChildrenRestoresContentType()
+    {
+        $cType = $this->createHeader('Content-Type', 'text/plain', array(), false);
+        $child = $this->createChild(Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE);
+
+        $cType->shouldReceive('setFieldBodyModel')
+              ->twice()
+              ->with('image/jpeg');
+        $cType->shouldReceive('setFieldBodyModel')
+              ->once()
+              ->with('multipart/alternative');
+        $cType->shouldReceive('setFieldBodyModel')
+              ->zeroOrMoreTimes()
+              ->with(\Mockery::not('multipart/alternative', 'image/jpeg'));
+
+        $entity = $this->createEntity($this->createHeaderSet(array(
+            'Content-Type' => $cType,
+            )),
+            $this->createEncoder(), $this->createCache()
+            );
+
+        $entity->setContentType('image/jpeg');
+        $entity->setChildren(array($child));
+        $entity->setChildren(array());
+    }
+
+    public function testBodyIsReadFromCacheWhenUsingToStringIfPresent()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->zeroOrMoreTimes()
+                ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
+
+        $cache = $this->createCache(false);
+        $cache->shouldReceive('hasKey')
+              ->once()
+              ->with(\Mockery::any(), 'body')
+              ->andReturn(true);
+        $cache->shouldReceive('getString')
+              ->once()
+              ->with(\Mockery::any(), 'body')
+              ->andReturn("\r\ncache\r\ncache!");
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $cache
+            );
+
+        $entity->setBody("blah\r\nblah!");
+        $this->assertEquals(
+            "Content-Type: text/plain; charset=utf-8\r\n".
+            "\r\n".
+            "cache\r\ncache!",
+            $entity->toString()
+            );
+    }
+
+    public function testBodyIsAddedToCacheWhenUsingToString()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->zeroOrMoreTimes()
+                ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
+
+        $cache = $this->createCache(false);
+        $cache->shouldReceive('hasKey')
+              ->once()
+              ->with(\Mockery::any(), 'body')
+              ->andReturn(false);
+        $cache->shouldReceive('setString')
+              ->once()
+              ->with(\Mockery::any(), 'body', "\r\nblah\r\nblah!", Swift_KeyCache::MODE_WRITE);
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $cache
+            );
+
+        $entity->setBody("blah\r\nblah!");
+        $entity->toString();
+    }
+
+    public function testBodyIsClearedFromCacheIfNewBodySet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->zeroOrMoreTimes()
+                ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
+
+        $cache = $this->createCache(false);
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $cache
+            );
+
+        $entity->setBody("blah\r\nblah!");
+        $entity->toString();
+
+        // We set the expectation at this point because we only care what happens when calling setBody()
+        $cache->shouldReceive('clearKey')
+              ->once()
+              ->with(\Mockery::any(), 'body');
+
+        $entity->setBody("new\r\nnew!");
+    }
+
+    public function testBodyIsNotClearedFromCacheIfSameBodySet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->zeroOrMoreTimes()
+                ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
+
+        $cache = $this->createCache(false);
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $cache
+            );
+
+        $entity->setBody("blah\r\nblah!");
+        $entity->toString();
+
+        // We set the expectation at this point because we only care what happens when calling setBody()
+        $cache->shouldReceive('clearKey')
+              ->never();
+
+        $entity->setBody("blah\r\nblah!");
+    }
+
+    public function testBodyIsClearedFromCacheIfNewEncoderSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->zeroOrMoreTimes()
+                ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
+
+        $cache = $this->createCache(false);
+        $otherEncoder = $this->createEncoder();
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $cache
+            );
+
+        $entity->setBody("blah\r\nblah!");
+        $entity->toString();
+
+        // We set the expectation at this point because we only care what happens when calling setEncoder()
+        $cache->shouldReceive('clearKey')
+              ->once()
+              ->with(\Mockery::any(), 'body');
+
+        $entity->setEncoder($otherEncoder);
+    }
+
+    public function testBodyIsReadFromCacheWhenUsingToByteStreamIfPresent()
+    {
+        $is = $this->createInputStream();
+        $cache = $this->createCache(false);
+        $cache->shouldReceive('hasKey')
+              ->once()
+              ->with(\Mockery::any(), 'body')
+              ->andReturn(true);
+        $cache->shouldReceive('exportToByteStream')
+              ->once()
+              ->with(\Mockery::any(), 'body', $is);
+
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $cache
+            );
+        $entity->setBody('foo');
+
+        $entity->toByteStream($is);
+    }
+
+    public function testBodyIsAddedToCacheWhenUsingToByteStream()
+    {
+        $is = $this->createInputStream();
+        $cache = $this->createCache(false);
+        $cache->shouldReceive('hasKey')
+              ->once()
+              ->with(\Mockery::any(), 'body')
+              ->andReturn(false);
+        $cache->shouldReceive('getInputByteStream')
+              ->once()
+              ->with(\Mockery::any(), 'body');
+
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $cache
+            );
+        $entity->setBody('foo');
+
+        $entity->toByteStream($is);
+    }
+
+    public function testFluidInterface()
+    {
+        $entity = $this->createEntity($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+
+        $this->assertSame($entity,
+            $entity
+            ->setContentType('text/plain')
+            ->setEncoder($this->createEncoder())
+            ->setId('foo@bar')
+            ->setDescription('my description')
+            ->setMaxLineLength(998)
+            ->setBody('xx')
+            ->setBoundary('xyz')
+            ->setChildren(array())
+            );
+    }
+
+    abstract protected function createEntity($headers, $encoder, $cache);
+
+    protected function createChild($level = null, $string = '', $stub = true)
+    {
+        $child = $this->getMockery('Swift_Mime_SimpleMimeEntity')->shouldIgnoreMissing();
+        if (isset($level)) {
+            $child->shouldReceive('getNestingLevel')
+                  ->zeroOrMoreTimes()
+                  ->andReturn($level);
+        }
+        $child->shouldReceive('toString')
+              ->zeroOrMoreTimes()
+              ->andReturn($string);
+
+        return $child;
+    }
+
+    protected function createEncoder($name = 'quoted-printable', $stub = true)
+    {
+        $encoder = $this->getMockBuilder('Swift_Mime_ContentEncoder')->getMock();
+        $encoder->expects($this->any())
+                ->method('getName')
+                ->will($this->returnValue($name));
+        $encoder->expects($this->any())
+                ->method('encodeString')
+                ->will($this->returnCallback(function () {
+                    $args = func_get_args();
+
+                    return array_shift($args);
+                }));
+
+        return $encoder;
+    }
+
+    protected function createCache($stub = true)
+    {
+        return $this->getMockery('Swift_KeyCache')->shouldIgnoreMissing();
+    }
+
+    protected function createHeaderSet($headers = array(), $stub = true)
+    {
+        $set = $this->getMockery('Swift_Mime_SimpleHeaderSet')->shouldIgnoreMissing();
+        $set->shouldReceive('get')
+            ->zeroOrMoreTimes()
+            ->andReturnUsing(function ($key) use ($headers) {
+                return $headers[$key];
+            });
+        $set->shouldReceive('has')
+            ->zeroOrMoreTimes()
+            ->andReturnUsing(function ($key) use ($headers) {
+                return array_key_exists($key, $headers);
+            });
+
+        return $set;
+    }
+
+    protected function createHeader($name, $model = null, $params = array(), $stub = true)
+    {
+        $header = $this->getMockery('Swift_Mime_Headers_ParameterizedHeader')->shouldIgnoreMissing();
+        $header->shouldReceive('getFieldName')
+               ->zeroOrMoreTimes()
+               ->andReturn($name);
+        $header->shouldReceive('getFieldBodyModel')
+               ->zeroOrMoreTimes()
+               ->andReturn($model);
+        $header->shouldReceive('getParameter')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing(function ($key) use ($params) {
+                   return $params[$key];
+               });
+
+        return $header;
+    }
+
+    protected function createOutputStream($data = null, $stub = true)
+    {
+        $os = $this->getMockery('Swift_OutputByteStream');
+        if (isset($data)) {
+            $os->shouldReceive('read')
+               ->zeroOrMoreTimes()
+               ->andReturnUsing(function () use ($data) {
+                   static $first = true;
+                   if (!$first) {
+                       return false;
+                   }
+
+                   $first = false;
+
+                   return $data;
+               });
+            $os->shouldReceive('setReadPointer')
+              ->zeroOrMoreTimes();
+        }
+
+        return $os;
+    }
+
+    protected function createInputStream($stub = true)
+    {
+        return $this->getMockBuilder('Swift_InputByteStream')->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderSetTest.php	(date 1495187412000)
@@ -0,0 +1,734 @@
+<?php
+
+class Swift_Mime_SimpleHeaderSetTest extends \PHPUnit\Framework\TestCase
+{
+    public function testAddMailboxHeaderDelegatesToFactory()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createMailboxHeader')
+                ->with('From', array('person@domain' => 'Person'))
+                ->will($this->returnValue($this->createHeader('From')));
+
+        $set = $this->createSet($factory);
+        $set->addMailboxHeader('From', array('person@domain' => 'Person'));
+    }
+
+    public function testAddDateHeaderDelegatesToFactory()
+    {
+        $dateTime = new DateTimeImmutable();
+
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createDateHeader')
+                ->with('Date', $dateTime)
+                ->will($this->returnValue($this->createHeader('Date')));
+
+        $set = $this->createSet($factory);
+        $set->addDateHeader('Date', $dateTime);
+    }
+
+    public function testAddTextHeaderDelegatesToFactory()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createTextHeader')
+                ->with('Subject', 'some text')
+                ->will($this->returnValue($this->createHeader('Subject')));
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Subject', 'some text');
+    }
+
+    public function testAddParameterizedHeaderDelegatesToFactory()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createParameterizedHeader')
+                ->with('Content-Type', 'text/plain', array('charset' => 'utf-8'))
+                ->will($this->returnValue($this->createHeader('Content-Type')));
+
+        $set = $this->createSet($factory);
+        $set->addParameterizedHeader('Content-Type', 'text/plain',
+            array('charset' => 'utf-8')
+            );
+    }
+
+    public function testAddIdHeaderDelegatesToFactory()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($this->createHeader('Message-ID')));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+    }
+
+    public function testAddPathHeaderDelegatesToFactory()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createPathHeader')
+                ->with('Return-Path', 'some@path')
+                ->will($this->returnValue($this->createHeader('Return-Path')));
+
+        $set = $this->createSet($factory);
+        $set->addPathHeader('Return-Path', 'some@path');
+    }
+
+    public function testHasReturnsFalseWhenNoHeaders()
+    {
+        $set = $this->createSet($this->createFactory());
+        $this->assertFalse($set->has('Some-Header'));
+    }
+
+    public function testAddedMailboxHeaderIsSeenByHas()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createMailboxHeader')
+                ->with('From', array('person@domain' => 'Person'))
+                ->will($this->returnValue($this->createHeader('From')));
+
+        $set = $this->createSet($factory);
+        $set->addMailboxHeader('From', array('person@domain' => 'Person'));
+        $this->assertTrue($set->has('From'));
+    }
+
+    public function testAddedDateHeaderIsSeenByHas()
+    {
+        $dateTime = new DateTimeImmutable();
+
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createDateHeader')
+                ->with('Date', $dateTime)
+                ->will($this->returnValue($this->createHeader('Date')));
+
+        $set = $this->createSet($factory);
+        $set->addDateHeader('Date', $dateTime);
+        $this->assertTrue($set->has('Date'));
+    }
+
+    public function testAddedTextHeaderIsSeenByHas()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createTextHeader')
+                ->with('Subject', 'some text')
+                ->will($this->returnValue($this->createHeader('Subject')));
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Subject', 'some text');
+        $this->assertTrue($set->has('Subject'));
+    }
+
+    public function testAddedParameterizedHeaderIsSeenByHas()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createParameterizedHeader')
+                ->with('Content-Type', 'text/plain', array('charset' => 'utf-8'))
+                ->will($this->returnValue($this->createHeader('Content-Type')));
+
+        $set = $this->createSet($factory);
+        $set->addParameterizedHeader('Content-Type', 'text/plain',
+            array('charset' => 'utf-8')
+            );
+        $this->assertTrue($set->has('Content-Type'));
+    }
+
+    public function testAddedIdHeaderIsSeenByHas()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($this->createHeader('Message-ID')));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $this->assertTrue($set->has('Message-ID'));
+    }
+
+    public function testAddedPathHeaderIsSeenByHas()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createPathHeader')
+                ->with('Return-Path', 'some@path')
+                ->will($this->returnValue($this->createHeader('Return-Path')));
+
+        $set = $this->createSet($factory);
+        $set->addPathHeader('Return-Path', 'some@path');
+        $this->assertTrue($set->has('Return-Path'));
+    }
+
+    public function testNewlySetHeaderIsSeenByHas()
+    {
+        $factory = $this->createFactory();
+        $header = $this->createHeader('X-Foo', 'bar');
+        $set = $this->createSet($factory);
+        $set->set($header);
+        $this->assertTrue($set->has('X-Foo'));
+    }
+
+    public function testHasCanAcceptOffset()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($this->createHeader('Message-ID')));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $this->assertTrue($set->has('Message-ID', 0));
+    }
+
+    public function testHasWithIllegalOffsetReturnsFalse()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($this->createHeader('Message-ID')));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $this->assertFalse($set->has('Message-ID', 1));
+    }
+
+    public function testHasCanDistinguishMultipleHeaders()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($this->createHeader('Message-ID')));
+        $factory->expects($this->at(1))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'other@id')
+                ->will($this->returnValue($this->createHeader('Message-ID')));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->addIdHeader('Message-ID', 'other@id');
+        $this->assertTrue($set->has('Message-ID', 1));
+    }
+
+    public function testGetWithUnspecifiedOffset()
+    {
+        $header = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $this->assertSame($header, $set->get('Message-ID'));
+    }
+
+    public function testGetWithSpeiciedOffset()
+    {
+        $header0 = $this->createHeader('Message-ID');
+        $header1 = $this->createHeader('Message-ID');
+        $header2 = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header0));
+        $factory->expects($this->at(1))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'other@id')
+                ->will($this->returnValue($header1));
+        $factory->expects($this->at(2))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'more@id')
+                ->will($this->returnValue($header2));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->addIdHeader('Message-ID', 'other@id');
+        $set->addIdHeader('Message-ID', 'more@id');
+        $this->assertSame($header1, $set->get('Message-ID', 1));
+    }
+
+    public function testGetReturnsNullIfHeaderNotSet()
+    {
+        $set = $this->createSet($this->createFactory());
+        $this->assertNull($set->get('Message-ID', 99));
+    }
+
+    public function testGetAllReturnsAllHeadersMatchingName()
+    {
+        $header0 = $this->createHeader('Message-ID');
+        $header1 = $this->createHeader('Message-ID');
+        $header2 = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header0));
+        $factory->expects($this->at(1))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'other@id')
+                ->will($this->returnValue($header1));
+        $factory->expects($this->at(2))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'more@id')
+                ->will($this->returnValue($header2));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->addIdHeader('Message-ID', 'other@id');
+        $set->addIdHeader('Message-ID', 'more@id');
+
+        $this->assertEquals(array($header0, $header1, $header2),
+            $set->getAll('Message-ID')
+            );
+    }
+
+    public function testGetAllReturnsAllHeadersIfNoArguments()
+    {
+        $header0 = $this->createHeader('Message-ID');
+        $header1 = $this->createHeader('Subject');
+        $header2 = $this->createHeader('To');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header0));
+        $factory->expects($this->at(1))
+                ->method('createIdHeader')
+                ->with('Subject', 'thing')
+                ->will($this->returnValue($header1));
+        $factory->expects($this->at(2))
+                ->method('createIdHeader')
+                ->with('To', 'person@example.org')
+                ->will($this->returnValue($header2));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->addIdHeader('Subject', 'thing');
+        $set->addIdHeader('To', 'person@example.org');
+
+        $this->assertEquals(array($header0, $header1, $header2),
+            $set->getAll()
+            );
+    }
+
+    public function testGetAllReturnsEmptyArrayIfNoneSet()
+    {
+        $set = $this->createSet($this->createFactory());
+        $this->assertEquals(array(), $set->getAll('Received'));
+    }
+
+    public function testRemoveWithUnspecifiedOffset()
+    {
+        $header = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->remove('Message-ID');
+        $this->assertFalse($set->has('Message-ID'));
+    }
+
+    public function testRemoveWithSpecifiedIndexRemovesHeader()
+    {
+        $header0 = $this->createHeader('Message-ID');
+        $header1 = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header0));
+        $factory->expects($this->at(1))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'other@id')
+                ->will($this->returnValue($header1));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->addIdHeader('Message-ID', 'other@id');
+        $set->remove('Message-ID', 0);
+        $this->assertFalse($set->has('Message-ID', 0));
+        $this->assertTrue($set->has('Message-ID', 1));
+        $this->assertTrue($set->has('Message-ID'));
+        $set->remove('Message-ID', 1);
+        $this->assertFalse($set->has('Message-ID', 1));
+        $this->assertFalse($set->has('Message-ID'));
+    }
+
+    public function testRemoveWithSpecifiedIndexLeavesOtherHeaders()
+    {
+        $header0 = $this->createHeader('Message-ID');
+        $header1 = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header0));
+        $factory->expects($this->at(1))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'other@id')
+                ->will($this->returnValue($header1));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->addIdHeader('Message-ID', 'other@id');
+        $set->remove('Message-ID', 1);
+        $this->assertTrue($set->has('Message-ID', 0));
+    }
+
+    public function testRemoveWithInvalidOffsetDoesNothing()
+    {
+        $header = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->remove('Message-ID', 50);
+        $this->assertTrue($set->has('Message-ID'));
+    }
+
+    public function testRemoveAllRemovesAllHeadersWithName()
+    {
+        $header0 = $this->createHeader('Message-ID');
+        $header1 = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header0));
+        $factory->expects($this->at(1))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'other@id')
+                ->will($this->returnValue($header1));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->addIdHeader('Message-ID', 'other@id');
+        $set->removeAll('Message-ID');
+        $this->assertFalse($set->has('Message-ID', 0));
+        $this->assertFalse($set->has('Message-ID', 1));
+    }
+
+    public function testHasIsNotCaseSensitive()
+    {
+        $header = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $this->assertTrue($set->has('message-id'));
+    }
+
+    public function testGetIsNotCaseSensitive()
+    {
+        $header = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $this->assertSame($header, $set->get('message-id'));
+    }
+
+    public function testGetAllIsNotCaseSensitive()
+    {
+        $header = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $this->assertEquals(array($header), $set->getAll('message-id'));
+    }
+
+    public function testRemoveIsNotCaseSensitive()
+    {
+        $header = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->remove('message-id');
+        $this->assertFalse($set->has('Message-ID'));
+    }
+
+    public function testRemoveAllIsNotCaseSensitive()
+    {
+        $header = $this->createHeader('Message-ID');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createIdHeader')
+                ->with('Message-ID', 'some@id')
+                ->will($this->returnValue($header));
+
+        $set = $this->createSet($factory);
+        $set->addIdHeader('Message-ID', 'some@id');
+        $set->removeAll('message-id');
+        $this->assertFalse($set->has('Message-ID'));
+    }
+
+    public function testToStringJoinsHeadersTogether()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createTextHeader')
+                ->with('Foo', 'bar')
+                ->will($this->returnValue($this->createHeader('Foo', 'bar')));
+        $factory->expects($this->at(1))
+                ->method('createTextHeader')
+                ->with('Zip', 'buttons')
+                ->will($this->returnValue($this->createHeader('Zip', 'buttons')));
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Foo', 'bar');
+        $set->addTextHeader('Zip', 'buttons');
+        $this->assertEquals(
+            "Foo: bar\r\n".
+            "Zip: buttons\r\n",
+            $set->toString()
+            );
+    }
+
+    public function testHeadersWithoutBodiesAreNotDisplayed()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createTextHeader')
+                ->with('Foo', 'bar')
+                ->will($this->returnValue($this->createHeader('Foo', 'bar')));
+        $factory->expects($this->at(1))
+                ->method('createTextHeader')
+                ->with('Zip', '')
+                ->will($this->returnValue($this->createHeader('Zip', '')));
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Foo', 'bar');
+        $set->addTextHeader('Zip', '');
+        $this->assertEquals(
+            "Foo: bar\r\n",
+            $set->toString()
+            );
+    }
+
+    public function testHeadersWithoutBodiesCanBeForcedToDisplay()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createTextHeader')
+                ->with('Foo', '')
+                ->will($this->returnValue($this->createHeader('Foo', '')));
+        $factory->expects($this->at(1))
+                ->method('createTextHeader')
+                ->with('Zip', '')
+                ->will($this->returnValue($this->createHeader('Zip', '')));
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Foo', '');
+        $set->addTextHeader('Zip', '');
+        $set->setAlwaysDisplayed(array('Foo', 'Zip'));
+        $this->assertEquals(
+            "Foo: \r\n".
+            "Zip: \r\n",
+            $set->toString()
+            );
+    }
+
+    public function testHeaderSequencesCanBeSpecified()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createTextHeader')
+                ->with('Third', 'three')
+                ->will($this->returnValue($this->createHeader('Third', 'three')));
+        $factory->expects($this->at(1))
+                ->method('createTextHeader')
+                ->with('First', 'one')
+                ->will($this->returnValue($this->createHeader('First', 'one')));
+        $factory->expects($this->at(2))
+                ->method('createTextHeader')
+                ->with('Second', 'two')
+                ->will($this->returnValue($this->createHeader('Second', 'two')));
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Third', 'three');
+        $set->addTextHeader('First', 'one');
+        $set->addTextHeader('Second', 'two');
+
+        $set->defineOrdering(array('First', 'Second', 'Third'));
+
+        $this->assertEquals(
+            "First: one\r\n".
+            "Second: two\r\n".
+            "Third: three\r\n",
+            $set->toString()
+            );
+    }
+
+    public function testUnsortedHeadersAppearAtEnd()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createTextHeader')
+                ->with('Fourth', 'four')
+                ->will($this->returnValue($this->createHeader('Fourth', 'four')));
+        $factory->expects($this->at(1))
+                ->method('createTextHeader')
+                ->with('Fifth', 'five')
+                ->will($this->returnValue($this->createHeader('Fifth', 'five')));
+        $factory->expects($this->at(2))
+                ->method('createTextHeader')
+                ->with('Third', 'three')
+                ->will($this->returnValue($this->createHeader('Third', 'three')));
+        $factory->expects($this->at(3))
+                ->method('createTextHeader')
+                ->with('First', 'one')
+                ->will($this->returnValue($this->createHeader('First', 'one')));
+        $factory->expects($this->at(4))
+                ->method('createTextHeader')
+                ->with('Second', 'two')
+                ->will($this->returnValue($this->createHeader('Second', 'two')));
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Fourth', 'four');
+        $set->addTextHeader('Fifth', 'five');
+        $set->addTextHeader('Third', 'three');
+        $set->addTextHeader('First', 'one');
+        $set->addTextHeader('Second', 'two');
+
+        $set->defineOrdering(array('First', 'Second', 'Third'));
+
+        $this->assertEquals(
+            "First: one\r\n".
+            "Second: two\r\n".
+            "Third: three\r\n".
+            "Fourth: four\r\n".
+            "Fifth: five\r\n",
+            $set->toString()
+            );
+    }
+
+    public function testSettingCharsetNotifiesAlreadyExistingHeaders()
+    {
+        $subject = $this->createHeader('Subject', 'some text');
+        $xHeader = $this->createHeader('X-Header', 'some text');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createTextHeader')
+                ->with('Subject', 'some text')
+                ->will($this->returnValue($subject));
+        $factory->expects($this->at(1))
+                ->method('createTextHeader')
+                ->with('X-Header', 'some text')
+                ->will($this->returnValue($xHeader));
+        $subject->expects($this->once())
+                ->method('setCharset')
+                ->with('utf-8');
+        $xHeader->expects($this->once())
+                ->method('setCharset')
+                ->with('utf-8');
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Subject', 'some text');
+        $set->addTextHeader('X-Header', 'some text');
+
+        $set->setCharset('utf-8');
+    }
+
+    public function testCharsetChangeNotifiesAlreadyExistingHeaders()
+    {
+        $subject = $this->createHeader('Subject', 'some text');
+        $xHeader = $this->createHeader('X-Header', 'some text');
+        $factory = $this->createFactory();
+        $factory->expects($this->at(0))
+                ->method('createTextHeader')
+                ->with('Subject', 'some text')
+                ->will($this->returnValue($subject));
+        $factory->expects($this->at(1))
+                ->method('createTextHeader')
+                ->with('X-Header', 'some text')
+                ->will($this->returnValue($xHeader));
+        $subject->expects($this->once())
+                ->method('setCharset')
+                ->with('utf-8');
+        $xHeader->expects($this->once())
+                ->method('setCharset')
+                ->with('utf-8');
+
+        $set = $this->createSet($factory);
+        $set->addTextHeader('Subject', 'some text');
+        $set->addTextHeader('X-Header', 'some text');
+
+        $set->charsetChanged('utf-8');
+    }
+
+    public function testCharsetChangeNotifiesFactory()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('charsetChanged')
+                ->with('utf-8');
+
+        $set = $this->createSet($factory);
+
+        $set->setCharset('utf-8');
+    }
+
+    private function createSet($factory)
+    {
+        return new Swift_Mime_SimpleHeaderSet($factory);
+    }
+
+    private function createFactory()
+    {
+        return $this->getMockBuilder('Swift_Mime_SimpleHeaderFactory')->disableOriginalConstructor()->getMock();
+    }
+
+    private function createHeader($name, $body = '')
+    {
+        $header = $this->getMockBuilder('Swift_Mime_Header')->getMock();
+        $header->expects($this->any())
+               ->method('getFieldName')
+               ->will($this->returnValue($name));
+        $header->expects($this->any())
+               ->method('toString')
+               ->will($this->returnValue(sprintf("%s: %s\r\n", $name, $body)));
+        $header->expects($this->any())
+               ->method('getFieldBody')
+               ->will($this->returnValue($body));
+
+        return $header;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMessageTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMessageTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMessageTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMessageTest.php	(date 1495187412000)
@@ -0,0 +1,837 @@
+<?php
+
+
+class Swift_Mime_SimpleMessageTest extends Swift_Mime_MimePartTest
+{
+    public function testNestingLevelIsSubpart()
+    {
+        // not relevant
+        $this->addToAssertionCount(1);
+    }
+
+    public function testNestingLevelIsTop()
+    {
+        $message = $this->createMessage($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(
+            Swift_Mime_SimpleMimeEntity::LEVEL_TOP, $message->getNestingLevel()
+            );
+    }
+
+    public function testDateIsReturnedFromHeader()
+    {
+        $dateTime = new DateTimeImmutable();
+
+        $date = $this->createHeader('Date', $dateTime);
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Date' => $date)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals($dateTime, $message->getDate());
+    }
+
+    public function testDateIsSetInHeader()
+    {
+        $dateTime = new DateTimeImmutable();
+
+        $date = $this->createHeader('Date', new DateTimeImmutable(), array(), false);
+        $date->shouldReceive('setFieldBodyModel')
+             ->once()
+             ->with($dateTime);
+        $date->shouldReceive('setFieldBodyModel')
+             ->zeroOrMoreTimes();
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Date' => $date)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setDate($dateTime);
+    }
+
+    public function testDateHeaderIsCreatedIfNonePresent()
+    {
+        $dateTime = new DateTimeImmutable();
+
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addDateHeader')
+                ->once()
+                ->with('Date', $dateTime);
+        $headers->shouldReceive('addDateHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setDate($dateTime);
+    }
+
+    public function testDateHeaderIsAddedDuringConstruction()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addDateHeader')
+                ->once()
+                ->with('Date', Mockery::type('DateTimeImmutable'));
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+    }
+
+    public function testIdIsReturnedFromHeader()
+    {
+        /* -- RFC 2045, 7.
+        In constructing a high-level user agent, it may be desirable to allow
+        one body to make reference to another.  Accordingly, bodies may be
+        labelled using the "Content-ID" header field, which is syntactically
+        identical to the "Message-ID" header field
+        */
+
+        $messageId = $this->createHeader('Message-ID', 'a@b');
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Message-ID' => $messageId)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals('a@b', $message->getId());
+    }
+
+    public function testIdIsSetInHeader()
+    {
+        $messageId = $this->createHeader('Message-ID', 'a@b', array(), false);
+        $messageId->shouldReceive('setFieldBodyModel')
+                  ->once()
+                  ->with('x@y');
+        $messageId->shouldReceive('setFieldBodyModel')
+                  ->zeroOrMoreTimes();
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Message-ID' => $messageId)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setId('x@y');
+    }
+
+    public function testIdIsAutoGenerated()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addIdHeader')
+                ->once()
+                ->with('Message-ID', '/^.*?@.*?$/D');
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+    }
+
+    public function testSubjectIsReturnedFromHeader()
+    {
+        /* -- RFC 2822, 3.6.5.
+     */
+
+        $subject = $this->createHeader('Subject', 'example subject');
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Subject' => $subject)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals('example subject', $message->getSubject());
+    }
+
+    public function testSubjectIsSetInHeader()
+    {
+        $subject = $this->createHeader('Subject', '', array(), false);
+        $subject->shouldReceive('setFieldBodyModel')
+                ->once()
+                ->with('foo');
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Subject' => $subject)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setSubject('foo');
+    }
+
+    public function testSubjectHeaderIsCreatedIfNotPresent()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addTextHeader')
+                ->once()
+                ->with('Subject', 'example subject');
+        $headers->shouldReceive('addTextHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setSubject('example subject');
+    }
+
+    public function testReturnPathIsReturnedFromHeader()
+    {
+        /* -- RFC 2822, 3.6.7.
+     */
+
+        $path = $this->createHeader('Return-Path', 'bounces@domain');
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Return-Path' => $path)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals('bounces@domain', $message->getReturnPath());
+    }
+
+    public function testReturnPathIsSetInHeader()
+    {
+        $path = $this->createHeader('Return-Path', '', array(), false);
+        $path->shouldReceive('setFieldBodyModel')
+             ->once()
+             ->with('bounces@domain');
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Return-Path' => $path)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setReturnPath('bounces@domain');
+    }
+
+    public function testReturnPathHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addPathHeader')
+                ->once()
+                ->with('Return-Path', 'bounces@domain');
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setReturnPath('bounces@domain');
+    }
+
+    public function testSenderIsReturnedFromHeader()
+    {
+        /* -- RFC 2822, 3.6.2.
+     */
+
+        $sender = $this->createHeader('Sender', array('sender@domain' => 'Name'));
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Sender' => $sender)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(array('sender@domain' => 'Name'), $message->getSender());
+    }
+
+    public function testSenderIsSetInHeader()
+    {
+        $sender = $this->createHeader('Sender', array('sender@domain' => 'Name'),
+            array(), false
+            );
+        $sender->shouldReceive('setFieldBodyModel')
+               ->once()
+               ->with(array('other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Sender' => $sender)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setSender(array('other@domain' => 'Other'));
+    }
+
+    public function testSenderHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Sender', (array) 'sender@domain');
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setSender('sender@domain');
+    }
+
+    public function testNameCanBeUsedInSenderHeader()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Sender', array('sender@domain' => 'Name'));
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setSender('sender@domain', 'Name');
+    }
+
+    public function testFromIsReturnedFromHeader()
+    {
+        /* -- RFC 2822, 3.6.2.
+     */
+
+        $from = $this->createHeader('From', array('from@domain' => 'Name'));
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('From' => $from)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(array('from@domain' => 'Name'), $message->getFrom());
+    }
+
+    public function testFromIsSetInHeader()
+    {
+        $from = $this->createHeader('From', array('from@domain' => 'Name'),
+            array(), false
+            );
+        $from->shouldReceive('setFieldBodyModel')
+             ->once()
+             ->with(array('other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('From' => $from)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setFrom(array('other@domain' => 'Other'));
+    }
+
+    public function testFromIsAddedToHeadersDuringAddFrom()
+    {
+        $from = $this->createHeader('From', array('from@domain' => 'Name'),
+            array(), false
+            );
+        $from->shouldReceive('setFieldBodyModel')
+             ->once()
+             ->with(array('from@domain' => 'Name', 'other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('From' => $from)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->addFrom('other@domain', 'Other');
+    }
+
+    public function testFromHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('From', (array) 'from@domain');
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setFrom('from@domain');
+    }
+
+    public function testPersonalNameCanBeUsedInFromAddress()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('From', array('from@domain' => 'Name'));
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setFrom('from@domain', 'Name');
+    }
+
+    public function testReplyToIsReturnedFromHeader()
+    {
+        /* -- RFC 2822, 3.6.2.
+     */
+
+        $reply = $this->createHeader('Reply-To', array('reply@domain' => 'Name'));
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Reply-To' => $reply)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(array('reply@domain' => 'Name'), $message->getReplyTo());
+    }
+
+    public function testReplyToIsSetInHeader()
+    {
+        $reply = $this->createHeader('Reply-To', array('reply@domain' => 'Name'),
+            array(), false
+            );
+        $reply->shouldReceive('setFieldBodyModel')
+              ->once()
+              ->with(array('other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Reply-To' => $reply)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setReplyTo(array('other@domain' => 'Other'));
+    }
+
+    public function testReplyToIsAddedToHeadersDuringAddReplyTo()
+    {
+        $replyTo = $this->createHeader('Reply-To', array('from@domain' => 'Name'),
+            array(), false
+            );
+        $replyTo->shouldReceive('setFieldBodyModel')
+                ->once()
+                ->with(array('from@domain' => 'Name', 'other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Reply-To' => $replyTo)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->addReplyTo('other@domain', 'Other');
+    }
+
+    public function testReplyToHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Reply-To', (array) 'reply@domain');
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setReplyTo('reply@domain');
+    }
+
+    public function testNameCanBeUsedInReplyTo()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Reply-To', array('reply@domain' => 'Name'));
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setReplyTo('reply@domain', 'Name');
+    }
+
+    public function testToIsReturnedFromHeader()
+    {
+        /* -- RFC 2822, 3.6.3.
+     */
+
+        $to = $this->createHeader('To', array('to@domain' => 'Name'));
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('To' => $to)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(array('to@domain' => 'Name'), $message->getTo());
+    }
+
+    public function testToIsSetInHeader()
+    {
+        $to = $this->createHeader('To', array('to@domain' => 'Name'),
+            array(), false
+            );
+        $to->shouldReceive('setFieldBodyModel')
+           ->once()
+           ->with(array('other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('To' => $to)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setTo(array('other@domain' => 'Other'));
+    }
+
+    public function testToIsAddedToHeadersDuringAddTo()
+    {
+        $to = $this->createHeader('To', array('from@domain' => 'Name'),
+            array(), false
+            );
+        $to->shouldReceive('setFieldBodyModel')
+           ->once()
+           ->with(array('from@domain' => 'Name', 'other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('To' => $to)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->addTo('other@domain', 'Other');
+    }
+
+    public function testToHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('To', (array) 'to@domain');
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setTo('to@domain');
+    }
+
+    public function testNameCanBeUsedInToHeader()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('To', array('to@domain' => 'Name'));
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setTo('to@domain', 'Name');
+    }
+
+    public function testCcIsReturnedFromHeader()
+    {
+        /* -- RFC 2822, 3.6.3.
+     */
+
+        $cc = $this->createHeader('Cc', array('cc@domain' => 'Name'));
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Cc' => $cc)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(array('cc@domain' => 'Name'), $message->getCc());
+    }
+
+    public function testCcIsSetInHeader()
+    {
+        $cc = $this->createHeader('Cc', array('cc@domain' => 'Name'),
+            array(), false
+            );
+        $cc->shouldReceive('setFieldBodyModel')
+           ->once()
+           ->with(array('other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Cc' => $cc)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setCc(array('other@domain' => 'Other'));
+    }
+
+    public function testCcIsAddedToHeadersDuringAddCc()
+    {
+        $cc = $this->createHeader('Cc', array('from@domain' => 'Name'),
+            array(), false
+            );
+        $cc->shouldReceive('setFieldBodyModel')
+           ->once()
+           ->with(array('from@domain' => 'Name', 'other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Cc' => $cc)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->addCc('other@domain', 'Other');
+    }
+
+    public function testCcHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Cc', (array) 'cc@domain');
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setCc('cc@domain');
+    }
+
+    public function testNameCanBeUsedInCcHeader()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Cc', array('cc@domain' => 'Name'));
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setCc('cc@domain', 'Name');
+    }
+
+    public function testBccIsReturnedFromHeader()
+    {
+        /* -- RFC 2822, 3.6.3.
+     */
+
+        $bcc = $this->createHeader('Bcc', array('bcc@domain' => 'Name'));
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Bcc' => $bcc)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(array('bcc@domain' => 'Name'), $message->getBcc());
+    }
+
+    public function testBccIsSetInHeader()
+    {
+        $bcc = $this->createHeader('Bcc', array('bcc@domain' => 'Name'),
+            array(), false
+            );
+        $bcc->shouldReceive('setFieldBodyModel')
+            ->once()
+            ->with(array('other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Bcc' => $bcc)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setBcc(array('other@domain' => 'Other'));
+    }
+
+    public function testBccIsAddedToHeadersDuringAddBcc()
+    {
+        $bcc = $this->createHeader('Bcc', array('from@domain' => 'Name'),
+            array(), false
+            );
+        $bcc->shouldReceive('setFieldBodyModel')
+            ->once()
+            ->with(array('from@domain' => 'Name', 'other@domain' => 'Other'));
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Bcc' => $bcc)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->addBcc('other@domain', 'Other');
+    }
+
+    public function testBccHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Bcc', (array) 'bcc@domain');
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setBcc('bcc@domain');
+    }
+
+    public function testNameCanBeUsedInBcc()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Bcc', array('bcc@domain' => 'Name'));
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setBcc('bcc@domain', 'Name');
+    }
+
+    public function testPriorityIsReadFromHeader()
+    {
+        $prio = $this->createHeader('X-Priority', '2 (High)');
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('X-Priority' => $prio)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(2, $message->getPriority());
+    }
+
+    public function testPriorityIsSetInHeader()
+    {
+        $prio = $this->createHeader('X-Priority', '2 (High)', array(), false);
+        $prio->shouldReceive('setFieldBodyModel')
+             ->once()
+             ->with('5 (Lowest)');
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('X-Priority' => $prio)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setPriority($message::PRIORITY_LOWEST);
+    }
+
+    public function testPriorityHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addTextHeader')
+                ->once()
+                ->with('X-Priority', '4 (Low)');
+        $headers->shouldReceive('addTextHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setPriority($message::PRIORITY_LOW);
+    }
+
+    public function testReadReceiptAddressReadFromHeader()
+    {
+        $rcpt = $this->createHeader('Disposition-Notification-To',
+            array('chris@swiftmailer.org' => 'Chris')
+            );
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Disposition-Notification-To' => $rcpt)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(array('chris@swiftmailer.org' => 'Chris'),
+            $message->getReadReceiptTo()
+            );
+    }
+
+    public function testReadReceiptIsSetInHeader()
+    {
+        $rcpt = $this->createHeader('Disposition-Notification-To', array(), array(), false);
+        $rcpt->shouldReceive('setFieldBodyModel')
+             ->once()
+             ->with('mark@swiftmailer.org');
+
+        $message = $this->createMessage(
+            $this->createHeaderSet(array('Disposition-Notification-To' => $rcpt)),
+            $this->createEncoder(), $this->createCache()
+            );
+        $message->setReadReceiptTo('mark@swiftmailer.org');
+    }
+
+    public function testReadReceiptHeaderIsAddedIfNoneSet()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('addMailboxHeader')
+                ->once()
+                ->with('Disposition-Notification-To', 'mark@swiftmailer.org');
+        $headers->shouldReceive('addMailboxHeader')
+                ->zeroOrMoreTimes();
+
+        $message = $this->createMessage($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $message->setReadReceiptTo('mark@swiftmailer.org');
+    }
+
+    public function testChildrenCanBeAttached()
+    {
+        $child1 = $this->createChild();
+        $child2 = $this->createChild();
+
+        $message = $this->createMessage($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+
+        $message->attach($child1);
+        $message->attach($child2);
+
+        $this->assertEquals(array($child1, $child2), $message->getChildren());
+    }
+
+    public function testChildrenCanBeDetached()
+    {
+        $child1 = $this->createChild();
+        $child2 = $this->createChild();
+
+        $message = $this->createMessage($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+
+        $message->attach($child1);
+        $message->attach($child2);
+
+        $message->detach($child1);
+
+        $this->assertEquals(array($child2), $message->getChildren());
+    }
+
+    public function testEmbedAttachesChild()
+    {
+        $child = $this->createChild();
+
+        $message = $this->createMessage($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+
+        $message->embed($child);
+
+        $this->assertEquals(array($child), $message->getChildren());
+    }
+
+    public function testEmbedReturnsValidCid()
+    {
+        $child = $this->createChild(Swift_Mime_SimpleMimeEntity::LEVEL_RELATED, '',
+            false
+            );
+        $child->shouldReceive('getId')
+              ->zeroOrMoreTimes()
+              ->andReturn('foo@bar');
+
+        $message = $this->createMessage($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+
+        $this->assertEquals('cid:foo@bar', $message->embed($child));
+    }
+
+    public function testFluidInterface()
+    {
+        $child = $this->createChild();
+        $message = $this->createMessage($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertSame($message,
+            $message
+            ->setContentType('text/plain')
+            ->setEncoder($this->createEncoder())
+            ->setId('foo@bar')
+            ->setDescription('my description')
+            ->setMaxLineLength(998)
+            ->setBody('xx')
+            ->setBoundary('xyz')
+            ->setChildren(array())
+            ->setCharset('iso-8859-1')
+            ->setFormat('flowed')
+            ->setDelSp(false)
+            ->setSubject('subj')
+            ->setDate(new DateTimeImmutable())
+            ->setReturnPath('foo@bar')
+            ->setSender('foo@bar')
+            ->setFrom(array('x@y' => 'XY'))
+            ->setReplyTo(array('ab@cd' => 'ABCD'))
+            ->setTo(array('chris@site.tld', 'mark@site.tld'))
+            ->setCc('john@somewhere.tld')
+            ->setBcc(array('one@site', 'two@site' => 'Two'))
+            ->setPriority($message::PRIORITY_LOW)
+            ->setReadReceiptTo('a@b')
+            ->attach($child)
+            ->detach($child)
+            );
+    }
+
+    //abstract
+    protected function createEntity($headers, $encoder, $cache)
+    {
+        return $this->createMessage($headers, $encoder, $cache);
+    }
+
+    protected function createMimePart($headers, $encoder, $cache)
+    {
+        return $this->createMessage($headers, $encoder, $cache);
+    }
+
+    private function createMessage($headers, $encoder, $cache)
+    {
+        $idGenerator = new Swift_Mime_IdGenerator('example.com');
+
+        return new Swift_Mime_SimpleMessage($headers, $encoder, $cache, $idGenerator);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMimeEntityTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMimeEntityTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMimeEntityTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleMimeEntityTest.php	(date 1495187412000)
@@ -0,0 +1,12 @@
+<?php
+
+
+class Swift_Mime_SimpleMimeEntityTest extends Swift_Mime_AbstractMimeEntityTest
+{
+    protected function createEntity($headerFactory, $encoder, $cache)
+    {
+        $idGenerator = new Swift_Mime_IdGenerator('example.com');
+
+        return new Swift_Mime_SimpleMimeEntity($headerFactory, $encoder, $cache, $idGenerator);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/CommandEventTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/CommandEventTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/CommandEventTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/CommandEventTest.php	(date 1495187412000)
@@ -0,0 +1,34 @@
+<?php
+
+class Swift_Events_CommandEventTest extends \PHPUnit\Framework\TestCase
+{
+    public function testCommandCanBeFetchedByGetter()
+    {
+        $evt = $this->createEvent($this->createTransport(), "FOO\r\n");
+        $this->assertEquals("FOO\r\n", $evt->getCommand());
+    }
+
+    public function testSuccessCodesCanBeFetchedViaGetter()
+    {
+        $evt = $this->createEvent($this->createTransport(), "FOO\r\n", array(250));
+        $this->assertEquals(array(250), $evt->getSuccessCodes());
+    }
+
+    public function testSourceIsBuffer()
+    {
+        $transport = $this->createTransport();
+        $evt = $this->createEvent($transport, "FOO\r\n");
+        $ref = $evt->getSource();
+        $this->assertEquals($transport, $ref);
+    }
+
+    private function createEvent(Swift_Transport $source, $command, $successCodes = array())
+    {
+        return new Swift_Events_CommandEvent($source, $command, $successCodes);
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockBuilder('Swift_Transport')->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/IdGeneratorTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/IdGeneratorTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/IdGeneratorTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/IdGeneratorTest.php	(date 1495187412000)
@@ -0,0 +1,32 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+use Egulias\EmailValidator\Validation\RFCValidation;
+
+class Swift_Mime_IdGeneratorTest extends \PHPUnit\Framework\TestCase
+{
+    protected $emailValidator;
+    protected $originalServerName;
+
+    public function testIdGeneratorSetRightId()
+    {
+        $idGenerator = new Swift_Mime_IdGenerator('example.net');
+        $this->assertEquals('example.net', $idGenerator->getIdRight());
+
+        $idGenerator->setIdRight('example.com');
+        $this->assertEquals('example.com', $idGenerator->getIdRight());
+    }
+
+    public function testIdGenerateId()
+    {
+        $idGenerator = new Swift_Mime_IdGenerator('example.net');
+        $emailValidator = new EmailValidator();
+
+        $id = $idGenerator->generateId();
+        $this->assertTrue($emailValidator->isValid($id, new RFCValidation()));
+        $this->assertEquals(1, preg_match('/^.{32}@example.net$/', $id));
+
+        $anotherId = $idGenerator->generateId();
+        $this->assertNotEquals($id, $anotherId);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/MimePartTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/MimePartTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/MimePartTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/MimePartTest.php	(date 1495187412000)
@@ -0,0 +1,234 @@
+<?php
+
+
+class Swift_Mime_MimePartTest extends Swift_Mime_AbstractMimeEntityTest
+{
+    public function testNestingLevelIsSubpart()
+    {
+        $part = $this->createMimePart($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals(
+            Swift_Mime_SimpleMimeEntity::LEVEL_ALTERNATIVE, $part->getNestingLevel()
+            );
+    }
+
+    public function testCharsetIsReturnedFromHeader()
+    {
+        /* -- RFC 2046, 4.1.2.
+        A critical parameter that may be specified in the Content-Type field
+        for "text/plain" data is the character set.  This is specified with a
+        "charset" parameter, as in:
+
+     Content-type: text/plain; charset=iso-8859-1
+
+        Unlike some other parameter values, the values of the charset
+        parameter are NOT case sensitive.  The default character set, which
+        must be assumed in the absence of a charset parameter, is US-ASCII.
+        */
+
+        $cType = $this->createHeader('Content-Type', 'text/plain',
+            array('charset' => 'iso-8859-1')
+            );
+        $part = $this->createMimePart($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals('iso-8859-1', $part->getCharset());
+    }
+
+    public function testCharsetIsSetInHeader()
+    {
+        $cType = $this->createHeader('Content-Type', 'text/plain',
+            array('charset' => 'iso-8859-1'), false
+            );
+        $cType->shouldReceive('setParameter')->once()->with('charset', 'utf-8');
+
+        $part = $this->createMimePart($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $part->setCharset('utf-8');
+    }
+
+    public function testCharsetIsSetInHeaderIfPassedToSetBody()
+    {
+        $cType = $this->createHeader('Content-Type', 'text/plain',
+            array('charset' => 'iso-8859-1'), false
+            );
+        $cType->shouldReceive('setParameter')->once()->with('charset', 'utf-8');
+
+        $part = $this->createMimePart($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $part->setBody('', 'text/plian', 'utf-8');
+    }
+
+    public function testSettingCharsetNotifiesEncoder()
+    {
+        $encoder = $this->createEncoder('quoted-printable', false);
+        $encoder->expects($this->once())
+                ->method('charsetChanged')
+                ->with('utf-8');
+
+        $part = $this->createMimePart($this->createHeaderSet(),
+            $encoder, $this->createCache()
+            );
+        $part->setCharset('utf-8');
+    }
+
+    public function testSettingCharsetNotifiesHeaders()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('charsetChanged')
+                ->zeroOrMoreTimes()
+                ->with('utf-8');
+
+        $part = $this->createMimePart($headers, $this->createEncoder(),
+            $this->createCache()
+            );
+        $part->setCharset('utf-8');
+    }
+
+    public function testSettingCharsetNotifiesChildren()
+    {
+        $child = $this->createChild(0, '', false);
+        $child->shouldReceive('charsetChanged')
+              ->once()
+              ->with('windows-874');
+
+        $part = $this->createMimePart($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+        $part->setChildren(array($child));
+        $part->setCharset('windows-874');
+    }
+
+    public function testCharsetChangeUpdatesCharset()
+    {
+        $cType = $this->createHeader('Content-Type', 'text/plain',
+            array('charset' => 'iso-8859-1'), false
+            );
+        $cType->shouldReceive('setParameter')->once()->with('charset', 'utf-8');
+
+        $part = $this->createMimePart($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $part->charsetChanged('utf-8');
+    }
+
+    public function testSettingCharsetClearsCache()
+    {
+        $headers = $this->createHeaderSet(array(), false);
+        $headers->shouldReceive('toString')
+                ->zeroOrMoreTimes()
+                ->andReturn("Content-Type: text/plain; charset=utf-8\r\n");
+
+        $cache = $this->createCache(false);
+
+        $entity = $this->createEntity($headers, $this->createEncoder(),
+            $cache
+            );
+
+        $entity->setBody("blah\r\nblah!");
+        $entity->toString();
+
+        // Initialize the expectation here because we only care about what happens in setCharset()
+        $cache->shouldReceive('clearKey')
+                ->once()
+                ->with(\Mockery::any(), 'body');
+
+        $entity->setCharset('iso-2022');
+    }
+
+    public function testFormatIsReturnedFromHeader()
+    {
+        /* -- RFC 3676.
+     */
+
+        $cType = $this->createHeader('Content-Type', 'text/plain',
+            array('format' => 'flowed')
+            );
+        $part = $this->createMimePart($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertEquals('flowed', $part->getFormat());
+    }
+
+    public function testFormatIsSetInHeader()
+    {
+        $cType = $this->createHeader('Content-Type', 'text/plain', array(), false);
+        $cType->shouldReceive('setParameter')->once()->with('format', 'fixed');
+
+        $part = $this->createMimePart($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $part->setFormat('fixed');
+    }
+
+    public function testDelSpIsReturnedFromHeader()
+    {
+        /* -- RFC 3676.
+     */
+
+        $cType = $this->createHeader('Content-Type', 'text/plain',
+            array('delsp' => 'no')
+            );
+        $part = $this->createMimePart($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $this->assertFalse($part->getDelSp());
+    }
+
+    public function testDelSpIsSetInHeader()
+    {
+        $cType = $this->createHeader('Content-Type', 'text/plain', array(), false);
+        $cType->shouldReceive('setParameter')->once()->with('delsp', 'yes');
+
+        $part = $this->createMimePart($this->createHeaderSet(array(
+            'Content-Type' => $cType, )),
+            $this->createEncoder(), $this->createCache()
+            );
+        $part->setDelSp(true);
+    }
+
+    public function testFluidInterface()
+    {
+        $part = $this->createMimePart($this->createHeaderSet(),
+            $this->createEncoder(), $this->createCache()
+            );
+
+        $this->assertSame($part,
+            $part
+            ->setContentType('text/plain')
+            ->setEncoder($this->createEncoder())
+            ->setId('foo@bar')
+            ->setDescription('my description')
+            ->setMaxLineLength(998)
+            ->setBody('xx')
+            ->setBoundary('xyz')
+            ->setChildren(array())
+            ->setCharset('utf-8')
+            ->setFormat('flowed')
+            ->setDelSp(true)
+            );
+    }
+
+    //abstract
+    protected function createEntity($headers, $encoder, $cache)
+    {
+        return $this->createMimePart($headers, $encoder, $cache);
+    }
+
+    protected function createMimePart($headers, $encoder, $cache)
+    {
+        $idGenerator = new Swift_Mime_IdGenerator('example.com');
+
+        return new Swift_Mime_MimePart($headers, $encoder, $cache, $idGenerator);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderFactoryTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderFactoryTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderFactoryTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/SimpleHeaderFactoryTest.php	(date 1495187412000)
@@ -0,0 +1,169 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Mime_SimpleHeaderFactoryTest extends \PHPUnit\Framework\TestCase
+{
+    private $factory;
+
+    protected function setUp()
+    {
+        $this->factory = $this->createFactory();
+    }
+
+    public function testMailboxHeaderIsCorrectType()
+    {
+        $header = $this->factory->createMailboxHeader('X-Foo');
+        $this->assertInstanceOf('Swift_Mime_Headers_MailboxHeader', $header);
+    }
+
+    public function testMailboxHeaderHasCorrectName()
+    {
+        $header = $this->factory->createMailboxHeader('X-Foo');
+        $this->assertEquals('X-Foo', $header->getFieldName());
+    }
+
+    public function testMailboxHeaderHasCorrectModel()
+    {
+        $header = $this->factory->createMailboxHeader('X-Foo',
+            array('foo@bar' => 'FooBar')
+            );
+        $this->assertEquals(array('foo@bar' => 'FooBar'), $header->getFieldBodyModel());
+    }
+
+    public function testDateHeaderHasCorrectType()
+    {
+        $header = $this->factory->createDateHeader('X-Date');
+        $this->assertInstanceOf('Swift_Mime_Headers_DateHeader', $header);
+    }
+
+    public function testDateHeaderHasCorrectName()
+    {
+        $header = $this->factory->createDateHeader('X-Date');
+        $this->assertEquals('X-Date', $header->getFieldName());
+    }
+
+    public function testDateHeaderHasCorrectModel()
+    {
+        $dateTime = new \DateTimeImmutable();
+        $header = $this->factory->createDateHeader('X-Date', $dateTime);
+        $this->assertEquals($dateTime, $header->getFieldBodyModel());
+    }
+
+    public function testTextHeaderHasCorrectType()
+    {
+        $header = $this->factory->createTextHeader('X-Foo');
+        $this->assertInstanceOf('Swift_Mime_Headers_UnstructuredHeader', $header);
+    }
+
+    public function testTextHeaderHasCorrectName()
+    {
+        $header = $this->factory->createTextHeader('X-Foo');
+        $this->assertEquals('X-Foo', $header->getFieldName());
+    }
+
+    public function testTextHeaderHasCorrectModel()
+    {
+        $header = $this->factory->createTextHeader('X-Foo', 'bar');
+        $this->assertEquals('bar', $header->getFieldBodyModel());
+    }
+
+    public function testParameterizedHeaderHasCorrectType()
+    {
+        $header = $this->factory->createParameterizedHeader('X-Foo');
+        $this->assertInstanceOf('Swift_Mime_Headers_ParameterizedHeader', $header);
+    }
+
+    public function testParameterizedHeaderHasCorrectName()
+    {
+        $header = $this->factory->createParameterizedHeader('X-Foo');
+        $this->assertEquals('X-Foo', $header->getFieldName());
+    }
+
+    public function testParameterizedHeaderHasCorrectModel()
+    {
+        $header = $this->factory->createParameterizedHeader('X-Foo', 'bar');
+        $this->assertEquals('bar', $header->getFieldBodyModel());
+    }
+
+    public function testParameterizedHeaderHasCorrectParams()
+    {
+        $header = $this->factory->createParameterizedHeader('X-Foo', 'bar',
+            array('zip' => 'button')
+            );
+        $this->assertEquals(array('zip' => 'button'), $header->getParameters());
+    }
+
+    public function testIdHeaderHasCorrectType()
+    {
+        $header = $this->factory->createIdHeader('X-ID');
+        $this->assertInstanceOf('Swift_Mime_Headers_IdentificationHeader', $header);
+    }
+
+    public function testIdHeaderHasCorrectName()
+    {
+        $header = $this->factory->createIdHeader('X-ID');
+        $this->assertEquals('X-ID', $header->getFieldName());
+    }
+
+    public function testIdHeaderHasCorrectModel()
+    {
+        $header = $this->factory->createIdHeader('X-ID', 'xyz@abc');
+        $this->assertEquals(array('xyz@abc'), $header->getFieldBodyModel());
+    }
+
+    public function testPathHeaderHasCorrectType()
+    {
+        $header = $this->factory->createPathHeader('X-Path');
+        $this->assertInstanceOf('Swift_Mime_Headers_PathHeader', $header);
+    }
+
+    public function testPathHeaderHasCorrectName()
+    {
+        $header = $this->factory->createPathHeader('X-Path');
+        $this->assertEquals('X-Path', $header->getFieldName());
+    }
+
+    public function testPathHeaderHasCorrectModel()
+    {
+        $header = $this->factory->createPathHeader('X-Path', 'foo@bar');
+        $this->assertEquals('foo@bar', $header->getFieldBodyModel());
+    }
+
+    public function testCharsetChangeNotificationNotifiesEncoders()
+    {
+        $encoder = $this->createHeaderEncoder();
+        $encoder->expects($this->once())
+                ->method('charsetChanged')
+                ->with('utf-8');
+        $paramEncoder = $this->createParamEncoder();
+        $paramEncoder->expects($this->once())
+                     ->method('charsetChanged')
+                     ->with('utf-8');
+
+        $factory = $this->createFactory($encoder, $paramEncoder);
+
+        $factory->charsetChanged('utf-8');
+    }
+
+    private function createFactory($encoder = null, $paramEncoder = null)
+    {
+        return new Swift_Mime_SimpleHeaderFactory(
+            $encoder
+                ? $encoder : $this->createHeaderEncoder(),
+            $paramEncoder
+                ? $paramEncoder : $this->createParamEncoder(),
+            new EmailValidator()
+            );
+    }
+
+    private function createHeaderEncoder()
+    {
+        return $this->getMockBuilder('Swift_Mime_HeaderEncoder')->getMock();
+    }
+
+    private function createParamEncoder()
+    {
+        return $this->getMockBuilder('Swift_Encoder')->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/TransportChangeEventTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/TransportChangeEventTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/TransportChangeEventTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/TransportChangeEventTest.php	(date 1495187412000)
@@ -0,0 +1,30 @@
+<?php
+
+class Swift_Events_TransportChangeEventTest extends \PHPUnit\Framework\TestCase
+{
+    public function testGetTransportReturnsTransport()
+    {
+        $transport = $this->createTransport();
+        $evt = $this->createEvent($transport);
+        $ref = $evt->getTransport();
+        $this->assertEquals($transport, $ref);
+    }
+
+    public function testSourceIsTransport()
+    {
+        $transport = $this->createTransport();
+        $evt = $this->createEvent($transport);
+        $ref = $evt->getSource();
+        $this->assertEquals($transport, $ref);
+    }
+
+    private function createEvent(Swift_Transport $source)
+    {
+        return new Swift_Events_TransportChangeEvent($source);
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockBuilder('Swift_Transport')->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/TransportExceptionEventTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/TransportExceptionEventTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/TransportExceptionEventTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/TransportExceptionEventTest.php	(date 1495187412000)
@@ -0,0 +1,41 @@
+<?php
+
+class Swift_Events_TransportExceptionEventTest extends \PHPUnit\Framework\TestCase
+{
+    public function testExceptionCanBeFetchViaGetter()
+    {
+        $ex = $this->createException();
+        $transport = $this->createTransport();
+        $evt = $this->createEvent($transport, $ex);
+        $ref = $evt->getException();
+        $this->assertEquals($ex, $ref,
+            '%s: Exception should be available via getException()'
+            );
+    }
+
+    public function testSourceIsTransport()
+    {
+        $ex = $this->createException();
+        $transport = $this->createTransport();
+        $evt = $this->createEvent($transport, $ex);
+        $ref = $evt->getSource();
+        $this->assertEquals($transport, $ref,
+            '%s: Transport should be available via getSource()'
+            );
+    }
+
+    private function createEvent(Swift_Transport $transport, Swift_TransportException $ex)
+    {
+        return new Swift_Events_TransportExceptionEvent($transport, $ex);
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockBuilder('Swift_Transport')->getMock();
+    }
+
+    private function createException()
+    {
+        return new Swift_TransportException('');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mailer/ArrayRecipientIteratorTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mailer/ArrayRecipientIteratorTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mailer/ArrayRecipientIteratorTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mailer/ArrayRecipientIteratorTest.php	(date 1495187412000)
@@ -0,0 +1,42 @@
+<?php
+
+class Swift_Mailer_ArrayRecipientIteratorTest extends \PHPUnit\Framework\TestCase
+{
+    public function testHasNextReturnsFalseForEmptyArray()
+    {
+        $it = new Swift_Mailer_ArrayRecipientIterator(array());
+        $this->assertFalse($it->hasNext());
+    }
+
+    public function testHasNextReturnsTrueIfItemsLeft()
+    {
+        $it = new Swift_Mailer_ArrayRecipientIterator(array('foo@bar' => 'Foo'));
+        $this->assertTrue($it->hasNext());
+    }
+
+    public function testReadingToEndOfListCausesHasNextToReturnFalse()
+    {
+        $it = new Swift_Mailer_ArrayRecipientIterator(array('foo@bar' => 'Foo'));
+        $this->assertTrue($it->hasNext());
+        $it->nextRecipient();
+        $this->assertFalse($it->hasNext());
+    }
+
+    public function testReturnedValueHasPreservedKeyValuePair()
+    {
+        $it = new Swift_Mailer_ArrayRecipientIterator(array('foo@bar' => 'Foo'));
+        $this->assertEquals(array('foo@bar' => 'Foo'), $it->nextRecipient());
+    }
+
+    public function testIteratorMovesNextAfterEachIteration()
+    {
+        $it = new Swift_Mailer_ArrayRecipientIterator(array(
+            'foo@bar' => 'Foo',
+            'zip@button' => 'Zip thing',
+            'test@test' => null,
+            ));
+        $this->assertEquals(array('foo@bar' => 'Foo'), $it->nextRecipient());
+        $this->assertEquals(array('zip@button' => 'Zip thing'), $it->nextRecipient());
+        $this->assertEquals(array('test@test' => null), $it->nextRecipient());
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Base64EncoderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Base64EncoderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Base64EncoderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Base64EncoderTest.php	(date 1495187412000)
@@ -0,0 +1,173 @@
+<?php
+
+class Swift_Encoder_Base64EncoderTest extends \PHPUnit\Framework\TestCase
+{
+    private $encoder;
+
+    protected function setUp()
+    {
+        $this->encoder = new Swift_Encoder_Base64Encoder();
+    }
+
+    /*
+    There's really no point in testing the entire base64 encoding to the
+    level QP encoding has been tested.  base64_encode() has been in PHP for
+    years.
+    */
+
+    public function testInputOutputRatioIs3to4Bytes()
+    {
+        /*
+        RFC 2045, 6.8
+
+         The encoding process represents 24-bit groups of input bits as output
+         strings of 4 encoded characters.  Proceeding from left to right, a
+         24-bit input group is formed by concatenating 3 8bit input groups.
+         These 24 bits are then treated as 4 concatenated 6-bit groups, each
+         of which is translated into a single digit in the base64 alphabet.
+         */
+
+        $this->assertEquals(
+            'MTIz', $this->encoder->encodeString('123'),
+            '%s: 3 bytes of input should yield 4 bytes of output'
+            );
+        $this->assertEquals(
+            'MTIzNDU2', $this->encoder->encodeString('123456'),
+            '%s: 6 bytes in input should yield 8 bytes of output'
+            );
+        $this->assertEquals(
+            'MTIzNDU2Nzg5', $this->encoder->encodeString('123456789'),
+            '%s: 9 bytes in input should yield 12 bytes of output'
+            );
+    }
+
+    public function testPadLength()
+    {
+        /*
+        RFC 2045, 6.8
+
+       Special processing is performed if fewer than 24 bits are available
+       at the end of the data being encoded.  A full encoding quantum is
+       always completed at the end of a body.  When fewer than 24 input bits
+       are available in an input group, zero bits are added (on the right)
+       to form an integral number of 6-bit groups.  Padding at the end of
+       the data is performed using the "=" character.  Since all base64
+       input is an integral number of octets, only the following cases can
+       arise: (1) the final quantum of encoding input is an integral
+       multiple of 24 bits; here, the final unit of encoded output will be
+       an integral multiple of 4 characters with no "=" padding, (2) the
+       final quantum of encoding input is exactly 8 bits; here, the final
+       unit of encoded output will be two characters followed by two "="
+       padding characters, or (3) the final quantum of encoding input is
+       exactly 16 bits; here, the final unit of encoded output will be three
+       characters followed by one "=" padding character.
+       */
+
+        for ($i = 0; $i < 30; ++$i) {
+            $input = pack('C', rand(0, 255));
+            $this->assertRegExp(
+                '~^[a-zA-Z0-9/\+]{2}==$~', $this->encoder->encodeString($input),
+                '%s: A single byte should have 2 bytes of padding'
+                );
+        }
+
+        for ($i = 0; $i < 30; ++$i) {
+            $input = pack('C*', rand(0, 255), rand(0, 255));
+            $this->assertRegExp(
+                '~^[a-zA-Z0-9/\+]{3}=$~', $this->encoder->encodeString($input),
+                '%s: Two bytes should have 1 byte of padding'
+                );
+        }
+
+        for ($i = 0; $i < 30; ++$i) {
+            $input = pack('C*', rand(0, 255), rand(0, 255), rand(0, 255));
+            $this->assertRegExp(
+                '~^[a-zA-Z0-9/\+]{4}$~', $this->encoder->encodeString($input),
+                '%s: Three bytes should have no padding'
+                );
+        }
+    }
+
+    public function testMaximumLineLengthIs76Characters()
+    {
+        /*
+         The encoded output stream must be represented in lines of no more
+         than 76 characters each.  All line breaks or other characters not
+         found in Table 1 must be ignored by decoding software.
+         */
+
+        $input =
+        'abcdefghijklmnopqrstuvwxyz'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
+        '1234567890'.
+        'abcdefghijklmnopqrstuvwxyz'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
+        '1234567890'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
+
+        $output =
+        'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQk'.//38
+        'NERUZHSElKS0xNTk9QUVJTVFVWV1hZWjEyMzQ1'."\r\n".//76 *
+        'Njc4OTBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3'.//38
+        'h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFla'."\r\n".//76 *
+        'MTIzNDU2Nzg5MEFCQ0RFRkdISUpLTE1OT1BRUl'.//38
+        'NUVVZXWFla';                                       //48
+
+        $this->assertEquals(
+            $output, $this->encoder->encodeString($input),
+            '%s: Lines should be no more than 76 characters'
+            );
+    }
+
+    public function testMaximumLineLengthCanBeSpecified()
+    {
+        $input =
+        'abcdefghijklmnopqrstuvwxyz'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
+        '1234567890'.
+        'abcdefghijklmnopqrstuvwxyz'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
+        '1234567890'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
+
+        $output =
+        'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQk'.//38
+        'NERUZHSElKS0'."\r\n".//50 *
+        'xNTk9QUVJTVFVWV1hZWjEyMzQ1Njc4OTBhYmNk'.//38
+        'ZWZnaGlqa2xt'."\r\n".//50 *
+        'bm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1'.//38
+        'BRUlNUVVZXWF'."\r\n".//50 *
+        'laMTIzNDU2Nzg5MEFCQ0RFRkdISUpLTE1OT1BR'.//38
+        'UlNUVVZXWFla';                                     //50 *
+
+        $this->assertEquals(
+            $output, $this->encoder->encodeString($input, 0, 50),
+            '%s: Lines should be no more than 100 characters'
+            );
+    }
+
+    public function testFirstLineLengthCanBeDifferent()
+    {
+        $input =
+        'abcdefghijklmnopqrstuvwxyz'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
+        '1234567890'.
+        'abcdefghijklmnopqrstuvwxyz'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
+        '1234567890'.
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
+
+        $output =
+        'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQk'.//38
+        'NERUZHSElKS0xNTk9QU'."\r\n".//57 *
+        'VJTVFVWV1hZWjEyMzQ1Njc4OTBhYmNkZWZnaGl'.//38
+        'qa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLT'."\r\n".//76 *
+        'E1OT1BRUlNUVVZXWFlaMTIzNDU2Nzg5MEFCQ0R'.//38
+        'FRkdISUpLTE1OT1BRUlNUVVZXWFla';                    //67
+
+        $this->assertEquals(
+            $output, $this->encoder->encodeString($input, 19),
+            '%s: First line offset is 19 so first line should be 57 chars long'
+            );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/EventObjectTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/EventObjectTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/EventObjectTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/EventObjectTest.php	(date 1495187412000)
@@ -0,0 +1,32 @@
+<?php
+
+class Swift_Events_EventObjectTest extends \PHPUnit\Framework\TestCase
+{
+    public function testEventSourceCanBeReturnedViaGetter()
+    {
+        $source = new stdClass();
+        $evt = $this->createEvent($source);
+        $ref = $evt->getSource();
+        $this->assertEquals($source, $ref);
+    }
+
+    public function testEventDoesNotHaveCancelledBubbleWhenNew()
+    {
+        $source = new stdClass();
+        $evt = $this->createEvent($source);
+        $this->assertFalse($evt->bubbleCancelled());
+    }
+
+    public function testBubbleCanBeCancelledInEvent()
+    {
+        $source = new stdClass();
+        $evt = $this->createEvent($source);
+        $evt->cancelBubble();
+        $this->assertTrue($evt->bubbleCancelled());
+    }
+
+    private function createEvent($source)
+    {
+        return new Swift_Events_EventObject($source);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/ResponseEventTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/ResponseEventTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/ResponseEventTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/ResponseEventTest.php	(date 1495187412000)
@@ -0,0 +1,38 @@
+<?php
+
+class Swift_Events_ResponseEventTest extends \PHPUnit\Framework\TestCase
+{
+    public function testResponseCanBeFetchViaGetter()
+    {
+        $evt = $this->createEvent($this->createTransport(), "250 Ok\r\n", true);
+        $this->assertEquals("250 Ok\r\n", $evt->getResponse(),
+            '%s: Response should be available via getResponse()'
+            );
+    }
+
+    public function testResultCanBeFetchedViaGetter()
+    {
+        $evt = $this->createEvent($this->createTransport(), "250 Ok\r\n", false);
+        $this->assertFalse($evt->isValid(),
+            '%s: Result should be checkable via isValid()'
+            );
+    }
+
+    public function testSourceIsBuffer()
+    {
+        $transport = $this->createTransport();
+        $evt = $this->createEvent($transport, "250 Ok\r\n", true);
+        $ref = $evt->getSource();
+        $this->assertEquals($transport, $ref);
+    }
+
+    private function createEvent(Swift_Transport $source, $response, $result)
+    {
+        return new Swift_Events_ResponseEvent($source, $response, $result);
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockBuilder('Swift_Transport')->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/SendEventTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/SendEventTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/SendEventTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/SendEventTest.php	(date 1495187412000)
@@ -0,0 +1,96 @@
+<?php
+
+class Swift_Events_SendEventTest extends \PHPUnit\Framework\TestCase
+{
+    public function testMessageCanBeFetchedViaGetter()
+    {
+        $message = $this->createMessage();
+        $transport = $this->createTransport();
+
+        $evt = $this->createEvent($transport, $message);
+
+        $ref = $evt->getMessage();
+        $this->assertEquals($message, $ref,
+            '%s: Message should be returned from getMessage()'
+            );
+    }
+
+    public function testTransportCanBeFetchViaGetter()
+    {
+        $message = $this->createMessage();
+        $transport = $this->createTransport();
+
+        $evt = $this->createEvent($transport, $message);
+
+        $ref = $evt->getTransport();
+        $this->assertEquals($transport, $ref,
+            '%s: Transport should be returned from getTransport()'
+            );
+    }
+
+    public function testTransportCanBeFetchViaGetSource()
+    {
+        $message = $this->createMessage();
+        $transport = $this->createTransport();
+
+        $evt = $this->createEvent($transport, $message);
+
+        $ref = $evt->getSource();
+        $this->assertEquals($transport, $ref,
+            '%s: Transport should be returned from getSource()'
+            );
+    }
+
+    public function testResultCanBeSetAndGet()
+    {
+        $message = $this->createMessage();
+        $transport = $this->createTransport();
+
+        $evt = $this->createEvent($transport, $message);
+
+        $evt->setResult(
+            Swift_Events_SendEvent::RESULT_SUCCESS | Swift_Events_SendEvent::RESULT_TENTATIVE
+            );
+
+        $this->assertTrue((bool) ($evt->getResult() & Swift_Events_SendEvent::RESULT_SUCCESS));
+        $this->assertTrue((bool) ($evt->getResult() & Swift_Events_SendEvent::RESULT_TENTATIVE));
+    }
+
+    public function testFailedRecipientsCanBeSetAndGet()
+    {
+        $message = $this->createMessage();
+        $transport = $this->createTransport();
+
+        $evt = $this->createEvent($transport, $message);
+
+        $evt->setFailedRecipients(array('foo@bar', 'zip@button'));
+
+        $this->assertEquals(array('foo@bar', 'zip@button'), $evt->getFailedRecipients(),
+            '%s: FailedRecipients should be returned from getter'
+            );
+    }
+
+    public function testFailedRecipientsGetsPickedUpCorrectly()
+    {
+        $message = $this->createMessage();
+        $transport = $this->createTransport();
+
+        $evt = $this->createEvent($transport, $message);
+        $this->assertEquals(array(), $evt->getFailedRecipients());
+    }
+
+    private function createEvent(Swift_Transport $source, Swift_Mime_SimpleMessage $message)
+    {
+        return new Swift_Events_SendEvent($source, $message);
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockBuilder('Swift_Transport')->getMock();
+    }
+
+    private function createMessage()
+    {
+        return $this->getMockBuilder('Swift_Mime_SimpleMessage')->disableOriginalConstructor()->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/SimpleEventDispatcherTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/SimpleEventDispatcherTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/SimpleEventDispatcherTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Events/SimpleEventDispatcherTest.php	(date 1495187412000)
@@ -0,0 +1,142 @@
+<?php
+
+class Swift_Events_SimpleEventDispatcherTest extends \PHPUnit\Framework\TestCase
+{
+    private $dispatcher;
+
+    protected function setUp()
+    {
+        $this->dispatcher = new Swift_Events_SimpleEventDispatcher();
+    }
+
+    public function testSendEventCanBeCreated()
+    {
+        $transport = $this->getMockBuilder('Swift_Transport')->getMock();
+        $message = $this->getMockBuilder('Swift_Mime_SimpleMessage')->disableOriginalConstructor()->getMock();
+        $evt = $this->dispatcher->createSendEvent($transport, $message);
+        $this->assertInstanceOf('Swift_Events_SendEvent', $evt);
+        $this->assertSame($message, $evt->getMessage());
+        $this->assertSame($transport, $evt->getTransport());
+    }
+
+    public function testCommandEventCanBeCreated()
+    {
+        $buf = $this->getMockBuilder('Swift_Transport')->getMock();
+        $evt = $this->dispatcher->createCommandEvent($buf, "FOO\r\n", array(250));
+        $this->assertInstanceOf('Swift_Events_CommandEvent', $evt);
+        $this->assertSame($buf, $evt->getSource());
+        $this->assertEquals("FOO\r\n", $evt->getCommand());
+        $this->assertEquals(array(250), $evt->getSuccessCodes());
+    }
+
+    public function testResponseEventCanBeCreated()
+    {
+        $buf = $this->getMockBuilder('Swift_Transport')->getMock();
+        $evt = $this->dispatcher->createResponseEvent($buf, "250 Ok\r\n", true);
+        $this->assertInstanceOf('Swift_Events_ResponseEvent', $evt);
+        $this->assertSame($buf, $evt->getSource());
+        $this->assertEquals("250 Ok\r\n", $evt->getResponse());
+        $this->assertTrue($evt->isValid());
+    }
+
+    public function testTransportChangeEventCanBeCreated()
+    {
+        $transport = $this->getMockBuilder('Swift_Transport')->getMock();
+        $evt = $this->dispatcher->createTransportChangeEvent($transport);
+        $this->assertInstanceOf('Swift_Events_TransportChangeEvent', $evt);
+        $this->assertSame($transport, $evt->getSource());
+    }
+
+    public function testTransportExceptionEventCanBeCreated()
+    {
+        $transport = $this->getMockBuilder('Swift_Transport')->getMock();
+        $ex = new Swift_TransportException('');
+        $evt = $this->dispatcher->createTransportExceptionEvent($transport, $ex);
+        $this->assertInstanceOf('Swift_Events_TransportExceptionEvent', $evt);
+        $this->assertSame($transport, $evt->getSource());
+        $this->assertSame($ex, $evt->getException());
+    }
+
+    public function testListenersAreNotifiedOfDispatchedEvent()
+    {
+        $transport = $this->getMockBuilder('Swift_Transport')->getMock();
+
+        $evt = $this->dispatcher->createTransportChangeEvent($transport);
+
+        $listenerA = $this->getMockBuilder('Swift_Events_TransportChangeListener')->getMock();
+        $listenerB = $this->getMockBuilder('Swift_Events_TransportChangeListener')->getMock();
+
+        $this->dispatcher->bindEventListener($listenerA);
+        $this->dispatcher->bindEventListener($listenerB);
+
+        $listenerA->expects($this->once())
+                  ->method('transportStarted')
+                  ->with($evt);
+        $listenerB->expects($this->once())
+                  ->method('transportStarted')
+                  ->with($evt);
+
+        $this->dispatcher->dispatchEvent($evt, 'transportStarted');
+    }
+
+    public function testListenersAreOnlyCalledIfImplementingCorrectInterface()
+    {
+        $transport = $this->getMockBuilder('Swift_Transport')->getMock();
+        $message = $this->getMockBuilder('Swift_Mime_SimpleMessage')->disableOriginalConstructor()->getMock();
+
+        $evt = $this->dispatcher->createSendEvent($transport, $message);
+
+        $targetListener = $this->getMockBuilder('Swift_Events_SendListener')->getMock();
+        $otherListener = $this->getMockBuilder('DummyListener')->getMock();
+
+        $this->dispatcher->bindEventListener($targetListener);
+        $this->dispatcher->bindEventListener($otherListener);
+
+        $targetListener->expects($this->once())
+                       ->method('sendPerformed')
+                       ->with($evt);
+        $otherListener->expects($this->never())
+                    ->method('sendPerformed');
+
+        $this->dispatcher->dispatchEvent($evt, 'sendPerformed');
+    }
+
+    public function testListenersCanCancelBubblingOfEvent()
+    {
+        $transport = $this->getMockBuilder('Swift_Transport')->getMock();
+        $message = $this->getMockBuilder('Swift_Mime_SimpleMessage')->disableOriginalConstructor()->getMock();
+
+        $evt = $this->dispatcher->createSendEvent($transport, $message);
+
+        $listenerA = $this->getMockBuilder('Swift_Events_SendListener')->getMock();
+        $listenerB = $this->getMockBuilder('Swift_Events_SendListener')->getMock();
+
+        $this->dispatcher->bindEventListener($listenerA);
+        $this->dispatcher->bindEventListener($listenerB);
+
+        $listenerA->expects($this->once())
+                  ->method('sendPerformed')
+                  ->with($evt)
+                  ->will($this->returnCallback(function ($object) {
+                      $object->cancelBubble(true);
+                  }));
+        $listenerB->expects($this->never())
+                  ->method('sendPerformed');
+
+        $this->dispatcher->dispatchEvent($evt, 'sendPerformed');
+
+        $this->assertTrue($evt->bubbleCancelled());
+    }
+
+    private function createDispatcher(array $map)
+    {
+        return new Swift_Events_SimpleEventDispatcher($map);
+    }
+}
+
+class DummyListener implements Swift_Events_EventListener
+{
+    public function sendPerformed(Swift_Events_SendEvent $evt)
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/DecoratorPluginTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/DecoratorPluginTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/DecoratorPluginTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/DecoratorPluginTest.php	(date 1495187412000)
@@ -0,0 +1,267 @@
+<?php
+
+class Swift_Plugins_DecoratorPluginTest extends \SwiftMailerTestCase
+{
+    public function testMessageBodyReceivesReplacements()
+    {
+        $message = $this->createMessage(
+            $this->createHeaders(),
+            array('zip@button.tld' => 'Zipathon'),
+            array('chris.corbyn@swiftmailer.org' => 'Chris'),
+            'Subject',
+            'Hello {name}, you are customer #{id}'
+            );
+        $message->shouldReceive('setBody')
+                ->once()
+                ->with('Hello Zip, you are customer #456');
+        $message->shouldReceive('setBody')
+                ->zeroOrMoreTimes();
+
+        $plugin = $this->createPlugin(
+            array('zip@button.tld' => array('{name}' => 'Zip', '{id}' => '456'))
+            );
+
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+        $plugin->sendPerformed($evt);
+    }
+
+    public function testReplacementsCanBeAppliedToSameMessageMultipleTimes()
+    {
+        $message = $this->createMessage(
+            $this->createHeaders(),
+            array('zip@button.tld' => 'Zipathon', 'foo@bar.tld' => 'Foo'),
+            array('chris.corbyn@swiftmailer.org' => 'Chris'),
+            'Subject',
+            'Hello {name}, you are customer #{id}'
+            );
+        $message->shouldReceive('setBody')
+                ->once()
+                ->with('Hello Zip, you are customer #456');
+        $message->shouldReceive('setBody')
+                ->once()
+                ->with('Hello {name}, you are customer #{id}');
+        $message->shouldReceive('setBody')
+                ->once()
+                ->with('Hello Foo, you are customer #123');
+        $message->shouldReceive('setBody')
+                ->zeroOrMoreTimes();
+
+        $plugin = $this->createPlugin(
+            array(
+                'foo@bar.tld' => array('{name}' => 'Foo', '{id}' => '123'),
+                'zip@button.tld' => array('{name}' => 'Zip', '{id}' => '456'),
+                )
+            );
+
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+        $plugin->sendPerformed($evt);
+        $plugin->beforeSendPerformed($evt);
+        $plugin->sendPerformed($evt);
+    }
+
+    public function testReplacementsCanBeMadeInHeaders()
+    {
+        $headers = $this->createHeaders(array(
+            $returnPathHeader = $this->createHeader('Return-Path', 'foo-{id}@swiftmailer.org'),
+            $toHeader = $this->createHeader('Subject', 'A message for {name}!'),
+        ));
+
+        $message = $this->createMessage(
+            $headers,
+            array('zip@button.tld' => 'Zipathon'),
+            array('chris.corbyn@swiftmailer.org' => 'Chris'),
+            'A message for {name}!',
+            'Hello {name}, you are customer #{id}'
+            );
+
+        $message->shouldReceive('setBody')
+                ->once()
+                ->with('Hello Zip, you are customer #456');
+        $toHeader->shouldReceive('setFieldBodyModel')
+                 ->once()
+                 ->with('A message for Zip!');
+        $returnPathHeader->shouldReceive('setFieldBodyModel')
+                         ->once()
+                         ->with('foo-456@swiftmailer.org');
+        $message->shouldReceive('setBody')
+                ->zeroOrMoreTimes();
+        $toHeader->shouldReceive('setFieldBodyModel')
+                 ->zeroOrMoreTimes();
+        $returnPathHeader->shouldReceive('setFieldBodyModel')
+                         ->zeroOrMoreTimes();
+
+        $plugin = $this->createPlugin(
+            array('zip@button.tld' => array('{name}' => 'Zip', '{id}' => '456'))
+            );
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+        $plugin->sendPerformed($evt);
+    }
+
+    public function testReplacementsAreMadeOnSubparts()
+    {
+        $part1 = $this->createPart('text/plain', 'Your name is {name}?', '1@x');
+        $part2 = $this->createPart('text/html', 'Your <em>name</em> is {name}?', '2@x');
+        $message = $this->createMessage(
+            $this->createHeaders(),
+            array('zip@button.tld' => 'Zipathon'),
+            array('chris.corbyn@swiftmailer.org' => 'Chris'),
+            'A message for {name}!',
+            'Subject'
+            );
+        $message->shouldReceive('getChildren')
+                ->zeroOrMoreTimes()
+                ->andReturn(array($part1, $part2));
+        $part1->shouldReceive('setBody')
+              ->once()
+              ->with('Your name is Zip?');
+        $part2->shouldReceive('setBody')
+              ->once()
+              ->with('Your <em>name</em> is Zip?');
+        $part1->shouldReceive('setBody')
+              ->zeroOrMoreTimes();
+        $part2->shouldReceive('setBody')
+              ->zeroOrMoreTimes();
+
+        $plugin = $this->createPlugin(
+            array('zip@button.tld' => array('{name}' => 'Zip', '{id}' => '456'))
+            );
+
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+        $plugin->sendPerformed($evt);
+    }
+
+    public function testReplacementsCanBeTakenFromCustomReplacementsObject()
+    {
+        $message = $this->createMessage(
+            $this->createHeaders(),
+            array('foo@bar' => 'Foobar', 'zip@zap' => 'Zip zap'),
+            array('chris.corbyn@swiftmailer.org' => 'Chris'),
+            'Subject',
+            'Something {a}'
+            );
+
+        $replacements = $this->createReplacements();
+
+        $message->shouldReceive('setBody')
+                ->once()
+                ->with('Something b');
+        $message->shouldReceive('setBody')
+                ->once()
+                ->with('Something c');
+        $message->shouldReceive('setBody')
+                ->zeroOrMoreTimes();
+        $replacements->shouldReceive('getReplacementsFor')
+                     ->once()
+                     ->with('foo@bar')
+                     ->andReturn(array('{a}' => 'b'));
+        $replacements->shouldReceive('getReplacementsFor')
+                     ->once()
+                     ->with('zip@zap')
+                     ->andReturn(array('{a}' => 'c'));
+
+        $plugin = $this->createPlugin($replacements);
+
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+        $plugin->sendPerformed($evt);
+        $plugin->beforeSendPerformed($evt);
+        $plugin->sendPerformed($evt);
+    }
+
+    private function createMessage($headers, $to = array(), $from = null, $subject = null,
+        $body = null)
+    {
+        $message = $this->getMockery('Swift_Mime_SimpleMessage')->shouldIgnoreMissing();
+        foreach ($to as $addr => $name) {
+            $message->shouldReceive('getTo')
+                    ->once()
+                    ->andReturn(array($addr => $name));
+        }
+        $message->shouldReceive('getHeaders')
+                ->zeroOrMoreTimes()
+                ->andReturn($headers);
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn($from);
+        $message->shouldReceive('getSubject')
+                ->zeroOrMoreTimes()
+                ->andReturn($subject);
+        $message->shouldReceive('getBody')
+                ->zeroOrMoreTimes()
+                ->andReturn($body);
+
+        return $message;
+    }
+
+    private function createPlugin($replacements)
+    {
+        return new Swift_Plugins_DecoratorPlugin($replacements);
+    }
+
+    private function createReplacements()
+    {
+        return $this->getMockery('Swift_Plugins_Decorator_Replacements')->shouldIgnoreMissing();
+    }
+
+    private function createSendEvent(Swift_Mime_SimpleMessage $message)
+    {
+        $evt = $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+        $evt->shouldReceive('getMessage')
+            ->zeroOrMoreTimes()
+            ->andReturn($message);
+
+        return $evt;
+    }
+
+    private function createPart($type, $body, $id)
+    {
+        $part = $this->getMockery('Swift_Mime_SimpleMimeEntity')->shouldIgnoreMissing();
+        $part->shouldReceive('getContentType')
+             ->zeroOrMoreTimes()
+             ->andReturn($type);
+        $part->shouldReceive('getBody')
+             ->zeroOrMoreTimes()
+             ->andReturn($body);
+        $part->shouldReceive('getId')
+             ->zeroOrMoreTimes()
+             ->andReturn($id);
+
+        return $part;
+    }
+
+    private function createHeaders($headers = array())
+    {
+        $set = $this->getMockery('Swift_Mime_SimpleHeaderSet')->shouldIgnoreMissing();
+        $set->shouldReceive('getAll')
+            ->zeroOrMoreTimes()
+            ->andReturn($headers);
+
+        foreach ($headers as $header) {
+            $set->set($header);
+        }
+
+        return $set;
+    }
+
+    private function createHeader($name, $body = '')
+    {
+        $header = $this->getMockery('Swift_Mime_Header')->shouldIgnoreMissing();
+        $header->shouldReceive('getFieldName')
+               ->zeroOrMoreTimes()
+               ->andReturn($name);
+        $header->shouldReceive('getFieldBodyModel')
+               ->zeroOrMoreTimes()
+               ->andReturn($body);
+
+        return $header;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/LoggerPluginTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/LoggerPluginTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/LoggerPluginTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/LoggerPluginTest.php	(date 1495187412000)
@@ -0,0 +1,188 @@
+<?php
+
+class Swift_Plugins_LoggerPluginTest extends \SwiftMailerTestCase
+{
+    public function testLoggerDelegatesAddingEntries()
+    {
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('add')
+               ->with('foo');
+
+        $plugin = $this->createPlugin($logger);
+        $plugin->add('foo');
+    }
+
+    public function testLoggerDelegatesDumpingEntries()
+    {
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('dump')
+               ->will($this->returnValue('foobar'));
+
+        $plugin = $this->createPlugin($logger);
+        $this->assertEquals('foobar', $plugin->dump());
+    }
+
+    public function testLoggerDelegatesClearingEntries()
+    {
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('clear');
+
+        $plugin = $this->createPlugin($logger);
+        $plugin->clear();
+    }
+
+    public function testCommandIsSentToLogger()
+    {
+        $evt = $this->createCommandEvent("foo\r\n");
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('add')
+               ->with($this->regExp('~foo\r\n~'));
+
+        $plugin = $this->createPlugin($logger);
+        $plugin->commandSent($evt);
+    }
+
+    public function testResponseIsSentToLogger()
+    {
+        $evt = $this->createResponseEvent("354 Go ahead\r\n");
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('add')
+               ->with($this->regExp('~354 Go ahead\r\n~'));
+
+        $plugin = $this->createPlugin($logger);
+        $plugin->responseReceived($evt);
+    }
+
+    public function testTransportBeforeStartChangeIsSentToLogger()
+    {
+        $evt = $this->createTransportChangeEvent();
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('add')
+               ->with($this->anything());
+
+        $plugin = $this->createPlugin($logger);
+        $plugin->beforeTransportStarted($evt);
+    }
+
+    public function testTransportStartChangeIsSentToLogger()
+    {
+        $evt = $this->createTransportChangeEvent();
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('add')
+               ->with($this->anything());
+
+        $plugin = $this->createPlugin($logger);
+        $plugin->transportStarted($evt);
+    }
+
+    public function testTransportStopChangeIsSentToLogger()
+    {
+        $evt = $this->createTransportChangeEvent();
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('add')
+               ->with($this->anything());
+
+        $plugin = $this->createPlugin($logger);
+        $plugin->transportStopped($evt);
+    }
+
+    public function testTransportBeforeStopChangeIsSentToLogger()
+    {
+        $evt = $this->createTransportChangeEvent();
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('add')
+               ->with($this->anything());
+
+        $plugin = $this->createPlugin($logger);
+        $plugin->beforeTransportStopped($evt);
+    }
+
+    public function testExceptionsArePassedToDelegateAndLeftToBubbleUp()
+    {
+        $transport = $this->createTransport();
+        $evt = $this->createTransportExceptionEvent();
+        $logger = $this->createLogger();
+        $logger->expects($this->once())
+               ->method('add')
+               ->with($this->anything());
+
+        $plugin = $this->createPlugin($logger);
+        try {
+            $plugin->exceptionThrown($evt);
+            $this->fail('Exception should bubble up.');
+        } catch (Swift_TransportException $ex) {
+        }
+    }
+
+    private function createLogger()
+    {
+        return $this->getMockBuilder('Swift_Plugins_Logger')->getMock();
+    }
+
+    private function createPlugin($logger)
+    {
+        return new Swift_Plugins_LoggerPlugin($logger);
+    }
+
+    private function createCommandEvent($command)
+    {
+        $evt = $this->getMockBuilder('Swift_Events_CommandEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getCommand')
+            ->will($this->returnValue($command));
+
+        return $evt;
+    }
+
+    private function createResponseEvent($response)
+    {
+        $evt = $this->getMockBuilder('Swift_Events_ResponseEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getResponse')
+            ->will($this->returnValue($response));
+
+        return $evt;
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockBuilder('Swift_Transport')->getMock();
+    }
+
+    private function createTransportChangeEvent()
+    {
+        $evt = $this->getMockBuilder('Swift_Events_TransportChangeEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getSource')
+            ->will($this->returnValue($this->createTransport()));
+
+        return $evt;
+    }
+
+    public function createTransportExceptionEvent()
+    {
+        $evt = $this->getMockBuilder('Swift_Events_TransportExceptionEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getException')
+            ->will($this->returnValue(new Swift_TransportException('')));
+
+        return $evt;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/PopBeforeSmtpPluginTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/PopBeforeSmtpPluginTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/PopBeforeSmtpPluginTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/PopBeforeSmtpPluginTest.php	(date 1495187412000)
@@ -0,0 +1,101 @@
+<?php
+
+class Swift_Plugins_PopBeforeSmtpPluginTest extends \PHPUnit\Framework\TestCase
+{
+    public function testPluginConnectsToPop3HostBeforeTransportStarts()
+    {
+        $connection = $this->createConnection();
+        $connection->expects($this->once())
+                   ->method('connect');
+
+        $plugin = $this->createPlugin('pop.host.tld', 110);
+        $plugin->setConnection($connection);
+
+        $transport = $this->createTransport();
+        $evt = $this->createTransportChangeEvent($transport);
+
+        $plugin->beforeTransportStarted($evt);
+    }
+
+    public function testPluginDisconnectsFromPop3HostBeforeTransportStarts()
+    {
+        $connection = $this->createConnection();
+        $connection->expects($this->once())
+                   ->method('disconnect');
+
+        $plugin = $this->createPlugin('pop.host.tld', 110);
+        $plugin->setConnection($connection);
+
+        $transport = $this->createTransport();
+        $evt = $this->createTransportChangeEvent($transport);
+
+        $plugin->beforeTransportStarted($evt);
+    }
+
+    public function testPluginDoesNotConnectToSmtpIfBoundToDifferentTransport()
+    {
+        $connection = $this->createConnection();
+        $connection->expects($this->never())
+                   ->method('disconnect');
+        $connection->expects($this->never())
+                   ->method('connect');
+
+        $smtp = $this->createTransport();
+
+        $plugin = $this->createPlugin('pop.host.tld', 110);
+        $plugin->setConnection($connection);
+        $plugin->bindSmtp($smtp);
+
+        $transport = $this->createTransport();
+        $evt = $this->createTransportChangeEvent($transport);
+
+        $plugin->beforeTransportStarted($evt);
+    }
+
+    public function testPluginCanBindToSpecificTransport()
+    {
+        $connection = $this->createConnection();
+        $connection->expects($this->once())
+                   ->method('connect');
+
+        $smtp = $this->createTransport();
+
+        $plugin = $this->createPlugin('pop.host.tld', 110);
+        $plugin->setConnection($connection);
+        $plugin->bindSmtp($smtp);
+
+        $evt = $this->createTransportChangeEvent($smtp);
+
+        $plugin->beforeTransportStarted($evt);
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockBuilder('Swift_Transport')->getMock();
+    }
+
+    private function createTransportChangeEvent($transport)
+    {
+        $evt = $this->getMockBuilder('Swift_Events_TransportChangeEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getSource')
+            ->will($this->returnValue($transport));
+        $evt->expects($this->any())
+            ->method('getTransport')
+            ->will($this->returnValue($transport));
+
+        return $evt;
+    }
+
+    public function createConnection()
+    {
+        return $this->getMockBuilder('Swift_Plugins_Pop_Pop3Connection')->getMock();
+    }
+
+    public function createPlugin($host, $port, $crypto = null)
+    {
+        return new Swift_Plugins_PopBeforeSmtpPlugin($host, $port, $crypto);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/QpEncoderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/QpEncoderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/QpEncoderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/QpEncoderTest.php	(date 1495187412000)
@@ -0,0 +1,400 @@
+<?php
+
+class Swift_Encoder_QpEncoderTest extends \SwiftMailerTestCase
+{
+    /* -- RFC 2045, 6.7 --
+    (1)   (General 8bit representation) Any octet, except a CR or
+                    LF that is part of a CRLF line break of the canonical
+                    (standard) form of the data being encoded, may be
+                    represented by an "=" followed by a two digit
+                    hexadecimal representation of the octet's value.  The
+                    digits of the hexadecimal alphabet, for this purpose,
+                    are "0123456789ABCDEF".  Uppercase letters must be
+                    used; lowercase letters are not allowed.  Thus, for
+                    example, the decimal value 12 (US-ASCII form feed) can
+                    be represented by "=0C", and the decimal value 61 (US-
+                    ASCII EQUAL SIGN) can be represented by "=3D".  This
+                    rule must be followed except when the following rules
+                    allow an alternative encoding.
+                    */
+
+    public function testPermittedCharactersAreNotEncoded()
+    {
+        /* -- RFC 2045, 6.7 --
+        (2)   (Literal representation) Octets with decimal values of
+                    33 through 60 inclusive, and 62 through 126, inclusive,
+                    MAY be represented as the US-ASCII characters which
+                    correspond to those octets (EXCLAMATION POINT through
+                    LESS THAN, and GREATER THAN through TILDE,
+                    respectively).
+                    */
+
+        foreach (array_merge(range(33, 60), range(62, 126)) as $ordinal) {
+            $char = chr($ordinal);
+
+            $charStream = $this->createCharStream();
+            $charStream->shouldReceive('flushContents')
+                       ->once();
+            $charStream->shouldReceive('importString')
+                       ->once()
+                       ->with($char);
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array($ordinal));
+            $charStream->shouldReceive('readBytes')
+                       ->atLeast()->times(1)
+                       ->andReturn(false);
+
+            $encoder = new Swift_Encoder_QpEncoder($charStream);
+
+            $this->assertIdenticalBinary($char, $encoder->encodeString($char));
+        }
+    }
+
+    public function testWhiteSpaceAtLineEndingIsEncoded()
+    {
+        /* -- RFC 2045, 6.7 --
+        (3)   (White Space) Octets with values of 9 and 32 MAY be
+                    represented as US-ASCII TAB (HT) and SPACE characters,
+                    respectively, but MUST NOT be so represented at the end
+                    of an encoded line.  Any TAB (HT) or SPACE characters
+                    on an encoded line MUST thus be followed on that line
+                    by a printable character.  In particular, an "=" at the
+                    end of an encoded line, indicating a soft line break
+                    (see rule #5) may follow one or more TAB (HT) or SPACE
+                    characters.  It follows that an octet with decimal
+                    value 9 or 32 appearing at the end of an encoded line
+                    must be represented according to Rule #1.  This rule is
+                    necessary because some MTAs (Message Transport Agents,
+                    programs which transport messages from one user to
+                    another, or perform a portion of such transfers) are
+                    known to pad lines of text with SPACEs, and others are
+                    known to remove "white space" characters from the end
+                    of a line.  Therefore, when decoding a Quoted-Printable
+                    body, any trailing white space on a line must be
+                    deleted, as it will necessarily have been added by
+                    intermediate transport agents.
+                    */
+
+        $HT = chr(0x09); //9
+        $SPACE = chr(0x20); //32
+
+        //HT
+        $string = 'a'.$HT.$HT."\r\n".'b';
+
+        $charStream = $this->createCharStream();
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($string);
+
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(ord('a')));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x09));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x09));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(ord('b')));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(false);
+
+        $encoder = new Swift_Encoder_QpEncoder($charStream);
+        $this->assertEquals(
+            'a'.$HT.'=09'."\r\n".'b',
+            $encoder->encodeString($string)
+            );
+
+        //SPACE
+        $string = 'a'.$SPACE.$SPACE."\r\n".'b';
+
+        $charStream = $this->createCharStream();
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($string);
+
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(ord('a')));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x20));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x20));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(ord('b')));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(false);
+
+        $encoder = new Swift_Encoder_QpEncoder($charStream);
+        $this->assertEquals(
+            'a'.$SPACE.'=20'."\r\n".'b',
+            $encoder->encodeString($string)
+            );
+    }
+
+    public function testCRLFIsLeftAlone()
+    {
+        /*
+        (4)   (Line Breaks) A line break in a text body, represented
+                    as a CRLF sequence in the text canonical form, must be
+                    represented by a (RFC 822) line break, which is also a
+                    CRLF sequence, in the Quoted-Printable encoding.  Since
+                    the canonical representation of media types other than
+                    text do not generally include the representation of
+                    line breaks as CRLF sequences, no hard line breaks
+                    (i.e. line breaks that are intended to be meaningful
+                    and to be displayed to the user) can occur in the
+                    quoted-printable encoding of such types.  Sequences
+                    like "=0D", "=0A", "=0A=0D" and "=0D=0A" will routinely
+                    appear in non-text data represented in quoted-
+                    printable, of course.
+
+                    Note that many implementations may elect to encode the
+                    local representation of various content types directly
+                    rather than converting to canonical form first,
+                    encoding, and then converting back to local
+                    representation.  In particular, this may apply to plain
+                    text material on systems that use newline conventions
+                    other than a CRLF terminator sequence.  Such an
+                    implementation optimization is permissible, but only
+                    when the combined canonicalization-encoding step is
+                    equivalent to performing the three steps separately.
+                    */
+
+        $string = 'a'."\r\n".'b'."\r\n".'c'."\r\n";
+
+        $charStream = $this->createCharStream();
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($string);
+
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(ord('a')));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(ord('b')));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(ord('c')));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0D));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(array(0x0A));
+        $charStream->shouldReceive('readBytes')->once()->andReturn(false);
+
+        $encoder = new Swift_Encoder_QpEncoder($charStream);
+        $this->assertEquals($string, $encoder->encodeString($string));
+    }
+
+    public function testLinesLongerThan76CharactersAreSoftBroken()
+    {
+        /*
+        (5)   (Soft Line Breaks) The Quoted-Printable encoding
+                    REQUIRES that encoded lines be no more than 76
+                    characters long.  If longer lines are to be encoded
+                    with the Quoted-Printable encoding, "soft" line breaks
+                    must be used.  An equal sign as the last character on a
+                    encoded line indicates such a non-significant ("soft")
+                    line break in the encoded text.
+                    */
+
+        $input = str_repeat('a', 140);
+
+        $charStream = $this->createCharStream();
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($input);
+
+        $output = '';
+        for ($i = 0; $i < 140; ++$i) {
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array(ord('a')));
+
+            if (75 == $i) {
+                $output .= "=\r\n";
+            }
+            $output .= 'a';
+        }
+
+        $charStream->shouldReceive('readBytes')
+                    ->once()
+                    ->andReturn(false);
+
+        $encoder = new Swift_Encoder_QpEncoder($charStream);
+        $this->assertEquals($output, $encoder->encodeString($input));
+    }
+
+    public function testMaxLineLengthCanBeSpecified()
+    {
+        $input = str_repeat('a', 100);
+
+        $charStream = $this->createCharStream();
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($input);
+
+        $output = '';
+        for ($i = 0; $i < 100; ++$i) {
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array(ord('a')));
+
+            if (53 == $i) {
+                $output .= "=\r\n";
+            }
+            $output .= 'a';
+        }
+        $charStream->shouldReceive('readBytes')
+                    ->once()
+                    ->andReturn(false);
+
+        $encoder = new Swift_Encoder_QpEncoder($charStream);
+        $this->assertEquals($output, $encoder->encodeString($input, 0, 54));
+    }
+
+    public function testBytesBelowPermittedRangeAreEncoded()
+    {
+        /*
+        According to Rule (1 & 2)
+        */
+
+        foreach (range(0, 32) as $ordinal) {
+            $char = chr($ordinal);
+
+            $charStream = $this->createCharStream();
+            $charStream->shouldReceive('flushContents')
+                       ->once();
+            $charStream->shouldReceive('importString')
+                       ->once()
+                       ->with($char);
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array($ordinal));
+            $charStream->shouldReceive('readBytes')
+                       ->atLeast()->times(1)
+                       ->andReturn(false);
+
+            $encoder = new Swift_Encoder_QpEncoder($charStream);
+
+            $this->assertEquals(
+                sprintf('=%02X', $ordinal), $encoder->encodeString($char)
+                );
+        }
+    }
+
+    public function testDecimalByte61IsEncoded()
+    {
+        /*
+        According to Rule (1 & 2)
+        */
+
+        $char = '=';
+
+        $charStream = $this->createCharStream();
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($char);
+        $charStream->shouldReceive('readBytes')
+                    ->once()
+                    ->andReturn(array(61));
+        $charStream->shouldReceive('readBytes')
+                    ->atLeast()->times(1)
+                    ->andReturn(false);
+
+        $encoder = new Swift_Encoder_QpEncoder($charStream);
+
+        $this->assertEquals('=3D', $encoder->encodeString('='));
+    }
+
+    public function testBytesAbovePermittedRangeAreEncoded()
+    {
+        /*
+        According to Rule (1 & 2)
+        */
+
+        foreach (range(127, 255) as $ordinal) {
+            $char = chr($ordinal);
+
+            $charStream = $this->createCharStream();
+            $charStream->shouldReceive('flushContents')
+                       ->once();
+            $charStream->shouldReceive('importString')
+                       ->once()
+                       ->with($char);
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array($ordinal));
+            $charStream->shouldReceive('readBytes')
+                       ->atLeast()->times(1)
+                       ->andReturn(false);
+
+            $encoder = new Swift_Encoder_QpEncoder($charStream);
+
+            $this->assertEquals(
+                sprintf('=%02X', $ordinal), $encoder->encodeString($char)
+                );
+        }
+    }
+
+    public function testFirstLineLengthCanBeDifferent()
+    {
+        $input = str_repeat('a', 140);
+
+        $charStream = $this->createCharStream();
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($input);
+
+        $output = '';
+        for ($i = 0; $i < 140; ++$i) {
+            $charStream->shouldReceive('readBytes')
+                       ->once()
+                       ->andReturn(array(ord('a')));
+
+            if (53 == $i || 53 + 75 == $i) {
+                $output .= "=\r\n";
+            }
+            $output .= 'a';
+        }
+
+        $charStream->shouldReceive('readBytes')
+                    ->once()
+                    ->andReturn(false);
+
+        $encoder = new Swift_Encoder_QpEncoder($charStream);
+        $this->assertEquals(
+            $output, $encoder->encodeString($input, 22),
+            '%s: First line should start at offset 22 so can only have max length 54'
+            );
+    }
+
+    public function testTextIsPreWrapped()
+    {
+        $encoder = $this->createEncoder();
+
+        $input = str_repeat('a', 70)."\r\n".
+                 str_repeat('a', 70)."\r\n".
+                 str_repeat('a', 70);
+
+        $this->assertEquals(
+            $input, $encoder->encodeString($input)
+            );
+    }
+
+    private function createCharStream()
+    {
+        return $this->getMockery('Swift_CharacterStream')->shouldIgnoreMissing();
+    }
+
+    private function createEncoder()
+    {
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $charStream = new Swift_CharacterStream_NgCharacterStream($factory, 'utf-8');
+
+        return new Swift_Encoder_QpEncoder($charStream);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Rfc2231EncoderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Rfc2231EncoderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Rfc2231EncoderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Encoder/Rfc2231EncoderTest.php	(date 1495187412000)
@@ -0,0 +1,141 @@
+<?php
+
+class Swift_Encoder_Rfc2231EncoderTest extends \SwiftMailerTestCase
+{
+    private $rfc2045Token = '/^[\x21\x23-\x27\x2A\x2B\x2D\x2E\x30-\x39\x41-\x5A\x5E-\x7E]+$/D';
+
+    /* --
+    This algorithm is described in RFC 2231, but is barely touched upon except
+    for mentioning bytes can be represented as their octet values (e.g. %20 for
+    the SPACE character).
+
+    The tests here focus on how to use that representation to always generate text
+    which matches RFC 2045's definition of "token".
+    */
+
+    public function testEncodingAsciiCharactersProducesValidToken()
+    {
+        $charStream = $this->getMockery('Swift_CharacterStream');
+
+        $string = '';
+        foreach (range(0x00, 0x7F) as $octet) {
+            $char = pack('C', $octet);
+            $string .= $char;
+            $charStream->shouldReceive('read')
+                       ->once()
+                       ->andReturn($char);
+        }
+
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($string);
+        $charStream->shouldReceive('read')
+                    ->atLeast()->times(1)
+                    ->andReturn(false);
+
+        $encoder = new Swift_Encoder_Rfc2231Encoder($charStream);
+        $encoded = $encoder->encodeString($string);
+
+        foreach (explode("\r\n", $encoded) as $line) {
+            $this->assertRegExp($this->rfc2045Token, $line,
+                '%s: Encoder should always return a valid RFC 2045 token.');
+        }
+    }
+
+    public function testEncodingNonAsciiCharactersProducesValidToken()
+    {
+        $charStream = $this->getMockery('Swift_CharacterStream');
+
+        $string = '';
+        foreach (range(0x80, 0xFF) as $octet) {
+            $char = pack('C', $octet);
+            $string .= $char;
+            $charStream->shouldReceive('read')
+                       ->once()
+                       ->andReturn($char);
+        }
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($string);
+        $charStream->shouldReceive('read')
+                    ->atLeast()->times(1)
+                    ->andReturn(false);
+        $encoder = new Swift_Encoder_Rfc2231Encoder($charStream);
+
+        $encoded = $encoder->encodeString($string);
+
+        foreach (explode("\r\n", $encoded) as $line) {
+            $this->assertRegExp($this->rfc2045Token, $line,
+                '%s: Encoder should always return a valid RFC 2045 token.');
+        }
+    }
+
+    public function testMaximumLineLengthCanBeSet()
+    {
+        $charStream = $this->getMockery('Swift_CharacterStream');
+
+        $string = '';
+        for ($x = 0; $x < 200; ++$x) {
+            $char = 'a';
+            $string .= $char;
+            $charStream->shouldReceive('read')
+                       ->once()
+                       ->andReturn($char);
+        }
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($string);
+        $charStream->shouldReceive('read')
+                    ->atLeast()->times(1)
+                    ->andReturn(false);
+        $encoder = new Swift_Encoder_Rfc2231Encoder($charStream);
+
+        $encoded = $encoder->encodeString($string, 0, 75);
+
+        $this->assertEquals(
+            str_repeat('a', 75)."\r\n".
+            str_repeat('a', 75)."\r\n".
+            str_repeat('a', 50),
+            $encoded,
+            '%s: Lines should be wrapped at each 75 characters'
+            );
+    }
+
+    public function testFirstLineCanHaveShorterLength()
+    {
+        $charStream = $this->getMockery('Swift_CharacterStream');
+
+        $string = '';
+        for ($x = 0; $x < 200; ++$x) {
+            $char = 'a';
+            $string .= $char;
+            $charStream->shouldReceive('read')
+                       ->once()
+                       ->andReturn($char);
+        }
+        $charStream->shouldReceive('flushContents')
+                    ->once();
+        $charStream->shouldReceive('importString')
+                    ->once()
+                    ->with($string);
+        $charStream->shouldReceive('read')
+                    ->atLeast()->times(1)
+                    ->andReturn(false);
+        $encoder = new Swift_Encoder_Rfc2231Encoder($charStream);
+        $encoded = $encoder->encodeString($string, 25, 75);
+
+        $this->assertEquals(
+            str_repeat('a', 50)."\r\n".
+            str_repeat('a', 75)."\r\n".
+            str_repeat('a', 75),
+            $encoded,
+            '%s: First line should be 25 bytes shorter than the others.'
+            );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/AntiFloodPluginTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/AntiFloodPluginTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/AntiFloodPluginTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/AntiFloodPluginTest.php	(date 1495187412000)
@@ -0,0 +1,93 @@
+<?php
+
+class Swift_Plugins_AntiFloodPluginTest extends \PHPUnit\Framework\TestCase
+{
+    public function testThresholdCanBeSetAndFetched()
+    {
+        $plugin = new Swift_Plugins_AntiFloodPlugin(10);
+        $this->assertEquals(10, $plugin->getThreshold());
+        $plugin->setThreshold(100);
+        $this->assertEquals(100, $plugin->getThreshold());
+    }
+
+    public function testSleepTimeCanBeSetAndFetched()
+    {
+        $plugin = new Swift_Plugins_AntiFloodPlugin(10, 5);
+        $this->assertEquals(5, $plugin->getSleepTime());
+        $plugin->setSleepTime(1);
+        $this->assertEquals(1, $plugin->getSleepTime());
+    }
+
+    public function testPluginStopsConnectionAfterThreshold()
+    {
+        $transport = $this->createTransport();
+        $transport->expects($this->once())
+                  ->method('start');
+        $transport->expects($this->once())
+                  ->method('stop');
+
+        $evt = $this->createSendEvent($transport);
+
+        $plugin = new Swift_Plugins_AntiFloodPlugin(10);
+        for ($i = 0; $i < 12; ++$i) {
+            $plugin->sendPerformed($evt);
+        }
+    }
+
+    public function testPluginCanStopAndStartMultipleTimes()
+    {
+        $transport = $this->createTransport();
+        $transport->expects($this->exactly(5))
+                  ->method('start');
+        $transport->expects($this->exactly(5))
+                  ->method('stop');
+
+        $evt = $this->createSendEvent($transport);
+
+        $plugin = new Swift_Plugins_AntiFloodPlugin(2);
+        for ($i = 0; $i < 11; ++$i) {
+            $plugin->sendPerformed($evt);
+        }
+    }
+
+    public function testPluginCanSleepDuringRestart()
+    {
+        $sleeper = $this->getMockBuilder('Swift_Plugins_Sleeper')->getMock();
+        $sleeper->expects($this->once())
+                ->method('sleep')
+                ->with(10);
+
+        $transport = $this->createTransport();
+        $transport->expects($this->once())
+                  ->method('start');
+        $transport->expects($this->once())
+                  ->method('stop');
+
+        $evt = $this->createSendEvent($transport);
+
+        $plugin = new Swift_Plugins_AntiFloodPlugin(99, 10, $sleeper);
+        for ($i = 0; $i < 101; ++$i) {
+            $plugin->sendPerformed($evt);
+        }
+    }
+
+    private function createTransport()
+    {
+        return $this->getMockBuilder('Swift_Transport')->getMock();
+    }
+
+    private function createSendEvent($transport)
+    {
+        $evt = $this->getMockBuilder('Swift_Events_SendEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getSource')
+            ->will($this->returnValue($transport));
+        $evt->expects($this->any())
+            ->method('getTransport')
+            ->will($this->returnValue($transport));
+
+        return $evt;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/BandwidthMonitorPluginTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/BandwidthMonitorPluginTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/BandwidthMonitorPluginTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/BandwidthMonitorPluginTest.php	(date 1495187412000)
@@ -0,0 +1,128 @@
+<?php
+
+class Swift_Plugins_BandwidthMonitorPluginTest extends \PHPUnit\Framework\TestCase
+{
+    private $_monitor;
+
+    private $_bytes = 0;
+
+    protected function setUp()
+    {
+        $this->monitor = new Swift_Plugins_BandwidthMonitorPlugin();
+    }
+
+    public function testBytesOutIncreasesWhenCommandsSent()
+    {
+        $evt = $this->createCommandEvent("RCPT TO:<foo@bar.com>\r\n");
+
+        $this->assertEquals(0, $this->monitor->getBytesOut());
+        $this->monitor->commandSent($evt);
+        $this->assertEquals(23, $this->monitor->getBytesOut());
+        $this->monitor->commandSent($evt);
+        $this->assertEquals(46, $this->monitor->getBytesOut());
+    }
+
+    public function testBytesInIncreasesWhenResponsesReceived()
+    {
+        $evt = $this->createResponseEvent("250 Ok\r\n");
+
+        $this->assertEquals(0, $this->monitor->getBytesIn());
+        $this->monitor->responseReceived($evt);
+        $this->assertEquals(8, $this->monitor->getBytesIn());
+        $this->monitor->responseReceived($evt);
+        $this->assertEquals(16, $this->monitor->getBytesIn());
+    }
+
+    public function testCountersCanBeReset()
+    {
+        $evt = $this->createResponseEvent("250 Ok\r\n");
+
+        $this->assertEquals(0, $this->monitor->getBytesIn());
+        $this->monitor->responseReceived($evt);
+        $this->assertEquals(8, $this->monitor->getBytesIn());
+        $this->monitor->responseReceived($evt);
+        $this->assertEquals(16, $this->monitor->getBytesIn());
+
+        $evt = $this->createCommandEvent("RCPT TO:<foo@bar.com>\r\n");
+
+        $this->assertEquals(0, $this->monitor->getBytesOut());
+        $this->monitor->commandSent($evt);
+        $this->assertEquals(23, $this->monitor->getBytesOut());
+        $this->monitor->commandSent($evt);
+        $this->assertEquals(46, $this->monitor->getBytesOut());
+
+        $this->monitor->reset();
+
+        $this->assertEquals(0, $this->monitor->getBytesOut());
+        $this->assertEquals(0, $this->monitor->getBytesIn());
+    }
+
+    public function testBytesOutIncreasesAccordingToMessageLength()
+    {
+        $message = $this->createMessageWithByteCount(6);
+        $evt = $this->createSendEvent($message);
+
+        $this->assertEquals(0, $this->monitor->getBytesOut());
+        $this->monitor->sendPerformed($evt);
+        $this->assertEquals(6, $this->monitor->getBytesOut());
+        $this->monitor->sendPerformed($evt);
+        $this->assertEquals(12, $this->monitor->getBytesOut());
+    }
+
+    private function createSendEvent($message)
+    {
+        $evt = $this->getMockBuilder('Swift_Events_SendEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getMessage')
+            ->will($this->returnValue($message));
+
+        return $evt;
+    }
+
+    private function createCommandEvent($command)
+    {
+        $evt = $this->getMockBuilder('Swift_Events_CommandEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getCommand')
+            ->will($this->returnValue($command));
+
+        return $evt;
+    }
+
+    private function createResponseEvent($response)
+    {
+        $evt = $this->getMockBuilder('Swift_Events_ResponseEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getResponse')
+            ->will($this->returnValue($response));
+
+        return $evt;
+    }
+
+    private function createMessageWithByteCount($bytes)
+    {
+        $this->bytes = $bytes;
+        $msg = $this->getMockBuilder('Swift_Mime_SimpleMessage')->disableOriginalConstructor()->getMock();
+        $msg->expects($this->any())
+            ->method('toByteStream')
+            ->will($this->returnCallback(array($this, 'write')));
+      /*  $this->checking(Expectations::create()
+            -> ignoring($msg)->toByteStream(any()) -> calls(array($this, 'write'))
+        ); */
+
+        return $msg;
+    }
+
+    public function write($is)
+    {
+        for ($i = 0; $i < $this->bytes; ++$i) {
+            $is->write('x');
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/DKIMSignerTest.php	(date 1495187412000)
@@ -0,0 +1,220 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Signers_DKIMSignerTest extends \SwiftMailerTestCase
+{
+    public function testBasicSigningHeaderManipulation()
+    {
+        $headers = $this->createHeaders();
+        $messageContent = 'Hello World';
+        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
+        /* @var $signer Swift_Signers_HeaderSigner */
+        $altered = $signer->getAlteredHeaders();
+        $signer->reset();
+        // Headers
+        $signer->setHeaders($headers);
+        // Body
+        $signer->startBody();
+        $signer->write($messageContent);
+        $signer->endBody();
+        // Signing
+        $signer->addSignature($headers);
+    }
+
+    // SHA1 Signing
+    public function testSigningSHA1()
+    {
+        $headerSet = $this->createHeaderSet();
+        $messageContent = 'Hello World';
+        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
+        $signer->setHashAlgorithm('rsa-sha1');
+        $signer->setSignatureTimestamp('1299879181');
+        $altered = $signer->getAlteredHeaders();
+        $this->assertEquals(array('DKIM-Signature'), $altered);
+        $signer->reset();
+        $signer->setHeaders($headerSet);
+        $this->assertFalse($headerSet->has('DKIM-Signature'));
+        $signer->startBody();
+        $signer->write($messageContent);
+        $signer->endBody();
+        $signer->addSignature($headerSet);
+        $this->assertTrue($headerSet->has('DKIM-Signature'));
+        $dkim = $headerSet->getAll('DKIM-Signature');
+        $sig = reset($dkim);
+        $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha1; bh=wlbYcY9O9OPInGJ4D0E/rGsvMLE=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; t=1299879181; b=RMSNelzM2O5MAAnMjT3G3/VF36S3DGJXoPCXR001F1WDReu0prGphWjuzK/m6V1pwqQL8cCNg Hi74mTx2bvyAvmkjvQtJf1VMUOCc9WHGcm1Yec66I3ZWoNMGSWZ1EKAm2CtTzyG0IFw4ml9DI wSkyAFxlgicckDD6FibhqwX4w=');
+    }
+
+    // SHA256 Signing
+    public function testSigning256()
+    {
+        $headerSet = $this->createHeaderSet();
+        $messageContent = 'Hello World';
+        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
+        $signer->setHashAlgorithm('rsa-sha256');
+        $signer->setSignatureTimestamp('1299879181');
+        $altered = $signer->getAlteredHeaders();
+        $this->assertEquals(array('DKIM-Signature'), $altered);
+        $signer->reset();
+        $signer->setHeaders($headerSet);
+        $this->assertFalse($headerSet->has('DKIM-Signature'));
+        $signer->startBody();
+        $signer->write($messageContent);
+        $signer->endBody();
+        $signer->addSignature($headerSet);
+        $this->assertTrue($headerSet->has('DKIM-Signature'));
+        $dkim = $headerSet->getAll('DKIM-Signature');
+        $sig = reset($dkim);
+        $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha256; bh=f+W+hu8dIhf2VAni89o8lF6WKTXi7nViA4RrMdpD5/U=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; t=1299879181; b=jqPmieHzF5vR9F4mXCAkowuphpO4iJ8IAVuioh1BFZ3VITXZj5jlOFxULJMBiiApm2keJirnh u4mzogj444QkpT3lJg8/TBGAYQPdcvkG3KC0jdyN6QpSgpITBJG2BwWa+keXsv2bkQgLRAzNx qRhP45vpHCKun0Tg9LrwW/KCg=');
+    }
+
+    // Relaxed/Relaxed Hash Signing
+    public function testSigningRelaxedRelaxed256()
+    {
+        $headerSet = $this->createHeaderSet();
+        $messageContent = 'Hello World';
+        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
+        $signer->setHashAlgorithm('rsa-sha256');
+        $signer->setSignatureTimestamp('1299879181');
+        $signer->setBodyCanon('relaxed');
+        $signer->setHeaderCanon('relaxed');
+        $altered = $signer->getAlteredHeaders();
+        $this->assertEquals(array('DKIM-Signature'), $altered);
+        $signer->reset();
+        $signer->setHeaders($headerSet);
+        $this->assertFalse($headerSet->has('DKIM-Signature'));
+        $signer->startBody();
+        $signer->write($messageContent);
+        $signer->endBody();
+        $signer->addSignature($headerSet);
+        $this->assertTrue($headerSet->has('DKIM-Signature'));
+        $dkim = $headerSet->getAll('DKIM-Signature');
+        $sig = reset($dkim);
+        $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha256; bh=f+W+hu8dIhf2VAni89o8lF6WKTXi7nViA4RrMdpD5/U=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; c=relaxed/relaxed; t=1299879181; b=gzOI+PX6HpZKQFzwwmxzcVJsyirdLXOS+4pgfCpVHQIdqYusKLrhlLeFBTNoz75HrhNvGH6T0 Rt3w5aTqkrWfUuAEYt0Ns14GowLM7JojaFN+pZ4eYnRB3CBBgW6fee4NEMD5WPca3uS09tr1E 10RYh9ILlRtl+84sovhx5id3Y=');
+    }
+
+    // Relaxed/Simple Hash Signing
+    public function testSigningRelaxedSimple256()
+    {
+        $headerSet = $this->createHeaderSet();
+        $messageContent = 'Hello World';
+        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
+        $signer->setHashAlgorithm('rsa-sha256');
+        $signer->setSignatureTimestamp('1299879181');
+        $signer->setHeaderCanon('relaxed');
+        $altered = $signer->getAlteredHeaders();
+        $this->assertEquals(array('DKIM-Signature'), $altered);
+        $signer->reset();
+        $signer->setHeaders($headerSet);
+        $this->assertFalse($headerSet->has('DKIM-Signature'));
+        $signer->startBody();
+        $signer->write($messageContent);
+        $signer->endBody();
+        $signer->addSignature($headerSet);
+        $this->assertTrue($headerSet->has('DKIM-Signature'));
+        $dkim = $headerSet->getAll('DKIM-Signature');
+        $sig = reset($dkim);
+        $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha256; bh=f+W+hu8dIhf2VAni89o8lF6WKTXi7nViA4RrMdpD5/U=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; c=relaxed; t=1299879181; b=dLPJNec5v81oelyzGOY0qPqTlGnQeNfUNBOrV/JKbStr3NqWGI9jH4JAe2YvO2V32lfPNoby1 4MMzZ6EPkaZkZDDSPa+53YbCPQAlqiD9QZZIUe2UNM33HN8yAMgiWEF5aP7MbQnxeVZMfVLEl 9S8qOImu+K5JZqhQQTL0dgLwA=');
+    }
+
+    // Simple/Relaxed Hash Signing
+    public function testSigningSimpleRelaxed256()
+    {
+        $headerSet = $this->createHeaderSet();
+        $messageContent = 'Hello World';
+        $signer = new Swift_Signers_DKIMSigner(file_get_contents(dirname(dirname(dirname(__DIR__))).'/_samples/dkim/dkim.test.priv'), 'dummy.nxdomain.be', 'dummySelector');
+        $signer->setHashAlgorithm('rsa-sha256');
+        $signer->setSignatureTimestamp('1299879181');
+        $signer->setBodyCanon('relaxed');
+        $altered = $signer->getAlteredHeaders();
+        $this->assertEquals(array('DKIM-Signature'), $altered);
+        $signer->reset();
+        $signer->setHeaders($headerSet);
+        $this->assertFalse($headerSet->has('DKIM-Signature'));
+        $signer->startBody();
+        $signer->write($messageContent);
+        $signer->endBody();
+        $signer->addSignature($headerSet);
+        $this->assertTrue($headerSet->has('DKIM-Signature'));
+        $dkim = $headerSet->getAll('DKIM-Signature');
+        $sig = reset($dkim);
+        $this->assertEquals($sig->getValue(), 'v=1; a=rsa-sha256; bh=f+W+hu8dIhf2VAni89o8lF6WKTXi7nViA4RrMdpD5/U=; d=dummy.nxdomain.be; h=; i=@dummy.nxdomain.be; s=dummySelector; c=simple/relaxed; t=1299879181; b=M5eomH/zamyzix9kOes+6YLzQZxuJdBP4x3nP9zF2N26eMLG2/cBKbnNyqiOTDhJdYfWPbLIa 1CWnjST0j5p4CpeOkGYuiE+M4TWEZwhRmRWootlPO3Ii6XpbBJKFk1o9zviS7OmXblUUE4aqb yRSIMDhtLdCK5GlaCneFLN7RQ=');
+    }
+
+    private function createHeaderSet()
+    {
+        $cache = new Swift_KeyCache_ArrayKeyCache(new Swift_KeyCache_SimpleKeyCacheInputStream());
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $contentEncoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
+
+        $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'));
+        $paramEncoder = new Swift_Encoder_Rfc2231Encoder(new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'));
+        $emailValidator = new EmailValidator();
+        $headers = new Swift_Mime_SimpleHeaderSet(new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $emailValidator));
+
+        return $headers;
+    }
+
+    /**
+     * @return Swift_Mime_Headers
+     */
+    private function createHeaders()
+    {
+        $x = 0;
+        $cache = new Swift_KeyCache_ArrayKeyCache(new Swift_KeyCache_SimpleKeyCacheInputStream());
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $contentEncoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
+
+        $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'));
+        $paramEncoder = new Swift_Encoder_Rfc2231Encoder(new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'));
+        $emailValidator = new EmailValidator();
+        $headerFactory = new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $emailValidator);
+        $headers = $this->getMockery('Swift_Mime_SimpleHeaderSet');
+
+        $headers->shouldReceive('listAll')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('From', 'To', 'Date', 'Subject'));
+        $headers->shouldReceive('has')
+                ->zeroOrMoreTimes()
+                ->with('From')
+                ->andReturn(true);
+        $headers->shouldReceive('getAll')
+                ->zeroOrMoreTimes()
+                ->with('From')
+                ->andReturn(array($headerFactory->createMailboxHeader('From', 'test@test.test')));
+        $headers->shouldReceive('has')
+                ->zeroOrMoreTimes()
+                ->with('To')
+                ->andReturn(true);
+        $headers->shouldReceive('getAll')
+                ->zeroOrMoreTimes()
+                ->with('To')
+                ->andReturn(array($headerFactory->createMailboxHeader('To', 'test@test.test')));
+        $headers->shouldReceive('has')
+                ->zeroOrMoreTimes()
+                ->with('Date')
+                ->andReturn(true);
+        $headers->shouldReceive('getAll')
+                ->zeroOrMoreTimes()
+                ->with('Date')
+                ->andReturn(array($headerFactory->createTextHeader('Date', 'Fri, 11 Mar 2011 20:56:12 +0000 (GMT)')));
+        $headers->shouldReceive('has')
+                ->zeroOrMoreTimes()
+                ->with('Subject')
+                ->andReturn(true);
+        $headers->shouldReceive('getAll')
+                ->zeroOrMoreTimes()
+                ->with('Subject')
+                ->andReturn(array($headerFactory->createTextHeader('Subject', 'Foo Bar Text Message')));
+        $headers->shouldReceive('addTextHeader')
+                ->zeroOrMoreTimes()
+                ->with('DKIM-Signature', \Mockery::any())
+                ->andReturn(true);
+        $headers->shouldReceive('getAll')
+                ->zeroOrMoreTimes()
+                ->with('DKIM-Signature')
+                ->andReturn(array($headerFactory->createTextHeader('DKIM-Signature', 'Foo Bar Text Message')));
+
+        return $headers;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/OpenDKIMSignerTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/OpenDKIMSignerTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/OpenDKIMSignerTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/OpenDKIMSignerTest.php	(date 1495187412000)
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * @todo
+ */
+class Swift_Signers_OpenDKIMSignerTest extends \SwiftMailerTestCase
+{
+    protected function setUp()
+    {
+        if (!extension_loaded('opendkim')) {
+            $this->markTestSkipped(
+                'Need OpenDKIM extension run these tests.'
+             );
+        }
+    }
+
+    public function testBasicSigningHeaderManipulation()
+    {
+    }
+
+    // Default Signing
+    public function testSigningDefaults()
+    {
+    }
+
+    // SHA256 Signing
+    public function testSigning256()
+    {
+    }
+
+    // Relaxed/Relaxed Hash Signing
+    public function testSigningRelaxedRelaxed256()
+    {
+    }
+
+    // Relaxed/Simple Hash Signing
+    public function testSigningRelaxedSimple256()
+    {
+    }
+
+    // Simple/Relaxed Hash Signing
+    public function testSigningSimpleRelaxed256()
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Signers/SMimeSignerTest.php	(date 1495187412000)
@@ -0,0 +1,554 @@
+<?php
+
+class Swift_Signers_SMimeSignerTest extends \PHPUnit\Framework\TestCase
+{
+    /**
+     * @var Swift_StreamFilters_StringReplacementFilterFactory
+     */
+    protected $replacementFactory;
+
+    protected $samplesDir;
+
+    protected function setUp()
+    {
+        $this->replacementFactory = Swift_DependencyContainer::getInstance()
+            ->lookup('transport.replacementfactory');
+
+        $this->samplesDir = str_replace('\\', '/', realpath(__DIR__.'/../../../_samples/')).'/';
+    }
+
+    public function testUnSingedMessage()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $this->assertEquals('Here is the message itself', $message->getBody());
+    }
+
+    public function testSingedMessage()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $signer = new Swift_Signers_SMimeSigner();
+        $signer->setSignCertificate($this->samplesDir.'smime/sign.crt', $this->samplesDir.'smime/sign.key');
+        $message->attachSigner($signer);
+
+        $messageStream = $this->newFilteredStream();
+        $message->toByteStream($messageStream);
+        $messageStream->commit();
+
+        $entityString = $messageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!($boundary = $this->getBoundary($headers['content-type']))) {
+            return false;
+        }
+
+        $expectedBody = <<<OEL
+This is an S/MIME signed message
+
+--$boundary
+Content-Type: text/plain; charset=utf-8
+Content-Transfer-Encoding: quoted-printable
+
+Here is the message itself
+--$boundary
+Content-Type: application/(x\-)?pkcs7-signature; name="smime\.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime\.p7s"
+
+(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})
+
+--$boundary--
+OEL;
+        $this->assertValidVerify($expectedBody, $messageStream);
+        unset($messageStream);
+    }
+
+    public function testSingedMessageExtraCerts()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $signer = new Swift_Signers_SMimeSigner();
+        $signer->setSignCertificate($this->samplesDir.'smime/sign2.crt', $this->samplesDir.'smime/sign2.key', PKCS7_DETACHED, $this->samplesDir.'smime/intermediate.crt');
+        $message->attachSigner($signer);
+
+        $messageStream = $this->newFilteredStream();
+        $message->toByteStream($messageStream);
+        $messageStream->commit();
+
+        $entityString = $messageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!($boundary = $this->getBoundary($headers['content-type']))) {
+            return false;
+        }
+
+        $expectedBody = <<<OEL
+This is an S/MIME signed message
+
+--$boundary
+Content-Type: text/plain; charset=utf-8
+Content-Transfer-Encoding: quoted-printable
+
+Here is the message itself
+--$boundary
+Content-Type: application/(x\-)?pkcs7-signature; name="smime\.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime\.p7s"
+
+(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})
+
+--$boundary--
+OEL;
+        $this->assertValidVerify($expectedBody, $messageStream);
+        unset($messageStream);
+    }
+
+    public function testSingedMessageBinary()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $signer = new Swift_Signers_SMimeSigner();
+        $signer->setSignCertificate($this->samplesDir.'smime/sign.crt', $this->samplesDir.'smime/sign.key', PKCS7_BINARY);
+        $message->attachSigner($signer);
+
+        $messageStream = $this->newFilteredStream();
+        $message->toByteStream($messageStream);
+        $messageStream->commit();
+
+        $entityString = $messageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=signed\-data;#', $headers['content-type'])) {
+            $this->fail('Content-type does not match.');
+
+            return false;
+        }
+
+        $this->assertEquals($headers['content-transfer-encoding'], 'base64');
+        $this->assertEquals($headers['content-disposition'], 'attachment; filename="smime.p7m"');
+
+        $expectedBody = '(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})';
+
+        $messageStreamClean = $this->newFilteredStream();
+
+        $this->assertValidVerify($expectedBody, $messageStream);
+        unset($messageStreamClean, $messageStream);
+    }
+
+    public function testSingedMessageWithAttachments()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $message->attach(Swift_Attachment::fromPath($this->samplesDir.'/files/textfile.zip'));
+
+        $signer = new Swift_Signers_SMimeSigner();
+        $signer->setSignCertificate($this->samplesDir.'smime/sign.crt', $this->samplesDir.'smime/sign.key');
+        $message->attachSigner($signer);
+
+        $messageStream = $this->newFilteredStream();
+        $message->toByteStream($messageStream);
+        $messageStream->commit();
+
+        $entityString = $messageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!($boundary = $this->getBoundary($headers['content-type']))) {
+            return false;
+        }
+
+        $expectedBody = <<<OEL
+This is an S/MIME signed message
+
+--$boundary
+Content-Type: multipart/mixed;
+ boundary="([a-z0-9\\'\\(\\)\\+_\\-,\\.\\/:=\\?\\ ]{0,69}[a-z0-9\\'\\(\\)\\+_\\-,\\.\\/:=\\?])"
+
+
+--\\1
+Content-Type: text/plain; charset=utf-8
+Content-Transfer-Encoding: quoted-printable
+
+Here is the message itself
+
+--\\1
+Content-Type: application/zip; name=textfile\\.zip
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename=textfile\\.zip
+
+UEsDBAoAAgAAAMi6VjiOTiKwLgAAAC4AAAAMABUAdGV4dGZpbGUudHh0VVQJAAN3vr5Hd76\\+R1V4
+BAD1AfUBVGhpcyBpcyBwYXJ0IG9mIGEgU3dpZnQgTWFpbGVyIHY0IHNtb2tlIHRlc3QuClBLAQIX
+AwoAAgAAAMi6VjiOTiKwLgAAAC4AAAAMAA0AAAAAAAEAAACkgQAAAAB0ZXh0ZmlsZS50eHRVVAUA
+A3e\\+vkdVeAAAUEsFBgAAAAABAAEARwAAAG0AAAAAAA==
+
+--\\1--
+
+--$boundary
+Content-Type: application/(x\-)?pkcs7-signature; name="smime\\.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime\\.p7s"
+
+(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})
+
+--$boundary--
+OEL;
+
+        $this->assertValidVerify($expectedBody, $messageStream);
+        unset($messageStream);
+    }
+
+    public function testEncryptedMessage()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $originalMessage = $this->cleanMessage($message->toString());
+
+        $signer = new Swift_Signers_SMimeSigner();
+        $signer->setEncryptCertificate($this->samplesDir.'smime/encrypt.crt');
+        $message->attachSigner($signer);
+
+        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
+        $message->toByteStream($messageStream);
+        $messageStream->commit();
+
+        $entityString = $messageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=enveloped\-data;#', $headers['content-type'])) {
+            $this->fail('Content-type does not match.');
+
+            return false;
+        }
+
+        $expectedBody = '(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})';
+
+        $decryptedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+        if (!openssl_pkcs7_decrypt($messageStream->getPath(), $decryptedMessageStream->getPath(), 'file://'.$this->samplesDir.'smime/encrypt.crt', array('file://'.$this->samplesDir.'smime/encrypt.key', 'swift'))) {
+            $this->fail(sprintf('Decrypt of the message failed. Internal error "%s".', openssl_error_string()));
+        }
+
+        $this->assertEquals($originalMessage, $decryptedMessageStream->getContent());
+        unset($decryptedMessageStream, $messageStream);
+    }
+
+    public function testEncryptedMessageWithMultipleCerts()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $originalMessage = $this->cleanMessage($message->toString());
+
+        $signer = new Swift_Signers_SMimeSigner();
+        $signer->setEncryptCertificate(array($this->samplesDir.'smime/encrypt.crt', $this->samplesDir.'smime/encrypt2.crt'));
+        $message->attachSigner($signer);
+
+        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
+        $message->toByteStream($messageStream);
+        $messageStream->commit();
+
+        $entityString = $messageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=enveloped\-data;#', $headers['content-type'])) {
+            $this->fail('Content-type does not match.');
+
+            return false;
+        }
+
+        $expectedBody = '(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})';
+
+        $decryptedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+        if (!openssl_pkcs7_decrypt($messageStream->getPath(), $decryptedMessageStream->getPath(), 'file://'.$this->samplesDir.'smime/encrypt.crt', array('file://'.$this->samplesDir.'smime/encrypt.key', 'swift'))) {
+            $this->fail(sprintf('Decrypt of the message failed. Internal error "%s".', openssl_error_string()));
+        }
+
+        $this->assertEquals($originalMessage, $decryptedMessageStream->getContent());
+        unset($decryptedMessageStream);
+
+        $decryptedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+        if (!openssl_pkcs7_decrypt($messageStream->getPath(), $decryptedMessageStream->getPath(), 'file://'.$this->samplesDir.'smime/encrypt2.crt', array('file://'.$this->samplesDir.'smime/encrypt2.key', 'swift'))) {
+            $this->fail(sprintf('Decrypt of the message failed. Internal error "%s".', openssl_error_string()));
+        }
+
+        $this->assertEquals($originalMessage, $decryptedMessageStream->getContent());
+        unset($decryptedMessageStream, $messageStream);
+    }
+
+    public function testSignThenEncryptedMessage()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $signer = new Swift_Signers_SMimeSigner();
+        $signer->setSignCertificate($this->samplesDir.'smime/sign.crt', $this->samplesDir.'smime/sign.key');
+        $signer->setEncryptCertificate($this->samplesDir.'smime/encrypt.crt');
+        $message->attachSigner($signer);
+
+        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
+        $message->toByteStream($messageStream);
+        $messageStream->commit();
+
+        $entityString = $messageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!preg_match('#^application/(x\-)?pkcs7-mime; smime-type=enveloped\-data;#', $headers['content-type'])) {
+            $this->fail('Content-type does not match.');
+
+            return false;
+        }
+
+        $expectedBody = '(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})';
+
+        $decryptedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+        if (!openssl_pkcs7_decrypt($messageStream->getPath(), $decryptedMessageStream->getPath(), 'file://'.$this->samplesDir.'smime/encrypt.crt', array('file://'.$this->samplesDir.'smime/encrypt.key', 'swift'))) {
+            $this->fail(sprintf('Decrypt of the message failed. Internal error "%s".', openssl_error_string()));
+        }
+
+        $entityString = $decryptedMessageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!($boundary = $this->getBoundary($headers['content-type']))) {
+            return false;
+        }
+
+        $expectedBody = <<<OEL
+This is an S/MIME signed message
+
+--$boundary
+Content-Type: text/plain; charset=utf-8
+Content-Transfer-Encoding: quoted-printable
+
+Here is the message itself
+--$boundary
+Content-Type: application/(x\-)?pkcs7-signature; name="smime\.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime\.p7s"
+
+(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})
+
+--$boundary--
+OEL;
+
+        if (!$this->assertValidVerify($expectedBody, $decryptedMessageStream)) {
+            return false;
+        }
+
+        unset($decryptedMessageStream, $messageStream);
+    }
+
+    public function testEncryptThenSignMessage()
+    {
+        $message = (new Swift_Message('Wonderful Subject'))
+          ->setFrom(array('john@doe.com' => 'John Doe'))
+          ->setTo(array('receiver@domain.org', 'other@domain.org' => 'A name'))
+          ->setBody('Here is the message itself');
+
+        $originalMessage = $this->cleanMessage($message->toString());
+
+        $signer = new Swift_Signers_SMimeSigner();
+        $signer->setSignCertificate($this->samplesDir.'smime/sign.crt', $this->samplesDir.'smime/sign.key');
+        $signer->setEncryptCertificate($this->samplesDir.'smime/encrypt.crt');
+        $signer->setSignThenEncrypt(false);
+        $message->attachSigner($signer);
+
+        $messageStream = $this->newFilteredStream();
+        $message->toByteStream($messageStream);
+        $messageStream->commit();
+
+        $entityString = $messageStream->getContent();
+        $headers = self::getHeadersOfMessage($entityString);
+
+        if (!($boundary = $this->getBoundary($headers['content-type']))) {
+            return false;
+        }
+
+        $expectedBody = <<<OEL
+This is an S/MIME signed message
+
+--$boundary
+(?P<encrypted_message>MIME-Version: 1\.0
+Content-Disposition: attachment; filename="smime\.p7m"
+Content-Type: application/(x\-)?pkcs7-mime; smime-type=enveloped-data; name="smime\.p7m"
+Content-Transfer-Encoding: base64
+
+(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})
+
+
+)--$boundary
+Content-Type: application/(x\-)?pkcs7-signature; name="smime\.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime\.p7s"
+
+(?:^[a-zA-Z0-9\/\\r\\n+]*={0,2})
+
+--$boundary--
+OEL;
+
+        if (!$this->assertValidVerify($expectedBody, $messageStream)) {
+            return false;
+        }
+
+        $expectedBody = str_replace("\n", "\r\n", $expectedBody);
+        if (!preg_match('%'.$expectedBody.'*%m', $entityString, $entities)) {
+            $this->fail('Failed regex match.');
+
+            return false;
+        }
+
+        $messageStreamClean = new Swift_ByteStream_TemporaryFileByteStream();
+        $messageStreamClean->write($entities['encrypted_message']);
+
+        $decryptedMessageStream = new Swift_ByteStream_TemporaryFileByteStream();
+
+        if (!openssl_pkcs7_decrypt($messageStreamClean->getPath(), $decryptedMessageStream->getPath(), 'file://'.$this->samplesDir.'smime/encrypt.crt', array('file://'.$this->samplesDir.'smime/encrypt.key', 'swift'))) {
+            $this->fail(sprintf('Decrypt of the message failed. Internal error "%s".', openssl_error_string()));
+        }
+
+        $this->assertEquals($originalMessage, $decryptedMessageStream->getContent());
+        unset($messageStreamClean, $messageStream, $decryptedMessageStream);
+    }
+
+    protected function assertValidVerify($expected, Swift_ByteStream_TemporaryFileByteStream $messageStream)
+    {
+        $actual = $messageStream->getContent();
+
+        // File is UNIX encoded so convert them to correct line ending
+        $expected = str_replace("\n", "\r\n", $expected);
+
+        $actual = trim(self::getBodyOfMessage($actual));
+        if (!$this->assertRegExp('%^'.$expected.'$\s*%m', $actual)) {
+            return false;
+        }
+
+        $opensslOutput = new Swift_ByteStream_TemporaryFileByteStream();
+        $verify = openssl_pkcs7_verify($messageStream->getPath(), null, $opensslOutput->getPath(), array($this->samplesDir.'smime/ca.crt'));
+
+        if (false === $verify) {
+            $this->fail('Verification of the message failed.');
+
+            return false;
+        } elseif (-1 === $verify) {
+            $this->fail(sprintf('Verification of the message failed. Internal error "%s".', openssl_error_string()));
+
+            return false;
+        }
+
+        return true;
+    }
+
+    protected function getBoundary($contentType)
+    {
+        if (!preg_match('/boundary=("[^"]+"|(?:[^\s]+|$))/is', $contentType, $contentTypeData)) {
+            $this->fail('Failed to find Boundary parameter');
+
+            return false;
+        }
+
+        return trim($contentTypeData[1], '"');
+    }
+
+    protected function newFilteredStream()
+    {
+        $messageStream = new Swift_ByteStream_TemporaryFileByteStream();
+        $messageStream->addFilter($this->replacementFactory->createFilter("\r\n", "\n"), 'CRLF to LF');
+        $messageStream->addFilter($this->replacementFactory->createFilter("\n", "\r\n"), 'LF to CRLF');
+
+        return $messageStream;
+    }
+
+    protected static function getBodyOfMessage($message)
+    {
+        return substr($message, strpos($message, "\r\n\r\n"));
+    }
+
+    /**
+     * Strips of the sender headers and Mime-Version.
+     *
+     * @param Swift_ByteStream_TemporaryFileByteStream $messageStream
+     * @param Swift_ByteStream_TemporaryFileByteStream $inputStream
+     */
+    protected function cleanMessage($content)
+    {
+        $newContent = '';
+
+        $headers = self::getHeadersOfMessage($content);
+        foreach ($headers as $headerName => $value) {
+            if (!in_array($headerName, array('content-type', 'content-transfer-encoding', 'content-disposition'))) {
+                continue;
+            }
+
+            $headerName = explode('-', $headerName);
+            $headerName = array_map('ucfirst', $headerName);
+            $headerName = implode('-', $headerName);
+
+            if (strlen($value) > 62) {
+                $value = wordwrap($value, 62, "\n ");
+            }
+
+            $newContent .= "$headerName: $value\r\n";
+        }
+
+        return $newContent."\r\n".ltrim(self::getBodyOfMessage($content));
+    }
+
+    /**
+     * Returns the headers of the message.
+     *
+     * Header-names are lowercase.
+     *
+     * @param string $message
+     *
+     * @return array
+     */
+    protected static function getHeadersOfMessage($message)
+    {
+        $headersPosEnd = strpos($message, "\r\n\r\n");
+        $headerData = substr($message, 0, $headersPosEnd);
+        $headerLines = explode("\r\n", $headerData);
+
+        if (empty($headerLines)) {
+            return array();
+        }
+
+        $headers = array();
+
+        foreach ($headerLines as $headerLine) {
+            if (ctype_space($headerLines[0]) || false === strpos($headerLine, ':')) {
+                $headers[$currentHeaderName] .= ' '.trim($headerLine);
+                continue;
+            }
+
+            $header = explode(':', $headerLine, 2);
+            $currentHeaderName = strtolower($header[0]);
+            $headers[$currentHeaderName] = trim($header[1]);
+        }
+
+        return $headers;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/KeyCache/ArrayKeyCacheTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/KeyCache/ArrayKeyCacheTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/KeyCache/ArrayKeyCacheTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/KeyCache/ArrayKeyCacheTest.php	(date 1495187412000)
@@ -0,0 +1,240 @@
+<?php
+
+class Swift_KeyCache_ArrayKeyCacheTest extends \PHPUnit\Framework\TestCase
+{
+    private $key1 = 'key1';
+    private $key2 = 'key2';
+
+    public function testStringDataCanBeSetAndFetched()
+    {
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('test', $cache->getString($this->key1, 'foo'));
+    }
+
+    public function testStringDataCanBeOverwritten()
+    {
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $cache->setString(
+            $this->key1, 'foo', 'whatever', Swift_KeyCache::MODE_WRITE
+            );
+
+        $this->assertEquals('whatever', $cache->getString($this->key1, 'foo'));
+    }
+
+    public function testStringDataCanBeAppended()
+    {
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $cache->setString(
+            $this->key1, 'foo', 'ing', Swift_KeyCache::MODE_APPEND
+            );
+
+        $this->assertEquals('testing', $cache->getString($this->key1, 'foo'));
+    }
+
+    public function testHasKeyReturnValue()
+    {
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+
+        $this->assertTrue($cache->hasKey($this->key1, 'foo'));
+    }
+
+    public function testNsKeyIsWellPartitioned()
+    {
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $cache->setString(
+            $this->key2, 'foo', 'ing', Swift_KeyCache::MODE_WRITE
+            );
+
+        $this->assertEquals('test', $cache->getString($this->key1, 'foo'));
+        $this->assertEquals('ing', $cache->getString($this->key2, 'foo'));
+    }
+
+    public function testItemKeyIsWellPartitioned()
+    {
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $cache->setString(
+            $this->key1, 'bar', 'ing', Swift_KeyCache::MODE_WRITE
+            );
+
+        $this->assertEquals('test', $cache->getString($this->key1, 'foo'));
+        $this->assertEquals('ing', $cache->getString($this->key1, 'bar'));
+    }
+
+    public function testByteStreamCanBeImported()
+    {
+        $os = $this->createOutputStream();
+        $os->expects($this->at(0))
+           ->method('read')
+           ->will($this->returnValue('abc'));
+        $os->expects($this->at(1))
+           ->method('read')
+           ->will($this->returnValue('def'));
+        $os->expects($this->at(2))
+           ->method('read')
+           ->will($this->returnValue(false));
+
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+        $cache->importFromByteStream(
+            $this->key1, 'foo', $os, Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('abcdef', $cache->getString($this->key1, 'foo'));
+    }
+
+    public function testByteStreamCanBeAppended()
+    {
+        $os1 = $this->createOutputStream();
+        $os1->expects($this->at(0))
+            ->method('read')
+            ->will($this->returnValue('abc'));
+        $os1->expects($this->at(1))
+            ->method('read')
+            ->will($this->returnValue('def'));
+        $os1->expects($this->at(2))
+            ->method('read')
+            ->will($this->returnValue(false));
+
+        $os2 = $this->createOutputStream();
+        $os2->expects($this->at(0))
+            ->method('read')
+            ->will($this->returnValue('xyz'));
+        $os2->expects($this->at(1))
+            ->method('read')
+            ->will($this->returnValue('uvw'));
+        $os2->expects($this->at(2))
+            ->method('read')
+            ->will($this->returnValue(false));
+
+        $is = $this->createKeyCacheInputStream(true);
+
+        $cache = $this->createCache($is);
+
+        $cache->importFromByteStream(
+            $this->key1, 'foo', $os1, Swift_KeyCache::MODE_APPEND
+            );
+        $cache->importFromByteStream(
+            $this->key1, 'foo', $os2, Swift_KeyCache::MODE_APPEND
+            );
+
+        $this->assertEquals('abcdefxyzuvw', $cache->getString($this->key1, 'foo'));
+    }
+
+    public function testByteStreamAndStringCanBeAppended()
+    {
+        $os = $this->createOutputStream();
+        $os->expects($this->at(0))
+           ->method('read')
+           ->will($this->returnValue('abc'));
+        $os->expects($this->at(1))
+           ->method('read')
+           ->will($this->returnValue('def'));
+        $os->expects($this->at(2))
+           ->method('read')
+           ->will($this->returnValue(false));
+
+        $is = $this->createKeyCacheInputStream(true);
+
+        $cache = $this->createCache($is);
+
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_APPEND
+            );
+        $cache->importFromByteStream(
+            $this->key1, 'foo', $os, Swift_KeyCache::MODE_APPEND
+            );
+        $this->assertEquals('testabcdef', $cache->getString($this->key1, 'foo'));
+    }
+
+    public function testDataCanBeExportedToByteStream()
+    {
+        //See acceptance test for more detail
+        $is = $this->createInputStream();
+        $is->expects($this->atLeastOnce())
+           ->method('write');
+
+        $kcis = $this->createKeyCacheInputStream(true);
+
+        $cache = $this->createCache($kcis);
+
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+
+        $cache->exportToByteStream($this->key1, 'foo', $is);
+    }
+
+    public function testKeyCanBeCleared()
+    {
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertTrue($cache->hasKey($this->key1, 'foo'));
+        $cache->clearKey($this->key1, 'foo');
+        $this->assertFalse($cache->hasKey($this->key1, 'foo'));
+    }
+
+    public function testNsKeyCanBeCleared()
+    {
+        $is = $this->createKeyCacheInputStream();
+        $cache = $this->createCache($is);
+
+        $cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $cache->setString(
+            $this->key1, 'bar', 'xyz', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertTrue($cache->hasKey($this->key1, 'foo'));
+        $this->assertTrue($cache->hasKey($this->key1, 'bar'));
+        $cache->clearAll($this->key1);
+        $this->assertFalse($cache->hasKey($this->key1, 'foo'));
+        $this->assertFalse($cache->hasKey($this->key1, 'bar'));
+    }
+
+    private function createCache($is)
+    {
+        return new Swift_KeyCache_ArrayKeyCache($is);
+    }
+
+    private function createKeyCacheInputStream()
+    {
+        return $this->getMockBuilder('Swift_KeyCache_KeyCacheInputStream')->getMock();
+    }
+
+    private function createOutputStream()
+    {
+        return $this->getMockBuilder('Swift_OutputByteStream')->getMock();
+    }
+
+    private function createInputStream()
+    {
+        return $this->getMockBuilder('Swift_InputByteStream')->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/RedirectingPluginTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/RedirectingPluginTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/RedirectingPluginTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/RedirectingPluginTest.php	(date 1495187412000)
@@ -0,0 +1,183 @@
+<?php
+
+class Swift_Plugins_RedirectingPluginTest extends \PHPUnit\Framework\TestCase
+{
+    public function testRecipientCanBeSetAndFetched()
+    {
+        $plugin = new Swift_Plugins_RedirectingPlugin('fabien@example.com');
+        $this->assertEquals('fabien@example.com', $plugin->getRecipient());
+        $plugin->setRecipient('chris@example.com');
+        $this->assertEquals('chris@example.com', $plugin->getRecipient());
+    }
+
+    public function testPluginChangesRecipients()
+    {
+        $message = (new Swift_Message())
+            ->setSubject('...')
+            ->setFrom(array('john@example.com' => 'John Doe'))
+            ->setTo($to = array(
+                'fabien-to@example.com' => 'Fabien (To)',
+                'chris-to@example.com' => 'Chris (To)',
+            ))
+            ->setCc($cc = array(
+                'fabien-cc@example.com' => 'Fabien (Cc)',
+                'chris-cc@example.com' => 'Chris (Cc)',
+            ))
+            ->setBcc($bcc = array(
+                'fabien-bcc@example.com' => 'Fabien (Bcc)',
+                'chris-bcc@example.com' => 'Chris (Bcc)',
+            ))
+            ->setBody('...')
+        ;
+
+        $plugin = new Swift_Plugins_RedirectingPlugin('god@example.com');
+
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+
+        $this->assertEquals($message->getTo(), array('god@example.com' => ''));
+        $this->assertEquals($message->getCc(), array());
+        $this->assertEquals($message->getBcc(), array());
+
+        $plugin->sendPerformed($evt);
+
+        $this->assertEquals($message->getTo(), $to);
+        $this->assertEquals($message->getCc(), $cc);
+        $this->assertEquals($message->getBcc(), $bcc);
+    }
+
+    public function testPluginRespectsUnsetToList()
+    {
+        $message = (new Swift_Message())
+            ->setSubject('...')
+            ->setFrom(array('john@example.com' => 'John Doe'))
+            ->setCc($cc = array(
+                'fabien-cc@example.com' => 'Fabien (Cc)',
+                'chris-cc@example.com' => 'Chris (Cc)',
+            ))
+            ->setBcc($bcc = array(
+                'fabien-bcc@example.com' => 'Fabien (Bcc)',
+                'chris-bcc@example.com' => 'Chris (Bcc)',
+            ))
+            ->setBody('...')
+        ;
+
+        $plugin = new Swift_Plugins_RedirectingPlugin('god@example.com');
+
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+
+        $this->assertEquals($message->getTo(), array('god@example.com' => ''));
+        $this->assertEquals($message->getCc(), array());
+        $this->assertEquals($message->getBcc(), array());
+
+        $plugin->sendPerformed($evt);
+
+        $this->assertEquals($message->getTo(), array());
+        $this->assertEquals($message->getCc(), $cc);
+        $this->assertEquals($message->getBcc(), $bcc);
+    }
+
+    public function testPluginRespectsAWhitelistOfPatterns()
+    {
+        $message = (new Swift_Message())
+            ->setSubject('...')
+            ->setFrom(array('john@example.com' => 'John Doe'))
+            ->setTo($to = array(
+                'fabien-to@example.com' => 'Fabien (To)',
+                'chris-to@example.com' => 'Chris (To)',
+                'lars-to@internal.com' => 'Lars (To)',
+            ))
+            ->setCc($cc = array(
+                'fabien-cc@example.com' => 'Fabien (Cc)',
+                'chris-cc@example.com' => 'Chris (Cc)',
+                'lars-cc@internal.org' => 'Lars (Cc)',
+            ))
+            ->setBcc($bcc = array(
+                'fabien-bcc@example.com' => 'Fabien (Bcc)',
+                'chris-bcc@example.com' => 'Chris (Bcc)',
+                'john-bcc@example.org' => 'John (Bcc)',
+            ))
+            ->setBody('...')
+        ;
+
+        $recipient = 'god@example.com';
+        $patterns = array('/^.*@internal.[a-z]+$/', '/^john-.*$/');
+
+        $plugin = new Swift_Plugins_RedirectingPlugin($recipient, $patterns);
+
+        $this->assertEquals($recipient, $plugin->getRecipient());
+        $this->assertEquals($plugin->getWhitelist(), $patterns);
+
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+
+        $this->assertEquals($message->getTo(), array('lars-to@internal.com' => 'Lars (To)', 'god@example.com' => null));
+        $this->assertEquals($message->getCc(), array('lars-cc@internal.org' => 'Lars (Cc)'));
+        $this->assertEquals($message->getBcc(), array('john-bcc@example.org' => 'John (Bcc)'));
+
+        $plugin->sendPerformed($evt);
+
+        $this->assertEquals($message->getTo(), $to);
+        $this->assertEquals($message->getCc(), $cc);
+        $this->assertEquals($message->getBcc(), $bcc);
+    }
+
+    public function testArrayOfRecipientsCanBeExplicitlyDefined()
+    {
+        $message = (new Swift_Message())
+            ->setSubject('...')
+            ->setFrom(array('john@example.com' => 'John Doe'))
+            ->setTo(array(
+            'fabien@example.com' => 'Fabien',
+            'chris@example.com' => 'Chris (To)',
+            'lars-to@internal.com' => 'Lars (To)',
+        ))
+            ->setCc(array(
+            'fabien@example.com' => 'Fabien',
+            'chris-cc@example.com' => 'Chris (Cc)',
+            'lars-cc@internal.org' => 'Lars (Cc)',
+        ))
+            ->setBcc(array(
+            'fabien@example.com' => 'Fabien',
+            'chris-bcc@example.com' => 'Chris (Bcc)',
+            'john-bcc@example.org' => 'John (Bcc)',
+        ))
+            ->setBody('...')
+        ;
+
+        $recipients = array('god@example.com', 'fabien@example.com');
+        $patterns = array('/^.*@internal.[a-z]+$/');
+
+        $plugin = new Swift_Plugins_RedirectingPlugin($recipients, $patterns);
+
+        $evt = $this->createSendEvent($message);
+
+        $plugin->beforeSendPerformed($evt);
+
+        $this->assertEquals(
+            $message->getTo(),
+            array('fabien@example.com' => 'Fabien', 'lars-to@internal.com' => 'Lars (To)', 'god@example.com' => null)
+        );
+        $this->assertEquals(
+            $message->getCc(),
+            array('fabien@example.com' => 'Fabien', 'lars-cc@internal.org' => 'Lars (Cc)')
+        );
+        $this->assertEquals($message->getBcc(), array('fabien@example.com' => 'Fabien'));
+    }
+
+    private function createSendEvent(Swift_Mime_SimpleMessage $message)
+    {
+        $evt = $this->getMockBuilder('Swift_Events_SendEvent')
+                    ->disableOriginalConstructor()
+                    ->getMock();
+        $evt->expects($this->any())
+            ->method('getMessage')
+            ->will($this->returnValue($message));
+
+        return $evt;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ReporterPluginTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ReporterPluginTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ReporterPluginTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ReporterPluginTest.php	(date 1495187412000)
@@ -0,0 +1,86 @@
+<?php
+
+class Swift_Plugins_ReporterPluginTest extends \SwiftMailerTestCase
+{
+    public function testReportingPasses()
+    {
+        $message = $this->createMessage();
+        $evt = $this->createSendEvent();
+        $reporter = $this->createReporter();
+
+        $message->shouldReceive('getTo')->zeroOrMoreTimes()->andReturn(array('foo@bar.tld' => 'Foo'));
+        $evt->shouldReceive('getMessage')->zeroOrMoreTimes()->andReturn($message);
+        $evt->shouldReceive('getFailedRecipients')->zeroOrMoreTimes()->andReturn(array());
+        $reporter->shouldReceive('notify')->once()->with($message, 'foo@bar.tld', Swift_Plugins_Reporter::RESULT_PASS);
+
+        $plugin = new Swift_Plugins_ReporterPlugin($reporter);
+        $plugin->sendPerformed($evt);
+    }
+
+    public function testReportingFailedTo()
+    {
+        $message = $this->createMessage();
+        $evt = $this->createSendEvent();
+        $reporter = $this->createReporter();
+
+        $message->shouldReceive('getTo')->zeroOrMoreTimes()->andReturn(array('foo@bar.tld' => 'Foo', 'zip@button' => 'Zip'));
+        $evt->shouldReceive('getMessage')->zeroOrMoreTimes()->andReturn($message);
+        $evt->shouldReceive('getFailedRecipients')->zeroOrMoreTimes()->andReturn(array('zip@button'));
+        $reporter->shouldReceive('notify')->once()->with($message, 'foo@bar.tld', Swift_Plugins_Reporter::RESULT_PASS);
+        $reporter->shouldReceive('notify')->once()->with($message, 'zip@button', Swift_Plugins_Reporter::RESULT_FAIL);
+
+        $plugin = new Swift_Plugins_ReporterPlugin($reporter);
+        $plugin->sendPerformed($evt);
+    }
+
+    public function testReportingFailedCc()
+    {
+        $message = $this->createMessage();
+        $evt = $this->createSendEvent();
+        $reporter = $this->createReporter();
+
+        $message->shouldReceive('getTo')->zeroOrMoreTimes()->andReturn(array('foo@bar.tld' => 'Foo'));
+        $message->shouldReceive('getCc')->zeroOrMoreTimes()->andReturn(array('zip@button' => 'Zip', 'test@test.com' => 'Test'));
+        $evt->shouldReceive('getMessage')->zeroOrMoreTimes()->andReturn($message);
+        $evt->shouldReceive('getFailedRecipients')->zeroOrMoreTimes()->andReturn(array('zip@button'));
+        $reporter->shouldReceive('notify')->once()->with($message, 'foo@bar.tld', Swift_Plugins_Reporter::RESULT_PASS);
+        $reporter->shouldReceive('notify')->once()->with($message, 'zip@button', Swift_Plugins_Reporter::RESULT_FAIL);
+        $reporter->shouldReceive('notify')->once()->with($message, 'test@test.com', Swift_Plugins_Reporter::RESULT_PASS);
+
+        $plugin = new Swift_Plugins_ReporterPlugin($reporter);
+        $plugin->sendPerformed($evt);
+    }
+
+    public function testReportingFailedBcc()
+    {
+        $message = $this->createMessage();
+        $evt = $this->createSendEvent();
+        $reporter = $this->createReporter();
+
+        $message->shouldReceive('getTo')->zeroOrMoreTimes()->andReturn(array('foo@bar.tld' => 'Foo'));
+        $message->shouldReceive('getBcc')->zeroOrMoreTimes()->andReturn(array('zip@button' => 'Zip', 'test@test.com' => 'Test'));
+        $evt->shouldReceive('getMessage')->zeroOrMoreTimes()->andReturn($message);
+        $evt->shouldReceive('getFailedRecipients')->zeroOrMoreTimes()->andReturn(array('zip@button'));
+        $reporter->shouldReceive('notify')->once()->with($message, 'foo@bar.tld', Swift_Plugins_Reporter::RESULT_PASS);
+        $reporter->shouldReceive('notify')->once()->with($message, 'zip@button', Swift_Plugins_Reporter::RESULT_FAIL);
+        $reporter->shouldReceive('notify')->once()->with($message, 'test@test.com', Swift_Plugins_Reporter::RESULT_PASS);
+
+        $plugin = new Swift_Plugins_ReporterPlugin($reporter);
+        $plugin->sendPerformed($evt);
+    }
+
+    private function createMessage()
+    {
+        return $this->getMockery('Swift_Mime_SimpleMessage')->shouldIgnoreMissing();
+    }
+
+    private function createSendEvent()
+    {
+        return $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+    }
+
+    private function createReporter()
+    {
+        return $this->getMockery('Swift_Plugins_Reporter')->shouldIgnoreMissing();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ThrottlerPluginTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ThrottlerPluginTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ThrottlerPluginTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Plugins/ThrottlerPluginTest.php	(date 1495187412000)
@@ -0,0 +1,102 @@
+<?php
+
+class Swift_Plugins_ThrottlerPluginTest extends \SwiftMailerTestCase
+{
+    public function testBytesPerMinuteThrottling()
+    {
+        $sleeper = $this->createSleeper();
+        $timer = $this->createTimer();
+
+        //10MB/min
+        $plugin = new Swift_Plugins_ThrottlerPlugin(
+            10000000, Swift_Plugins_ThrottlerPlugin::BYTES_PER_MINUTE,
+            $sleeper, $timer
+            );
+
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(0);
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(1); //expected 0.6
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(1); //expected 1.2 (sleep 1)
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(2); //expected 1.8
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(2); //expected 2.4 (sleep 1)
+        $sleeper->shouldReceive('sleep')->twice()->with(1);
+
+        //10,000,000 bytes per minute
+        //100,000 bytes per email
+
+        // .: (10,000,000/100,000)/60 emails per second = 1.667 emais/sec
+
+        $message = $this->createMessageWithByteCount(100000); //100KB
+
+        $evt = $this->createSendEvent($message);
+
+        for ($i = 0; $i < 5; ++$i) {
+            $plugin->beforeSendPerformed($evt);
+            $plugin->sendPerformed($evt);
+        }
+    }
+
+    public function testMessagesPerMinuteThrottling()
+    {
+        $sleeper = $this->createSleeper();
+        $timer = $this->createTimer();
+
+        //60/min
+        $plugin = new Swift_Plugins_ThrottlerPlugin(
+            60, Swift_Plugins_ThrottlerPlugin::MESSAGES_PER_MINUTE,
+            $sleeper, $timer
+            );
+
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(0);
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(0); //expected 1 (sleep 1)
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(2); //expected 2
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(2); //expected 3 (sleep 1)
+        $timer->shouldReceive('getTimestamp')->once()->andReturn(4); //expected 4
+        $sleeper->shouldReceive('sleep')->twice()->with(1);
+
+        //60 messages per minute
+        //1 message per second
+
+        $message = $this->createMessageWithByteCount(10);
+
+        $evt = $this->createSendEvent($message);
+
+        for ($i = 0; $i < 5; ++$i) {
+            $plugin->beforeSendPerformed($evt);
+            $plugin->sendPerformed($evt);
+        }
+    }
+
+    private function createSleeper()
+    {
+        return $this->getMockery('Swift_Plugins_Sleeper');
+    }
+
+    private function createTimer()
+    {
+        return $this->getMockery('Swift_Plugins_Timer');
+    }
+
+    private function createMessageWithByteCount($bytes)
+    {
+        $msg = $this->getMockery('Swift_Mime_SimpleMessage');
+        $msg->shouldReceive('toByteStream')
+            ->zeroOrMoreTimes()
+            ->andReturnUsing(function ($is) use ($bytes) {
+                for ($i = 0; $i < $bytes; ++$i) {
+                    $is->write('x');
+                }
+            });
+
+        return $msg;
+    }
+
+    private function createSendEvent($message)
+    {
+        $evt = $this->getMockery('Swift_Events_SendEvent');
+        $evt->shouldReceive('getMessage')
+            ->zeroOrMoreTimes()
+            ->andReturn($message);
+
+        return $evt;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransportTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransportTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransportTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransportTest.php	(date 1495187412000)
@@ -0,0 +1,298 @@
+<?php
+
+class Swift_Transport_EsmtpTransportTest extends Swift_Transport_AbstractSmtpEventSupportTest
+{
+    protected function getTransport($buf, $dispatcher = null)
+    {
+        if (!$dispatcher) {
+            $dispatcher = $this->createEventDispatcher();
+        }
+
+        return new Swift_Transport_EsmtpTransport($buf, array(), $dispatcher, 'example.org');
+    }
+
+    public function testHostCanBeSetAndFetched()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $smtp->setHost('foo');
+        $this->assertEquals('foo', $smtp->getHost(), '%s: Host should be returned');
+    }
+
+    public function testPortCanBeSetAndFetched()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $smtp->setPort(25);
+        $this->assertEquals(25, $smtp->getPort(), '%s: Port should be returned');
+    }
+
+    public function testTimeoutCanBeSetAndFetched()
+    {
+        $buf = $this->getBuffer();
+        $buf->shouldReceive('setParam')
+            ->once()
+            ->with('timeout', 10);
+
+        $smtp = $this->getTransport($buf);
+        $smtp->setTimeout(10);
+        $this->assertEquals(10, $smtp->getTimeout(), '%s: Timeout should be returned');
+    }
+
+    public function testEncryptionCanBeSetAndFetched()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $smtp->setEncryption('tls');
+        $this->assertEquals('tls', $smtp->getEncryption(), '%s: Crypto should be returned');
+    }
+
+    public function testStartSendsHeloToInitiate()
+    {
+        // previous loop would fail if there is an issue
+        $this->addToAssertionCount(1);
+    }
+
+    public function testStartSendsEhloToInitiate()
+    {
+        /* -- RFC 2821, 3.2.
+
+            3.2 Client Initiation
+
+         Once the server has sent the welcoming message and the client has
+         received it, the client normally sends the EHLO command to the
+         server, indicating the client's identity.  In addition to opening the
+         session, use of EHLO indicates that the client is able to process
+         service extensions and requests that the server provide a list of the
+         extensions it supports.  Older SMTP systems which are unable to
+         support service extensions and contemporary clients which do not
+         require service extensions in the mail session being initiated, MAY
+         use HELO instead of EHLO.  Servers MUST NOT return the extended
+         EHLO-style response to a HELO command.  For a particular connection
+         attempt, if the server returns a "command not recognized" response to
+         EHLO, the client SHOULD be able to fall back and send HELO.
+
+         In the EHLO command the host sending the command identifies itself;
+         the command may be interpreted as saying "Hello, I am <domain>" (and,
+         in the case of EHLO, "and I support service extension requests").
+
+       -- RFC 2281, 4.1.1.1.
+
+       ehlo            = "EHLO" SP Domain CRLF
+       helo            = "HELO" SP Domain CRLF
+
+       -- RFC 2821, 4.3.2.
+
+       EHLO or HELO
+           S: 250
+           E: 504, 550
+
+     */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .+?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 ServerName'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+        } catch (Exception $e) {
+            $this->fail('Starting Esmtp should send EHLO and accept 250 response: '.$e->getMessage());
+        }
+    }
+
+    public function testHeloIsUsedAsFallback()
+    {
+        /* -- RFC 2821, 4.1.4.
+
+       If the EHLO command is not acceptable to the SMTP server, 501, 500,
+       or 502 failure replies MUST be returned as appropriate.  The SMTP
+       server MUST stay in the same state after transmitting these replies
+       that it was in before the EHLO was received.
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .+?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('501 WTF'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^HELO .+?\r\n$~D')
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('250 HELO'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+        } catch (Exception $e) {
+            $this->fail(
+                'Starting Esmtp should fallback to HELO if needed and accept 250 response'
+                );
+        }
+    }
+
+    public function testInvalidHeloResponseCausesException()
+    {
+        //Overridden to first try EHLO
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .+?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('501 WTF'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^HELO .+?\r\n$~D')
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('504 WTF'."\r\n");
+        $this->finishBuffer($buf);
+
+        try {
+            $this->assertFalse($smtp->isStarted(), '%s: SMTP should begin non-started');
+            $smtp->start();
+            $this->fail('Non 250 HELO response should raise Exception');
+        } catch (Exception $e) {
+            $this->assertFalse($smtp->isStarted(), '%s: SMTP start() should have failed');
+        }
+    }
+
+    public function testDomainNameIsPlacedInEhlo()
+    {
+        /* -- RFC 2821, 4.1.4.
+
+       The SMTP client MUST, if possible, ensure that the domain parameter
+       to the EHLO command is a valid principal host name (not a CNAME or MX
+       name) for its host.  If this is not possible (e.g., when the client's
+       address is dynamically assigned and the client does not have an
+       obvious name), an address literal SHOULD be substituted for the
+       domain name and supplemental information provided that will assist in
+       identifying the client.
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("EHLO mydomain.com\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 ServerName'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->setLocalDomain('mydomain.com');
+        $smtp->start();
+    }
+
+    public function testDomainNameIsPlacedInHelo()
+    {
+        //Overridden to include ESMTP
+        /* -- RFC 2821, 4.1.4.
+
+       The SMTP client MUST, if possible, ensure that the domain parameter
+       to the EHLO command is a valid principal host name (not a CNAME or MX
+       name) for its host.  If this is not possible (e.g., when the client's
+       address is dynamically assigned and the client does not have an
+       obvious name), an address literal SHOULD be substituted for the
+       domain name and supplemental information provided that will assist in
+       identifying the client.
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^EHLO .+?\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('501 WTF'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("HELO mydomain.com\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('250 ServerName'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->setLocalDomain('mydomain.com');
+        $smtp->start();
+    }
+
+    public function testFluidInterface()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $buf->shouldReceive('setParam')
+            ->once()
+            ->with('timeout', 30);
+
+        $ref = $smtp
+            ->setHost('foo')
+            ->setPort(25)
+            ->setEncryption('tls')
+            ->setTimeout(30)
+            ;
+        $this->assertEquals($ref, $smtp);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/FailoverTransportTest.php	(date 1495187412000)
@@ -0,0 +1,600 @@
+<?php
+
+class Swift_Transport_FailoverTransportTest extends \SwiftMailerTestCase
+{
+    public function testFirstTransportIsUsed()
+    {
+        $message1 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message2 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState) {
+               return $connectionState;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState) {
+               if (!$connectionState) {
+                   $connectionState = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->twice()
+           ->with(\Mockery::anyOf($message1, $message2), \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState) {
+               if ($connectionState) {
+                   return 1;
+               }
+           });
+        $t2->shouldReceive('start')->never();
+        $t2->shouldReceive('send')->never();
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertEquals(1, $transport->send($message1));
+        $this->assertEquals(1, $transport->send($message2));
+    }
+
+    public function testMessageCanBeTriedOnNextTransportIfExceptionThrown()
+    {
+        $e = new Swift_TransportException('b0rken');
+
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   throw $e;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $e) {
+               if ($connectionState2) {
+                   return 1;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertEquals(1, $transport->send($message));
+    }
+
+    public function testZeroIsReturnedIfTransportReturnsZero()
+    {
+        $message = $this->getMockery('Swift_Mime_SimpleMessage')->shouldIgnoreMissing();
+        $t1 = $this->getMockery('Swift_Transport')->shouldIgnoreMissing();
+
+        $connectionState = false;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState) {
+               return $connectionState;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState) {
+               if (!$connectionState) {
+                   $connectionState = true;
+               }
+           });
+        $testCase = $this;
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState, $testCase) {
+               if (!$connectionState) {
+                   $testCase->fail();
+               }
+
+               return 0;
+           });
+
+        $transport = $this->getTransport(array($t1));
+        $transport->start();
+        $this->assertEquals(0, $transport->send($message));
+    }
+
+    public function testTransportsWhichThrowExceptionsAreNotRetried()
+    {
+        $e = new Swift_TransportException('maur b0rken');
+
+        $message1 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message2 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message3 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message4 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message1, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   throw $e;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message2, \Mockery::any());
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message3, \Mockery::any());
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message4, \Mockery::any());
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->times(4)
+           ->with(\Mockery::anyOf($message1, $message2, $message3, $message4), \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $e) {
+               if ($connectionState2) {
+                   return 1;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertEquals(1, $transport->send($message1));
+        $this->assertEquals(1, $transport->send($message2));
+        $this->assertEquals(1, $transport->send($message3));
+        $this->assertEquals(1, $transport->send($message4));
+    }
+
+    public function testExceptionIsThrownIfAllTransportsDie()
+    {
+        $e = new Swift_TransportException('b0rken');
+
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   throw $e;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $e) {
+               if ($connectionState2) {
+                   throw $e;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        try {
+            $transport->send($message);
+            $this->fail('All transports failed so Exception should be thrown');
+        } catch (Exception $e) {
+        }
+    }
+
+    public function testStoppingTransportStopsAllDelegates()
+    {
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $connectionState1 = true;
+        $connectionState2 = true;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('stop')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if ($connectionState1) {
+                   $connectionState1 = false;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('stop')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if ($connectionState2) {
+                   $connectionState2 = false;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $transport->stop();
+    }
+
+    public function testTransportShowsAsNotStartedIfAllDelegatesDead()
+    {
+        $e = new Swift_TransportException('b0rken');
+
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   $connectionState1 = false;
+                   throw $e;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $e) {
+               if ($connectionState2) {
+                   $connectionState2 = false;
+                   throw $e;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertTrue($transport->isStarted());
+        try {
+            $transport->send($message);
+            $this->fail('All transports failed so Exception should be thrown');
+        } catch (Exception $e) {
+            $this->assertFalse($transport->isStarted());
+        }
+    }
+
+    public function testRestartingTransportRestartsDeadDelegates()
+    {
+        $e = new Swift_TransportException('b0rken');
+
+        $message1 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message2 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->twice()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message1, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   $connectionState1 = false;
+                   throw $e;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message2, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if ($connectionState1) {
+                   return 10;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message1, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $e) {
+               if ($connectionState2) {
+                   $connectionState2 = false;
+                   throw $e;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->never()
+           ->with($message2, \Mockery::any());
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertTrue($transport->isStarted());
+        try {
+            $transport->send($message1);
+            $this->fail('All transports failed so Exception should be thrown');
+        } catch (Exception $e) {
+            $this->assertFalse($transport->isStarted());
+        }
+        //Restart and re-try
+        $transport->start();
+        $this->assertTrue($transport->isStarted());
+        $this->assertEquals(10, $transport->send($message2));
+    }
+
+    public function testFailureReferenceIsPassedToDelegates()
+    {
+        $failures = array();
+
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+
+        $connectionState = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use ($connectionState) {
+               return $connectionState;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use ($connectionState) {
+               if (!$connectionState) {
+                   $connectionState = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, $failures)
+           ->andReturnUsing(function () use ($connectionState) {
+               if ($connectionState) {
+                   return 1;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1));
+        $transport->start();
+        $transport->send($message, $failures);
+    }
+
+    public function testRegisterPluginDelegatesToLoadedTransports()
+    {
+        $plugin = $this->createPlugin();
+
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $t1->shouldReceive('registerPlugin')
+           ->once()
+           ->with($plugin);
+        $t2->shouldReceive('registerPlugin')
+           ->once()
+           ->with($plugin);
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->registerPlugin($plugin);
+    }
+
+    public function testEachDelegateIsPinged()
+    {
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('ping')
+           ->once()
+           ->andReturn(true);
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $this->assertTrue($transport->isStarted());
+        $this->assertTrue($transport->ping());
+    }
+
+    public function testDelegateIsKilledWhenPingFails()
+    {
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('ping')
+           ->once()
+           ->andReturn(false);
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('ping')
+           ->twice()
+           ->andReturn(true);
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $this->assertTrue($transport->ping());
+        $this->assertTrue($transport->ping());
+        $this->assertTrue($transport->isStarted());
+    }
+
+    public function XtestTransportShowsAsNotStartedIfAllPingFails()
+    {
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('ping')
+           ->once()
+           ->andReturn(false);
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('ping')
+           ->once()
+           ->andReturn(false);
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $this->assertFalse($transport->ping());
+        $this->assertFalse($transport->isStarted());
+        $this->assertFalse($transport->ping());
+    }
+
+    private function getTransport(array $transports)
+    {
+        $transport = new Swift_Transport_FailoverTransport();
+        $transport->setTransports($transports);
+
+        return $transport;
+    }
+
+    private function createPlugin()
+    {
+        return $this->getMockery('Swift_Events_EventListener');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/LoadBalancedTransportTest.php	(date 1495187412000)
@@ -0,0 +1,838 @@
+<?php
+
+class Swift_Transport_LoadBalancedTransportTest extends \SwiftMailerTestCase
+{
+    public function testEachTransportIsUsedInTurn()
+    {
+        $message1 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message2 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message1, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $testCase) {
+               if ($connectionState1) {
+                   return 1;
+               }
+               $testCase->fail();
+           });
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message2, \Mockery::any());
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message2, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $testCase) {
+               if ($connectionState2) {
+                   return 1;
+               }
+               $testCase->fail();
+           });
+        $t2->shouldReceive('send')
+           ->never()
+           ->with($message1, \Mockery::any());
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertEquals(1, $transport->send($message1));
+        $this->assertEquals(1, $transport->send($message2));
+    }
+
+    public function testTransportsAreReusedInRotatingFashion()
+    {
+        $message1 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message2 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message3 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message4 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message1, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $testCase) {
+               if ($connectionState1) {
+                   return 1;
+               }
+               $testCase->fail();
+           });
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message2, \Mockery::any());
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message3, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $testCase) {
+               if ($connectionState1) {
+                   return 1;
+               }
+               $testCase->fail();
+           });
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message4, \Mockery::any());
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message2, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $testCase) {
+               if ($connectionState2) {
+                   return 1;
+               }
+               $testCase->fail();
+           });
+        $t2->shouldReceive('send')
+           ->never()
+           ->with($message1, \Mockery::any());
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message4, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $testCase) {
+               if ($connectionState2) {
+                   return 1;
+               }
+               $testCase->fail();
+           });
+        $t2->shouldReceive('send')
+           ->never()
+           ->with($message3, \Mockery::any());
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+
+        $this->assertEquals(1, $transport->send($message1));
+        $this->assertEquals(1, $transport->send($message2));
+        $this->assertEquals(1, $transport->send($message3));
+        $this->assertEquals(1, $transport->send($message4));
+    }
+
+    public function testMessageCanBeTriedOnNextTransportIfExceptionThrown()
+    {
+        $e = new Swift_TransportException('b0rken');
+
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e, $testCase) {
+               if ($connectionState1) {
+                   throw $e;
+               }
+               $testCase->fail();
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $testCase) {
+               if ($connectionState2) {
+                   return 1;
+               }
+               $testCase->fail();
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertEquals(1, $transport->send($message));
+    }
+
+    public function testMessageIsTriedOnNextTransportIfZeroReturned()
+    {
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if ($connectionState1) {
+                   return 0;
+               }
+
+               return 1;
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if ($connectionState2) {
+                   return 1;
+               }
+
+               return 0;
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertEquals(1, $transport->send($message));
+    }
+
+    public function testZeroIsReturnedIfAllTransportsReturnZero()
+    {
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if ($connectionState1) {
+                   return 0;
+               }
+
+               return 1;
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if ($connectionState2) {
+                   return 0;
+               }
+
+               return 1;
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertEquals(0, $transport->send($message));
+    }
+
+    public function testTransportsWhichThrowExceptionsAreNotRetried()
+    {
+        $e = new Swift_TransportException('maur b0rken');
+
+        $message1 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message2 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message3 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message4 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message1, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e, $testCase) {
+               if ($connectionState1) {
+                   throw $e;
+               }
+               $testCase->fail();
+           });
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message2, \Mockery::any());
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message3, \Mockery::any());
+        $t1->shouldReceive('send')
+           ->never()
+           ->with($message4, \Mockery::any());
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->times(4)
+           ->with(\Mockery::anyOf($message1, $message3, $message3, $message4), \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $testCase) {
+               if ($connectionState2) {
+                   return 1;
+               }
+               $testCase->fail();
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertEquals(1, $transport->send($message1));
+        $this->assertEquals(1, $transport->send($message2));
+        $this->assertEquals(1, $transport->send($message3));
+        $this->assertEquals(1, $transport->send($message4));
+    }
+
+    public function testExceptionIsThrownIfAllTransportsDie()
+    {
+        $e = new Swift_TransportException('b0rken');
+
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   throw $e;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $e) {
+               if ($connectionState2) {
+                   throw $e;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        try {
+            $transport->send($message);
+            $this->fail('All transports failed so Exception should be thrown');
+        } catch (Exception $e) {
+        }
+    }
+
+    public function testStoppingTransportStopsAllDelegates()
+    {
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = true;
+        $connectionState2 = true;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('stop')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if ($connectionState1) {
+                   $connectionState1 = false;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('stop')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if ($connectionState2) {
+                   $connectionState2 = false;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $transport->stop();
+    }
+
+    public function testTransportShowsAsNotStartedIfAllDelegatesDead()
+    {
+        $e = new Swift_TransportException('b0rken');
+
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   throw $e;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $e) {
+               if ($connectionState2) {
+                   throw $e;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertTrue($transport->isStarted());
+        try {
+            $transport->send($message);
+            $this->fail('All transports failed so Exception should be thrown');
+        } catch (Exception $e) {
+            $this->assertFalse($transport->isStarted());
+        }
+    }
+
+    public function testRestartingTransportRestartsDeadDelegates()
+    {
+        $e = new Swift_TransportException('b0rken');
+
+        $message1 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $message2 = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+        $connectionState1 = false;
+        $connectionState2 = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('start')
+           ->twice()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               if (!$connectionState1) {
+                   $connectionState1 = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message1, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   $connectionState1 = false;
+                   throw $e;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message2, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState1, $e) {
+               if ($connectionState1) {
+                   return 10;
+               }
+           });
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               if (!$connectionState2) {
+                   $connectionState2 = true;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->once()
+           ->with($message1, \Mockery::any())
+           ->andReturnUsing(function () use (&$connectionState2, $e) {
+               if ($connectionState2) {
+                   throw $e;
+               }
+           });
+        $t2->shouldReceive('send')
+           ->never()
+           ->with($message2, \Mockery::any());
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->start();
+        $this->assertTrue($transport->isStarted());
+        try {
+            $transport->send($message1);
+            $this->fail('All transports failed so Exception should be thrown');
+        } catch (Exception $e) {
+            $this->assertFalse($transport->isStarted());
+        }
+        //Restart and re-try
+        $transport->start();
+        $this->assertTrue($transport->isStarted());
+        $this->assertEquals(10, $transport->send($message2));
+    }
+
+    public function testFailureReferenceIsPassedToDelegates()
+    {
+        $failures = array();
+        $testCase = $this;
+
+        $message = $this->getMockery('Swift_Mime_SimpleMessage');
+        $t1 = $this->getMockery('Swift_Transport');
+        $connectionState = false;
+
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState) {
+               return $connectionState;
+           });
+        $t1->shouldReceive('start')
+           ->once()
+           ->andReturnUsing(function () use (&$connectionState) {
+               if (!$connectionState) {
+                   $connectionState = true;
+               }
+           });
+        $t1->shouldReceive('send')
+           ->once()
+           ->with($message, \Mockery::on(function (&$var) use (&$failures, $testCase) {
+               return $testCase->varsAreReferences($var, $failures);
+           }))
+           ->andReturnUsing(function () use (&$connectionState) {
+               if ($connectionState) {
+                   return 1;
+               }
+           });
+
+        $transport = $this->getTransport(array($t1));
+        $transport->start();
+        $transport->send($message, $failures);
+    }
+
+    public function testRegisterPluginDelegatesToLoadedTransports()
+    {
+        $plugin = $this->createPlugin();
+
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $t1->shouldReceive('registerPlugin')
+           ->once()
+           ->with($plugin);
+        $t2->shouldReceive('registerPlugin')
+           ->once()
+           ->with($plugin);
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $transport->registerPlugin($plugin);
+    }
+
+    public function testEachDelegateIsPinged()
+    {
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('ping')
+           ->once()
+           ->andReturn(true);
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('ping')
+           ->once()
+           ->andReturn(true);
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $this->assertTrue($transport->isStarted());
+        $this->assertTrue($transport->ping());
+    }
+
+    public function testDelegateIsKilledWhenPingFails()
+    {
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('ping')
+           ->twice()
+           ->andReturn(true);
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('ping')
+           ->once()
+           ->andReturn(false);
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $this->assertTrue($transport->ping());
+        $this->assertTrue($transport->ping());
+        $this->assertTrue($transport->isStarted());
+    }
+
+    public function testTransportShowsAsNotStartedIfAllPingFails()
+    {
+        $t1 = $this->getMockery('Swift_Transport');
+        $t2 = $this->getMockery('Swift_Transport');
+
+        $testCase = $this;
+        $t1->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState1) {
+               return $connectionState1;
+           });
+        $t1->shouldReceive('ping')
+           ->once()
+           ->andReturn(false);
+
+        $t2->shouldReceive('isStarted')
+           ->zeroOrMoreTimes()
+           ->andReturnUsing(function () use (&$connectionState2) {
+               return $connectionState2;
+           });
+        $t2->shouldReceive('ping')
+           ->once()
+           ->andReturn(false);
+
+        $transport = $this->getTransport(array($t1, $t2));
+        $this->assertFalse($transport->ping());
+        $this->assertFalse($transport->isStarted());
+        $this->assertFalse($transport->ping());
+    }
+
+    /**
+     * Adapted from Yay_Matchers_ReferenceMatcher.
+     */
+    public function varsAreReferences(&$ref1, &$ref2)
+    {
+        if (is_object($ref2)) {
+            return $ref1 === $ref2;
+        }
+        if ($ref1 !== $ref2) {
+            return false;
+        }
+
+        $copy = $ref2;
+        $randomString = uniqid('yay');
+        $ref2 = $randomString;
+        $isRef = ($ref1 === $ref2);
+        $ref2 = $copy;
+
+        return $isRef;
+    }
+
+    private function getTransport(array $transports)
+    {
+        $transport = new Swift_Transport_LoadBalancedTransport();
+        $transport->setTransports($transports);
+
+        return $transport;
+    }
+
+    private function createPlugin()
+    {
+        return $this->getMockery('Swift_Events_EventListener');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/KeyCache/SimpleKeyCacheInputStreamTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/KeyCache/SimpleKeyCacheInputStreamTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/KeyCache/SimpleKeyCacheInputStreamTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/KeyCache/SimpleKeyCacheInputStreamTest.php	(date 1495187412000)
@@ -0,0 +1,73 @@
+<?php
+
+class Swift_KeyCache_SimpleKeyCacheInputStreamTest extends \PHPUnit\Framework\TestCase
+{
+    private $nsKey = 'ns1';
+
+    public function testStreamWritesToCacheInAppendMode()
+    {
+        $cache = $this->getMockBuilder('Swift_KeyCache')->getMock();
+        $cache->expects($this->at(0))
+              ->method('setString')
+              ->with($this->nsKey, 'foo', 'a', Swift_KeyCache::MODE_APPEND);
+        $cache->expects($this->at(1))
+              ->method('setString')
+              ->with($this->nsKey, 'foo', 'b', Swift_KeyCache::MODE_APPEND);
+        $cache->expects($this->at(2))
+              ->method('setString')
+              ->with($this->nsKey, 'foo', 'c', Swift_KeyCache::MODE_APPEND);
+
+        $stream = new Swift_KeyCache_SimpleKeyCacheInputStream();
+        $stream->setKeyCache($cache);
+        $stream->setNsKey($this->nsKey);
+        $stream->setItemKey('foo');
+
+        $stream->write('a');
+        $stream->write('b');
+        $stream->write('c');
+    }
+
+    public function testFlushContentClearsKey()
+    {
+        $cache = $this->getMockBuilder('Swift_KeyCache')->getMock();
+        $cache->expects($this->once())
+              ->method('clearKey')
+              ->with($this->nsKey, 'foo');
+
+        $stream = new Swift_KeyCache_SimpleKeyCacheInputStream();
+        $stream->setKeyCache($cache);
+        $stream->setNsKey($this->nsKey);
+        $stream->setItemKey('foo');
+
+        $stream->flushBuffers();
+    }
+
+    public function testClonedStreamStillReferencesSameCache()
+    {
+        $cache = $this->getMockBuilder('Swift_KeyCache')->getMock();
+        $cache->expects($this->at(0))
+              ->method('setString')
+              ->with($this->nsKey, 'foo', 'a', Swift_KeyCache::MODE_APPEND);
+        $cache->expects($this->at(1))
+              ->method('setString')
+              ->with($this->nsKey, 'foo', 'b', Swift_KeyCache::MODE_APPEND);
+        $cache->expects($this->at(2))
+              ->method('setString')
+              ->with('test', 'bar', 'x', Swift_KeyCache::MODE_APPEND);
+
+        $stream = new Swift_KeyCache_SimpleKeyCacheInputStream();
+        $stream->setKeyCache($cache);
+        $stream->setNsKey($this->nsKey);
+        $stream->setItemKey('foo');
+
+        $stream->write('a');
+        $stream->write('b');
+
+        $newStream = clone $stream;
+        $newStream->setKeyCache($cache);
+        $newStream->setNsKey('test');
+        $newStream->setItemKey('bar');
+
+        $newStream->write('x');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpEventSupportTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpEventSupportTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpEventSupportTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpEventSupportTest.php	(date 1495187412000)
@@ -0,0 +1,558 @@
+<?php
+
+require_once __DIR__.'/AbstractSmtpTest.php';
+
+abstract class Swift_Transport_AbstractSmtpEventSupportTest extends Swift_Transport_AbstractSmtpTest
+{
+    public function testRegisterPluginLoadsPluginInEventDispatcher()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $listener = $this->getMockery('Swift_Events_EventListener');
+        $smtp = $this->getTransport($buf, $dispatcher);
+        $dispatcher->shouldReceive('bindEventListener')
+                   ->once()
+                   ->with($listener);
+
+        $smtp->registerPlugin($listener);
+    }
+
+    public function testSendingDispatchesBeforeSendEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $message = $this->createMessage();
+        $smtp = $this->getTransport($buf, $dispatcher);
+        $evt = $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('chris@swiftmailer.org' => null));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('mark@swiftmailer.org' => 'Mark'));
+        $dispatcher->shouldReceive('createSendEvent')
+                   ->once()
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'beforeSendPerformed');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->zeroOrMoreTimes()
+            ->andReturn(false);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(1, $smtp->send($message));
+    }
+
+    public function testSendingDispatchesSendEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $message = $this->createMessage();
+        $smtp = $this->getTransport($buf, $dispatcher);
+        $evt = $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('chris@swiftmailer.org' => null));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('mark@swiftmailer.org' => 'Mark'));
+        $dispatcher->shouldReceive('createSendEvent')
+                   ->once()
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'sendPerformed');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->zeroOrMoreTimes()
+            ->andReturn(false);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(1, $smtp->send($message));
+    }
+
+    public function testSendEventCapturesFailures()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+        $smtp = $this->getTransport($buf, $dispatcher);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('chris@swiftmailer.org' => null));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('mark@swiftmailer.org' => 'Mark'));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<chris@swiftmailer.org>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<mark@swiftmailer.org>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn("500 Not now\r\n");
+        $dispatcher->shouldReceive('createSendEvent')
+                   ->zeroOrMoreTimes()
+                   ->with($smtp, \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'sendPerformed');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->zeroOrMoreTimes()
+            ->andReturn(false);
+        $evt->shouldReceive('setFailedRecipients')
+            ->once()
+            ->with(array('mark@swiftmailer.org'));
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(0, $smtp->send($message));
+    }
+
+    public function testSendEventHasResultFailedIfAllFailures()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+        $smtp = $this->getTransport($buf, $dispatcher);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('chris@swiftmailer.org' => null));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('mark@swiftmailer.org' => 'Mark'));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<chris@swiftmailer.org>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<mark@swiftmailer.org>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn("500 Not now\r\n");
+        $dispatcher->shouldReceive('createSendEvent')
+                   ->zeroOrMoreTimes()
+                   ->with($smtp, \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'sendPerformed');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->zeroOrMoreTimes()
+            ->andReturn(false);
+        $evt->shouldReceive('setResult')
+            ->once()
+            ->with(Swift_Events_SendEvent::RESULT_FAILED);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(0, $smtp->send($message));
+    }
+
+    public function testSendEventHasResultTentativeIfSomeFailures()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+        $smtp = $this->getTransport($buf, $dispatcher);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('chris@swiftmailer.org' => null));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array(
+                    'mark@swiftmailer.org' => 'Mark',
+                    'chris@site.tld' => 'Chris',
+                ));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<chris@swiftmailer.org>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<mark@swiftmailer.org>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn("500 Not now\r\n");
+        $dispatcher->shouldReceive('createSendEvent')
+                   ->zeroOrMoreTimes()
+                   ->with($smtp, \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'sendPerformed');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->zeroOrMoreTimes()
+            ->andReturn(false);
+        $evt->shouldReceive('setResult')
+            ->once()
+            ->with(Swift_Events_SendEvent::RESULT_TENTATIVE);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(1, $smtp->send($message));
+    }
+
+    public function testSendEventHasResultSuccessIfNoFailures()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+        $smtp = $this->getTransport($buf, $dispatcher);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('chris@swiftmailer.org' => null));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array(
+                    'mark@swiftmailer.org' => 'Mark',
+                    'chris@site.tld' => 'Chris',
+                ));
+        $dispatcher->shouldReceive('createSendEvent')
+                   ->zeroOrMoreTimes()
+                   ->with($smtp, \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'sendPerformed');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->zeroOrMoreTimes()
+            ->andReturn(false);
+        $evt->shouldReceive('setResult')
+            ->once()
+            ->with(Swift_Events_SendEvent::RESULT_SUCCESS);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(2, $smtp->send($message));
+    }
+
+    public function testCancellingEventBubbleBeforeSendStopsEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_SendEvent')->shouldIgnoreMissing();
+        $smtp = $this->getTransport($buf, $dispatcher);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('chris@swiftmailer.org' => null));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('mark@swiftmailer.org' => 'Mark'));
+        $dispatcher->shouldReceive('createSendEvent')
+                   ->zeroOrMoreTimes()
+                   ->with($smtp, \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'beforeSendPerformed');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->atLeast()->once()
+            ->andReturn(true);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(0, $smtp->send($message));
+    }
+
+    public function testStartingTransportDispatchesTransportChangeEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_TransportChangeEvent');
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $dispatcher->shouldReceive('createTransportChangeEvent')
+                   ->atLeast()->once()
+                   ->with($smtp)
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'transportStarted');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->atLeast()->once()
+            ->andReturn(false);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+    }
+
+    public function testStartingTransportDispatchesBeforeTransportChangeEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_TransportChangeEvent');
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $dispatcher->shouldReceive('createTransportChangeEvent')
+                   ->atLeast()->once()
+                   ->with($smtp)
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'beforeTransportStarted');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->atLeast()->once()
+            ->andReturn(false);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+    }
+
+    public function testCancellingBubbleBeforeTransportStartStopsEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_TransportChangeEvent');
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $dispatcher->shouldReceive('createTransportChangeEvent')
+                   ->atLeast()->once()
+                   ->with($smtp)
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'beforeTransportStarted');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->atLeast()->once()
+            ->andReturn(true);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+
+        $this->assertFalse($smtp->isStarted(),
+            '%s: Transport should not be started since event bubble was cancelled'
+        );
+    }
+
+    public function testStoppingTransportDispatchesTransportChangeEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_TransportChangeEvent')->shouldIgnoreMissing();
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $dispatcher->shouldReceive('createTransportChangeEvent')
+                   ->atLeast()->once()
+                   ->with($smtp)
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'transportStopped');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->stop();
+    }
+
+    public function testStoppingTransportDispatchesBeforeTransportChangeEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_TransportChangeEvent')->shouldIgnoreMissing();
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $dispatcher->shouldReceive('createTransportChangeEvent')
+                   ->atLeast()->once()
+                   ->with($smtp)
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'beforeTransportStopped');
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->stop();
+    }
+
+    public function testCancellingBubbleBeforeTransportStoppedStopsEvent()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_TransportChangeEvent');
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $hasRun = false;
+        $dispatcher->shouldReceive('createTransportChangeEvent')
+                   ->atLeast()->once()
+                   ->with($smtp)
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'beforeTransportStopped')
+                   ->andReturnUsing(function () use (&$hasRun) {
+                       $hasRun = true;
+                   });
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->zeroOrMoreTimes();
+        $evt->shouldReceive('bubbleCancelled')
+            ->zeroOrMoreTimes()
+            ->andReturnUsing(function () use (&$hasRun) {
+                return $hasRun;
+            });
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->stop();
+
+        $this->assertTrue($smtp->isStarted(),
+            '%s: Transport should not be stopped since event bubble was cancelled'
+        );
+    }
+
+    public function testResponseEventsAreGenerated()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_ResponseEvent');
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $dispatcher->shouldReceive('createResponseEvent')
+                   ->atLeast()->once()
+                   ->with($smtp, \Mockery::any(), \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->atLeast()->once()
+                   ->with($evt, 'responseReceived');
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+    }
+
+    public function testCommandEventsAreGenerated()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_CommandEvent');
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $dispatcher->shouldReceive('createCommandEvent')
+                   ->once()
+                   ->with($smtp, \Mockery::any(), \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'commandSent');
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+    }
+
+    public function testExceptionsCauseExceptionEvents()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_TransportExceptionEvent');
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $buf->shouldReceive('readLine')
+            ->atLeast()->once()
+            ->andReturn("503 I'm sleepy, go away!\r\n");
+        $dispatcher->shouldReceive('createTransportExceptionEvent')
+                   ->zeroOrMoreTimes()
+                   ->with($smtp, \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->once()
+                   ->with($evt, 'exceptionThrown');
+        $evt->shouldReceive('bubbleCancelled')
+            ->atLeast()->once()
+            ->andReturn(false);
+
+        try {
+            $smtp->start();
+            $this->fail('TransportException should be thrown on invalid response');
+        } catch (Swift_TransportException $e) {
+        }
+    }
+
+    public function testExceptionBubblesCanBeCancelled()
+    {
+        $buf = $this->getBuffer();
+        $dispatcher = $this->createEventDispatcher(false);
+        $evt = $this->getMockery('Swift_Events_TransportExceptionEvent');
+        $smtp = $this->getTransport($buf, $dispatcher);
+
+        $buf->shouldReceive('readLine')
+            ->atLeast()->once()
+            ->andReturn("503 I'm sleepy, go away!\r\n");
+        $dispatcher->shouldReceive('createTransportExceptionEvent')
+                   ->twice()
+                   ->with($smtp, \Mockery::any())
+                   ->andReturn($evt);
+        $dispatcher->shouldReceive('dispatchEvent')
+                   ->twice()
+                   ->with($evt, 'exceptionThrown');
+        $evt->shouldReceive('bubbleCancelled')
+            ->atLeast()->once()
+            ->andReturn(true);
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+    }
+
+    protected function createEventDispatcher($stub = true)
+    {
+        return $this->getMockery('Swift_Events_EventDispatcher')->shouldIgnoreMissing();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/AbstractSmtpTest.php	(date 1495187412000)
@@ -0,0 +1,1316 @@
+<?php
+
+abstract class Swift_Transport_AbstractSmtpTest extends \SwiftMailerTestCase
+{
+    abstract protected function getTransport($buf);
+
+    public function testStartAccepts220ServiceGreeting()
+    {
+        /* -- RFC 2821, 4.2.
+
+     Greeting = "220 " Domain [ SP text ] CRLF
+
+     -- RFC 2822, 4.3.2.
+
+     CONNECTION ESTABLISHMENT
+         S: 220
+         E: 554
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $this->assertFalse($smtp->isStarted(), '%s: SMTP should begin non-started');
+            $smtp->start();
+            $this->assertTrue($smtp->isStarted(), '%s: start() should have started connection');
+        } catch (Exception $e) {
+            $this->fail('220 is a valid SMTP greeting and should be accepted');
+        }
+    }
+
+    public function testBadGreetingCausesException()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("554 I'm busy\r\n");
+        $this->finishBuffer($buf);
+        try {
+            $this->assertFalse($smtp->isStarted(), '%s: SMTP should begin non-started');
+            $smtp->start();
+            $this->fail('554 greeting indicates an error and should cause an exception');
+        } catch (Exception $e) {
+            $this->assertFalse($smtp->isStarted(), '%s: start() should have failed');
+        }
+    }
+
+    public function testStartSendsHeloToInitiate()
+    {
+        /* -- RFC 2821, 3.2.
+
+            3.2 Client Initiation
+
+         Once the server has sent the welcoming message and the client has
+         received it, the client normally sends the EHLO command to the
+         server, indicating the client's identity.  In addition to opening the
+         session, use of EHLO indicates that the client is able to process
+         service extensions and requests that the server provide a list of the
+         extensions it supports.  Older SMTP systems which are unable to
+         support service extensions and contemporary clients which do not
+         require service extensions in the mail session being initiated, MAY
+         use HELO instead of EHLO.  Servers MUST NOT return the extended
+         EHLO-style response to a HELO command.  For a particular connection
+         attempt, if the server returns a "command not recognized" response to
+         EHLO, the client SHOULD be able to fall back and send HELO.
+
+         In the EHLO command the host sending the command identifies itself;
+         the command may be interpreted as saying "Hello, I am <domain>" (and,
+         in the case of EHLO, "and I support service extension requests").
+
+       -- RFC 2281, 4.1.1.1.
+
+       ehlo            = "EHLO" SP Domain CRLF
+       helo            = "HELO" SP Domain CRLF
+
+       -- RFC 2821, 4.3.2.
+
+       EHLO or HELO
+           S: 250
+           E: 504, 550
+
+     */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^HELO example.org\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 ServerName'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+        } catch (Exception $e) {
+            $this->fail('Starting SMTP should send HELO and accept 250 response');
+        }
+    }
+
+    public function testInvalidHeloResponseCausesException()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^HELO example.org\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('504 WTF'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $this->assertFalse($smtp->isStarted(), '%s: SMTP should begin non-started');
+            $smtp->start();
+            $this->fail('Non 250 HELO response should raise Exception');
+        } catch (Exception $e) {
+            $this->assertFalse($smtp->isStarted(), '%s: SMTP start() should have failed');
+        }
+    }
+
+    public function testDomainNameIsPlacedInHelo()
+    {
+        /* -- RFC 2821, 4.1.4.
+
+       The SMTP client MUST, if possible, ensure that the domain parameter
+       to the EHLO command is a valid principal host name (not a CNAME or MX
+       name) for its host.  If this is not possible (e.g., when the client's
+       address is dynamically assigned and the client does not have an
+       obvious name), an address literal SHOULD be substituted for the
+       domain name and supplemental information provided that will assist in
+       identifying the client.
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("HELO mydomain.com\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 ServerName'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->setLocalDomain('mydomain.com');
+        $smtp->start();
+    }
+
+    public function testSuccessfulMailCommand()
+    {
+        /* -- RFC 2821, 3.3.
+
+        There are three steps to SMTP mail transactions.  The transaction
+        starts with a MAIL command which gives the sender identification.
+
+        .....
+
+        The first step in the procedure is the MAIL command.
+
+            MAIL FROM:<reverse-path> [SP <mail-parameters> ] <CRLF>
+
+        -- RFC 2821, 4.1.1.2.
+
+        Syntax:
+
+            "MAIL FROM:" ("<>" / Reverse-Path)
+                       [SP Mail-parameters] CRLF
+        -- RFC 2821, 4.1.2.
+
+        Reverse-path = Path
+            Forward-path = Path
+            Path = "<" [ A-d-l ":" ] Mailbox ">"
+            A-d-l = At-domain *( "," A-d-l )
+                        ; Note that this form, the so-called "source route",
+                        ; MUST BE accepted, SHOULD NOT be generated, and SHOULD be
+                        ; ignored.
+            At-domain = "@" domain
+
+        -- RFC 2821, 4.3.2.
+
+        MAIL
+            S: 250
+            E: 552, 451, 452, 550, 553, 503
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<me@domain.com>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 OK\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+            $smtp->send($message);
+        } catch (Exception $e) {
+            $this->fail('MAIL FROM should accept a 250 response');
+        }
+    }
+
+    public function testInvalidResponseCodeFromMailCausesException()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<me@domain.com>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('553 Bad'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+            $smtp->send($message);
+            $this->fail('MAIL FROM should accept a 250 response');
+        } catch (Exception $e) {
+        }
+    }
+
+    public function testSenderIsPreferredOverFrom()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getSender')
+                ->once()
+                ->andReturn(array('another@domain.com' => 'Someone'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<another@domain.com>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testReturnPathIsPreferredOverSender()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getSender')
+                ->once()
+                ->andReturn(array('another@domain.com' => 'Someone'));
+        $message->shouldReceive('getReturnPath')
+                ->once()
+                ->andReturn('more@domain.com');
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<more@domain.com>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testSuccessfulRcptCommandWith250Response()
+    {
+        /* -- RFC 2821, 3.3.
+
+     The second step in the procedure is the RCPT command.
+
+            RCPT TO:<forward-path> [ SP <rcpt-parameters> ] <CRLF>
+
+     The first or only argument to this command includes a forward-path
+     (normally a mailbox and domain, always surrounded by "<" and ">"
+     brackets) identifying one recipient.  If accepted, the SMTP server
+     returns a 250 OK reply and stores the forward-path.  If the recipient
+     is known not to be a deliverable address, the SMTP server returns a
+     550 reply, typically with a string such as "no such user - " and the
+     mailbox name (other circumstances and reply codes are possible).
+     This step of the procedure can be repeated any number of times.
+
+        -- RFC 2821, 4.1.1.3.
+
+        This command is used to identify an individual recipient of the mail
+        data; multiple recipients are specified by multiple use of this
+        command.  The argument field contains a forward-path and may contain
+        optional parameters.
+
+        The forward-path normally consists of the required destination
+        mailbox.  Sending systems SHOULD not generate the optional list of
+        hosts known as a source route.
+
+        .......
+
+        "RCPT TO:" ("<Postmaster@" domain ">" / "<Postmaster>" / Forward-Path)
+                                        [SP Rcpt-parameters] CRLF
+
+        -- RFC 2821, 4.2.2.
+
+            250 Requested mail action okay, completed
+            251 User not local; will forward to <forward-path>
+         (See section 3.4)
+            252 Cannot VRFY user, but will accept message and attempt
+                    delivery
+
+        -- RFC 2821, 4.3.2.
+
+        RCPT
+            S: 250, 251 (but see section 3.4 for discussion of 251 and 551)
+            E: 550, 551, 552, 553, 450, 451, 452, 503, 550
+        */
+
+        //We'll treat 252 as accepted since it isn't really a failure
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<me@domain.com>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+            $smtp->send($message);
+        } catch (Exception $e) {
+            $this->fail('RCPT TO should accept a 250 response');
+        }
+    }
+
+    public function testMailFromCommandIsOnlySentOncePerMessage()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<me@domain.com>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('250 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->never()
+            ->with("MAIL FROM:<me@domain.com>\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testMultipleRecipientsSendsMultipleRcpt()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array(
+                    'foo@bar' => null,
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<zip@button>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('250 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<test@domain>\r\n")
+            ->andReturn(3);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(3)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testCcRecipientsSendsMultipleRcpt()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $message->shouldReceive('getCc')
+                ->once()
+                ->andReturn(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<zip@button>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('250 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<test@domain>\r\n")
+            ->andReturn(3);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(3)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testSendReturnsNumberOfSuccessfulRecipients()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $message->shouldReceive('getCc')
+                ->once()
+                ->andReturn(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<zip@button>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('501 Nobody here'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<test@domain>\r\n")
+            ->andReturn(3);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(3)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(2, $smtp->send($message),
+            '%s: 1 of 3 recipients failed so 2 should be returned'
+            );
+    }
+
+    public function testRsetIsSentIfNoSuccessfulRecipients()
+    {
+        /* --RFC 2821, 4.1.1.5.
+
+        This command specifies that the current mail transaction will be
+        aborted.  Any stored sender, recipients, and mail data MUST be
+        discarded, and all buffers and state tables cleared.  The receiver
+        MUST send a "250 OK" reply to a RSET command with no arguments.  A
+        reset command may be issued by the client at any time.
+
+        -- RFC 2821, 4.3.2.
+
+        RSET
+            S: 250
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('503 Bad'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RSET\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(0, $smtp->send($message),
+            '%s: 1 of 1 recipients failed so 0 should be returned'
+            );
+    }
+
+    public function testSuccessfulDataCommand()
+    {
+        /* -- RFC 2821, 3.3.
+
+        The third step in the procedure is the DATA command (or some
+        alternative specified in a service extension).
+
+                    DATA <CRLF>
+
+        If accepted, the SMTP server returns a 354 Intermediate reply and
+        considers all succeeding lines up to but not including the end of
+        mail data indicator to be the message text.
+
+        -- RFC 2821, 4.1.1.4.
+
+        The receiver normally sends a 354 response to DATA, and then treats
+        the lines (strings ending in <CRLF> sequences, as described in
+        section 2.3.7) following the command as mail data from the sender.
+        This command causes the mail data to be appended to the mail data
+        buffer.  The mail data may contain any of the 128 ASCII character
+        codes, although experience has indicated that use of control
+        characters other than SP, HT, CR, and LF may cause problems and
+        SHOULD be avoided when possible.
+
+        -- RFC 2821, 4.3.2.
+
+        DATA
+            I: 354 -> data -> S: 250
+                                                E: 552, 554, 451, 452
+            E: 451, 554, 503
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("DATA\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('354 Go ahead'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+            $smtp->send($message);
+        } catch (Exception $e) {
+            $this->fail('354 is the expected response to DATA');
+        }
+    }
+
+    public function testBadDataResponseCausesException()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("DATA\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('451 Bad'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+            $smtp->send($message);
+            $this->fail('354 is the expected response to DATA (not observed)');
+        } catch (Exception $e) {
+        }
+    }
+
+    public function testMessageIsStreamedToBufferForData()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("DATA\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('354 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("\r\n.\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testBadResponseAfterDataTransmissionCausesException()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->once()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->once()
+                ->andReturn(array('foo@bar' => null));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("DATA\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('354 OK'."\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("\r\n.\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn('554 Error'."\r\n");
+
+        $this->finishBuffer($buf);
+        try {
+            $smtp->start();
+            $smtp->send($message);
+            $this->fail('250 is the expected response after a DATA transmission (not observed)');
+        } catch (Exception $e) {
+        }
+    }
+
+    public function testBccRecipientsAreRemovedFromHeaders()
+    {
+        /* -- RFC 2821, 7.2.
+
+     Addresses that do not appear in the message headers may appear in the
+     RCPT commands to an SMTP server for a number of reasons.  The two
+     most common involve the use of a mailing address as a "list exploder"
+     (a single address that resolves into multiple addresses) and the
+     appearance of "blind copies".  Especially when more than one RCPT
+     command is present, and in order to avoid defeating some of the
+     purpose of these mechanisms, SMTP clients and servers SHOULD NOT copy
+     the full set of RCPT command arguments into the headers, either as
+     part of trace headers or as informational or private-extension
+     headers.  Since this rule is often violated in practice, and cannot
+     be enforced, sending SMTP systems that are aware of "bcc" use MAY
+     find it helpful to send each blind copy as a separate message
+     transaction containing only a single RCPT command.
+     */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => null));
+        $message->shouldReceive('getBcc')
+                ->zeroOrMoreTimes()
+                ->andReturn(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+        $message->shouldReceive('setBcc')
+                ->once()
+                ->with(array());
+        $message->shouldReceive('setBcc')
+                ->zeroOrMoreTimes();
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testEachBccRecipientIsSentASeparateMessage()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => null));
+        $message->shouldReceive('getBcc')
+                ->zeroOrMoreTimes()
+                ->andReturn(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+        $message->shouldReceive('setBcc')
+                ->atLeast()->once()
+                ->with(array());
+        $message->shouldReceive('setBcc')
+                ->once()
+                ->with(array('zip@button' => 'Zip Button'));
+        $message->shouldReceive('setBcc')
+                ->once()
+                ->with(array('test@domain' => 'Test user'));
+        $message->shouldReceive('setBcc')
+                ->atLeast()->once()
+                ->with(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+
+        $buf->shouldReceive('write')->once()->with("MAIL FROM:<me@domain.com>\r\n")->andReturn(1);
+        $buf->shouldReceive('readLine')->once()->with(1)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("RCPT TO:<foo@bar>\r\n")->andReturn(2);
+        $buf->shouldReceive('readLine')->once()->with(2)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("DATA\r\n")->andReturn(3);
+        $buf->shouldReceive('readLine')->once()->with(3)->andReturn("354 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("\r\n.\r\n")->andReturn(4);
+        $buf->shouldReceive('readLine')->once()->with(4)->andReturn("250 OK\r\n");
+
+        $buf->shouldReceive('write')->once()->with("MAIL FROM:<me@domain.com>\r\n")->andReturn(5);
+        $buf->shouldReceive('readLine')->once()->with(5)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("RCPT TO:<zip@button>\r\n")->andReturn(6);
+        $buf->shouldReceive('readLine')->once()->with(6)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("DATA\r\n")->andReturn(7);
+        $buf->shouldReceive('readLine')->once()->with(7)->andReturn("354 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("\r\n.\r\n")->andReturn(8);
+        $buf->shouldReceive('readLine')->once()->with(8)->andReturn("250 OK\r\n");
+
+        $buf->shouldReceive('write')->once()->with("MAIL FROM:<me@domain.com>\r\n")->andReturn(9);
+        $buf->shouldReceive('readLine')->once()->with(9)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("RCPT TO:<test@domain>\r\n")->andReturn(10);
+        $buf->shouldReceive('readLine')->once()->with(10)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("DATA\r\n")->andReturn(11);
+        $buf->shouldReceive('readLine')->once()->with(11)->andReturn("354 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("\r\n.\r\n")->andReturn(12);
+        $buf->shouldReceive('readLine')->once()->with(12)->andReturn("250 OK\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(3, $smtp->send($message));
+    }
+
+    public function testMessageStateIsRestoredOnFailure()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => null));
+        $message->shouldReceive('getBcc')
+                ->zeroOrMoreTimes()
+                ->andReturn(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+        $message->shouldReceive('setBcc')
+                ->once()
+                ->with(array());
+        $message->shouldReceive('setBcc')
+                ->once()
+                ->with(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("MAIL FROM:<me@domain.com>\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("RCPT TO:<foo@bar>\r\n")
+            ->andReturn(2);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(2)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("DATA\r\n")
+            ->andReturn(3);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(3)
+            ->andReturn("451 No\r\n");
+
+        $this->finishBuffer($buf);
+
+        $smtp->start();
+        try {
+            $smtp->send($message);
+            $this->fail('A bad response was given so exception is expected');
+        } catch (Exception $e) {
+        }
+    }
+
+    public function testStopSendsQuitCommand()
+    {
+        /* -- RFC 2821, 4.1.1.10.
+
+        This command specifies that the receiver MUST send an OK reply, and
+        then close the transmission channel.
+
+        The receiver MUST NOT intentionally close the transmission channel
+        until it receives and replies to a QUIT command (even if there was an
+        error).  The sender MUST NOT intentionally close the transmission
+        channel until it sends a QUIT command and SHOULD wait until it
+        receives the reply (even if there was an error response to a previous
+        command).  If the connection is closed prematurely due to violations
+        of the above or system or network failure, the server MUST cancel any
+        pending transaction, but not undo any previously completed
+        transaction, and generally MUST act as if the command or transaction
+        in progress had received a temporary error (i.e., a 4yz response).
+
+        The QUIT command may be issued at any time.
+
+        Syntax:
+            "QUIT" CRLF
+        */
+
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('write')
+            ->once()
+            ->with("QUIT\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn("221 Bye\r\n");
+        $buf->shouldReceive('terminate')
+            ->once();
+
+        $this->finishBuffer($buf);
+
+        $this->assertFalse($smtp->isStarted());
+        $smtp->start();
+        $this->assertTrue($smtp->isStarted());
+        $smtp->stop();
+        $this->assertFalse($smtp->isStarted());
+    }
+
+    public function testBufferCanBeFetched()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $ref = $smtp->getBuffer();
+        $this->assertEquals($buf, $ref);
+    }
+
+    public function testBufferCanBeWrittenToUsingExecuteCommand()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->with("FOO\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with(1)
+            ->andReturn("250 OK\r\n");
+
+        $res = $smtp->executeCommand("FOO\r\n");
+        $this->assertEquals("250 OK\r\n", $res);
+    }
+
+    public function testResponseCodesAreValidated()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->with("FOO\r\n")
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with(1)
+            ->andReturn("551 Not ok\r\n");
+
+        try {
+            $smtp->executeCommand("FOO\r\n", array(250, 251));
+            $this->fail('A 250 or 251 response was needed but 551 was returned.');
+        } catch (Exception $e) {
+        }
+    }
+
+    public function testFailedRecipientsCanBeCollectedByReference()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => null));
+        $message->shouldReceive('getBcc')
+                ->zeroOrMoreTimes()
+                ->andReturn(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+        $message->shouldReceive('setBcc')
+                ->atLeast()->once()
+                ->with(array());
+        $message->shouldReceive('setBcc')
+                ->once()
+                ->with(array('zip@button' => 'Zip Button'));
+        $message->shouldReceive('setBcc')
+                ->once()
+                ->with(array('test@domain' => 'Test user'));
+        $message->shouldReceive('setBcc')
+                ->atLeast()->once()
+                ->with(array(
+                    'zip@button' => 'Zip Button',
+                    'test@domain' => 'Test user',
+                ));
+
+        $buf->shouldReceive('write')->once()->with("MAIL FROM:<me@domain.com>\r\n")->andReturn(1);
+        $buf->shouldReceive('readLine')->once()->with(1)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("RCPT TO:<foo@bar>\r\n")->andReturn(2);
+        $buf->shouldReceive('readLine')->once()->with(2)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("DATA\r\n")->andReturn(3);
+        $buf->shouldReceive('readLine')->once()->with(3)->andReturn("354 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("\r\n.\r\n")->andReturn(4);
+        $buf->shouldReceive('readLine')->once()->with(4)->andReturn("250 OK\r\n");
+
+        $buf->shouldReceive('write')->once()->with("MAIL FROM:<me@domain.com>\r\n")->andReturn(5);
+        $buf->shouldReceive('readLine')->once()->with(5)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("RCPT TO:<zip@button>\r\n")->andReturn(6);
+        $buf->shouldReceive('readLine')->once()->with(6)->andReturn("500 Bad\r\n");
+        $buf->shouldReceive('write')->once()->with("RSET\r\n")->andReturn(7);
+        $buf->shouldReceive('readLine')->once()->with(7)->andReturn("250 OK\r\n");
+
+        $buf->shouldReceive('write')->once()->with("MAIL FROM:<me@domain.com>\r\n")->andReturn(9);
+        $buf->shouldReceive('readLine')->once()->with(9)->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')->once()->with("RCPT TO:<test@domain>\r\n")->andReturn(10);
+        $buf->shouldReceive('readLine')->once()->with(10)->andReturn("500 Bad\r\n");
+        $buf->shouldReceive('write')->once()->with("RSET\r\n")->andReturn(11);
+        $buf->shouldReceive('readLine')->once()->with(11)->andReturn("250 OK\r\n");
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertEquals(1, $smtp->send($message, $failures));
+        $this->assertEquals(array('zip@button', 'test@domain'), $failures,
+            '%s: Failures should be caught in an array'
+            );
+    }
+
+    public function testSendingRegeneratesMessageId()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+        $message = $this->createMessage();
+        $message->shouldReceive('getFrom')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('me@domain.com' => 'Me'));
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => null));
+        $message->shouldReceive('generateId')
+                ->once();
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $smtp->send($message);
+    }
+
+    public function testPing()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^NOOP\r\n$~D')
+            ->andReturn(1);
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(1)
+            ->andReturn('250 OK'."\r\n");
+
+        $this->finishBuffer($buf);
+        $this->assertTrue($smtp->ping());
+    }
+
+    public function testPingOnDeadConnection()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('readLine')
+            ->once()
+            ->with(0)
+            ->andReturn("220 some.server.tld bleh\r\n");
+        $buf->shouldReceive('write')
+            ->once()
+            ->with('~^NOOP\r\n$~D')
+            ->andThrow('Swift_TransportException');
+
+        $this->finishBuffer($buf);
+        $smtp->start();
+        $this->assertTrue($smtp->isStarted());
+        $this->assertFalse($smtp->ping());
+        $this->assertFalse($smtp->isStarted());
+    }
+
+    public function testSetLocalDomain()
+    {
+        $buf = $this->getBuffer();
+        $smtp = $this->getTransport($buf);
+
+        $smtp->setLocalDomain('example.com');
+        $this->assertEquals('example.com', $smtp->getLocalDomain());
+
+        $smtp->setLocalDomain('192.168.0.1');
+        $this->assertEquals('[192.168.0.1]', $smtp->getLocalDomain());
+
+        $smtp->setLocalDomain('[192.168.0.1]');
+        $this->assertEquals('[192.168.0.1]', $smtp->getLocalDomain());
+
+        $smtp->setLocalDomain('fd00::');
+        $this->assertEquals('[IPv6:fd00::]', $smtp->getLocalDomain());
+
+        $smtp->setLocalDomain('[IPv6:fd00::]');
+        $this->assertEquals('[IPv6:fd00::]', $smtp->getLocalDomain());
+    }
+
+    protected function getBuffer()
+    {
+        return $this->getMockery('Swift_Transport_IoBuffer')->shouldIgnoreMissing();
+    }
+
+    protected function createMessage()
+    {
+        return $this->getMockery('Swift_Mime_SimpleMessage')->shouldIgnoreMissing();
+    }
+
+    protected function finishBuffer($buf)
+    {
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with(0)
+            ->andReturn('220 server.com foo'."\r\n");
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->with('~^(EH|HE)LO .*?\r\n$~D')
+            ->andReturn($x = uniqid());
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with($x)
+            ->andReturn('250 ServerName'."\r\n");
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->with('~^MAIL FROM:<.*?>\r\n$~D')
+            ->andReturn($x = uniqid());
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with($x)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->with('~^RCPT TO:<.*?>\r\n$~D')
+            ->andReturn($x = uniqid());
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with($x)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->with("DATA\r\n")
+            ->andReturn($x = uniqid());
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with($x)
+            ->andReturn("354 OK\r\n");
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->with("\r\n.\r\n")
+            ->andReturn($x = uniqid());
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with($x)
+            ->andReturn("250 OK\r\n");
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->with("RSET\r\n")
+            ->andReturn($x = uniqid());
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->with($x)
+            ->andReturn("250 OK\r\n");
+
+        $buf->shouldReceive('write')
+            ->zeroOrMoreTimes()
+            ->andReturn(false);
+        $buf->shouldReceive('readLine')
+            ->zeroOrMoreTimes()
+            ->andReturn(false);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/StringReplacementFilterFactoryTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/StringReplacementFilterFactoryTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/StringReplacementFilterFactoryTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/StringReplacementFilterFactoryTest.php	(date 1495187412000)
@@ -0,0 +1,36 @@
+<?php
+
+class Swift_StreamFilters_StringReplacementFilterFactoryTest extends \PHPUnit\Framework\TestCase
+{
+    public function testInstancesOfStringReplacementFilterAreCreated()
+    {
+        $factory = $this->createFactory();
+        $this->assertInstanceOf(
+            'Swift_StreamFilters_StringReplacementFilter',
+            $factory->createFilter('a', 'b')
+        );
+    }
+
+    public function testSameInstancesAreCached()
+    {
+        $factory = $this->createFactory();
+        $filter1 = $factory->createFilter('a', 'b');
+        $filter2 = $factory->createFilter('a', 'b');
+        $this->assertSame($filter1, $filter2, '%s: Instances should be cached');
+    }
+
+    public function testDifferingInstancesAreNotCached()
+    {
+        $factory = $this->createFactory();
+        $filter1 = $factory->createFilter('a', 'b');
+        $filter2 = $factory->createFilter('a', 'c');
+        $this->assertNotEquals($filter1, $filter2,
+            '%s: Differing instances should not be cached'
+            );
+    }
+
+    private function createFactory()
+    {
+        return new Swift_StreamFilters_StringReplacementFilterFactory();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/StringReplacementFilterTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/StringReplacementFilterTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/StringReplacementFilterTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/StringReplacementFilterTest.php	(date 1495187412000)
@@ -0,0 +1,59 @@
+<?php
+
+class Swift_StreamFilters_StringReplacementFilterTest extends \PHPUnit\Framework\TestCase
+{
+    public function testBasicReplacementsAreMade()
+    {
+        $filter = $this->createFilter('foo', 'bar');
+        $this->assertEquals('XbarYbarZ', $filter->filter('XfooYfooZ'));
+    }
+
+    public function testShouldBufferReturnsTrueIfPartialMatchAtEndOfBuffer()
+    {
+        $filter = $this->createFilter('foo', 'bar');
+        $this->assertTrue($filter->shouldBuffer('XfooYf'),
+            '%s: Filter should buffer since "foo" is the needle and the ending '.
+            '"f" could be from "foo"'
+            );
+    }
+
+    public function testFilterCanMakeMultipleReplacements()
+    {
+        $filter = $this->createFilter(array('a', 'b'), 'foo');
+        $this->assertEquals('XfooYfooZ', $filter->filter('XaYbZ'));
+    }
+
+    public function testMultipleReplacementsCanBeDifferent()
+    {
+        $filter = $this->createFilter(array('a', 'b'), array('foo', 'zip'));
+        $this->assertEquals('XfooYzipZ', $filter->filter('XaYbZ'));
+    }
+
+    public function testShouldBufferReturnsFalseIfPartialMatchNotAtEndOfString()
+    {
+        $filter = $this->createFilter("\r\n", "\n");
+        $this->assertFalse($filter->shouldBuffer("foo\r\nbar"),
+            '%s: Filter should not buffer since x0Dx0A is the needle and is not at EOF'
+            );
+    }
+
+    public function testShouldBufferReturnsTrueIfAnyOfMultipleMatchesAtEndOfString()
+    {
+        $filter = $this->createFilter(array('foo', 'zip'), 'bar');
+        $this->assertTrue($filter->shouldBuffer('XfooYzi'),
+            '%s: Filter should buffer since "zip" is a needle and the ending '.
+            '"zi" could be from "zip"'
+            );
+    }
+
+    public function testShouldBufferReturnsFalseOnEmptyBuffer()
+    {
+        $filter = $this->createFilter("\r\n", "\n");
+        $this->assertFalse($filter->shouldBuffer(''));
+    }
+
+    private function createFilter($search, $replace)
+    {
+        return new Swift_StreamFilters_StringReplacementFilter($search, $replace);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/GenericFixedWidthReaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/GenericFixedWidthReaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/GenericFixedWidthReaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/GenericFixedWidthReaderTest.php	(date 1495187412000)
@@ -0,0 +1,43 @@
+<?php
+
+class Swift_CharacterReader_GenericFixedWidthReaderTest extends \PHPUnit\Framework\TestCase
+{
+    public function testInitialByteSizeMatchesWidth()
+    {
+        $reader = new Swift_CharacterReader_GenericFixedWidthReader(1);
+        $this->assertSame(1, $reader->getInitialByteSize());
+
+        $reader = new Swift_CharacterReader_GenericFixedWidthReader(4);
+        $this->assertSame(4, $reader->getInitialByteSize());
+    }
+
+    public function testValidationValueIsBasedOnOctetCount()
+    {
+        $reader = new Swift_CharacterReader_GenericFixedWidthReader(4);
+
+        $this->assertSame(
+            1, $reader->validateByteSequence(array(0x01, 0x02, 0x03), 3)
+            ); //3 octets
+
+        $this->assertSame(
+            2, $reader->validateByteSequence(array(0x01, 0x0A), 2)
+            ); //2 octets
+
+        $this->assertSame(
+            3, $reader->validateByteSequence(array(0xFE), 1)
+            ); //1 octet
+
+        $this->assertSame(
+            0, $reader->validateByteSequence(array(0xFE, 0x03, 0x67, 0x9A), 4)
+            ); //All 4 octets
+    }
+
+    public function testValidationFailsIfTooManyOctets()
+    {
+        $reader = new Swift_CharacterReader_GenericFixedWidthReader(6);
+
+        $this->assertSame(-1, $reader->validateByteSequence(
+            array(0xFE, 0x03, 0x67, 0x9A, 0x10, 0x09, 0x85), 7
+            )); //7 octets
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/UsAsciiReaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/UsAsciiReaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/UsAsciiReaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/UsAsciiReaderTest.php	(date 1495187412000)
@@ -0,0 +1,52 @@
+<?php
+
+class Swift_CharacterReader_UsAsciiReaderTest extends \PHPUnit\Framework\TestCase
+{
+    /*
+
+    for ($c = '', $size = 1; false !== $bytes = $os->read($size); ) {
+        $c .= $bytes;
+        $size = $v->validateCharacter($c);
+        if (-1 == $size) {
+            throw new Exception( ... invalid char .. );
+        } elseif (0 == $size) {
+            return $c; //next character in $os
+        }
+    }
+
+    */
+
+    private $reader;
+
+    protected function setUp()
+    {
+        $this->reader = new Swift_CharacterReader_UsAsciiReader();
+    }
+
+    public function testAllValidAsciiCharactersReturnZero()
+    {
+        for ($ordinal = 0x00; $ordinal <= 0x7F; ++$ordinal) {
+            $this->assertSame(
+                0, $this->reader->validateByteSequence(array($ordinal), 1)
+                );
+        }
+    }
+
+    public function testMultipleBytesAreInvalid()
+    {
+        for ($ordinal = 0x00; $ordinal <= 0x7F; $ordinal += 2) {
+            $this->assertSame(
+                -1, $this->reader->validateByteSequence(array($ordinal, $ordinal + 1), 2)
+                );
+        }
+    }
+
+    public function testBytesAboveAsciiRangeAreInvalid()
+    {
+        for ($ordinal = 0x80; $ordinal <= 0xFF; ++$ordinal) {
+            $this->assertSame(
+                -1, $this->reader->validateByteSequence(array($ordinal), 1)
+                );
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/SendmailTransportTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/SendmailTransportTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/SendmailTransportTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/SendmailTransportTest.php	(date 1495187412000)
@@ -0,0 +1,151 @@
+<?php
+
+class Swift_Transport_SendmailTransportTest extends Swift_Transport_AbstractSmtpEventSupportTest
+{
+    protected function getTransport($buf, $dispatcher = null, $command = '/usr/sbin/sendmail -bs')
+    {
+        if (!$dispatcher) {
+            $dispatcher = $this->createEventDispatcher();
+        }
+        $transport = new Swift_Transport_SendmailTransport($buf, $dispatcher, 'example.org');
+        $transport->setCommand($command);
+
+        return $transport;
+    }
+
+    protected function getSendmail($buf, $dispatcher = null)
+    {
+        if (!$dispatcher) {
+            $dispatcher = $this->createEventDispatcher();
+        }
+        $sendmail = new Swift_Transport_SendmailTransport($buf, $dispatcher, 'example.org');
+
+        return $sendmail;
+    }
+
+    public function testCommandCanBeSetAndFetched()
+    {
+        $buf = $this->getBuffer();
+        $sendmail = $this->getSendmail($buf);
+
+        $sendmail->setCommand('/usr/sbin/sendmail -bs');
+        $this->assertEquals('/usr/sbin/sendmail -bs', $sendmail->getCommand());
+        $sendmail->setCommand('/usr/sbin/sendmail -oi -t');
+        $this->assertEquals('/usr/sbin/sendmail -oi -t', $sendmail->getCommand());
+    }
+
+    public function testSendingMessageIn_t_ModeUsesSimplePipe()
+    {
+        $buf = $this->getBuffer();
+        $sendmail = $this->getSendmail($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => 'Foobar', 'zip@button' => 'Zippy'));
+        $message->shouldReceive('toByteStream')
+                ->once()
+                ->with($buf);
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('terminate')
+            ->once();
+        $buf->shouldReceive('setWriteTranslations')
+            ->once()
+            ->with(array("\r\n" => "\n", "\n." => "\n.."));
+        $buf->shouldReceive('setWriteTranslations')
+            ->once()
+            ->with(array());
+
+        $sendmail->setCommand('/usr/sbin/sendmail -t');
+        $this->assertEquals(2, $sendmail->send($message));
+    }
+
+    public function testSendingIn_t_ModeWith_i_FlagDoesntEscapeDot()
+    {
+        $buf = $this->getBuffer();
+        $sendmail = $this->getSendmail($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => 'Foobar', 'zip@button' => 'Zippy'));
+        $message->shouldReceive('toByteStream')
+                ->once()
+                ->with($buf);
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('terminate')
+            ->once();
+        $buf->shouldReceive('setWriteTranslations')
+            ->once()
+            ->with(array("\r\n" => "\n"));
+        $buf->shouldReceive('setWriteTranslations')
+            ->once()
+            ->with(array());
+
+        $sendmail->setCommand('/usr/sbin/sendmail -i -t');
+        $this->assertEquals(2, $sendmail->send($message));
+    }
+
+    public function testSendingInTModeWith_oi_FlagDoesntEscapeDot()
+    {
+        $buf = $this->getBuffer();
+        $sendmail = $this->getSendmail($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => 'Foobar', 'zip@button' => 'Zippy'));
+        $message->shouldReceive('toByteStream')
+                ->once()
+                ->with($buf);
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('terminate')
+            ->once();
+        $buf->shouldReceive('setWriteTranslations')
+            ->once()
+            ->with(array("\r\n" => "\n"));
+        $buf->shouldReceive('setWriteTranslations')
+            ->once()
+            ->with(array());
+
+        $sendmail->setCommand('/usr/sbin/sendmail -oi -t');
+        $this->assertEquals(2, $sendmail->send($message));
+    }
+
+    public function testSendingMessageRegeneratesId()
+    {
+        $buf = $this->getBuffer();
+        $sendmail = $this->getSendmail($buf);
+        $message = $this->createMessage();
+
+        $message->shouldReceive('getTo')
+                ->zeroOrMoreTimes()
+                ->andReturn(array('foo@bar' => 'Foobar', 'zip@button' => 'Zippy'));
+        $message->shouldReceive('generateId');
+        $buf->shouldReceive('initialize')
+            ->once();
+        $buf->shouldReceive('terminate')
+            ->once();
+        $buf->shouldReceive('setWriteTranslations')
+            ->once()
+            ->with(array("\r\n" => "\n", "\n." => "\n.."));
+        $buf->shouldReceive('setWriteTranslations')
+            ->once()
+            ->with(array());
+
+        $sendmail->setCommand('/usr/sbin/sendmail -t');
+        $this->assertEquals(2, $sendmail->send($message));
+    }
+
+    public function testFluidInterface()
+    {
+        $buf = $this->getBuffer();
+        $sendmail = $this->getTransport($buf);
+
+        $ref = $sendmail->setCommand('/foo');
+        $this->assertEquals($ref, $sendmail);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/StreamBufferTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/StreamBufferTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/StreamBufferTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/StreamBufferTest.php	(date 1495187412000)
@@ -0,0 +1,43 @@
+<?php
+
+class Swift_Transport_StreamBufferTest extends \PHPUnit\Framework\TestCase
+{
+    public function testSettingWriteTranslationsCreatesFilters()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->once())
+                ->method('createFilter')
+                ->with('a', 'b')
+                ->will($this->returnCallback(array($this, 'createFilter')));
+
+        $buffer = $this->createBuffer($factory);
+        $buffer->setWriteTranslations(array('a' => 'b'));
+    }
+
+    public function testOverridingTranslationsOnlyAddsNeededFilters()
+    {
+        $factory = $this->createFactory();
+        $factory->expects($this->exactly(2))
+                ->method('createFilter')
+                ->will($this->returnCallback(array($this, 'createFilter')));
+
+        $buffer = $this->createBuffer($factory);
+        $buffer->setWriteTranslations(array('a' => 'b'));
+        $buffer->setWriteTranslations(array('x' => 'y', 'a' => 'b'));
+    }
+
+    private function createBuffer($replacementFactory)
+    {
+        return new Swift_Transport_StreamBuffer($replacementFactory);
+    }
+
+    private function createFactory()
+    {
+        return $this->getMockBuilder('Swift_ReplacementFilterFactory')->getMock();
+    }
+
+    public function createFilter()
+    {
+        return $this->getMockBuilder('Swift_StreamFilter')->getMock();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/ByteStream/ArrayByteStreamTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/ByteStream/ArrayByteStreamTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/ByteStream/ArrayByteStreamTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/ByteStream/ArrayByteStreamTest.php	(date 1495187412000)
@@ -0,0 +1,202 @@
+<?php
+
+class Swift_ByteStream_ArrayByteStreamTest extends \PHPUnit\Framework\TestCase
+{
+    public function testReadingSingleBytesFromBaseInput()
+    {
+        $input = array('a', 'b', 'c');
+        $bs = $this->createArrayStream($input);
+        $output = array();
+        while (false !== $bytes = $bs->read(1)) {
+            $output[] = $bytes;
+        }
+        $this->assertEquals($input, $output,
+            '%s: Bytes read from stream should be the same as bytes in constructor'
+            );
+    }
+
+    public function testReadingMultipleBytesFromBaseInput()
+    {
+        $input = array('a', 'b', 'c', 'd');
+        $bs = $this->createArrayStream($input);
+        $output = array();
+        while (false !== $bytes = $bs->read(2)) {
+            $output[] = $bytes;
+        }
+        $this->assertEquals(array('ab', 'cd'), $output,
+            '%s: Bytes read from stream should be in pairs'
+            );
+    }
+
+    public function testReadingOddOffsetOnLastByte()
+    {
+        $input = array('a', 'b', 'c', 'd', 'e');
+        $bs = $this->createArrayStream($input);
+        $output = array();
+        while (false !== $bytes = $bs->read(2)) {
+            $output[] = $bytes;
+        }
+        $this->assertEquals(array('ab', 'cd', 'e'), $output,
+            '%s: Bytes read from stream should be in pairs except final read'
+            );
+    }
+
+    public function testSettingPointerPartway()
+    {
+        $input = array('a', 'b', 'c');
+        $bs = $this->createArrayStream($input);
+        $bs->setReadPointer(1);
+        $this->assertEquals('b', $bs->read(1),
+            '%s: Byte should be second byte since pointer as at offset 1'
+            );
+    }
+
+    public function testResettingPointerAfterExhaustion()
+    {
+        $input = array('a', 'b', 'c');
+
+        $bs = $this->createArrayStream($input);
+        while (false !== $bs->read(1));
+
+        $bs->setReadPointer(0);
+        $this->assertEquals('a', $bs->read(1),
+            '%s: Byte should be first byte since pointer as at offset 0'
+            );
+    }
+
+    public function testPointerNeverSetsBelowZero()
+    {
+        $input = array('a', 'b', 'c');
+        $bs = $this->createArrayStream($input);
+
+        $bs->setReadPointer(-1);
+        $this->assertEquals('a', $bs->read(1),
+            '%s: Byte should be first byte since pointer should be at offset 0'
+            );
+    }
+
+    public function testPointerNeverSetsAboveStackSize()
+    {
+        $input = array('a', 'b', 'c');
+        $bs = $this->createArrayStream($input);
+
+        $bs->setReadPointer(3);
+        $this->assertFalse($bs->read(1),
+            '%s: Stream should be at end and thus return false'
+            );
+    }
+
+    public function testBytesCanBeWrittenToStream()
+    {
+        $input = array('a', 'b', 'c');
+        $bs = $this->createArrayStream($input);
+
+        $bs->write('de');
+
+        $output = array();
+        while (false !== $bytes = $bs->read(1)) {
+            $output[] = $bytes;
+        }
+        $this->assertEquals(array('a', 'b', 'c', 'd', 'e'), $output,
+            '%s: Bytes read from stream should be from initial stack + written'
+            );
+    }
+
+    public function testContentsCanBeFlushed()
+    {
+        $input = array('a', 'b', 'c');
+        $bs = $this->createArrayStream($input);
+
+        $bs->flushBuffers();
+
+        $this->assertFalse($bs->read(1),
+            '%s: Contents have been flushed so read() should return false'
+            );
+    }
+
+    public function testConstructorCanTakeStringArgument()
+    {
+        $bs = $this->createArrayStream('abc');
+        $output = array();
+        while (false !== $bytes = $bs->read(1)) {
+            $output[] = $bytes;
+        }
+        $this->assertEquals(array('a', 'b', 'c'), $output,
+            '%s: Bytes read from stream should be the same as bytes in constructor'
+            );
+    }
+
+    public function testBindingOtherStreamsMirrorsWriteOperations()
+    {
+        $bs = $this->createArrayStream('');
+        $is1 = $this->getMockBuilder('Swift_InputByteStream')->getMock();
+        $is2 = $this->getMockBuilder('Swift_InputByteStream')->getMock();
+
+        $is1->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is1->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+        $is2->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is2->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+
+        $bs->bind($is1);
+        $bs->bind($is2);
+
+        $bs->write('x');
+        $bs->write('y');
+    }
+
+    public function testBindingOtherStreamsMirrorsFlushOperations()
+    {
+        $bs = $this->createArrayStream('');
+        $is1 = $this->getMockBuilder('Swift_InputByteStream')->getMock();
+        $is2 = $this->getMockBuilder('Swift_InputByteStream')->getMock();
+
+        $is1->expects($this->once())
+            ->method('flushBuffers');
+        $is2->expects($this->once())
+            ->method('flushBuffers');
+
+        $bs->bind($is1);
+        $bs->bind($is2);
+
+        $bs->flushBuffers();
+    }
+
+    public function testUnbindingStreamPreventsFurtherWrites()
+    {
+        $bs = $this->createArrayStream('');
+        $is1 = $this->getMockBuilder('Swift_InputByteStream')->getMock();
+        $is2 = $this->getMockBuilder('Swift_InputByteStream')->getMock();
+
+        $is1->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is1->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+        $is2->expects($this->once())
+            ->method('write')
+            ->with('x');
+
+        $bs->bind($is1);
+        $bs->bind($is2);
+
+        $bs->write('x');
+
+        $bs->unbind($is2);
+
+        $bs->write('y');
+    }
+
+    private function createArrayStream($input)
+    {
+        return new Swift_ByteStream_ArrayByteStream($input);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/ByteArrayReplacementFilterTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/ByteArrayReplacementFilterTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/ByteArrayReplacementFilterTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/StreamFilters/ByteArrayReplacementFilterTest.php	(date 1495187412000)
@@ -0,0 +1,129 @@
+<?php
+
+class Swift_StreamFilters_ByteArrayReplacementFilterTest extends \PHPUnit\Framework\TestCase
+{
+    public function testBasicReplacementsAreMade()
+    {
+        $filter = $this->createFilter(array(0x61, 0x62), array(0x63, 0x64));
+        $this->assertEquals(
+            array(0x59, 0x60, 0x63, 0x64, 0x65),
+            $filter->filter(array(0x59, 0x60, 0x61, 0x62, 0x65))
+            );
+    }
+
+    public function testShouldBufferReturnsTrueIfPartialMatchAtEndOfBuffer()
+    {
+        $filter = $this->createFilter(array(0x61, 0x62), array(0x63, 0x64));
+        $this->assertTrue($filter->shouldBuffer(array(0x59, 0x60, 0x61)),
+            '%s: Filter should buffer since 0x61 0x62 is the needle and the ending '.
+            '0x61 could be from 0x61 0x62'
+            );
+    }
+
+    public function testFilterCanMakeMultipleReplacements()
+    {
+        $filter = $this->createFilter(array(array(0x61), array(0x62)), array(0x63));
+        $this->assertEquals(
+            array(0x60, 0x63, 0x60, 0x63, 0x60),
+            $filter->filter(array(0x60, 0x61, 0x60, 0x62, 0x60))
+            );
+    }
+
+    public function testMultipleReplacementsCanBeDifferent()
+    {
+        $filter = $this->createFilter(array(array(0x61), array(0x62)), array(array(0x63), array(0x64)));
+        $this->assertEquals(
+            array(0x60, 0x63, 0x60, 0x64, 0x60),
+            $filter->filter(array(0x60, 0x61, 0x60, 0x62, 0x60))
+            );
+    }
+
+    public function testShouldBufferReturnsFalseIfPartialMatchNotAtEndOfString()
+    {
+        $filter = $this->createFilter(array(0x0D, 0x0A), array(0x0A));
+        $this->assertFalse($filter->shouldBuffer(array(0x61, 0x62, 0x0D, 0x0A, 0x63)),
+            '%s: Filter should not buffer since x0Dx0A is the needle and is not at EOF'
+            );
+    }
+
+    public function testShouldBufferReturnsTrueIfAnyOfMultipleMatchesAtEndOfString()
+    {
+        $filter = $this->createFilter(array(array(0x61, 0x62), array(0x63)), array(0x64));
+        $this->assertTrue($filter->shouldBuffer(array(0x59, 0x60, 0x61)),
+            '%s: Filter should buffer since 0x61 0x62 is a needle and the ending '.
+            '0x61 could be from 0x61 0x62'
+            );
+    }
+
+    public function testConvertingAllLineEndingsToCRLFWhenInputIsLF()
+    {
+        $filter = $this->createFilter(
+            array(array(0x0D, 0x0A), array(0x0D), array(0x0A)),
+            array(array(0x0A), array(0x0A), array(0x0D, 0x0A))
+            );
+
+        $this->assertEquals(
+            array(0x60, 0x0D, 0x0A, 0x61, 0x0D, 0x0A, 0x62, 0x0D, 0x0A, 0x63),
+            $filter->filter(array(0x60, 0x0A, 0x61, 0x0A, 0x62, 0x0A, 0x63))
+            );
+    }
+
+    public function testConvertingAllLineEndingsToCRLFWhenInputIsCR()
+    {
+        $filter = $this->createFilter(
+            array(array(0x0D, 0x0A), array(0x0D), array(0x0A)),
+            array(array(0x0A), array(0x0A), array(0x0D, 0x0A))
+            );
+
+        $this->assertEquals(
+            array(0x60, 0x0D, 0x0A, 0x61, 0x0D, 0x0A, 0x62, 0x0D, 0x0A, 0x63),
+            $filter->filter(array(0x60, 0x0D, 0x61, 0x0D, 0x62, 0x0D, 0x63))
+            );
+    }
+
+    public function testConvertingAllLineEndingsToCRLFWhenInputIsCRLF()
+    {
+        $filter = $this->createFilter(
+            array(array(0x0D, 0x0A), array(0x0D), array(0x0A)),
+            array(array(0x0A), array(0x0A), array(0x0D, 0x0A))
+            );
+
+        $this->assertEquals(
+            array(0x60, 0x0D, 0x0A, 0x61, 0x0D, 0x0A, 0x62, 0x0D, 0x0A, 0x63),
+            $filter->filter(array(0x60, 0x0D, 0x0A, 0x61, 0x0D, 0x0A, 0x62, 0x0D, 0x0A, 0x63))
+            );
+    }
+
+    public function testConvertingAllLineEndingsToCRLFWhenInputIsLFCR()
+    {
+        $filter = $this->createFilter(
+            array(array(0x0D, 0x0A), array(0x0D), array(0x0A)),
+            array(array(0x0A), array(0x0A), array(0x0D, 0x0A))
+            );
+
+        $this->assertEquals(
+            array(0x60, 0x0D, 0x0A, 0x0D, 0x0A, 0x61, 0x0D, 0x0A, 0x0D, 0x0A, 0x62, 0x0D, 0x0A, 0x0D, 0x0A, 0x63),
+            $filter->filter(array(0x60, 0x0A, 0x0D, 0x61, 0x0A, 0x0D, 0x62, 0x0A, 0x0D, 0x63))
+            );
+    }
+
+    public function testConvertingAllLineEndingsToCRLFWhenInputContainsLFLF()
+    {
+        //Lighthouse Bug #23
+
+        $filter = $this->createFilter(
+            array(array(0x0D, 0x0A), array(0x0D), array(0x0A)),
+            array(array(0x0A), array(0x0A), array(0x0D, 0x0A))
+            );
+
+        $this->assertEquals(
+            array(0x60, 0x0D, 0x0A, 0x0D, 0x0A, 0x61, 0x0D, 0x0A, 0x0D, 0x0A, 0x62, 0x0D, 0x0A, 0x0D, 0x0A, 0x63),
+            $filter->filter(array(0x60, 0x0A, 0x0A, 0x61, 0x0A, 0x0A, 0x62, 0x0A, 0x0A, 0x63))
+            );
+    }
+
+    private function createFilter($search, $replace)
+    {
+        return new Swift_StreamFilters_ByteArrayReplacementFilter($search, $replace);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/HtmlWithAttachmentSmokeTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/HtmlWithAttachmentSmokeTest.php b/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/HtmlWithAttachmentSmokeTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/HtmlWithAttachmentSmokeTest.php	(date 1495187412000)
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * @group smoke
+ */
+class Swift_Smoke_HtmlWithAttachmentSmokeTest extends SwiftMailerSmokeTestCase
+{
+    private $_attFile;
+
+    protected function setUp()
+    {
+        $this->attFile = __DIR__.'/../../../_samples/files/textfile.zip';
+    }
+
+    public function testAttachmentSending()
+    {
+        $mailer = $this->getMailer();
+        $message = (new Swift_Message('[Swift Mailer] HtmlWithAttachmentSmokeTest'))
+            ->setFrom(array(SWIFT_SMOKE_EMAIL_ADDRESS => 'Swift Mailer'))
+            ->setTo(SWIFT_SMOKE_EMAIL_ADDRESS)
+            ->attach(Swift_Attachment::fromPath($this->attFile))
+            ->setBody('<p>This HTML-formatted message should contain an attached ZIP file (named "textfile.zip").'.PHP_EOL.
+                'When unzipped, the archive should produce a text file which reads:</p>'.PHP_EOL.
+                '<p><q>This is part of a Swift Mailer v4 smoke test.</q></p>', 'text/html'
+            )
+            ;
+        $this->assertEquals(1, $mailer->send($message),
+            '%s: The smoke test should send a single message'
+            );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/InternationalSmokeTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/InternationalSmokeTest.php b/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/InternationalSmokeTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/InternationalSmokeTest.php	(date 1495187412000)
@@ -0,0 +1,40 @@
+<?php
+
+/**
+ * @group smoke
+ */
+class Swift_Smoke_InternationalSmokeTest extends SwiftMailerSmokeTestCase
+{
+    private $_attFile;
+
+    protected function setUp()
+    {
+        parent::setup(); // For skip
+        $this->attFile = __DIR__.'/../../../_samples/files/textfile.zip';
+    }
+
+    public function testAttachmentSending()
+    {
+        $mailer = $this->getMailer();
+        $message = (new Swift_Message())
+            ->setCharset('utf-8')
+            ->setSubject('[Swift Mailer] InternationalSmokeTest (διεθνής)')
+            ->setFrom(array(SWIFT_SMOKE_EMAIL_ADDRESS => 'Χριστοφορου (Swift Mailer)'))
+            ->setTo(SWIFT_SMOKE_EMAIL_ADDRESS)
+            ->setBody('This message should contain an attached ZIP file (named "κείμενο, εδάφιο, θέμα.zip").'.PHP_EOL.
+                'When unzipped, the archive should produce a text file which reads:'.PHP_EOL.
+                '"This is part of a Swift Mailer v4 smoke test."'.PHP_EOL.
+                PHP_EOL.
+                'Following is some arbitrary Greek text:'.PHP_EOL.
+                'Δεν βρέθηκαν λέξεις.'
+                )
+            ->attach(Swift_Attachment::fromPath($this->attFile)
+                ->setContentType('application/zip')
+                ->setFilename('κείμενο, εδάφιο, θέμα.zip')
+                )
+            ;
+        $this->assertEquals(1, $mailer->send($message),
+            '%s: The smoke test should send a single message'
+            );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/one.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/one.txt b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/one.txt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/one.txt	(date 1495187412000)
@@ -0,0 +1,22 @@
+Код одно гринспана руководишь на. Его вы знания движение. Ты две начать
+одиночку, сказать основатель удовольствием но миф. Бы какие система тем.
+Полностью использует три мы, человек клоунов те нас, бы давать творческую
+эзотерическая шеф.
+
+Мог не помнить никакого сэкономленного, две либо какие пишите бы. Должен
+компанию кто те, этот заключалась проектировщик не ты. Глупые периоды ты
+для. Вам который хороший он. Те любых кремния концентрируются мог,
+собирать принадлежите без вы.
+
+Джоэла меньше хорошего вы миф, за тем году разработки. Даже управляющим
+руководители был не. Три коде выпускать заботиться ну. То его система
+удовольствием безостановочно, или ты главной процессорах. Мы без джоэл
+знания получат, статьи остальные мы ещё.
+
+Них русском касается поскольку по, образование должником
+систематизированный ну мои. Прийти кандидата университет но нас, для бы
+должны никакого, биг многие причин интервьюирования за.
+
+Тем до плиту почему. Вот учёт такие одного бы, об биг разным внешних
+промежуток. Вас до какому возможностей безответственный, были погодите бы
+его, по них глупые долгий количества.
Index: vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/three.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/three.txt b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/three.txt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/three.txt	(date 1495187412000)
@@ -0,0 +1,45 @@
+Αν ήδη διάβασε γλιτώσει μεταγλωτίσει, αυτήν θυμάμαι μου μα. Την κατάσταση χρησιμοποίησέ να! Τα διαφορά φαινόμενο διολισθήσεις πες, υψηλότερη προκαλείς περισσότερες όχι κι. Με ελέγχου γίνεται σας, μικρής δημιουργούν τη του. Τις τα γράψει εικόνες απαράδεκτη?
+
+Να ότι πρώτοι απαραίτητο. Άμεση πετάνε κακόκεφος τον ώς, να χώρου πιθανότητες του. Το μέχρι ορίστε λιγότερους σας. Πω ναί φυσικά εικόνες.
+
+Μου οι κώδικα αποκλειστικούς, λες το μάλλον συνεχώς. Νέου σημεία απίστευτα σας μα. Χρόνου μεταγλωτιστής σε νέα, τη τις πιάνει μπορούσες προγραμματιστές. Των κάνε βγαίνει εντυπωσιακό τα? Κρατάει τεσσαρών δυστυχώς της κι, ήδη υψηλότερη εξακολουθεί τα?
+
+Ώρα πετάνε μπορούσε λιγότερους αν, τα απαράδεκτη συγχωνευτεί ροή. Τη έγραψες συνηθίζουν σαν. Όλα με υλικό στήλες χειρότερα. Ανώδυνη δουλέψει επί ως, αν διαδίκτυο εσωτερικών παράγοντες από. Κεντρικό επιτυχία πες το.
+
+Πω ναι λέει τελειώσει, έξι ως έργων τελειώσει. Με αρχεία βουτήξουν ανταγωνιστής ώρα, πολύ γραφικά σελίδων τα στη. Όρο οέλεγχος δημιουργούν δε, ας θέλεις ελέγχου συντακτικό όρο! Της θυμάμαι επιδιόρθωση τα. Για μπορούσε περισσότερο αν, μέγιστη σημαίνει αποφάσισε τα του, άτομο αποτελέσει τι στα.
+
+Τι στην αφήσεις διοίκηση στη. Τα εσφαλμένη δημιουργια επιχείριση έξι! Βήμα μαγικά εκτελέσει ανά τη. Όλη αφήσεις συνεχώς εμπορικά αν, το λες κόλπα επιτυχία. Ότι οι ζώνη κειμένων. Όρο κι ρωτάει γραμμής πελάτες, τελειώσει διολισθήσεις καθυστερούσε αν εγώ? Τι πετούν διοίκηση προβλήματα ήδη.
+
+Τη γλιτώσει αποθηκευτικού μια. Πω έξι δημιουργια πιθανότητες, ως πέντε ελέγχους εκτελείται λες. Πως ερωτήσεις διοικητικό συγκεντρωμένοι οι, ας συνεχώς διοικητικό αποστηθίσει σαν. Δε πρώτες συνεχώς διολισθήσεις έχω, από τι κανένας βουτήξουν, γειτονιάς προσεκτικά ανταγωνιστής κι σαν.
+
+Δημιουργια συνηθίζουν κλπ τι? Όχι ποσοστό διακοπής κι. Κλπ φακέλους δεδομένη εξοργιστικά θα? Υποψήφιο καθορίζουν με όλη, στα πήρε προσοχή εταιρείες πω, ώς τον συνάδελφος διοικητικό δημιουργήσεις! Δούλευε επιτίθενται σας θα, με ένας παραγωγικής ένα, να ναι σημεία μέγιστη απαράδεκτη?
+
+Σας τεσσαρών συνεντεύξης τη, αρπάζεις σίγουρος μη για', επί τοπικές εντολές ακούσει θα? Ως δυστυχής μεταγλωτιστής όλη, να την είχαν σφάλμα απαραίτητο! Μην ώς άτομο διορθώσει χρησιμοποιούνταν. Δεν τα κόλπα πετάξαμε, μη που άγχος υόρκη άμεση, αφού δυστυχώς διακόψουμε όρο αν! Όλη μαγικά πετάνε επιδιορθώσεις δε, ροή φυσικά αποτελέσει πω.
+
+Άπειρα παραπάνω φαινόμενο πω ώρα, σαν πόρτες κρατήσουν συνηθίζουν ως. Κι ώρα τρέξει είχαμε εφαρμογή. Απλό σχεδιαστής μεταγλωτιστής ας επί, τις τα όταν έγραψες γραμμής? Όλα κάνεις συνάδελφος εργαζόμενοι θα, χαρτιού χαμηλός τα ροή. Ως ναι όροφο έρθει, μην πελάτες αποφάσισε μεταφραστής με, να βιαστικά εκδόσεις αναζήτησης λες. Των φταίει εκθέσεις προσπαθήσεις οι, σπίτι αποστηθίσει ας λες?
+
+Ώς που υπηρεσία απαραίτητο δημιουργείς. Μη άρα χαρά καθώς νύχτας, πω ματ μπουν είχαν. Άμεση δημιουργείς ώς ροή, γράψει γραμμής σίγουρος στα τι! Αν αφού πρώτοι εργαζόμενων ναί.
+
+Άμεση διορθώσεις με δύο? Έχουν παράδειγμα των θα, μου έρθει θυμάμαι περισσότερο το. Ότι θα αφού χρειάζονται περισσότερες. Σαν συνεχώς περίπου οι.
+
+Ώς πρώτης πετάξαμε λες, όρο κι πρώτες ζητήσεις δυστυχής. Ανά χρόνου διακοπή επιχειρηματίες ας, ώς μόλις άτομο χειρότερα όρο, κρατάει σχεδιαστής προσπαθήσεις νέο το. Πουλάς προσθέσει όλη πω, τύπου χαρακτηριστικό εγώ σε, πω πιο δούλευε αναζήτησης? Αναφορά δίνοντας σαν μη, μάθε δεδομένη εσωτερικών με ναι, αναφέρονται περιβάλλοντος ώρα αν. Και λέει απόλαυσε τα, που το όροφο προσπαθούν?
+
+Πάντα χρόνου χρήματα ναι το, σαν σωστά θυμάμαι σκεφτείς τα. Μα αποτελέσει ανεπιθύμητη την, πιο το τέτοιο ατόμου, τη των τρόπο εργαλείων επιδιόρθωσης. Περιβάλλον παραγωγικής σου κι, κλπ οι τύπου κακόκεφους αποστηθίσει, δε των πλέον τρόποι. Πιθανότητες χαρακτηριστικών σας κι, γραφικά δημιουργήσεις μια οι, πω πολλοί εξαρτάται προσεκτικά εδώ. Σταματάς παράγοντες για' ώς, στις ρωτάει το ναι! Καρέκλα ζητήσεις συνδυασμούς τη ήδη!
+
+Για μαγικά συνεχώς ακούσει το. Σταματάς προϊόντα βουτήξουν ώς ροή. Είχαν πρώτες οι ναι, μα λες αποστηθίσει ανακαλύπτεις. Όροφο άλγεβρα παραπάνω εδώ τη, πρόσληψη λαμβάνουν καταλάθος ήδη ας? Ως και εισαγωγή κρατήσουν, ένας κακόκεφους κι μας, όχι κώδικάς παίξουν πω. Πω νέα κρατάει εκφράσουν, τότε τελικών τη όχι, ας της τρέξει αλλάζοντας αποκλειστικούς.
+
+Ένας βιβλίο σε άρα, ναι ως γράψει ταξινομεί διορθώσεις! Εδώ να γεγονός συγγραφείς, ώς ήδη διακόψουμε επιχειρηματίες? Ότι πακέτων εσφαλμένη κι, θα όρο κόλπα παραγωγικής? Αν έχω κεντρικό υψηλότερη, κι δεν ίδιο πετάνε παρατηρούμενη! Που λοιπόν σημαντικό μα, προκαλείς χειροκροτήματα ως όλα, μα επί κόλπα άγχος γραμμές! Δε σου κάνεις βουτήξουν, μη έργων επενδυτής χρησιμοποίησέ στα, ως του πρώτες διάσημα σημαντικό.
+
+Βιβλίο τεράστιο προκύπτουν σαν το, σαν τρόπο επιδιόρθωση ας. Είχαν προσοχή προσπάθεια κι ματ, εδώ ως έτσι σελίδων συζήτηση. Και στην βγαίνει εσφαλμένη με, δυστυχής παράδειγμα δε μας, από σε υόρκη επιδιόρθωσης. Νέα πω νέου πιθανό, στήλες συγγραφείς μπαίνοντας μα για', το ρωτήσει κακόκεφους της? Μου σε αρέσει συγγραφής συγχωνευτεί, μη μου υόρκη ξέχασε διακοπής! Ώς επί αποφάσισε αποκλειστικούς χρησιμοποιώντας, χρήματα σελίδων ταξινομεί ναι με.
+
+Μη ανά γραμμή απόλαυσε, πω ναι μάτσο διασφαλίζεται. Τη έξι μόλις εργάστηκε δημιουργούν, έκδοση αναφορά δυσκολότερο οι νέο. Σας ως μπορούσε παράδειγμα, αν ότι δούλευε μπορούσε αποκλειστικούς, πιο λέει βουτήξουν διορθώσει ως. Έχω τελευταία κακόκεφους ας, όσο εργαζόμενων δημιουργήσεις τα.
+
+Του αν δουλέψει μπορούσε, πετούν χαμηλός εδώ ας? Κύκλο τύπους με που, δεν σε έχουν συνεχώς χειρότερα, τις τι απαράδεκτη συνηθίζουν? Θα μην τους αυτήν, τη ένα πήρε πακέτων, κι προκύπτουν περιβάλλον πως. Μα για δουλέψει απόλαυσε εφαμοργής, ώς εδώ σημαίνει μπορούσες, άμεση ακούσει προσοχή τη εδώ?
+
+Στα δώσε αθόρυβες λιγότερους οι, δε αναγκάζονται αποκλειστικούς όλα! Ας μπουν διοικητικό μια, πάντα ελέγχου διορθώσεις ώς τον. Ότι πήρε κανόνα μα. Που άτομα κάνεις δημιουργίες τα, οι μας αφού κόλπα προγραμματιστής, αφού ωραίο προκύπτουν στα ως. Θέμα χρησιμοποιήσει αν όλα, του τα άλγεβρα σελίδων. Τα ότι ανώδυνη δυστυχώς συνδυασμούς, μας οι πάντα γνωρίζουμε ανταγωνιστής, όχι τα δοκιμάσεις σχεδιαστής! Στην συνεντεύξης επιδιόρθωση πιο τα, μα από πουλάς περιβάλλον παραγωγικής.
+
+Έχουν μεταγλωτίσει σε σας, σε πάντα πρώτης μειώσει των, γράψει ρουτίνα δυσκολότερο ήδη μα? Ταξινομεί διορθώσεις να μας. Θα της προσπαθούν περιεχόμενα, δε έχω τοπικές στέλνοντάς. Ανά δε αλφα άμεση, κάποιο ρωτάει γνωρίζουμε πω στη, φράση μαγικά συνέχεια δε δύο! Αν είχαμε μειώσει ροή, μας μετράει καθυστερούσε επιδιορθώσεις μη. Χάος υόρκη κεντρικό έχω σε, ανά περίπου αναγκάζονται πω.
+
+Όσο επιστρέφουν χρονοδιαγράμματα μη. Πως ωραίο κακόκεφος διαχειριστής ως, τις να διακοπής αναζήτησης. Κάποιο ποσοστό ταξινομεί επί τη? Μάθε άμεση αλλάζοντας δύο με, μου νέου πάντα να.
+
+Πω του δυστυχώς πιθανότητες. Κι ρωτάει υψηλότερη δημιουργια ότι, πω εισαγωγή τελευταία απομόνωση ναι. Των ζητήσεις γνωρίζουμε ώς? Για' μη παραδοτέου αναφέρονται! Ύψος παραγωγικά ροή ως, φυσικά διάβασε εικόνες όσο σε? Δεν υόρκη διορθώσεις επεξεργασία θα, ως μέση σύστημα χρησιμοποιήσει τις.
\ No newline at end of file
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/Utf8ReaderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/Utf8ReaderTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/Utf8ReaderTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterReader/Utf8ReaderTest.php	(date 1495187412000)
@@ -0,0 +1,65 @@
+<?php
+
+class Swift_CharacterReader_Utf8ReaderTest extends \PHPUnit\Framework\TestCase
+{
+    private $reader;
+
+    protected function setUp()
+    {
+        $this->reader = new Swift_CharacterReader_Utf8Reader();
+    }
+
+    public function testLeading7BitOctetCausesReturnZero()
+    {
+        for ($ordinal = 0x00; $ordinal <= 0x7F; ++$ordinal) {
+            $this->assertSame(
+                0, $this->reader->validateByteSequence(array($ordinal), 1)
+                );
+        }
+    }
+
+    public function testLeadingByteOf2OctetCharCausesReturn1()
+    {
+        for ($octet = 0xC0; $octet <= 0xDF; ++$octet) {
+            $this->assertSame(
+                1, $this->reader->validateByteSequence(array($octet), 1)
+                );
+        }
+    }
+
+    public function testLeadingByteOf3OctetCharCausesReturn2()
+    {
+        for ($octet = 0xE0; $octet <= 0xEF; ++$octet) {
+            $this->assertSame(
+                2, $this->reader->validateByteSequence(array($octet), 1)
+                );
+        }
+    }
+
+    public function testLeadingByteOf4OctetCharCausesReturn3()
+    {
+        for ($octet = 0xF0; $octet <= 0xF7; ++$octet) {
+            $this->assertSame(
+                3, $this->reader->validateByteSequence(array($octet), 1)
+                );
+        }
+    }
+
+    public function testLeadingByteOf5OctetCharCausesReturn4()
+    {
+        for ($octet = 0xF8; $octet <= 0xFB; ++$octet) {
+            $this->assertSame(
+                4, $this->reader->validateByteSequence(array($octet), 1)
+                );
+        }
+    }
+
+    public function testLeadingByteOf6OctetCharCausesReturn5()
+    {
+        for ($octet = 0xFC; $octet <= 0xFD; ++$octet) {
+            $this->assertSame(
+                5, $this->reader->validateByteSequence(array($octet), 1)
+                );
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/unit/Swift/CharacterStream/ArrayCharacterStreamTest.php	(date 1495187412000)
@@ -0,0 +1,358 @@
+<?php
+
+class Swift_CharacterStream_ArrayCharacterStreamTest extends \SwiftMailerTestCase
+{
+    public function testValidatorAlgorithmOnImportString()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+
+        $stream->importString(pack('C*',
+            0xD0, 0x94,
+            0xD0, 0xB6,
+            0xD0, 0xBE,
+            0xD1, 0x8D,
+            0xD0, 0xBB,
+            0xD0, 0xB0
+            )
+        );
+    }
+
+    public function testCharactersWrittenUseValidator()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+
+        $stream->importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));
+
+        $stream->write(pack('C*',
+            0xD0, 0xBB,
+            0xD1, 0x8E,
+            0xD0, 0xB1,
+            0xD1, 0x8B,
+            0xD1, 0x85
+            )
+        );
+    }
+
+    public function testReadCharactersAreInTact()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        //String
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        //Stream
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+
+        $stream->importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));
+
+        $stream->write(pack('C*',
+            0xD0, 0xBB,
+            0xD1, 0x8E,
+            0xD0, 0xB1,
+            0xD1, 0x8B,
+            0xD1, 0x85
+            )
+        );
+
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0x94), $stream->read(1));
+        $this->assertIdenticalBinary(
+            pack('C*', 0xD0, 0xB6, 0xD0, 0xBE), $stream->read(2)
+            );
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0xBB), $stream->read(1));
+        $this->assertIdenticalBinary(
+            pack('C*', 0xD1, 0x8E, 0xD0, 0xB1, 0xD1, 0x8B), $stream->read(3)
+            );
+        $this->assertIdenticalBinary(pack('C*', 0xD1, 0x85), $stream->read(1));
+
+        $this->assertFalse($stream->read(1));
+    }
+
+    public function testCharactersCanBeReadAsByteArrays()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        //String
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        //Stream
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1), 1)->andReturn(1);
+
+        $stream->importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));
+
+        $stream->write(pack('C*',
+            0xD0, 0xBB,
+            0xD1, 0x8E,
+            0xD0, 0xB1,
+            0xD1, 0x8B,
+            0xD1, 0x85
+            )
+        );
+
+        $this->assertEquals(array(0xD0, 0x94), $stream->readBytes(1));
+        $this->assertEquals(array(0xD0, 0xB6, 0xD0, 0xBE), $stream->readBytes(2));
+        $this->assertEquals(array(0xD0, 0xBB), $stream->readBytes(1));
+        $this->assertEquals(
+            array(0xD1, 0x8E, 0xD0, 0xB1, 0xD1, 0x8B), $stream->readBytes(3)
+            );
+        $this->assertEquals(array(0xD1, 0x85), $stream->readBytes(1));
+
+        $this->assertFalse($stream->readBytes(1));
+    }
+
+    public function testRequestingLargeCharCountPastEndOfStream()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+
+        $stream->importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));
+
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE),
+            $stream->read(100)
+            );
+
+        $this->assertFalse($stream->read(1));
+    }
+
+    public function testRequestingByteArrayCountPastEndOfStream()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+
+        $stream->importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));
+
+        $this->assertEquals(array(0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE),
+            $stream->readBytes(100)
+            );
+
+        $this->assertFalse($stream->readBytes(1));
+    }
+
+    public function testPointerOffsetCanBeSet()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+
+        $stream->importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));
+
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0x94), $stream->read(1));
+
+        $stream->setPointer(0);
+
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0x94), $stream->read(1));
+
+        $stream->setPointer(2);
+
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0xBE), $stream->read(1));
+    }
+
+    public function testContentsCanBeFlushed()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+
+        $stream->importString(pack('C*', 0xD0, 0x94, 0xD0, 0xB6, 0xD0, 0xBE));
+
+        $stream->flushContents();
+
+        $this->assertFalse($stream->read(1));
+    }
+
+    public function testByteStreamCanBeImportingUsesValidator()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+        $os = $this->getByteStream();
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $os->shouldReceive('setReadPointer')
+           ->between(0, 1)
+           ->with(0);
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xD0));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0x94));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xD0));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xB6));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xD0));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xBE));
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+
+        $stream->importByteStream($os);
+    }
+
+    public function testImportingStreamProducesCorrectCharArray()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+        $os = $this->getByteStream();
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8');
+
+        $os->shouldReceive('setReadPointer')
+           ->between(0, 1)
+           ->with(0);
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xD0));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0x94));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xD0));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xB6));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xD0));
+        $os->shouldReceive('read')->once()->andReturn(pack('C*', 0xBE));
+        $os->shouldReceive('read')
+           ->zeroOrMoreTimes()
+           ->andReturn(false);
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0), 1)->andReturn(1);
+
+        $stream->importByteStream($os);
+
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0x94), $stream->read(1));
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0xB6), $stream->read(1));
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0xBE), $stream->read(1));
+
+        $this->assertFalse($stream->read(1));
+    }
+
+    public function testAlgorithmWithFixedWidthCharsets()
+    {
+        $reader = $this->getReader();
+        $factory = $this->getFactory($reader);
+
+        $reader->shouldReceive('getInitialByteSize')
+               ->zeroOrMoreTimes()
+               ->andReturn(2);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD1, 0x8D), 2);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0, 0xBB), 2);
+        $reader->shouldReceive('validateByteSequence')->once()->with(array(0xD0, 0xB0), 2);
+
+        $stream = new Swift_CharacterStream_ArrayCharacterStream(
+            $factory, 'utf-8'
+        );
+        $stream->importString(pack('C*', 0xD1, 0x8D, 0xD0, 0xBB, 0xD0, 0xB0));
+
+        $this->assertIdenticalBinary(pack('C*', 0xD1, 0x8D), $stream->read(1));
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0xBB), $stream->read(1));
+        $this->assertIdenticalBinary(pack('C*', 0xD0, 0xB0), $stream->read(1));
+
+        $this->assertFalse($stream->read(1));
+    }
+
+    private function getReader()
+    {
+        return $this->getMockery('Swift_CharacterReader');
+    }
+
+    private function getFactory($reader)
+    {
+        $factory = $this->getMockery('Swift_CharacterReaderFactory');
+        $factory->shouldReceive('getReaderFor')
+                ->zeroOrMoreTimes()
+                ->with('utf-8')
+                ->andReturn($reader);
+
+        return $factory;
+    }
+
+    private function getByteStream()
+    {
+        return $this->getMockery('Swift_OutputByteStream');
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/AttachmentSmokeTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/AttachmentSmokeTest.php b/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/AttachmentSmokeTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/AttachmentSmokeTest.php	(date 1495187412000)
@@ -0,0 +1,33 @@
+<?php
+
+/**
+ * @group smoke
+ */
+class Swift_Smoke_AttachmentSmokeTest extends SwiftMailerSmokeTestCase
+{
+    private $_attFile;
+
+    protected function setUp()
+    {
+        parent::setup(); // For skip
+        $this->attFile = __DIR__.'/../../../_samples/files/textfile.zip';
+    }
+
+    public function testAttachmentSending()
+    {
+        $mailer = $this->getMailer();
+        $message = (new Swift_Message())
+            ->setSubject('[Swift Mailer] AttachmentSmokeTest')
+            ->setFrom(array(SWIFT_SMOKE_EMAIL_ADDRESS => 'Swift Mailer'))
+            ->setTo(SWIFT_SMOKE_EMAIL_ADDRESS)
+            ->setBody('This message should contain an attached ZIP file (named "textfile.zip").'.PHP_EOL.
+                'When unzipped, the archive should produce a text file which reads:'.PHP_EOL.
+                '"This is part of a Swift Mailer v4 smoke test."'
+                )
+            ->attach(Swift_Attachment::fromPath($this->attFile))
+            ;
+        $this->assertEquals(1, $mailer->send($message),
+            '%s: The smoke test should send a single message'
+            );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/BasicSmokeTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/BasicSmokeTest.php b/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/BasicSmokeTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/smoke/Swift/Smoke/BasicSmokeTest.php	(date 1495187412000)
@@ -0,0 +1,23 @@
+<?php
+
+/**
+ * @group smoke
+ */
+class Swift_Smoke_BasicSmokeTest extends SwiftMailerSmokeTestCase
+{
+    public function testBasicSending()
+    {
+        $mailer = $this->getMailer();
+        $message = (new Swift_Message())
+            ->setSubject('[Swift Mailer] BasicSmokeTest')
+            ->setFrom(array(SWIFT_SMOKE_EMAIL_ADDRESS => 'Swift Mailer'))
+            ->setTo(SWIFT_SMOKE_EMAIL_ADDRESS)
+            ->setBody('One, two, three, four, five...'.PHP_EOL.
+                'six, seven, eight...'
+                )
+            ;
+        $this->assertEquals(1, $mailer->send($message),
+            '%s: The smoke test should send a single message'
+            );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/EmbeddedFileAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/EmbeddedFileAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/EmbeddedFileAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/EmbeddedFileAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,139 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Mime_EmbeddedFileAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $contentEncoder;
+    private $cache;
+    private $headers;
+    private $emailValidator;
+
+    protected function setUp()
+    {
+        $this->cache = new Swift_KeyCache_ArrayKeyCache(
+            new Swift_KeyCache_SimpleKeyCacheInputStream()
+            );
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $this->contentEncoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
+
+        $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
+            );
+        $paramEncoder = new Swift_Encoder_Rfc2231Encoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
+            );
+        $this->emailValidator = new EmailValidator();
+        $this->idGenerator = new Swift_Mime_IdGenerator('example.com');
+        $this->headers = new Swift_Mime_SimpleHeaderSet(
+            new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $this->emailValidator)
+            );
+    }
+
+    public function testContentIdIsSetInHeader()
+    {
+        $file = $this->createEmbeddedFile();
+        $file->setContentType('application/pdf');
+        $file->setId('foo@bar');
+        $this->assertEquals(
+            'Content-Type: application/pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <foo@bar>'."\r\n".
+            'Content-Disposition: inline'."\r\n",
+            $file->toString()
+            );
+    }
+
+    public function testDispositionIsSetInHeader()
+    {
+        $file = $this->createEmbeddedFile();
+        $id = $file->getId();
+        $file->setContentType('application/pdf');
+        $file->setDisposition('attachment');
+        $this->assertEquals(
+            'Content-Type: application/pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.$id.'>'."\r\n".
+            'Content-Disposition: attachment'."\r\n",
+            $file->toString()
+            );
+    }
+
+    public function testFilenameIsSetInHeader()
+    {
+        $file = $this->createEmbeddedFile();
+        $id = $file->getId();
+        $file->setContentType('application/pdf');
+        $file->setFilename('foo.pdf');
+        $this->assertEquals(
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.$id.'>'."\r\n".
+            'Content-Disposition: inline; filename=foo.pdf'."\r\n",
+            $file->toString()
+            );
+    }
+
+    public function testSizeIsSetInHeader()
+    {
+        $file = $this->createEmbeddedFile();
+        $id = $file->getId();
+        $file->setContentType('application/pdf');
+        $file->setSize(12340);
+        $this->assertEquals(
+            'Content-Type: application/pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.$id.'>'."\r\n".
+            'Content-Disposition: inline; size=12340'."\r\n",
+            $file->toString()
+            );
+    }
+
+    public function testMultipleParametersInHeader()
+    {
+        $file = $this->createEmbeddedFile();
+        $id = $file->getId();
+        $file->setContentType('application/pdf');
+        $file->setFilename('foo.pdf');
+        $file->setSize(12340);
+
+        $this->assertEquals(
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.$id.'>'."\r\n".
+            'Content-Disposition: inline; filename=foo.pdf; size=12340'."\r\n",
+            $file->toString()
+            );
+    }
+
+    public function testEndToEnd()
+    {
+        $file = $this->createEmbeddedFile();
+        $id = $file->getId();
+        $file->setContentType('application/pdf');
+        $file->setFilename('foo.pdf');
+        $file->setSize(12340);
+        $file->setBody('abcd');
+        $this->assertEquals(
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.$id.'>'."\r\n".
+            'Content-Disposition: inline; filename=foo.pdf; size=12340'."\r\n".
+            "\r\n".
+            base64_encode('abcd'),
+            $file->toString()
+            );
+    }
+
+    protected function createEmbeddedFile()
+    {
+        $entity = new Swift_Mime_EmbeddedFile(
+            $this->headers,
+            $this->contentEncoder,
+            $this->cache,
+            $this->idGenerator
+            );
+
+        return $entity;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/MimePartAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/MimePartAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/MimePartAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/MimePartAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,130 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Mime_MimePartAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $contentEncoder;
+    private $cache;
+    private $headers;
+    private $emailValidator;
+
+    protected function setUp()
+    {
+        $this->cache = new Swift_KeyCache_ArrayKeyCache(
+            new Swift_KeyCache_SimpleKeyCacheInputStream()
+            );
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $this->contentEncoder = new Swift_Mime_ContentEncoder_QpContentEncoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8'),
+            new Swift_StreamFilters_ByteArrayReplacementFilter(
+                array(array(0x0D, 0x0A), array(0x0D), array(0x0A)),
+                array(array(0x0A), array(0x0A), array(0x0D, 0x0A))
+                )
+            );
+
+        $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
+            );
+        $paramEncoder = new Swift_Encoder_Rfc2231Encoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
+            );
+        $this->emailValidator = new EmailValidator();
+        $this->idGenerator = new Swift_Mime_IdGenerator('example.com');
+        $this->headers = new Swift_Mime_SimpleHeaderSet(
+            new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $this->emailValidator)
+            );
+    }
+
+    public function testCharsetIsSetInHeader()
+    {
+        $part = $this->createMimePart();
+        $part->setContentType('text/plain');
+        $part->setCharset('utf-8');
+        $part->setBody('foobar');
+        $this->assertEquals(
+            'Content-Type: text/plain; charset=utf-8'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foobar',
+            $part->toString()
+            );
+    }
+
+    public function testFormatIsSetInHeaders()
+    {
+        $part = $this->createMimePart();
+        $part->setContentType('text/plain');
+        $part->setFormat('flowed');
+        $part->setBody('> foobar');
+        $this->assertEquals(
+            'Content-Type: text/plain; format=flowed'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            '> foobar',
+            $part->toString()
+            );
+    }
+
+    public function testDelSpIsSetInHeaders()
+    {
+        $part = $this->createMimePart();
+        $part->setContentType('text/plain');
+        $part->setDelSp(true);
+        $part->setBody('foobar');
+        $this->assertEquals(
+            'Content-Type: text/plain; delsp=yes'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foobar',
+            $part->toString()
+            );
+    }
+
+    public function testAll3ParamsInHeaders()
+    {
+        $part = $this->createMimePart();
+        $part->setContentType('text/plain');
+        $part->setCharset('utf-8');
+        $part->setFormat('fixed');
+        $part->setDelSp(true);
+        $part->setBody('foobar');
+        $this->assertEquals(
+            'Content-Type: text/plain; charset=utf-8; format=fixed; delsp=yes'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foobar',
+            $part->toString()
+            );
+    }
+
+    public function testBodyIsCanonicalized()
+    {
+        $part = $this->createMimePart();
+        $part->setContentType('text/plain');
+        $part->setCharset('utf-8');
+        $part->setBody("foobar\r\rtest\ning\r");
+        $this->assertEquals(
+            'Content-Type: text/plain; charset=utf-8'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            "foobar\r\n".
+            "\r\n".
+            "test\r\n".
+            "ing\r\n",
+            $part->toString()
+            );
+    }
+
+    protected function createMimePart()
+    {
+        $entity = new Swift_Mime_MimePart(
+            $this->headers,
+            $this->contentEncoder,
+            $this->cache,
+            $this->idGenerator
+        );
+
+        return $entity;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/two.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/two.txt b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/two.txt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/utf-8/two.txt	(date 1495187412000)
@@ -0,0 +1,3 @@
+रखति आवश्यकत प्रेरना मुख्यतह हिंदी किएलोग असक्षम कार्यलय करते विवरण किके मानसिक दिनांक पुर्व संसाध एवम् कुशलता अमितकुमार प्रोत्साहित जनित देखने उदेशीत विकसित बलवान ब्रौशर किएलोग विश्लेषण लोगो कैसे जागरुक प्रव्रुति प्रोत्साहित सदस्य आवश्यकत प्रसारन उपलब्धता अथवा हिंदी जनित दर्शाता यन्त्रालय बलवान अतित सहयोग शुरुआत सभीकुछ माहितीवानीज्य लिये खरिदे है।अभी एकत्रित सम्पर्क रिती मुश्किल प्राथमिक भेदनक्षमता विश्व उन्हे गटको द्वारा तकरीबन
+
+विश्व द्वारा व्याख्या सके। आजपर वातावरण व्याख्यान पहोच। हमारी कीसे प्राथमिक विचारशिलता पुर्व करती कम्प्युटर भेदनक्षमता लिये बलवान और्४५० यायेका वार्तालाप सुचना भारत शुरुआत लाभान्वित पढाए संस्था वर्णित मार्गदर्शन चुनने
\ No newline at end of file
Index: vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-8859-1/one.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-8859-1/one.txt b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-8859-1/one.txt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-8859-1/one.txt	(date 1495187412000)
@@ -0,0 +1,19 @@
+Op mat eraus hinnen beschte, rou zënne schaddreg ké. Ké sin Eisen Kaffi prächteg, den haut esou Fielse wa, Well zielen d'Welt am dir. Aus grousse rëschten d'Stroos do, as dat Kléder gewëss d'Kàchen. Schied gehéiert d'Vioule net hu, rou ke zënter Säiten d'Hierz. Ze eise Fletschen mat, gei as gréng d'Lëtzebuerger. Wäit räich no mat.
+
+Säiten d'Liewen aus en. Un gëtt bléit lossen wee, da wéi alle weisen Kolrettchen. Et deser d'Pan d'Kirmes vun, en wuel Benn rëschten méi. En get drem ménger beschte, da wär Stad welle. Nun Dach d'Pied do, mä gét ruffen gehéiert. Ze onser ugedon fir, d'Liewen Plett'len ech no, si Räis wielen bereet wat. Iwer spilt fir jo.
+
+An hin däischter Margréitchen, eng ke Frot brommt, vu den Räis néierens. Da hir Hunn Frot nozegon, rout Fläiß Himmel zum si, net gutt Kaffi Gesträich fu. Vill lait Gaart sou wa, Land Mamm Schuebersonndeg rei do. Gei geet Minutt en, gei d'Leit beschte Kolrettchen et, Mamm fergiess un hun.
+
+Et gutt Heck kommen oft, Lann rëscht rei um, Hunn rëscht schéinste ke der. En lait zielen schnéiwäiss hir, fu rou botze éiweg Minutt, rem fest gudden schaddreg en. Noper bereet Margréitchen mat op, dem denkt d'Leit d'Vioule no, oft ké Himmel Hämmel. En denkt blénken Fréijor net, Gart Schiet d'Natur no wou. No hin Ierd Frot d'Kirmes. Hire aremt un rou, ké den éiweg wielen Milliounen.
+
+Mir si Hunn Blénkeg. Ké get ston derfir d'Kàchen. Haut d'Pan fu ons, dé frou löschteg d'Meereische rei. Sou op wuel Léift. Stret schlon grousse gin hu. Mä denkt d'Leit hinnen net, ké gét haut fort rëscht.
+
+Koum d'Pan hannendrun ass ké, ké den brét Kaffi geplot. Schéi Hären d'Pied fu gét, do d'Mier néierens bei. Rëm päift Hämmel am, wee Engel beschéngt mä. Brommt klinzecht der ke, wa rout jeitzt dén. Get Zalot d'Vioule däischter da, jo fir Bänk päift duerch, bei d'Beem schéinen Plett'len jo. Den haut Faarwen ze, eng en Biereg Kirmesdag, um sin alles Faarwen d'Vioule.
+
+Eng Hunn Schied et, wat wa Frot fest gebotzt. Bei jo bleiwe ruffen Klarinett. Un Feld klinzecht gét, rifft Margréitchen rem ke. Mir dé Noper duurch gewëss, ston sech kille sin en. Gei Stret d'Wise um, Haus Gart wee as. Monn ménger an blo, wat da Gart gefällt Hämmelsbrot.
+
+Brommt geplot och ze, dat wa Räis Well Kaffi. Do get spilt prächteg, as wär kille bleiwe gewalteg. Onser frësch Margréitchen rem ke, blo en huet ugedon. Onser Hemecht wär de, hu eraus d'Sonn dat, eise deser hannendrun da och.
+
+As durch Himmel hun, no fest iw'rem schéinste mir, Hunn séngt Hierz ke zum. Séngt iw'rem d'Natur zum an. Ke wär gutt Grénge. Kënnt gudden prächteg mä rei. Dé dir Blénkeg Klarinett Kolrettchen, da fort muerges d'Kanner wou, main Feld ruffen vu wéi. Da gin esou Zalot gewalteg, gét vill Hemecht blénken dé.
+
+Haut gréng nun et, nei vu Bass gréng d'Gaassen. Fest d'Beem uechter si gin. Oft vu sinn wellen kréien. Et ass lait Zalot schéinen.
\ No newline at end of file
Index: vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-2022-jp/one.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-2022-jp/one.txt b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-2022-jp/one.txt
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/_samples/charsets/iso-2022-jp/one.txt	(date 1495187412000)
@@ -0,0 +1,11 @@
+ISO-2022-JPは、インターネット上(特に電子メール)などで使われる日本の文字用の文字符号化方式。ISO/IEC 2022のエスケープシーケンスを利用して文字集合を切り替える7ビットのコードであることを特徴とする (アナウンス機能のエスケープシーケンスは省略される)。俗に「JISコード」と呼ばれることもある。
+
+概要
+日本語表記への利用が想定されている文字コードであり、日本語の利用されるネットワークにおいて、日本の規格を応用したものである。また文字集合としては、日本語で用いられる漢字、ひらがな、カタカナはもちろん、ラテン文字、ギリシア文字、キリル文字なども含んでおり、学術や産業の分野での利用も考慮たものとなっている。規格名に、ISOの日本語の言語コードであるjaではなく、国・地域名コードのJPが示されているゆえんである。
+文字集合としてJIS X 0201のC0集合（制御文字）、JIS X 0201のラテン文字集合、ISO 646の国際基準版図形文字、JIS X 0208の1978年版（JIS C 6226-1978）と1983年および1990年版が利用できる。JIS X 0201の片仮名文字集合は利用できない。1986年以降、日本の電子メールで用いられてきたJUNETコードを、村井純・Mark Crispin・Erik van der Poelが1993年にRFC化したもの(RFC 1468)。後にJIS X 0208:1997の附属書2としてJISに規定された。MIMEにおける文字符号化方式の識別用の名前として IANA に登録されている。
+なお、符号化の仕様についてはISO/IEC 2022#ISO-2022-JPも参照。
+
+ISO-2022-JPと非標準的拡張使用
+「JISコード」（または「ISO-2022-JP」）というコード名の規定下では、その仕様通りの使用が求められる。しかし、Windows OS上では、実際にはCP932コード (MicrosoftによるShift JISを拡張した亜種。ISO-2022-JP規定外文字が追加されている。）による独自拡張（の文字）を断りなく使うアプリケーションが多い。この例としてInternet ExplorerやOutlook Expressがある。また、EmEditor、秀丸エディタやThunderbirdのようなMicrosoft社以外のWindowsアプリケーションでも同様の場合がある。この場合、ISO-2022-JPの範囲外の文字を使ってしまうと、異なる製品間では未定義不明文字として認識されるか、もしくは文字化けを起こす原因となる。そのため、Windows用の電子メールクライアントであっても独自拡張の文字を使用すると警告を出したり、あえて使えないように制限しているものも存在する。さらにはISO-2022-JPの範囲内であってもCP932は非標準文字（FULLWIDTH TILDE等）を持つので文字化けの原因になり得る。
+また、符号化方式名をISO-2022-JPとしているのに、文字集合としてはJIS X 0212 (いわゆる補助漢字) やJIS X 0201の片仮名文字集合 (いわゆる半角カナ) をも符号化している例があるが、ISO-2022-JPではこれらの文字を許容していない。これらの符号化は独自拡張の実装であり、中にはISO/IEC 2022の仕様に準拠すらしていないものもある[2]。従って受信側の電子メールクライアントがこれらの独自拡張に対応していない場合、その文字あるいはその文字を含む行、時にはテキスト全体が文字化けすることがある。
+
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/AttachmentAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/AttachmentAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/AttachmentAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/AttachmentAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,126 @@
+<?php
+
+use Egulias\EmailValidator\EmailValidator;
+
+class Swift_Mime_AttachmentAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $contentEncoder;
+    private $cache;
+    private $headers;
+    private $emailValidator;
+
+    protected function setUp()
+    {
+        $this->cache = new Swift_KeyCache_ArrayKeyCache(
+            new Swift_KeyCache_SimpleKeyCacheInputStream()
+            );
+        $factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+        $this->contentEncoder = new Swift_Mime_ContentEncoder_Base64ContentEncoder();
+
+        $headerEncoder = new Swift_Mime_HeaderEncoder_QpHeaderEncoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
+            );
+        $paramEncoder = new Swift_Encoder_Rfc2231Encoder(
+            new Swift_CharacterStream_ArrayCharacterStream($factory, 'utf-8')
+            );
+        $this->emailValidator = new EmailValidator();
+        $this->idGenerator = new Swift_Mime_IdGenerator('example.com');
+        $this->headers = new Swift_Mime_SimpleHeaderSet(
+            new Swift_Mime_SimpleHeaderFactory($headerEncoder, $paramEncoder, $this->emailValidator)
+            );
+    }
+
+    public function testDispositionIsSetInHeader()
+    {
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setDisposition('inline');
+        $this->assertEquals(
+            'Content-Type: application/pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: inline'."\r\n",
+            $attachment->toString()
+            );
+    }
+
+    public function testDispositionIsAttachmentByDefault()
+    {
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $this->assertEquals(
+            'Content-Type: application/pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment'."\r\n",
+            $attachment->toString()
+            );
+    }
+
+    public function testFilenameIsSetInHeader()
+    {
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setFilename('foo.pdf');
+        $this->assertEquals(
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; filename=foo.pdf'."\r\n",
+            $attachment->toString()
+            );
+    }
+
+    public function testSizeIsSetInHeader()
+    {
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setSize(12340);
+        $this->assertEquals(
+            'Content-Type: application/pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; size=12340'."\r\n",
+            $attachment->toString()
+            );
+    }
+
+    public function testMultipleParametersInHeader()
+    {
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setFilename('foo.pdf');
+        $attachment->setSize(12340);
+        $this->assertEquals(
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; filename=foo.pdf; size=12340'."\r\n",
+            $attachment->toString()
+            );
+    }
+
+    public function testEndToEnd()
+    {
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setFilename('foo.pdf');
+        $attachment->setSize(12340);
+        $attachment->setBody('abcd');
+        $this->assertEquals(
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; filename=foo.pdf; size=12340'."\r\n".
+            "\r\n".
+            base64_encode('abcd'),
+            $attachment->toString()
+            );
+    }
+
+    protected function createAttachment()
+    {
+        $entity = new Swift_Mime_Attachment(
+            $this->headers,
+            $this->contentEncoder,
+            $this->cache,
+            $this->idGenerator
+            );
+
+        return $entity;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/ArrayKeyCacheAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/ArrayKeyCacheAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/ArrayKeyCacheAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/ArrayKeyCacheAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,173 @@
+<?php
+
+class Swift_KeyCache_ArrayKeyCacheAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $cache;
+    private $key1 = 'key1';
+    private $key2 = 'key2';
+
+    protected function setUp()
+    {
+        $this->cache = new Swift_KeyCache_ArrayKeyCache(
+            new Swift_KeyCache_SimpleKeyCacheInputStream()
+            );
+    }
+
+    public function testStringDataCanBeSetAndFetched()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('test', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testStringDataCanBeOverwritten()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key1, 'foo', 'whatever', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('whatever', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testStringDataCanBeAppended()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key1, 'foo', 'ing', Swift_KeyCache::MODE_APPEND
+            );
+        $this->assertEquals('testing', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testHasKeyReturnValue()
+    {
+        $this->assertFalse($this->cache->hasKey($this->key1, 'foo'));
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertTrue($this->cache->hasKey($this->key1, 'foo'));
+    }
+
+    public function testNsKeyIsWellPartitioned()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key2, 'foo', 'ing', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('test', $this->cache->getString($this->key1, 'foo'));
+        $this->assertEquals('ing', $this->cache->getString($this->key2, 'foo'));
+    }
+
+    public function testItemKeyIsWellPartitioned()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key1, 'bar', 'ing', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('test', $this->cache->getString($this->key1, 'foo'));
+        $this->assertEquals('ing', $this->cache->getString($this->key1, 'bar'));
+    }
+
+    public function testByteStreamCanBeImported()
+    {
+        $os = new Swift_ByteStream_ArrayByteStream();
+        $os->write('abcdef');
+
+        $this->cache->importFromByteStream(
+            $this->key1, 'foo', $os, Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('abcdef', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testByteStreamCanBeAppended()
+    {
+        $os1 = new Swift_ByteStream_ArrayByteStream();
+        $os1->write('abcdef');
+
+        $os2 = new Swift_ByteStream_ArrayByteStream();
+        $os2->write('xyzuvw');
+
+        $this->cache->importFromByteStream(
+            $this->key1, 'foo', $os1, Swift_KeyCache::MODE_APPEND
+            );
+        $this->cache->importFromByteStream(
+            $this->key1, 'foo', $os2, Swift_KeyCache::MODE_APPEND
+            );
+
+        $this->assertEquals('abcdefxyzuvw', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testByteStreamAndStringCanBeAppended()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_APPEND
+            );
+
+        $os = new Swift_ByteStream_ArrayByteStream();
+        $os->write('abcdef');
+
+        $this->cache->importFromByteStream(
+            $this->key1, 'foo', $os, Swift_KeyCache::MODE_APPEND
+            );
+        $this->assertEquals('testabcdef', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testDataCanBeExportedToByteStream()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+
+        $is = new Swift_ByteStream_ArrayByteStream();
+
+        $this->cache->exportToByteStream($this->key1, 'foo', $is);
+
+        $string = '';
+        while (false !== $bytes = $is->read(8192)) {
+            $string .= $bytes;
+        }
+
+        $this->assertEquals('test', $string);
+    }
+
+    public function testKeyCanBeCleared()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertTrue($this->cache->hasKey($this->key1, 'foo'));
+        $this->cache->clearKey($this->key1, 'foo');
+        $this->assertFalse($this->cache->hasKey($this->key1, 'foo'));
+    }
+
+    public function testNsKeyCanBeCleared()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key1, 'bar', 'xyz', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertTrue($this->cache->hasKey($this->key1, 'foo'));
+        $this->assertTrue($this->cache->hasKey($this->key1, 'bar'));
+        $this->cache->clearAll($this->key1);
+        $this->assertFalse($this->cache->hasKey($this->key1, 'foo'));
+        $this->assertFalse($this->cache->hasKey($this->key1, 'bar'));
+    }
+
+    public function testKeyCacheInputStream()
+    {
+        $is = $this->cache->getInputByteStream($this->key1, 'foo');
+        $is->write('abc');
+        $is->write('xyz');
+        $this->assertEquals('abcxyz', $this->cache->getString($this->key1, 'foo'));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/DiskKeyCacheAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/DiskKeyCacheAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/DiskKeyCacheAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/KeyCache/DiskKeyCacheAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,173 @@
+<?php
+
+class Swift_KeyCache_DiskKeyCacheAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $cache;
+    private $key1;
+    private $key2;
+
+    protected function setUp()
+    {
+        $this->key1 = uniqid(microtime(true), true);
+        $this->key2 = uniqid(microtime(true), true);
+        $this->cache = new Swift_KeyCache_DiskKeyCache(new Swift_KeyCache_SimpleKeyCacheInputStream(), sys_get_temp_dir());
+    }
+
+    public function testStringDataCanBeSetAndFetched()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('test', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testStringDataCanBeOverwritten()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key1, 'foo', 'whatever', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('whatever', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testStringDataCanBeAppended()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key1, 'foo', 'ing', Swift_KeyCache::MODE_APPEND
+            );
+        $this->assertEquals('testing', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testHasKeyReturnValue()
+    {
+        $this->assertFalse($this->cache->hasKey($this->key1, 'foo'));
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertTrue($this->cache->hasKey($this->key1, 'foo'));
+    }
+
+    public function testNsKeyIsWellPartitioned()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key2, 'foo', 'ing', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('test', $this->cache->getString($this->key1, 'foo'));
+        $this->assertEquals('ing', $this->cache->getString($this->key2, 'foo'));
+    }
+
+    public function testItemKeyIsWellPartitioned()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key1, 'bar', 'ing', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('test', $this->cache->getString($this->key1, 'foo'));
+        $this->assertEquals('ing', $this->cache->getString($this->key1, 'bar'));
+    }
+
+    public function testByteStreamCanBeImported()
+    {
+        $os = new Swift_ByteStream_ArrayByteStream();
+        $os->write('abcdef');
+
+        $this->cache->importFromByteStream(
+            $this->key1, 'foo', $os, Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertEquals('abcdef', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testByteStreamCanBeAppended()
+    {
+        $os1 = new Swift_ByteStream_ArrayByteStream();
+        $os1->write('abcdef');
+
+        $os2 = new Swift_ByteStream_ArrayByteStream();
+        $os2->write('xyzuvw');
+
+        $this->cache->importFromByteStream(
+            $this->key1, 'foo', $os1, Swift_KeyCache::MODE_APPEND
+            );
+        $this->cache->importFromByteStream(
+            $this->key1, 'foo', $os2, Swift_KeyCache::MODE_APPEND
+            );
+
+        $this->assertEquals('abcdefxyzuvw', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testByteStreamAndStringCanBeAppended()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_APPEND
+            );
+
+        $os = new Swift_ByteStream_ArrayByteStream();
+        $os->write('abcdef');
+
+        $this->cache->importFromByteStream(
+            $this->key1, 'foo', $os, Swift_KeyCache::MODE_APPEND
+            );
+        $this->assertEquals('testabcdef', $this->cache->getString($this->key1, 'foo'));
+    }
+
+    public function testDataCanBeExportedToByteStream()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+
+        $is = new Swift_ByteStream_ArrayByteStream();
+
+        $this->cache->exportToByteStream($this->key1, 'foo', $is);
+
+        $string = '';
+        while (false !== $bytes = $is->read(8192)) {
+            $string .= $bytes;
+        }
+
+        $this->assertEquals('test', $string);
+    }
+
+    public function testKeyCanBeCleared()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertTrue($this->cache->hasKey($this->key1, 'foo'));
+        $this->cache->clearKey($this->key1, 'foo');
+        $this->assertFalse($this->cache->hasKey($this->key1, 'foo'));
+    }
+
+    public function testNsKeyCanBeCleared()
+    {
+        $this->cache->setString(
+            $this->key1, 'foo', 'test', Swift_KeyCache::MODE_WRITE
+            );
+        $this->cache->setString(
+            $this->key1, 'bar', 'xyz', Swift_KeyCache::MODE_WRITE
+            );
+        $this->assertTrue($this->cache->hasKey($this->key1, 'foo'));
+        $this->assertTrue($this->cache->hasKey($this->key1, 'bar'));
+        $this->cache->clearAll($this->key1);
+        $this->assertFalse($this->cache->hasKey($this->key1, 'foo'));
+        $this->assertFalse($this->cache->hasKey($this->key1, 'bar'));
+    }
+
+    public function testKeyCacheInputStream()
+    {
+        $is = $this->cache->getInputByteStream($this->key1, 'foo');
+        $is->write('abc');
+        $is->write('xyz');
+        $this->assertEquals('abcxyz', $this->cache->getString($this->key1, 'foo'));
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/ByteStream/FileByteStreamAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,162 @@
+<?php
+
+class Swift_ByteStream_FileByteStreamAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $_testFile;
+
+    protected function setUp()
+    {
+        $this->testFile = sys_get_temp_dir().'/swift-test-file'.__CLASS__;
+        file_put_contents($this->testFile, 'abcdefghijklm');
+    }
+
+    protected function tearDown()
+    {
+        unlink($this->testFile);
+    }
+
+    public function testFileDataCanBeRead()
+    {
+        $file = $this->createFileStream($this->testFile);
+        $str = '';
+        while (false !== $bytes = $file->read(8192)) {
+            $str .= $bytes;
+        }
+        $this->assertEquals('abcdefghijklm', $str);
+    }
+
+    public function testFileDataCanBeReadSequentially()
+    {
+        $file = $this->createFileStream($this->testFile);
+        $this->assertEquals('abcde', $file->read(5));
+        $this->assertEquals('fghijklm', $file->read(8));
+        $this->assertFalse($file->read(1));
+    }
+
+    public function testFilenameIsReturned()
+    {
+        $file = $this->createFileStream($this->testFile);
+        $this->assertEquals($this->testFile, $file->getPath());
+    }
+
+    public function testFileCanBeWrittenTo()
+    {
+        $file = $this->createFileStream($this->testFile, true);
+        $file->write('foobar');
+        $this->assertEquals('foobar', $file->read(8192));
+    }
+
+    public function testReadingFromThenWritingToFile()
+    {
+        $file = $this->createFileStream($this->testFile, true);
+        $file->write('foobar');
+        $this->assertEquals('foobar', $file->read(8192));
+        $file->write('zipbutton');
+        $this->assertEquals('zipbutton', $file->read(8192));
+    }
+
+    public function testWritingToFileWithCanonicalization()
+    {
+        $file = $this->createFileStream($this->testFile, true);
+        $file->addFilter($this->createFilter(array("\r\n", "\r"), "\n"), 'allToLF');
+        $file->write("foo\r\nbar\r");
+        $file->write("\nzip\r\ntest\r");
+        $file->flushBuffers();
+        $this->assertEquals("foo\nbar\nzip\ntest\n", file_get_contents($this->testFile));
+    }
+
+    public function testWritingWithFulleMessageLengthOfAMultipleOf8192()
+    {
+        $file = $this->createFileStream($this->testFile, true);
+        $file->addFilter($this->createFilter(array("\r\n", "\r"), "\n"), 'allToLF');
+        $file->write('');
+        $file->flushBuffers();
+        $this->assertEquals('', file_get_contents($this->testFile));
+    }
+
+    public function testBindingOtherStreamsMirrorsWriteOperations()
+    {
+        $file = $this->createFileStream($this->testFile, true);
+        $is1 = $this->createMockInputStream();
+        $is2 = $this->createMockInputStream();
+
+        $is1->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is1->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+        $is2->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is2->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+
+        $file->bind($is1);
+        $file->bind($is2);
+
+        $file->write('x');
+        $file->write('y');
+    }
+
+    public function testBindingOtherStreamsMirrorsFlushOperations()
+    {
+        $file = $this->createFileStream(
+            $this->testFile, true
+            );
+        $is1 = $this->createMockInputStream();
+        $is2 = $this->createMockInputStream();
+
+        $is1->expects($this->once())
+            ->method('flushBuffers');
+        $is2->expects($this->once())
+            ->method('flushBuffers');
+
+        $file->bind($is1);
+        $file->bind($is2);
+
+        $file->flushBuffers();
+    }
+
+    public function testUnbindingStreamPreventsFurtherWrites()
+    {
+        $file = $this->createFileStream($this->testFile, true);
+        $is1 = $this->createMockInputStream();
+        $is2 = $this->createMockInputStream();
+
+        $is1->expects($this->at(0))
+            ->method('write')
+            ->with('x');
+        $is1->expects($this->at(1))
+            ->method('write')
+            ->with('y');
+        $is2->expects($this->once())
+            ->method('write')
+            ->with('x');
+
+        $file->bind($is1);
+        $file->bind($is2);
+
+        $file->write('x');
+
+        $file->unbind($is2);
+
+        $file->write('y');
+    }
+
+    private function createFilter($search, $replace)
+    {
+        return new Swift_StreamFilters_StringReplacementFilter($search, $replace);
+    }
+
+    private function createMockInputStream()
+    {
+        return $this->getMockBuilder('Swift_InputByteStream')->getMock();
+    }
+
+    private function createFileStream($file, $writable = false)
+    {
+        return new Swift_ByteStream_FileByteStream($file, $writable);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Mime/SimpleMessageAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,1250 @@
+<?php
+
+class Swift_Mime_SimpleMessageAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    protected function setUp()
+    {
+        Swift_Preferences::getInstance()->setCharset(null); //TODO: Test with the charset defined
+    }
+
+    public function testBasicHeaders()
+    {
+        /* -- RFC 2822, 3.6.
+     */
+
+        $message = $this->createMessage();
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString(),
+            '%s: Only required headers, and non-empty headers should be displayed'
+            );
+    }
+
+    public function testSubjectIsDisplayedIfSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testDateCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $id = $message->getId();
+        $date = new DateTimeImmutable();
+        $message->setDate($date);
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testMessageIdCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setId('foo@bar');
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <foo@bar>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testContentTypeCanBeChanged()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setContentType('text/html');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/html'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testCharsetCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setContentType('text/html');
+        $message->setCharset('iso-8859-1');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/html; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testFormatCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFormat('flowed');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain; format=flowed'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testEncoderCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setContentType('text/html');
+        $message->setEncoder(
+            new Swift_Mime_ContentEncoder_PlainContentEncoder('7bit')
+            );
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/html'."\r\n".
+            'Content-Transfer-Encoding: 7bit'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testFromAddressCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom('chris.corbyn@swiftmailer.org');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: chris.corbyn@swiftmailer.org'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testFromAddressCanBeSetWithName()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris Corbyn'));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testMultipleFromAddressesCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn',
+            'mark@swiftmailer.org',
+            ));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>, mark@swiftmailer.org'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testReturnPathAddressCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testEmptyReturnPathHeaderCanBeUsed()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Return-Path: <>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testSenderCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setSender('chris.corbyn@swiftmailer.org');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Sender: chris.corbyn@swiftmailer.org'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testSenderCanBeSetWithName()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setSender(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Sender: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: '."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testReplyToCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $message->setReplyTo(array('chris@w3style.co.uk' => 'Myself'));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Reply-To: Myself <chris@w3style.co.uk>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testMultipleReplyAddressCanBeUsed()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $message->setReplyTo(array(
+            'chris@w3style.co.uk' => 'Myself',
+            'my.other@address.com' => 'Me',
+            ));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Reply-To: Myself <chris@w3style.co.uk>, Me <my.other@address.com>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testToAddressCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $message->setReplyTo(array(
+            'chris@w3style.co.uk' => 'Myself',
+            'my.other@address.com' => 'Me',
+            ));
+        $message->setTo('mark@swiftmailer.org');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Reply-To: Myself <chris@w3style.co.uk>, Me <my.other@address.com>'."\r\n".
+            'To: mark@swiftmailer.org'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testMultipleToAddressesCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $message->setReplyTo(array(
+            'chris@w3style.co.uk' => 'Myself',
+            'my.other@address.com' => 'Me',
+            ));
+        $message->setTo(array(
+            'mark@swiftmailer.org', 'chris@swiftmailer.org' => 'Chris Corbyn',
+            ));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Reply-To: Myself <chris@w3style.co.uk>, Me <my.other@address.com>'."\r\n".
+            'To: mark@swiftmailer.org, Chris Corbyn <chris@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testCcAddressCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $message->setReplyTo(array(
+            'chris@w3style.co.uk' => 'Myself',
+            'my.other@address.com' => 'Me',
+            ));
+        $message->setTo(array(
+            'mark@swiftmailer.org', 'chris@swiftmailer.org' => 'Chris Corbyn',
+            ));
+        $message->setCc('john@some-site.com');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Reply-To: Myself <chris@w3style.co.uk>, Me <my.other@address.com>'."\r\n".
+            'To: mark@swiftmailer.org, Chris Corbyn <chris@swiftmailer.org>'."\r\n".
+            'Cc: john@some-site.com'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testMultipleCcAddressesCanBeSet()
+    {
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $message->setReplyTo(array(
+            'chris@w3style.co.uk' => 'Myself',
+            'my.other@address.com' => 'Me',
+            ));
+        $message->setTo(array(
+            'mark@swiftmailer.org', 'chris@swiftmailer.org' => 'Chris Corbyn',
+            ));
+        $message->setCc(array(
+            'john@some-site.com' => 'John West',
+            'fred@another-site.co.uk' => 'Big Fred',
+            ));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Reply-To: Myself <chris@w3style.co.uk>, Me <my.other@address.com>'."\r\n".
+            'To: mark@swiftmailer.org, Chris Corbyn <chris@swiftmailer.org>'."\r\n".
+            'Cc: John West <john@some-site.com>, Big Fred <fred@another-site.co.uk>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testBccAddressCanBeSet()
+    {
+        //Obviously Transports need to setBcc(array()) and send to each Bcc recipient
+        // separately in accordance with RFC 2822/2821
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $message->setReplyTo(array(
+            'chris@w3style.co.uk' => 'Myself',
+            'my.other@address.com' => 'Me',
+            ));
+        $message->setTo(array(
+            'mark@swiftmailer.org', 'chris@swiftmailer.org' => 'Chris Corbyn',
+            ));
+        $message->setCc(array(
+            'john@some-site.com' => 'John West',
+            'fred@another-site.co.uk' => 'Big Fred',
+            ));
+        $message->setBcc('x@alphabet.tld');
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Reply-To: Myself <chris@w3style.co.uk>, Me <my.other@address.com>'."\r\n".
+            'To: mark@swiftmailer.org, Chris Corbyn <chris@swiftmailer.org>'."\r\n".
+            'Cc: John West <john@some-site.com>, Big Fred <fred@another-site.co.uk>'."\r\n".
+            'Bcc: x@alphabet.tld'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testMultipleBccAddressesCanBeSet()
+    {
+        //Obviously Transports need to setBcc(array()) and send to each Bcc recipient
+        // separately in accordance with RFC 2822/2821
+        $message = $this->createMessage();
+        $message->setSubject('just a test subject');
+        $message->setFrom(array('chris.corbyn@swiftmailer.org' => 'Chris'));
+        $message->setReplyTo(array(
+            'chris@w3style.co.uk' => 'Myself',
+            'my.other@address.com' => 'Me',
+            ));
+        $message->setTo(array(
+            'mark@swiftmailer.org', 'chris@swiftmailer.org' => 'Chris Corbyn',
+            ));
+        $message->setCc(array(
+            'john@some-site.com' => 'John West',
+            'fred@another-site.co.uk' => 'Big Fred',
+            ));
+        $message->setBcc(array('x@alphabet.tld', 'a@alphabet.tld' => 'A'));
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris <chris.corbyn@swiftmailer.org>'."\r\n".
+            'Reply-To: Myself <chris@w3style.co.uk>, Me <my.other@address.com>'."\r\n".
+            'To: mark@swiftmailer.org, Chris Corbyn <chris@swiftmailer.org>'."\r\n".
+            'Cc: John West <john@some-site.com>, Big Fred <fred@another-site.co.uk>'."\r\n".
+            'Bcc: x@alphabet.tld, A <a@alphabet.tld>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testStringBodyIsAppended()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+        $message->setBody(
+            'just a test body'."\r\n".
+            'with a new line'
+            );
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'just a test body'."\r\n".
+            'with a new line',
+            $message->toString()
+            );
+    }
+
+    public function testStringBodyIsEncoded()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+        $message->setBody(
+            'Just s'.pack('C*', 0xC2, 0x01, 0x01).'me multi-'."\r\n".
+            'line message!'
+            );
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'Just s=C2=01=01me multi-'."\r\n".
+            'line message!',
+            $message->toString()
+            );
+    }
+
+    public function testChildrenCanBeAttached()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+
+        $id = $message->getId();
+        $date = $message->getDate();
+        $boundary = $message->getBoundary();
+
+        $part1 = $this->createMimePart();
+        $part1->setContentType('text/plain');
+        $part1->setCharset('iso-8859-1');
+        $part1->setBody('foo');
+
+        $message->attach($part1);
+
+        $part2 = $this->createMimePart();
+        $part2->setContentType('text/html');
+        $part2->setCharset('iso-8859-1');
+        $part2->setBody('test <b>foo</b>');
+
+        $message->attach($part2);
+
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/alternative;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/plain; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/html; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'test <b>foo</b>'.
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testAttachmentsBeingAttached()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+
+        $part = $this->createMimePart();
+        $part->setContentType('text/plain');
+        $part->setCharset('iso-8859-1');
+        $part->setBody('foo');
+
+        $message->attach($part);
+
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setFilename('foo.pdf');
+        $attachment->setBody('<pdf data>');
+
+        $message->attach($attachment);
+
+        $this->assertRegExp(
+            '~^'.
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/mixed;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: multipart/alternative;'."\r\n".
+            ' boundary="(.*?)"'."\r\n".
+            "\r\n\r\n".
+            '--\\1'."\r\n".
+            'Content-Type: text/plain; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+            "\r\n\r\n".
+            '--\\1--'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; filename=foo.pdf'."\r\n".
+            "\r\n".
+            preg_quote(base64_encode('<pdf data>'), '~').
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n".
+            '$~D',
+            $message->toString()
+            );
+    }
+
+    public function testAttachmentsAndEmbeddedFilesBeingAttached()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+
+        $part = $this->createMimePart();
+        $part->setContentType('text/plain');
+        $part->setCharset('iso-8859-1');
+        $part->setBody('foo');
+
+        $message->attach($part);
+
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setFilename('foo.pdf');
+        $attachment->setBody('<pdf data>');
+
+        $message->attach($attachment);
+
+        $file = $this->createEmbeddedFile();
+        $file->setContentType('image/jpeg');
+        $file->setFilename('myimage.jpg');
+        $file->setBody('<image data>');
+
+        $message->attach($file);
+
+        $cid = $file->getId();
+
+        $this->assertRegExp(
+            '~^'.
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/mixed;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: multipart/alternative;'."\r\n".
+            ' boundary="(.*?)"'."\r\n".
+            "\r\n\r\n".
+            '--\\1'."\r\n".
+            'Content-Type: text/plain; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+
+            "\r\n\r\n".
+            '--\\1'."\r\n".
+            'Content-Type: multipart/related;'."\r\n".
+            ' boundary="(.*?)"'."\r\n".
+            "\r\n\r\n".
+            '--\\2'."\r\n".
+            'Content-Type: image/jpeg; name=myimage.jpg'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.$cid.'>'."\r\n".
+            'Content-Disposition: inline; filename=myimage.jpg'."\r\n".
+            "\r\n".
+            preg_quote(base64_encode('<image data>'), '~').
+            "\r\n\r\n".
+            '--\\2--'."\r\n".
+            "\r\n\r\n".
+            '--\\1--'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; filename=foo.pdf'."\r\n".
+            "\r\n".
+            preg_quote(base64_encode('<pdf data>'), '~').
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n".
+            '$~D',
+            $message->toString()
+            );
+    }
+
+    public function testComplexEmbeddingOfContent()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setFilename('foo.pdf');
+        $attachment->setBody('<pdf data>');
+
+        $message->attach($attachment);
+
+        $file = $this->createEmbeddedFile();
+        $file->setContentType('image/jpeg');
+        $file->setFilename('myimage.jpg');
+        $file->setBody('<image data>');
+
+        $part = $this->createMimePart();
+        $part->setContentType('text/html');
+        $part->setCharset('iso-8859-1');
+        $part->setBody('foo <img src="'.$message->embed($file).'" />');
+
+        $message->attach($part);
+
+        $cid = $file->getId();
+
+        $this->assertRegExp(
+            '~^'.
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/mixed;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: multipart/related;'."\r\n".
+            ' boundary="(.*?)"'."\r\n".
+            "\r\n\r\n".
+            '--\\1'."\r\n".
+            'Content-Type: text/html; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo <img src=3D"cid:'.$cid.'" />'.//=3D is just = in QP
+            "\r\n\r\n".
+            '--\\1'."\r\n".
+            'Content-Type: image/jpeg; name=myimage.jpg'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.$cid.'>'."\r\n".
+            'Content-Disposition: inline; filename=myimage.jpg'."\r\n".
+            "\r\n".
+            preg_quote(base64_encode('<image data>'), '~').
+            "\r\n\r\n".
+            '--\\1--'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; filename=foo.pdf'."\r\n".
+            "\r\n".
+            preg_quote(base64_encode('<pdf data>'), '~').
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n".
+            '$~D',
+            $message->toString()
+            );
+    }
+
+    public function testAttachingAndDetachingContent()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+
+        $id = $message->getId();
+        $date = preg_quote($message->getDate()->format('r'), '~');
+        $boundary = $message->getBoundary();
+
+        $part = $this->createMimePart();
+        $part->setContentType('text/plain');
+        $part->setCharset('iso-8859-1');
+        $part->setBody('foo');
+
+        $message->attach($part);
+
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setFilename('foo.pdf');
+        $attachment->setBody('<pdf data>');
+
+        $message->attach($attachment);
+
+        $file = $this->createEmbeddedFile();
+        $file->setContentType('image/jpeg');
+        $file->setFilename('myimage.jpg');
+        $file->setBody('<image data>');
+
+        $message->attach($file);
+
+        $cid = $file->getId();
+
+        $message->detach($attachment);
+
+        $this->assertRegExp(
+            '~^'.
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/alternative;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/plain; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: multipart/related;'."\r\n".
+            ' boundary="(.*?)"'."\r\n".
+            "\r\n\r\n".
+            '--\\1'."\r\n".
+            'Content-Type: image/jpeg; name=myimage.jpg'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-ID: <'.$cid.'>'."\r\n".
+            'Content-Disposition: inline; filename=myimage.jpg'."\r\n".
+            "\r\n".
+            preg_quote(base64_encode('<image data>'), '~').
+            "\r\n\r\n".
+            '--\\1--'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n".
+            '$~D',
+            $message->toString(),
+            '%s: Attachment should have been detached'
+            );
+    }
+
+    public function testBoundaryDoesNotAppearAfterAllPartsAreDetached()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+
+        $id = $message->getId();
+        $date = $message->getDate();
+        $boundary = $message->getBoundary();
+
+        $part1 = $this->createMimePart();
+        $part1->setContentType('text/plain');
+        $part1->setCharset('iso-8859-1');
+        $part1->setBody('foo');
+
+        $message->attach($part1);
+
+        $part2 = $this->createMimePart();
+        $part2->setContentType('text/html');
+        $part2->setCharset('iso-8859-1');
+        $part2->setBody('test <b>foo</b>');
+
+        $message->attach($part2);
+
+        $message->detach($part1);
+        $message->detach($part2);
+
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n",
+            $message->toString(),
+            '%s: Message should be restored to orignal state after parts are detached'
+            );
+    }
+
+    public function testCharsetFormatOrDelSpAreNotShownWhenBoundaryIsSet()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+        $message->setCharset('utf-8');
+        $message->setFormat('flowed');
+        $message->setDelSp(true);
+
+        $id = $message->getId();
+        $date = $message->getDate();
+        $boundary = $message->getBoundary();
+
+        $part1 = $this->createMimePart();
+        $part1->setContentType('text/plain');
+        $part1->setCharset('iso-8859-1');
+        $part1->setBody('foo');
+
+        $message->attach($part1);
+
+        $part2 = $this->createMimePart();
+        $part2->setContentType('text/html');
+        $part2->setCharset('iso-8859-1');
+        $part2->setBody('test <b>foo</b>');
+
+        $message->attach($part2);
+
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/alternative;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/plain; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/html; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'test <b>foo</b>'.
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testBodyCanBeSetWithAttachments()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+        $message->setContentType('text/html');
+        $message->setCharset('iso-8859-1');
+        $message->setBody('foo');
+
+        $id = $message->getId();
+        $date = $message->getDate()->format('r');
+        $boundary = $message->getBoundary();
+
+        $attachment = $this->createAttachment();
+        $attachment->setContentType('application/pdf');
+        $attachment->setFilename('foo.pdf');
+        $attachment->setBody('<pdf data>');
+
+        $message->attach($attachment);
+
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/mixed;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/html; charset=iso-8859-1'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: application/pdf; name=foo.pdf'."\r\n".
+            'Content-Transfer-Encoding: base64'."\r\n".
+            'Content-Disposition: attachment; filename=foo.pdf'."\r\n".
+            "\r\n".
+            base64_encode('<pdf data>').
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testHtmlPartAlwaysAppearsLast()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+
+        $id = $message->getId();
+        $date = $message->getDate()->format('r');
+        $boundary = $message->getBoundary();
+
+        $part1 = $this->createMimePart();
+        $part1->setContentType('text/html');
+        $part1->setBody('foo');
+
+        $part2 = $this->createMimePart();
+        $part2->setContentType('text/plain');
+        $part2->setBody('bar');
+
+        $message->attach($part1);
+        $message->attach($part2);
+
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/alternative;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'bar'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/html'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testBodyBecomesPartIfOtherPartsAttached()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+        $message->setContentType('text/html');
+        $message->setBody('foo');
+
+        $id = $message->getId();
+        $date = $message->getDate()->format('r');
+        $boundary = $message->getBoundary();
+
+        $part2 = $this->createMimePart();
+        $part2->setContentType('text/plain');
+        $part2->setBody('bar');
+
+        $message->attach($part2);
+
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: multipart/alternative;'."\r\n".
+            ' boundary="'.$boundary.'"'."\r\n".
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'bar'.
+            "\r\n\r\n".
+            '--'.$boundary."\r\n".
+            'Content-Type: text/html'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'foo'.
+            "\r\n\r\n".
+            '--'.$boundary.'--'."\r\n",
+            $message->toString()
+            );
+    }
+
+    public function testBodyIsCanonicalized()
+    {
+        $message = $this->createMessage();
+        $message->setReturnPath('chris@w3style.co.uk');
+        $message->setSubject('just a test subject');
+        $message->setFrom(array(
+            'chris.corbyn@swiftmailer.org' => 'Chris Corbyn', ));
+        $message->setBody(
+            'just a test body'."\n".
+            'with a new line'
+            );
+        $id = $message->getId();
+        $date = $message->getDate();
+        $this->assertEquals(
+            'Return-Path: <chris@w3style.co.uk>'."\r\n".
+            'Message-ID: <'.$id.'>'."\r\n".
+            'Date: '.$date->format('r')."\r\n".
+            'Subject: just a test subject'."\r\n".
+            'From: Chris Corbyn <chris.corbyn@swiftmailer.org>'."\r\n".
+            'MIME-Version: 1.0'."\r\n".
+            'Content-Type: text/plain'."\r\n".
+            'Content-Transfer-Encoding: quoted-printable'."\r\n".
+            "\r\n".
+            'just a test body'."\r\n".
+            'with a new line',
+            $message->toString()
+            );
+    }
+
+    protected function createMessage()
+    {
+        return new Swift_Message();
+    }
+
+    protected function createMimePart()
+    {
+        return new Swift_MimePart();
+    }
+
+    protected function createAttachment()
+    {
+        return new Swift_Attachment();
+    }
+
+    protected function createEmbeddedFile()
+    {
+        return new Swift_EmbeddedFile();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Base64EncoderAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,45 @@
+<?php
+
+class Swift_Encoder_Base64EncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $samplesDir;
+    private $encoder;
+
+    protected function setUp()
+    {
+        $this->samplesDir = realpath(__DIR__.'/../../../_samples/charsets');
+        $this->encoder = new Swift_Encoder_Base64Encoder();
+    }
+
+    public function testEncodingAndDecodingSamples()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+                    $encodedText = $this->encoder->encodeString($text);
+
+                    $this->assertEquals(
+                        base64_decode($encodedText), $text,
+                        '%s: Encoded string should decode back to original string for sample '.
+                        $sampleDir.'/'.$sampleFile
+                        );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/QpEncoderAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,54 @@
+<?php
+
+class Swift_Encoder_QpEncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $samplesDir;
+    private $factory;
+
+    protected function setUp()
+    {
+        $this->samplesDir = realpath(__DIR__.'/../../../_samples/charsets');
+        $this->factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+    }
+
+    public function testEncodingAndDecodingSamples()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $encoding = $encodingDir;
+            $charStream = new Swift_CharacterStream_ArrayCharacterStream(
+                $this->factory, $encoding);
+            $encoder = new Swift_Encoder_QpEncoder($charStream);
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+                    $encodedText = $encoder->encodeString($text);
+
+                    foreach (explode("\r\n", $encodedText) as $line) {
+                        $this->assertLessThanOrEqual(76, strlen($line));
+                    }
+
+                    $this->assertEquals(
+                        quoted_printable_decode($encodedText), $text,
+                        '%s: Encoded string should decode back to original string for sample '.
+                        $sampleDir.'/'.$sampleFile
+                        );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/Encoder/Rfc2231EncoderAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,50 @@
+<?php
+
+class Swift_Encoder_Rfc2231EncoderAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $samplesDir;
+    private $factory;
+
+    protected function setUp()
+    {
+        $this->samplesDir = realpath(__DIR__.'/../../../_samples/charsets');
+        $this->factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+    }
+
+    public function testEncodingAndDecodingSamples()
+    {
+        $sampleFp = opendir($this->samplesDir);
+        while (false !== $encodingDir = readdir($sampleFp)) {
+            if (substr($encodingDir, 0, 1) == '.') {
+                continue;
+            }
+
+            $encoding = $encodingDir;
+            $charStream = new Swift_CharacterStream_ArrayCharacterStream(
+                $this->factory, $encoding);
+            $encoder = new Swift_Encoder_Rfc2231Encoder($charStream);
+
+            $sampleDir = $this->samplesDir.'/'.$encodingDir;
+
+            if (is_dir($sampleDir)) {
+                $fileFp = opendir($sampleDir);
+                while (false !== $sampleFile = readdir($fileFp)) {
+                    if (substr($sampleFile, 0, 1) == '.') {
+                        continue;
+                    }
+
+                    $text = file_get_contents($sampleDir.'/'.$sampleFile);
+                    $encodedText = $encoder->encodeString($text);
+
+                    $this->assertEquals(
+                        urldecode(implode('', explode("\r\n", $encodedText))), $text,
+                        '%s: Encoded string should decode back to original string for sample '.
+                        $sampleDir.'/'.$sampleFile
+                        );
+                }
+                closedir($fileFp);
+            }
+        }
+        closedir($sampleFp);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/MailboxHeader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/MailboxHeader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/MailboxHeader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/MailboxHeader.php	(date 1495187412000)
@@ -0,0 +1,359 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+use Egulias\EmailValidator\EmailValidator;
+use Egulias\EmailValidator\Validation\RFCValidation;
+
+/**
+ * A Mailbox Address MIME Header for something like From or Sender.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_Headers_MailboxHeader extends Swift_Mime_Headers_AbstractHeader
+{
+    /**
+     * The mailboxes used in this Header.
+     *
+     * @var string[]
+     */
+    private $mailboxes = array();
+
+    /**
+     * The strict EmailValidator.
+     *
+     * @var EmailValidator
+     */
+    private $emailValidator;
+
+    /**
+     * Creates a new MailboxHeader with $name.
+     *
+     * @param string                   $name           of Header
+     * @param Swift_Mime_HeaderEncoder $encoder
+     * @param EmailValidator           $emailValidator
+     */
+    public function __construct($name, Swift_Mime_HeaderEncoder $encoder, EmailValidator $emailValidator)
+    {
+        $this->setFieldName($name);
+        $this->setEncoder($encoder);
+        $this->emailValidator = $emailValidator;
+    }
+
+    /**
+     * Get the type of Header that this instance represents.
+     *
+     * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
+     * @see TYPE_DATE, TYPE_ID, TYPE_PATH
+     *
+     * @return int
+     */
+    public function getFieldType()
+    {
+        return self::TYPE_MAILBOX;
+    }
+
+    /**
+     * Set the model for the field body.
+     *
+     * This method takes a string, or an array of addresses.
+     *
+     * @param mixed $model
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function setFieldBodyModel($model)
+    {
+        $this->setNameAddresses($model);
+    }
+
+    /**
+     * Get the model for the field body.
+     *
+     * This method returns an associative array like {@link getNameAddresses()}
+     *
+     * @throws Swift_RfcComplianceException
+     *
+     * @return array
+     */
+    public function getFieldBodyModel()
+    {
+        return $this->getNameAddresses();
+    }
+
+    /**
+     * Set a list of mailboxes to be shown in this Header.
+     *
+     * The mailboxes can be a simple array of addresses, or an array of
+     * key=>value pairs where (email => personalName).
+     * Example:
+     * <code>
+     * <?php
+     * //Sets two mailboxes in the Header, one with a personal name
+     * $header->setNameAddresses(array(
+     *  'chris@swiftmailer.org' => 'Chris Corbyn',
+     *  'mark@swiftmailer.org' //No associated personal name
+     *  ));
+     * ?>
+     * </code>
+     *
+     * @see __construct()
+     * @see setAddresses()
+     * @see setValue()
+     *
+     * @param string|string[] $mailboxes
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function setNameAddresses($mailboxes)
+    {
+        $this->mailboxes = $this->normalizeMailboxes((array) $mailboxes);
+        $this->setCachedValue(null); //Clear any cached value
+    }
+
+    /**
+     * Get the full mailbox list of this Header as an array of valid RFC 2822 strings.
+     *
+     * Example:
+     * <code>
+     * <?php
+     * $header = new Swift_Mime_Headers_MailboxHeader('From',
+     *  array('chris@swiftmailer.org' => 'Chris Corbyn',
+     *  'mark@swiftmailer.org' => 'Mark Corbyn')
+     *  );
+     * print_r($header->getNameAddressStrings());
+     * // array (
+     * // 0 => Chris Corbyn <chris@swiftmailer.org>,
+     * // 1 => Mark Corbyn <mark@swiftmailer.org>
+     * // )
+     * ?>
+     * </code>
+     *
+     * @see getNameAddresses()
+     * @see toString()
+     *
+     * @throws Swift_RfcComplianceException
+     *
+     * @return string[]
+     */
+    public function getNameAddressStrings()
+    {
+        return $this->createNameAddressStrings($this->getNameAddresses());
+    }
+
+    /**
+     * Get all mailboxes in this Header as key=>value pairs.
+     *
+     * The key is the address and the value is the name (or null if none set).
+     * Example:
+     * <code>
+     * <?php
+     * $header = new Swift_Mime_Headers_MailboxHeader('From',
+     *  array('chris@swiftmailer.org' => 'Chris Corbyn',
+     *  'mark@swiftmailer.org' => 'Mark Corbyn')
+     *  );
+     * print_r($header->getNameAddresses());
+     * // array (
+     * // chris@swiftmailer.org => Chris Corbyn,
+     * // mark@swiftmailer.org => Mark Corbyn
+     * // )
+     * ?>
+     * </code>
+     *
+     * @see getAddresses()
+     * @see getNameAddressStrings()
+     *
+     * @return string[]
+     */
+    public function getNameAddresses()
+    {
+        return $this->mailboxes;
+    }
+
+    /**
+     * Makes this Header represent a list of plain email addresses with no names.
+     *
+     * Example:
+     * <code>
+     * <?php
+     * //Sets three email addresses as the Header data
+     * $header->setAddresses(
+     *  array('one@domain.tld', 'two@domain.tld', 'three@domain.tld')
+     *  );
+     * ?>
+     * </code>
+     *
+     * @see setNameAddresses()
+     * @see setValue()
+     *
+     * @param string[] $addresses
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function setAddresses($addresses)
+    {
+        $this->setNameAddresses(array_values((array) $addresses));
+    }
+
+    /**
+     * Get all email addresses in this Header.
+     *
+     * @see getNameAddresses()
+     *
+     * @return string[]
+     */
+    public function getAddresses()
+    {
+        return array_keys($this->mailboxes);
+    }
+
+    /**
+     * Remove one or more addresses from this Header.
+     *
+     * @param string|string[] $addresses
+     */
+    public function removeAddresses($addresses)
+    {
+        $this->setCachedValue(null);
+        foreach ((array) $addresses as $address) {
+            unset($this->mailboxes[$address]);
+        }
+    }
+
+    /**
+     * Get the string value of the body in this Header.
+     *
+     * This is not necessarily RFC 2822 compliant since folding white space will
+     * not be added at this stage (see {@link toString()} for that).
+     *
+     * @see toString()
+     *
+     * @throws Swift_RfcComplianceException
+     *
+     * @return string
+     */
+    public function getFieldBody()
+    {
+        // Compute the string value of the header only if needed
+        if (null === $this->getCachedValue()) {
+            $this->setCachedValue($this->createMailboxListString($this->mailboxes));
+        }
+
+        return $this->getCachedValue();
+    }
+
+    /**
+     * Normalizes a user-input list of mailboxes into consistent key=>value pairs.
+     *
+     * @param string[] $mailboxes
+     *
+     * @return string[]
+     */
+    protected function normalizeMailboxes(array $mailboxes)
+    {
+        $actualMailboxes = array();
+
+        foreach ($mailboxes as $key => $value) {
+            if (is_string($key)) {
+                //key is email addr
+                $address = $key;
+                $name = $value;
+            } else {
+                $address = $value;
+                $name = null;
+            }
+            $this->assertValidAddress($address);
+            $actualMailboxes[$address] = $name;
+        }
+
+        return $actualMailboxes;
+    }
+
+    /**
+     * Produces a compliant, formatted display-name based on the string given.
+     *
+     * @param string $displayName as displayed
+     * @param bool   $shorten     the first line to make remove for header name
+     *
+     * @return string
+     */
+    protected function createDisplayNameString($displayName, $shorten = false)
+    {
+        return $this->createPhrase($this, $displayName, $this->getCharset(), $this->getEncoder(), $shorten);
+    }
+
+    /**
+     * Creates a string form of all the mailboxes in the passed array.
+     *
+     * @param string[] $mailboxes
+     *
+     * @throws Swift_RfcComplianceException
+     *
+     * @return string
+     */
+    protected function createMailboxListString(array $mailboxes)
+    {
+        return implode(', ', $this->createNameAddressStrings($mailboxes));
+    }
+
+    /**
+     * Redefine the encoding requirements for mailboxes.
+     *
+     * All "specials" must be encoded as the full header value will not be quoted
+     *
+     * @see RFC 2822 3.2.1
+     *
+     * @param string $token
+     *
+     * @return bool
+     */
+    protected function tokenNeedsEncoding($token)
+    {
+        return preg_match('/[()<>\[\]:;@\,."]/', $token) || parent::tokenNeedsEncoding($token);
+    }
+
+    /**
+     * Return an array of strings conforming the the name-addr spec of RFC 2822.
+     *
+     * @param string[] $mailboxes
+     *
+     * @return string[]
+     */
+    private function createNameAddressStrings(array $mailboxes)
+    {
+        $strings = array();
+
+        foreach ($mailboxes as $email => $name) {
+            $mailboxStr = $email;
+            if (null !== $name) {
+                $nameStr = $this->createDisplayNameString($name, empty($strings));
+                $mailboxStr = $nameStr.' <'.$mailboxStr.'>';
+            }
+            $strings[] = $mailboxStr;
+        }
+
+        return $strings;
+    }
+
+    /**
+     * Throws an Exception if the address passed does not comply with RFC 2822.
+     *
+     * @param string $address
+     *
+     * @throws Swift_RfcComplianceException If invalid.
+     */
+    private function assertValidAddress($address)
+    {
+        if (!$this->emailValidator->isValid($address, new RFCValidation())) {
+            throw new Swift_RfcComplianceException(
+                'Address in mailbox given ['.$address.'] does not comply with RFC 2822, 3.6.2.'
+            );
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/OpenDKIMHeader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/OpenDKIMHeader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/OpenDKIMHeader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/OpenDKIMHeader.php	(date 1495187412000)
@@ -0,0 +1,133 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An OpenDKIM Specific Header using only raw header datas without encoding.
+ *
+ * @author De Cock Xavier <xdecock@gmail.com>
+ */
+class Swift_Mime_Headers_OpenDKIMHeader implements Swift_Mime_Header
+{
+    /**
+     * The value of this Header.
+     *
+     * @var string
+     */
+    private $value;
+
+    /**
+     * The name of this Header.
+     *
+     * @var string
+     */
+    private $fieldName;
+
+    /**
+     * @param string $name
+     */
+    public function __construct($name)
+    {
+        $this->fieldName = $name;
+    }
+
+    /**
+     * Get the type of Header that this instance represents.
+     *
+     * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
+     * @see TYPE_DATE, TYPE_ID, TYPE_PATH
+     *
+     * @return int
+     */
+    public function getFieldType()
+    {
+        return self::TYPE_TEXT;
+    }
+
+    /**
+     * Set the model for the field body.
+     *
+     * This method takes a string for the field value.
+     *
+     * @param string $model
+     */
+    public function setFieldBodyModel($model)
+    {
+        $this->setValue($model);
+    }
+
+    /**
+     * Get the model for the field body.
+     *
+     * This method returns a string.
+     *
+     * @return string
+     */
+    public function getFieldBodyModel()
+    {
+        return $this->getValue();
+    }
+
+    /**
+     * Get the (unencoded) value of this header.
+     *
+     * @return string
+     */
+    public function getValue()
+    {
+        return $this->value;
+    }
+
+    /**
+     * Set the (unencoded) value of this header.
+     *
+     * @param string $value
+     */
+    public function setValue($value)
+    {
+        $this->value = $value;
+    }
+
+    /**
+     * Get the value of this header prepared for rendering.
+     *
+     * @return string
+     */
+    public function getFieldBody()
+    {
+        return $this->value;
+    }
+
+    /**
+     * Get this Header rendered as a RFC 2822 compliant string.
+     *
+     * @return string
+     */
+    public function toString()
+    {
+        return $this->fieldName.': '.$this->value;
+    }
+
+    /**
+     * Set the Header FieldName.
+     *
+     * @see Swift_Mime_Header::getFieldName()
+     */
+    public function getFieldName()
+    {
+        return $this->fieldName;
+    }
+
+    /**
+     * Ignored.
+     */
+    public function setCharset($charset)
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/ParameterizedHeader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/ParameterizedHeader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/ParameterizedHeader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/ParameterizedHeader.php	(date 1495187412000)
@@ -0,0 +1,257 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An abstract base MIME Header.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_Headers_ParameterizedHeader extends Swift_Mime_Headers_UnstructuredHeader
+{
+    /**
+     * RFC 2231's definition of a token.
+     *
+     * @var string
+     */
+    const TOKEN_REGEX = '(?:[\x21\x23-\x27\x2A\x2B\x2D\x2E\x30-\x39\x41-\x5A\x5E-\x7E]+)';
+
+    /**
+     * The Encoder used to encode the parameters.
+     *
+     * @var Swift_Encoder
+     */
+    private $paramEncoder;
+
+    /**
+     * The parameters as an associative array.
+     *
+     * @var string[]
+     */
+    private $params = array();
+
+    /**
+     * Creates a new ParameterizedHeader with $name.
+     *
+     * @param string                   $name
+     * @param Swift_Mime_HeaderEncoder $encoder
+     * @param Swift_Encoder            $paramEncoder, optional
+     */
+    public function __construct($name, Swift_Mime_HeaderEncoder $encoder, Swift_Encoder $paramEncoder = null)
+    {
+        parent::__construct($name, $encoder);
+        $this->paramEncoder = $paramEncoder;
+    }
+
+    /**
+     * Get the type of Header that this instance represents.
+     *
+     * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
+     * @see TYPE_DATE, TYPE_ID, TYPE_PATH
+     *
+     * @return int
+     */
+    public function getFieldType()
+    {
+        return self::TYPE_PARAMETERIZED;
+    }
+
+    /**
+     * Set the character set used in this Header.
+     *
+     * @param string $charset
+     */
+    public function setCharset($charset)
+    {
+        parent::setCharset($charset);
+        if (isset($this->paramEncoder)) {
+            $this->paramEncoder->charsetChanged($charset);
+        }
+    }
+
+    /**
+     * Set the value of $parameter.
+     *
+     * @param string $parameter
+     * @param string $value
+     */
+    public function setParameter($parameter, $value)
+    {
+        $this->setParameters(array_merge($this->getParameters(), array($parameter => $value)));
+    }
+
+    /**
+     * Get the value of $parameter.
+     *
+     * @param string $parameter
+     *
+     * @return string
+     */
+    public function getParameter($parameter)
+    {
+        $params = $this->getParameters();
+
+        return array_key_exists($parameter, $params) ? $params[$parameter] : null;
+    }
+
+    /**
+     * Set an associative array of parameter names mapped to values.
+     *
+     * @param string[] $parameters
+     */
+    public function setParameters(array $parameters)
+    {
+        $this->clearCachedValueIf($this->params != $parameters);
+        $this->params = $parameters;
+    }
+
+    /**
+     * Returns an associative array of parameter names mapped to values.
+     *
+     * @return string[]
+     */
+    public function getParameters()
+    {
+        return $this->params;
+    }
+
+    /**
+     * Get the value of this header prepared for rendering.
+     *
+     * @return string
+     */
+    public function getFieldBody() //TODO: Check caching here
+    {
+        $body = parent::getFieldBody();
+        foreach ($this->params as $name => $value) {
+            if (null !== $value) {
+                // Add the parameter
+                $body .= '; '.$this->createParameter($name, $value);
+            }
+        }
+
+        return $body;
+    }
+
+    /**
+     * Generate a list of all tokens in the final header.
+     *
+     * This doesn't need to be overridden in theory, but it is for implementation
+     * reasons to prevent potential breakage of attributes.
+     *
+     * @param string $string The string to tokenize
+     *
+     * @return array An array of tokens as strings
+     */
+    protected function toTokens($string = null)
+    {
+        $tokens = parent::toTokens(parent::getFieldBody());
+
+        // Try creating any parameters
+        foreach ($this->params as $name => $value) {
+            if (null !== $value) {
+                // Add the semi-colon separator
+                $tokens[count($tokens) - 1] .= ';';
+                $tokens = array_merge($tokens, $this->generateTokenLines(
+                    ' '.$this->createParameter($name, $value)
+                    ));
+            }
+        }
+
+        return $tokens;
+    }
+
+    /**
+     * Render a RFC 2047 compliant header parameter from the $name and $value.
+     *
+     * @param string $name
+     * @param string $value
+     *
+     * @return string
+     */
+    private function createParameter($name, $value)
+    {
+        $origValue = $value;
+
+        $encoded = false;
+        // Allow room for parameter name, indices, "=" and DQUOTEs
+        $maxValueLength = $this->getMaxLineLength() - strlen($name.'=*N"";') - 1;
+        $firstLineOffset = 0;
+
+        // If it's not already a valid parameter value...
+        if (!preg_match('/^'.self::TOKEN_REGEX.'$/D', $value)) {
+            // TODO: text, or something else??
+            // ... and it's not ascii
+            if (!preg_match('/^[\x00-\x08\x0B\x0C\x0E-\x7F]*$/D', $value)) {
+                $encoded = true;
+                // Allow space for the indices, charset and language
+                $maxValueLength = $this->getMaxLineLength() - strlen($name.'*N*="";') - 1;
+                $firstLineOffset = strlen(
+                    $this->getCharset()."'".$this->getLanguage()."'"
+                    );
+            }
+        }
+
+        // Encode if we need to
+        if ($encoded || strlen($value) > $maxValueLength) {
+            if (isset($this->paramEncoder)) {
+                $value = $this->paramEncoder->encodeString(
+                    $origValue, $firstLineOffset, $maxValueLength, $this->getCharset()
+                    );
+            } else {
+                // We have to go against RFC 2183/2231 in some areas for interoperability
+                $value = $this->getTokenAsEncodedWord($origValue);
+                $encoded = false;
+            }
+        }
+
+        $valueLines = isset($this->paramEncoder) ? explode("\r\n", $value) : array($value);
+
+        // Need to add indices
+        if (count($valueLines) > 1) {
+            $paramLines = array();
+            foreach ($valueLines as $i => $line) {
+                $paramLines[] = $name.'*'.$i.
+                    $this->getEndOfParameterValue($line, true, $i == 0);
+            }
+
+            return implode(";\r\n ", $paramLines);
+        } else {
+            return $name.$this->getEndOfParameterValue(
+                $valueLines[0], $encoded, true
+                );
+        }
+    }
+
+    /**
+     * Returns the parameter value from the "=" and beyond.
+     *
+     * @param string $value     to append
+     * @param bool   $encoded
+     * @param bool   $firstLine
+     *
+     * @return string
+     */
+    private function getEndOfParameterValue($value, $encoded = false, $firstLine = false)
+    {
+        if (!preg_match('/^'.self::TOKEN_REGEX.'$/D', $value)) {
+            $value = '"'.$value.'"';
+        }
+        $prepend = '=';
+        if ($encoded) {
+            $prepend = '*=';
+            if ($firstLine) {
+                $prepend = '*='.$this->getCharset()."'".$this->getLanguage().
+                    "'";
+            }
+        }
+
+        return $prepend.$value;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/PathHeader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/PathHeader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/PathHeader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/PathHeader.php	(date 1495187412000)
@@ -0,0 +1,152 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+use Egulias\EmailValidator\EmailValidator;
+use Egulias\EmailValidator\Validation\RFCValidation;
+
+/**
+ * A Path Header in Swift Mailer, such a Return-Path.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_Headers_PathHeader extends Swift_Mime_Headers_AbstractHeader
+{
+    /**
+     * The address in this Header (if specified).
+     *
+     * @var string
+     */
+    private $address;
+
+    /**
+     * The strict EmailValidator.
+     *
+     * @var EmailValidator
+     */
+    private $emailValidator;
+
+    /**
+     * Creates a new PathHeader with the given $name.
+     *
+     * @param string         $name
+     * @param EmailValidator $emailValidator
+     */
+    public function __construct($name, EmailValidator $emailValidator)
+    {
+        $this->setFieldName($name);
+        $this->emailValidator = $emailValidator;
+    }
+
+    /**
+     * Get the type of Header that this instance represents.
+     *
+     * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
+     * @see TYPE_DATE, TYPE_ID, TYPE_PATH
+     *
+     * @return int
+     */
+    public function getFieldType()
+    {
+        return self::TYPE_PATH;
+    }
+
+    /**
+     * Set the model for the field body.
+     * This method takes a string for an address.
+     *
+     * @param string $model
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function setFieldBodyModel($model)
+    {
+        $this->setAddress($model);
+    }
+
+    /**
+     * Get the model for the field body.
+     * This method returns a string email address.
+     *
+     * @return mixed
+     */
+    public function getFieldBodyModel()
+    {
+        return $this->getAddress();
+    }
+
+    /**
+     * Set the Address which should appear in this Header.
+     *
+     * @param string $address
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function setAddress($address)
+    {
+        if (null === $address) {
+            $this->address = null;
+        } elseif ('' == $address) {
+            $this->address = '';
+        } else {
+            $this->assertValidAddress($address);
+            $this->address = $address;
+        }
+        $this->setCachedValue(null);
+    }
+
+    /**
+     * Get the address which is used in this Header (if any).
+     *
+     * Null is returned if no address is set.
+     *
+     * @return string
+     */
+    public function getAddress()
+    {
+        return $this->address;
+    }
+
+    /**
+     * Get the string value of the body in this Header.
+     *
+     * This is not necessarily RFC 2822 compliant since folding white space will
+     * not be added at this stage (see {@link toString()} for that).
+     *
+     * @see toString()
+     *
+     * @return string
+     */
+    public function getFieldBody()
+    {
+        if (!$this->getCachedValue()) {
+            if (isset($this->address)) {
+                $this->setCachedValue('<'.$this->address.'>');
+            }
+        }
+
+        return $this->getCachedValue();
+    }
+
+    /**
+     * Throws an Exception if the address passed does not comply with RFC 2822.
+     *
+     * @param string $address
+     *
+     * @throws Swift_RfcComplianceException If address is invalid
+     */
+    private function assertValidAddress($address)
+    {
+        if (!$this->emailValidator->isValid($address, new RFCValidation())) {
+            throw new Swift_RfcComplianceException(
+                'Address set in PathHeader does not comply with addr-spec of RFC 2822.'
+            );
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/CharacterReaderFactory/SimpleCharacterReaderFactoryAcceptanceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/CharacterReaderFactory/SimpleCharacterReaderFactoryAcceptanceTest.php b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/CharacterReaderFactory/SimpleCharacterReaderFactoryAcceptanceTest.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/tests/acceptance/Swift/CharacterReaderFactory/SimpleCharacterReaderFactoryAcceptanceTest.php	(date 1495187412000)
@@ -0,0 +1,179 @@
+<?php
+
+class Swift_CharacterReaderFactory_SimpleCharacterReaderFactoryAcceptanceTest extends \PHPUnit\Framework\TestCase
+{
+    private $factory;
+    private $prefix = 'Swift_CharacterReader_';
+
+    protected function setUp()
+    {
+        $this->factory = new Swift_CharacterReaderFactory_SimpleCharacterReaderFactory();
+    }
+
+    public function testCreatingUtf8Reader()
+    {
+        foreach (array('utf8', 'utf-8', 'UTF-8', 'UTF8') as $utf8) {
+            $reader = $this->factory->getReaderFor($utf8);
+            $this->assertInstanceOf($this->prefix.'Utf8Reader', $reader);
+        }
+    }
+
+    public function testCreatingIso8859XReaders()
+    {
+        $charsets = array();
+        foreach (range(1, 16) as $number) {
+            foreach (array('iso', 'iec') as $body) {
+                $charsets[] = $body.'-8859-'.$number;
+                $charsets[] = $body.'8859-'.$number;
+                $charsets[] = strtoupper($body).'-8859-'.$number;
+                $charsets[] = strtoupper($body).'8859-'.$number;
+            }
+        }
+
+        foreach ($charsets as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingWindows125XReaders()
+    {
+        $charsets = array();
+        foreach (range(0, 8) as $number) {
+            $charsets[] = 'windows-125'.$number;
+            $charsets[] = 'windows125'.$number;
+            $charsets[] = 'WINDOWS-125'.$number;
+            $charsets[] = 'WINDOWS125'.$number;
+        }
+
+        foreach ($charsets as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingCodePageReaders()
+    {
+        $charsets = array();
+        foreach (range(0, 8) as $number) {
+            $charsets[] = 'cp-125'.$number;
+            $charsets[] = 'cp125'.$number;
+            $charsets[] = 'CP-125'.$number;
+            $charsets[] = 'CP125'.$number;
+        }
+
+        foreach (array(437, 737, 850, 855, 857, 858, 860,
+            861, 863, 865, 866, 869, ) as $number) {
+            $charsets[] = 'cp-'.$number;
+            $charsets[] = 'cp'.$number;
+            $charsets[] = 'CP-'.$number;
+            $charsets[] = 'CP'.$number;
+        }
+
+        foreach ($charsets as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingAnsiReader()
+    {
+        foreach (array('ansi', 'ANSI') as $ansi) {
+            $reader = $this->factory->getReaderFor($ansi);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingMacintoshReader()
+    {
+        foreach (array('macintosh', 'MACINTOSH') as $mac) {
+            $reader = $this->factory->getReaderFor($mac);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingKOIReaders()
+    {
+        $charsets = array();
+        foreach (array('7', '8-r', '8-u', '8u', '8r') as $end) {
+            $charsets[] = 'koi-'.$end;
+            $charsets[] = 'koi'.$end;
+            $charsets[] = 'KOI-'.$end;
+            $charsets[] = 'KOI'.$end;
+        }
+
+        foreach ($charsets as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingIsciiReaders()
+    {
+        foreach (array('iscii', 'ISCII', 'viscii', 'VISCII') as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingMIKReader()
+    {
+        foreach (array('mik', 'MIK') as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingCorkReader()
+    {
+        foreach (array('cork', 'CORK', 't1', 'T1') as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(1, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingUcs2Reader()
+    {
+        foreach (array('ucs-2', 'UCS-2', 'ucs2', 'UCS2') as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(2, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingUtf16Reader()
+    {
+        foreach (array('utf-16', 'UTF-16', 'utf16', 'UTF16') as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(2, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingUcs4Reader()
+    {
+        foreach (array('ucs-4', 'UCS-4', 'ucs4', 'UCS4') as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(4, $reader->getInitialByteSize());
+        }
+    }
+
+    public function testCreatingUtf32Reader()
+    {
+        foreach (array('utf-32', 'UTF-32', 'utf32', 'UTF32') as $charset) {
+            $reader = $this->factory->getReaderFor($charset);
+            $this->assertInstanceOf($this->prefix.'GenericFixedWidthReader', $reader);
+            $this->assertEquals(4, $reader->getInitialByteSize());
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/AbstractHeader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/AbstractHeader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/AbstractHeader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/AbstractHeader.php	(date 1495187412000)
@@ -0,0 +1,481 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * An abstract base MIME Header.
+ *
+ * @author     Chris Corbyn
+ */
+abstract class Swift_Mime_Headers_AbstractHeader implements Swift_Mime_Header
+{
+    const PHRASE_PATTERN = '(?:(?:(?:(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))*(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))|(?:(?:[ \t]*(?:\r\n))?[ \t])))?[a-zA-Z0-9!#\$%&\'\*\+\-\/=\?\^_`\{\}\|~]+(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))*(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))|(?:(?:[ \t]*(?:\r\n))?[ \t])))?)|(?:(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))*(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))|(?:(?:[ \t]*(?:\r\n))?[ \t])))?"((?:(?:[ \t]*(?:\r\n))?[ \t])?(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21\x23-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])))*(?:(?:[ \t]*(?:\r\n))?[ \t])?"(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))*(?:(?:(?:(?:[ \t]*(?:\r\n))?[ \t])?(\((?:(?:(?:[ \t]*(?:\r\n))?[ \t])|(?:(?:[\x01-\x08\x0B\x0C\x0E-\x19\x7F]|[\x21-\x27\x2A-\x5B\x5D-\x7E])|(?:\\[\x00-\x08\x0B\x0C\x0E-\x7F])|(?1)))*(?:(?:[ \t]*(?:\r\n))?[ \t])?\)))|(?:(?:[ \t]*(?:\r\n))?[ \t])))?))+?)';
+
+    /**
+     * The name of this Header.
+     *
+     * @var string
+     */
+    private $name;
+
+    /**
+     * The Encoder used to encode this Header.
+     *
+     * @var Swift_Encoder
+     */
+    private $encoder;
+
+    /**
+     * The maximum length of a line in the header.
+     *
+     * @var int
+     */
+    private $lineLength = 78;
+
+    /**
+     * The language used in this Header.
+     *
+     * @var string
+     */
+    private $lang;
+
+    /**
+     * The character set of the text in this Header.
+     *
+     * @var string
+     */
+    private $charset = 'utf-8';
+
+    /**
+     * The value of this Header, cached.
+     *
+     * @var string
+     */
+    private $cachedValue = null;
+
+    /**
+     * Set the character set used in this Header.
+     *
+     * @param string $charset
+     */
+    public function setCharset($charset)
+    {
+        $this->clearCachedValueIf($charset != $this->charset);
+        $this->charset = $charset;
+        if (isset($this->encoder)) {
+            $this->encoder->charsetChanged($charset);
+        }
+    }
+
+    /**
+     * Get the character set used in this Header.
+     *
+     * @return string
+     */
+    public function getCharset()
+    {
+        return $this->charset;
+    }
+
+    /**
+     * Set the language used in this Header.
+     *
+     * For example, for US English, 'en-us'.
+     * This can be unspecified.
+     *
+     * @param string $lang
+     */
+    public function setLanguage($lang)
+    {
+        $this->clearCachedValueIf($this->lang != $lang);
+        $this->lang = $lang;
+    }
+
+    /**
+     * Get the language used in this Header.
+     *
+     * @return string
+     */
+    public function getLanguage()
+    {
+        return $this->lang;
+    }
+
+    /**
+     * Set the encoder used for encoding the header.
+     *
+     * @param Swift_Mime_HeaderEncoder $encoder
+     */
+    public function setEncoder(Swift_Mime_HeaderEncoder $encoder)
+    {
+        $this->encoder = $encoder;
+        $this->setCachedValue(null);
+    }
+
+    /**
+     * Get the encoder used for encoding this Header.
+     *
+     * @return Swift_Mime_HeaderEncoder
+     */
+    public function getEncoder()
+    {
+        return $this->encoder;
+    }
+
+    /**
+     * Get the name of this header (e.g. charset).
+     *
+     * @return string
+     */
+    public function getFieldName()
+    {
+        return $this->name;
+    }
+
+    /**
+     * Set the maximum length of lines in the header (excluding EOL).
+     *
+     * @param int $lineLength
+     */
+    public function setMaxLineLength($lineLength)
+    {
+        $this->clearCachedValueIf($this->lineLength != $lineLength);
+        $this->lineLength = $lineLength;
+    }
+
+    /**
+     * Get the maximum permitted length of lines in this Header.
+     *
+     * @return int
+     */
+    public function getMaxLineLength()
+    {
+        return $this->lineLength;
+    }
+
+    /**
+     * Get this Header rendered as a RFC 2822 compliant string.
+     *
+     * @return string
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function toString()
+    {
+        return $this->tokensToString($this->toTokens());
+    }
+
+    /**
+     * Returns a string representation of this object.
+     *
+     * @return string
+     *
+     * @see toString()
+     */
+    public function __toString()
+    {
+        return $this->toString();
+    }
+
+    /**
+     * Set the name of this Header field.
+     *
+     * @param string $name
+     */
+    protected function setFieldName($name)
+    {
+        $this->name = $name;
+    }
+
+    /**
+     * Produces a compliant, formatted RFC 2822 'phrase' based on the string given.
+     *
+     * @param Swift_Mime_Header        $header
+     * @param string                   $string  as displayed
+     * @param string                   $charset of the text
+     * @param Swift_Mime_HeaderEncoder $encoder
+     * @param bool                     $shorten the first line to make remove for header name
+     *
+     * @return string
+     */
+    protected function createPhrase(Swift_Mime_Header $header, $string, $charset, Swift_Mime_HeaderEncoder $encoder = null, $shorten = false)
+    {
+        // Treat token as exactly what was given
+        $phraseStr = $string;
+        // If it's not valid
+
+        if (!preg_match('/^'.self::PHRASE_PATTERN.'$/D', $phraseStr)) {
+            // .. but it is just ascii text, try escaping some characters
+            // and make it a quoted-string
+            if (preg_match('/^[\x00-\x08\x0B\x0C\x0E-\x7F]*$/D', $phraseStr)) {
+                $phraseStr = $this->escapeSpecials($phraseStr, array('"'));
+                $phraseStr = '"'.$phraseStr.'"';
+            } else {
+                // ... otherwise it needs encoding
+                // Determine space remaining on line if first line
+                if ($shorten) {
+                    $usedLength = strlen($header->getFieldName().': ');
+                } else {
+                    $usedLength = 0;
+                }
+                $phraseStr = $this->encodeWords($header, $string, $usedLength);
+            }
+        }
+
+        return $phraseStr;
+    }
+
+    /**
+     * Escape special characters in a string (convert to quoted-pairs).
+     *
+     * @param string   $token
+     * @param string[] $include additional chars to escape
+     *
+     * @return string
+     */
+    private function escapeSpecials($token, $include = array())
+    {
+        foreach (array_merge(array('\\'), $include) as $char) {
+            $token = str_replace($char, '\\'.$char, $token);
+        }
+
+        return $token;
+    }
+
+    /**
+     * Encode needed word tokens within a string of input.
+     *
+     * @param Swift_Mime_Header $header
+     * @param string            $input
+     * @param string            $usedLength optional
+     *
+     * @return string
+     */
+    protected function encodeWords(Swift_Mime_Header $header, $input, $usedLength = -1)
+    {
+        $value = '';
+
+        $tokens = $this->getEncodableWordTokens($input);
+
+        foreach ($tokens as $token) {
+            // See RFC 2822, Sect 2.2 (really 2.2 ??)
+            if ($this->tokenNeedsEncoding($token)) {
+                // Don't encode starting WSP
+                $firstChar = substr($token, 0, 1);
+                switch ($firstChar) {
+                    case ' ':
+                    case "\t":
+                        $value .= $firstChar;
+                        $token = substr($token, 1);
+                }
+
+                if (-1 == $usedLength) {
+                    $usedLength = strlen($header->getFieldName().': ') + strlen($value);
+                }
+                $value .= $this->getTokenAsEncodedWord($token, $usedLength);
+
+                $header->setMaxLineLength(76); // Forcefully override
+            } else {
+                $value .= $token;
+            }
+        }
+
+        return $value;
+    }
+
+    /**
+     * Test if a token needs to be encoded or not.
+     *
+     * @param string $token
+     *
+     * @return bool
+     */
+    protected function tokenNeedsEncoding($token)
+    {
+        return preg_match('~[\x00-\x08\x10-\x19\x7F-\xFF\r\n]~', $token);
+    }
+
+    /**
+     * Splits a string into tokens in blocks of words which can be encoded quickly.
+     *
+     * @param string $string
+     *
+     * @return string[]
+     */
+    protected function getEncodableWordTokens($string)
+    {
+        $tokens = array();
+
+        $encodedToken = '';
+        // Split at all whitespace boundaries
+        foreach (preg_split('~(?=[\t ])~', $string) as $token) {
+            if ($this->tokenNeedsEncoding($token)) {
+                $encodedToken .= $token;
+            } else {
+                if (strlen($encodedToken) > 0) {
+                    $tokens[] = $encodedToken;
+                    $encodedToken = '';
+                }
+                $tokens[] = $token;
+            }
+        }
+        if (strlen($encodedToken)) {
+            $tokens[] = $encodedToken;
+        }
+
+        return $tokens;
+    }
+
+    /**
+     * Get a token as an encoded word for safe insertion into headers.
+     *
+     * @param string $token           token to encode
+     * @param int    $firstLineOffset optional
+     *
+     * @return string
+     */
+    protected function getTokenAsEncodedWord($token, $firstLineOffset = 0)
+    {
+        // Adjust $firstLineOffset to account for space needed for syntax
+        $charsetDecl = $this->charset;
+        if (isset($this->lang)) {
+            $charsetDecl .= '*'.$this->lang;
+        }
+        $encodingWrapperLength = strlen(
+            '=?'.$charsetDecl.'?'.$this->encoder->getName().'??='
+            );
+
+        if ($firstLineOffset >= 75) {
+            //Does this logic need to be here?
+            $firstLineOffset = 0;
+        }
+
+        $encodedTextLines = explode("\r\n",
+            $this->encoder->encodeString(
+                $token, $firstLineOffset, 75 - $encodingWrapperLength, $this->charset
+                )
+        );
+
+        if (strtolower($this->charset) !== 'iso-2022-jp') {
+            // special encoding for iso-2022-jp using mb_encode_mimeheader
+            foreach ($encodedTextLines as $lineNum => $line) {
+                $encodedTextLines[$lineNum] = '=?'.$charsetDecl.
+                    '?'.$this->encoder->getName().
+                    '?'.$line.'?=';
+            }
+        }
+
+        return implode("\r\n ", $encodedTextLines);
+    }
+
+    /**
+     * Generates tokens from the given string which include CRLF as individual tokens.
+     *
+     * @param string $token
+     *
+     * @return string[]
+     */
+    protected function generateTokenLines($token)
+    {
+        return preg_split('~(\r\n)~', $token, -1, PREG_SPLIT_DELIM_CAPTURE);
+    }
+
+    /**
+     * Set a value into the cache.
+     *
+     * @param string $value
+     */
+    protected function setCachedValue($value)
+    {
+        $this->cachedValue = $value;
+    }
+
+    /**
+     * Get the value in the cache.
+     *
+     * @return string
+     */
+    protected function getCachedValue()
+    {
+        return $this->cachedValue;
+    }
+
+    /**
+     * Clear the cached value if $condition is met.
+     *
+     * @param bool $condition
+     */
+    protected function clearCachedValueIf($condition)
+    {
+        if ($condition) {
+            $this->setCachedValue(null);
+        }
+    }
+
+    /**
+     * Generate a list of all tokens in the final header.
+     *
+     * @param string $string The string to tokenize
+     *
+     * @return array An array of tokens as strings
+     */
+    protected function toTokens($string = null)
+    {
+        if (null === $string) {
+            $string = $this->getFieldBody();
+        }
+
+        $tokens = array();
+
+        // Generate atoms; split at all invisible boundaries followed by WSP
+        foreach (preg_split('~(?=[ \t])~', $string) as $token) {
+            $newTokens = $this->generateTokenLines($token);
+            foreach ($newTokens as $newToken) {
+                $tokens[] = $newToken;
+            }
+        }
+
+        return $tokens;
+    }
+
+    /**
+     * Takes an array of tokens which appear in the header and turns them into
+     * an RFC 2822 compliant string, adding FWSP where needed.
+     *
+     * @param string[] $tokens
+     *
+     * @return string
+     */
+    private function tokensToString(array $tokens)
+    {
+        $lineCount = 0;
+        $headerLines = array();
+        $headerLines[] = $this->name.': ';
+        $currentLine = &$headerLines[$lineCount++];
+
+        // Build all tokens back into compliant header
+        foreach ($tokens as $i => $token) {
+            // Line longer than specified maximum or token was just a new line
+            if (("\r\n" == $token) ||
+                ($i > 0 && strlen($currentLine.$token) > $this->lineLength)
+                && 0 < strlen($currentLine)) {
+                $headerLines[] = '';
+                $currentLine = &$headerLines[$lineCount++];
+            }
+
+            // Append token to the line
+            if ("\r\n" != $token) {
+                $currentLine .= $token;
+            }
+        }
+
+        // Implode with FWS (RFC 2822, 2.2.3)
+        return implode("\r\n", $headerLines)."\r\n";
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/DateHeader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/DateHeader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/DateHeader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/DateHeader.php	(date 1495187412000)
@@ -0,0 +1,115 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A Date MIME Header for Swift Mailer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_Headers_DateHeader extends Swift_Mime_Headers_AbstractHeader
+{
+    /**
+     * Date-time value of this Header.
+     *
+     * @var DateTimeImmutable
+     */
+    private $dateTime;
+
+    /**
+     * Creates a new DateHeader with $name.
+     *
+     * @param string $name of Header
+     */
+    public function __construct($name)
+    {
+        $this->setFieldName($name);
+    }
+
+    /**
+     * Get the type of Header that this instance represents.
+     *
+     * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
+     * @see TYPE_DATE, TYPE_ID, TYPE_PATH
+     *
+     * @return int
+     */
+    public function getFieldType()
+    {
+        return self::TYPE_DATE;
+    }
+
+    /**
+     * Set the model for the field body.
+     *
+     * @param DateTimeInterface $model
+     */
+    public function setFieldBodyModel($model)
+    {
+        $this->setDateTime($model);
+    }
+
+    /**
+     * Get the model for the field body.
+     *
+     * @return DateTimeImmutable
+     */
+    public function getFieldBodyModel()
+    {
+        return $this->getDateTime();
+    }
+
+    /**
+     * Get the date-time representing the Date in this Header.
+     *
+     * @return DateTimeImmutable
+     */
+    public function getDateTime()
+    {
+        return $this->dateTime;
+    }
+
+    /**
+     * Set the date-time of the Date in this Header.
+     *
+     * If a DateTime instance is provided, it is converted to DateTimeImmutable.
+     *
+     * @param DateTimeInterface $dateTime
+     */
+    public function setDateTime(DateTimeInterface $dateTime)
+    {
+        $this->clearCachedValueIf($this->getCachedValue() != $dateTime->format(DateTime::RFC2822));
+        if ($dateTime instanceof DateTime) {
+            $immutable = new DateTimeImmutable('@'.$dateTime->getTimestamp());
+            $dateTime = $immutable->setTimezone($dateTime->getTimezone());
+        }
+        $this->dateTime = $dateTime;
+    }
+
+    /**
+     * Get the string value of the body in this Header.
+     *
+     * This is not necessarily RFC 2822 compliant since folding white space will
+     * not be added at this stage (see {@link toString()} for that).
+     *
+     * @see toString()
+     *
+     * @return string
+     */
+    public function getFieldBody()
+    {
+        if (!$this->getCachedValue()) {
+            if (isset($this->dateTime)) {
+                $this->setCachedValue($this->dateTime->format(DateTime::RFC2822));
+            }
+        }
+
+        return $this->getCachedValue();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/IdentificationHeader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/IdentificationHeader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/IdentificationHeader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/IdentificationHeader.php	(date 1495187412000)
@@ -0,0 +1,184 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+use Egulias\EmailValidator\EmailValidator;
+use Egulias\EmailValidator\Validation\RFCValidation;
+
+/**
+ * An ID MIME Header for something like Message-ID or Content-ID.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_Headers_IdentificationHeader extends Swift_Mime_Headers_AbstractHeader
+{
+    /**
+     * The IDs used in the value of this Header.
+     *
+     * This may hold multiple IDs or just a single ID.
+     *
+     * @var string[]
+     */
+    private $ids = array();
+
+    /**
+     * The strict EmailValidator.
+     *
+     * @var EmailValidator
+     */
+    private $emailValidator;
+
+    /**
+     * Creates a new IdentificationHeader with the given $name and $id.
+     *
+     * @param string         $name
+     * @param EmailValidator $emailValidator
+     */
+    public function __construct($name, EmailValidator $emailValidator)
+    {
+        $this->setFieldName($name);
+        $this->emailValidator = $emailValidator;
+    }
+
+    /**
+     * Get the type of Header that this instance represents.
+     *
+     * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
+     * @see TYPE_DATE, TYPE_ID, TYPE_PATH
+     *
+     * @return int
+     */
+    public function getFieldType()
+    {
+        return self::TYPE_ID;
+    }
+
+    /**
+     * Set the model for the field body.
+     *
+     * This method takes a string ID, or an array of IDs.
+     *
+     * @param mixed $model
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function setFieldBodyModel($model)
+    {
+        $this->setId($model);
+    }
+
+    /**
+     * Get the model for the field body.
+     *
+     * This method returns an array of IDs
+     *
+     * @return array
+     */
+    public function getFieldBodyModel()
+    {
+        return $this->getIds();
+    }
+
+    /**
+     * Set the ID used in the value of this header.
+     *
+     * @param string|array $id
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function setId($id)
+    {
+        $this->setIds(is_array($id) ? $id : array($id));
+    }
+
+    /**
+     * Get the ID used in the value of this Header.
+     *
+     * If multiple IDs are set only the first is returned.
+     *
+     * @return string
+     */
+    public function getId()
+    {
+        if (count($this->ids) > 0) {
+            return $this->ids[0];
+        }
+    }
+
+    /**
+     * Set a collection of IDs to use in the value of this Header.
+     *
+     * @param string[] $ids
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    public function setIds(array $ids)
+    {
+        $actualIds = array();
+
+        foreach ($ids as $id) {
+            $this->assertValidId($id);
+            $actualIds[] = $id;
+        }
+
+        $this->clearCachedValueIf($this->ids != $actualIds);
+        $this->ids = $actualIds;
+    }
+
+    /**
+     * Get the list of IDs used in this Header.
+     *
+     * @return string[]
+     */
+    public function getIds()
+    {
+        return $this->ids;
+    }
+
+    /**
+     * Get the string value of the body in this Header.
+     *
+     * This is not necessarily RFC 2822 compliant since folding white space will
+     * not be added at this stage (see {@see toString()} for that).
+     *
+     * @see toString()
+     *
+     * @throws Swift_RfcComplianceException
+     *
+     * @return string
+     */
+    public function getFieldBody()
+    {
+        if (!$this->getCachedValue()) {
+            $angleAddrs = array();
+
+            foreach ($this->ids as $id) {
+                $angleAddrs[] = '<'.$id.'>';
+            }
+
+            $this->setCachedValue(implode(' ', $angleAddrs));
+        }
+
+        return $this->getCachedValue();
+    }
+
+    /**
+     * Throws an Exception if the id passed does not comply with RFC 2822.
+     *
+     * @param string $id
+     *
+     * @throws Swift_RfcComplianceException
+     */
+    private function assertValidId($id)
+    {
+        if (!$this->emailValidator->isValid($id, new RFCValidation())) {
+            throw new Swift_RfcComplianceException('Invalid ID given <'.$id.'>');
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/NativeQpContentEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/NativeQpContentEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/NativeQpContentEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/NativeQpContentEncoder.php	(date 1495187412000)
@@ -0,0 +1,123 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles Quoted Printable (QP) Transfer Encoding in Swift Mailer using the PHP core function.
+ *
+ * @author Lars Strojny
+ */
+class Swift_Mime_ContentEncoder_NativeQpContentEncoder implements Swift_Mime_ContentEncoder
+{
+    /**
+     * @var null|string
+     */
+    private $charset;
+
+    /**
+     * @param null|string $charset
+     */
+    public function __construct($charset = null)
+    {
+        $this->charset = $charset ? $charset : 'utf-8';
+    }
+
+    /**
+     * Notify this observer that the entity's charset has changed.
+     *
+     * @param string $charset
+     */
+    public function charsetChanged($charset)
+    {
+        $this->charset = $charset;
+    }
+
+    /**
+     * Encode $in to $out.
+     *
+     * @param Swift_OutputByteStream $os              to read from
+     * @param Swift_InputByteStream  $is              to write to
+     * @param int                    $firstLineOffset
+     * @param int                    $maxLineLength   0 indicates the default length for this encoding
+     *
+     * @throws RuntimeException
+     */
+    public function encodeByteStream(Swift_OutputByteStream $os, Swift_InputByteStream $is, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        if ($this->charset !== 'utf-8') {
+            throw new RuntimeException(
+                sprintf('Charset "%s" not supported. NativeQpContentEncoder only supports "utf-8"', $this->charset));
+        }
+
+        $string = '';
+
+        while (false !== $bytes = $os->read(8192)) {
+            $string .= $bytes;
+        }
+
+        $is->write($this->encodeString($string));
+    }
+
+    /**
+     * Get the MIME name of this content encoding scheme.
+     *
+     * @return string
+     */
+    public function getName()
+    {
+        return 'quoted-printable';
+    }
+
+    /**
+     * Encode a given string to produce an encoded string.
+     *
+     * @param string $string
+     * @param int    $firstLineOffset if first line needs to be shorter
+     * @param int    $maxLineLength   0 indicates the default length for this encoding
+     *
+     * @throws RuntimeException
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        if ($this->charset !== 'utf-8') {
+            throw new RuntimeException(
+                sprintf('Charset "%s" not supported. NativeQpContentEncoder only supports "utf-8"', $this->charset));
+        }
+
+        return $this->standardize(quoted_printable_encode($string));
+    }
+
+    /**
+     * Make sure CRLF is correct and HT/SPACE are in valid places.
+     *
+     * @param string $string
+     *
+     * @return string
+     */
+    protected function standardize($string)
+    {
+        // transform CR or LF to CRLF
+        $string = preg_replace('~=0D(?!=0A)|(?<!=0D)=0A~', '=0D=0A', $string);
+        // transform =0D=0A to CRLF
+        $string = str_replace(array("\t=0D=0A", ' =0D=0A', '=0D=0A'), array("=09\r\n", "=20\r\n", "\r\n"), $string);
+
+        switch ($end = ord(substr($string, -1))) {
+            case 0x09:
+                $string = substr_replace($string, '=09', -1);
+                break;
+            case 0x20:
+                $string = substr_replace($string, '=20', -1);
+                break;
+        }
+
+        return $string;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/PlainContentEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/PlainContentEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/PlainContentEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/PlainContentEncoder.php	(date 1495187412000)
@@ -0,0 +1,162 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles binary/7/8-bit Transfer Encoding in Swift Mailer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_ContentEncoder_PlainContentEncoder implements Swift_Mime_ContentEncoder
+{
+    /**
+     * The name of this encoding scheme (probably 7bit or 8bit).
+     *
+     * @var string
+     */
+    private $name;
+
+    /**
+     * True if canonical transformations should be done.
+     *
+     * @var bool
+     */
+    private $canonical;
+
+    /**
+     * Creates a new PlainContentEncoder with $name (probably 7bit or 8bit).
+     *
+     * @param string $name
+     * @param bool   $canonical If canonicalization transformation should be done.
+     */
+    public function __construct($name, $canonical = false)
+    {
+        $this->name = $name;
+        $this->canonical = $canonical;
+    }
+
+    /**
+     * Encode a given string to produce an encoded string.
+     *
+     * @param string $string
+     * @param int    $firstLineOffset ignored
+     * @param int    $maxLineLength   - 0 means no wrapping will occur
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        if ($this->canonical) {
+            $string = $this->canonicalize($string);
+        }
+
+        return $this->safeWordWrap($string, $maxLineLength, "\r\n");
+    }
+
+    /**
+     * Encode stream $in to stream $out.
+     *
+     * @param Swift_OutputByteStream $os
+     * @param Swift_InputByteStream  $is
+     * @param int                    $firstLineOffset ignored
+     * @param int                    $maxLineLength   optional, 0 means no wrapping will occur
+     */
+    public function encodeByteStream(Swift_OutputByteStream $os, Swift_InputByteStream $is, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        $leftOver = '';
+        while (false !== $bytes = $os->read(8192)) {
+            $toencode = $leftOver.$bytes;
+            if ($this->canonical) {
+                $toencode = $this->canonicalize($toencode);
+            }
+            $wrapped = $this->safeWordWrap($toencode, $maxLineLength, "\r\n");
+            $lastLinePos = strrpos($wrapped, "\r\n");
+            $leftOver = substr($wrapped, $lastLinePos);
+            $wrapped = substr($wrapped, 0, $lastLinePos);
+
+            $is->write($wrapped);
+        }
+        if (strlen($leftOver)) {
+            $is->write($leftOver);
+        }
+    }
+
+    /**
+     * Get the name of this encoding scheme.
+     *
+     * @return string
+     */
+    public function getName()
+    {
+        return $this->name;
+    }
+
+    /**
+     * Not used.
+     */
+    public function charsetChanged($charset)
+    {
+    }
+
+    /**
+     * A safer (but weaker) wordwrap for unicode.
+     *
+     * @param string $string
+     * @param int    $length
+     * @param string $le
+     *
+     * @return string
+     */
+    private function safeWordwrap($string, $length = 75, $le = "\r\n")
+    {
+        if (0 >= $length) {
+            return $string;
+        }
+
+        $originalLines = explode($le, $string);
+
+        $lines = array();
+        $lineCount = 0;
+
+        foreach ($originalLines as $originalLine) {
+            $lines[] = '';
+            $currentLine = &$lines[$lineCount++];
+
+            //$chunks = preg_split('/(?<=[\ \t,\.!\?\-&\+\/])/', $originalLine);
+            $chunks = preg_split('/(?<=\s)/', $originalLine);
+
+            foreach ($chunks as $chunk) {
+                if (0 != strlen($currentLine)
+                    && strlen($currentLine.$chunk) > $length) {
+                    $lines[] = '';
+                    $currentLine = &$lines[$lineCount++];
+                }
+                $currentLine .= $chunk;
+            }
+        }
+
+        return implode("\r\n", $lines);
+    }
+
+    /**
+     * Canonicalize string input (fix CRLF).
+     *
+     * @param string $string
+     *
+     * @return string
+     */
+    private function canonicalize($string)
+    {
+        return str_replace(
+            array("\r\n", "\r", "\n"),
+            array("\n", "\n", "\r\n"),
+            $string
+            );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/QpContentEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/QpContentEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/QpContentEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/QpContentEncoder.php	(date 1495187412000)
@@ -0,0 +1,134 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles Quoted Printable (QP) Transfer Encoding in Swift Mailer.
+ *
+ * @author     Chris Corbyn
+ */
+class Swift_Mime_ContentEncoder_QpContentEncoder extends Swift_Encoder_QpEncoder implements Swift_Mime_ContentEncoder
+{
+    protected $dotEscape;
+
+    /**
+     * Creates a new QpContentEncoder for the given CharacterStream.
+     *
+     * @param Swift_CharacterStream $charStream to use for reading characters
+     * @param Swift_StreamFilter    $filter     if canonicalization should occur
+     * @param bool                  $dotEscape  if dot stuffing workaround must be enabled
+     */
+    public function __construct(Swift_CharacterStream $charStream, Swift_StreamFilter $filter = null, $dotEscape = false)
+    {
+        $this->dotEscape = $dotEscape;
+        parent::__construct($charStream, $filter);
+    }
+
+    public function __sleep()
+    {
+        return array('charStream', 'filter', 'dotEscape');
+    }
+
+    protected function getSafeMapShareId()
+    {
+        return get_class($this).($this->dotEscape ? '.dotEscape' : '');
+    }
+
+    protected function initSafeMap()
+    {
+        parent::initSafeMap();
+        if ($this->dotEscape) {
+            /* Encode . as =2e for buggy remote servers */
+            unset($this->safeMap[0x2e]);
+        }
+    }
+
+    /**
+     * Encode stream $in to stream $out.
+     *
+     * QP encoded strings have a maximum line length of 76 characters.
+     * If the first line needs to be shorter, indicate the difference with
+     * $firstLineOffset.
+     *
+     * @param Swift_OutputByteStream $os              output stream
+     * @param Swift_InputByteStream  $is              input stream
+     * @param int                    $firstLineOffset
+     * @param int                    $maxLineLength
+     */
+    public function encodeByteStream(Swift_OutputByteStream $os, Swift_InputByteStream $is, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        if ($maxLineLength > 76 || $maxLineLength <= 0) {
+            $maxLineLength = 76;
+        }
+
+        $thisLineLength = $maxLineLength - $firstLineOffset;
+
+        $this->charStream->flushContents();
+        $this->charStream->importByteStream($os);
+
+        $currentLine = '';
+        $prepend = '';
+        $size = $lineLen = 0;
+
+        while (false !== $bytes = $this->nextSequence()) {
+            // If we're filtering the input
+            if (isset($this->filter)) {
+                // If we can't filter because we need more bytes
+                while ($this->filter->shouldBuffer($bytes)) {
+                    // Then collect bytes into the buffer
+                    if (false === $moreBytes = $this->nextSequence(1)) {
+                        break;
+                    }
+
+                    foreach ($moreBytes as $b) {
+                        $bytes[] = $b;
+                    }
+                }
+                // And filter them
+                $bytes = $this->filter->filter($bytes);
+            }
+
+            $enc = $this->encodeByteSequence($bytes, $size);
+
+            $i = strpos($enc, '=0D=0A');
+            $newLineLength = $lineLen + ($i === false ? $size : $i);
+
+            if ($currentLine && $newLineLength >= $thisLineLength) {
+                $is->write($prepend.$this->standardize($currentLine));
+                $currentLine = '';
+                $prepend = "=\r\n";
+                $thisLineLength = $maxLineLength;
+                $lineLen = 0;
+            }
+
+            $currentLine .= $enc;
+
+            if ($i === false) {
+                $lineLen += $size;
+            } else {
+                // 6 is the length of '=0D=0A'.
+                $lineLen = $size - strrpos($enc, '=0D=0A') - 6;
+            }
+        }
+        if (strlen($currentLine)) {
+            $is->write($prepend.$this->standardize($currentLine));
+        }
+    }
+
+    /**
+     * Get the name of this encoding scheme.
+     * Returns the string 'quoted-printable'.
+     *
+     * @return string
+     */
+    public function getName()
+    {
+        return 'quoted-printable';
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/QpContentEncoderProxy.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/QpContentEncoderProxy.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/QpContentEncoderProxy.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/QpContentEncoderProxy.php	(date 1495187412000)
@@ -0,0 +1,98 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Proxy for quoted-printable content encoders.
+ *
+ * Switches on the best QP encoder implementation for current charset.
+ *
+ * @author Jean-François Simon <jeanfrancois.simon@sensiolabs.com>
+ */
+class Swift_Mime_ContentEncoder_QpContentEncoderProxy implements Swift_Mime_ContentEncoder
+{
+    /**
+     * @var Swift_Mime_ContentEncoder_QpContentEncoder
+     */
+    private $safeEncoder;
+
+    /**
+     * @var Swift_Mime_ContentEncoder_NativeQpContentEncoder
+     */
+    private $nativeEncoder;
+
+    /**
+     * @var null|string
+     */
+    private $charset;
+
+    /**
+     * Constructor.
+     *
+     * @param Swift_Mime_ContentEncoder_QpContentEncoder       $safeEncoder
+     * @param Swift_Mime_ContentEncoder_NativeQpContentEncoder $nativeEncoder
+     * @param string|null                                      $charset
+     */
+    public function __construct(Swift_Mime_ContentEncoder_QpContentEncoder $safeEncoder, Swift_Mime_ContentEncoder_NativeQpContentEncoder $nativeEncoder, $charset)
+    {
+        $this->safeEncoder = $safeEncoder;
+        $this->nativeEncoder = $nativeEncoder;
+        $this->charset = $charset;
+    }
+
+    /**
+     * Make a deep copy of object.
+     */
+    public function __clone()
+    {
+        $this->safeEncoder = clone $this->safeEncoder;
+        $this->nativeEncoder = clone $this->nativeEncoder;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function charsetChanged($charset)
+    {
+        $this->charset = $charset;
+        $this->safeEncoder->charsetChanged($charset);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function encodeByteStream(Swift_OutputByteStream $os, Swift_InputByteStream $is, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        $this->getEncoder()->encodeByteStream($os, $is, $firstLineOffset, $maxLineLength);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getName()
+    {
+        return 'quoted-printable';
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        return $this->getEncoder()->encodeString($string, $firstLineOffset, $maxLineLength);
+    }
+
+    /**
+     * @return Swift_Mime_ContentEncoder
+     */
+    private function getEncoder()
+    {
+        return 'utf-8' === $this->charset ? $this->nativeEncoder : $this->safeEncoder;
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/UnstructuredHeader.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/UnstructuredHeader.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/UnstructuredHeader.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/UnstructuredHeader.php	(date 1495187412000)
@@ -0,0 +1,110 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A Simple MIME Header.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_Headers_UnstructuredHeader extends Swift_Mime_Headers_AbstractHeader
+{
+    /**
+     * The value of this Header.
+     *
+     * @var string
+     */
+    private $value;
+
+    /**
+     * Creates a new SimpleHeader with $name.
+     *
+     * @param string                   $name
+     * @param Swift_Mime_HeaderEncoder $encoder
+     */
+    public function __construct($name, Swift_Mime_HeaderEncoder $encoder)
+    {
+        $this->setFieldName($name);
+        $this->setEncoder($encoder);
+    }
+
+    /**
+     * Get the type of Header that this instance represents.
+     *
+     * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
+     * @see TYPE_DATE, TYPE_ID, TYPE_PATH
+     *
+     * @return int
+     */
+    public function getFieldType()
+    {
+        return self::TYPE_TEXT;
+    }
+
+    /**
+     * Set the model for the field body.
+     *
+     * This method takes a string for the field value.
+     *
+     * @param string $model
+     */
+    public function setFieldBodyModel($model)
+    {
+        $this->setValue($model);
+    }
+
+    /**
+     * Get the model for the field body.
+     *
+     * This method returns a string.
+     *
+     * @return string
+     */
+    public function getFieldBodyModel()
+    {
+        return $this->getValue();
+    }
+
+    /**
+     * Get the (unencoded) value of this header.
+     *
+     * @return string
+     */
+    public function getValue()
+    {
+        return $this->value;
+    }
+
+    /**
+     * Set the (unencoded) value of this header.
+     *
+     * @param string $value
+     */
+    public function setValue($value)
+    {
+        $this->clearCachedValueIf($this->value != $value);
+        $this->value = $value;
+    }
+
+    /**
+     * Get the value of this header prepared for rendering.
+     *
+     * @return string
+     */
+    public function getFieldBody()
+    {
+        if (!$this->getCachedValue()) {
+            $this->setCachedValue(
+                $this->encodeWords($this, $this->value)
+                );
+        }
+
+        return $this->getCachedValue();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/Base64HeaderEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/Base64HeaderEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/Base64HeaderEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/Base64HeaderEncoder.php	(date 1495187412000)
@@ -0,0 +1,55 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles Base64 (B) Header Encoding in Swift Mailer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_HeaderEncoder_Base64HeaderEncoder extends Swift_Encoder_Base64Encoder implements Swift_Mime_HeaderEncoder
+{
+    /**
+     * Get the name of this encoding scheme.
+     * Returns the string 'B'.
+     *
+     * @return string
+     */
+    public function getName()
+    {
+        return 'B';
+    }
+
+    /**
+     * Takes an unencoded string and produces a Base64 encoded string from it.
+     *
+     * If the charset is iso-2022-jp, it uses mb_encode_mimeheader instead of
+     * default encodeString, otherwise pass to the parent method.
+     *
+     * @param string $string          string to encode
+     * @param int    $firstLineOffset
+     * @param int    $maxLineLength   optional, 0 indicates the default of 76 bytes
+     * @param string $charset
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0, $charset = 'utf-8')
+    {
+        if (strtolower($charset) === 'iso-2022-jp') {
+            $old = mb_internal_encoding();
+            mb_internal_encoding('utf-8');
+            $newstring = mb_encode_mimeheader($string, $charset, $this->getName(), "\r\n");
+            mb_internal_encoding($old);
+
+            return $newstring;
+        }
+
+        return parent::encodeString($string, $firstLineOffset, $maxLineLength);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/QpHeaderEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/QpHeaderEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/QpHeaderEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/HeaderEncoder/QpHeaderEncoder.php	(date 1495187412000)
@@ -0,0 +1,65 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles Quoted Printable (Q) Header Encoding in Swift Mailer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_HeaderEncoder_QpHeaderEncoder extends Swift_Encoder_QpEncoder implements Swift_Mime_HeaderEncoder
+{
+    /**
+     * Creates a new QpHeaderEncoder for the given CharacterStream.
+     *
+     * @param Swift_CharacterStream $charStream to use for reading characters
+     */
+    public function __construct(Swift_CharacterStream $charStream)
+    {
+        parent::__construct($charStream);
+    }
+
+    protected function initSafeMap()
+    {
+        foreach (array_merge(
+            range(0x61, 0x7A), range(0x41, 0x5A),
+            range(0x30, 0x39), array(0x20, 0x21, 0x2A, 0x2B, 0x2D, 0x2F)
+        ) as $byte) {
+            $this->safeMap[$byte] = chr($byte);
+        }
+    }
+
+    /**
+     * Get the name of this encoding scheme.
+     *
+     * Returns the string 'Q'.
+     *
+     * @return string
+     */
+    public function getName()
+    {
+        return 'Q';
+    }
+
+    /**
+     * Takes an unencoded string and produces a QP encoded string from it.
+     *
+     * @param string $string          string to encode
+     * @param int    $firstLineOffset optional
+     * @param int    $maxLineLength   optional, 0 indicates the default of 76 chars
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        return str_replace(array(' ', '=20', "=\r\n"), array('_', '_', "\r\n"),
+            parent::encodeString($string, $firstLineOffset, $maxLineLength)
+        );
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/Base64ContentEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/Base64ContentEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/Base64ContentEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/Base64ContentEncoder.php	(date 1495187412000)
@@ -0,0 +1,104 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles Base 64 Transfer Encoding in Swift Mailer.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Mime_ContentEncoder_Base64ContentEncoder extends Swift_Encoder_Base64Encoder implements Swift_Mime_ContentEncoder
+{
+    /**
+     * Encode stream $in to stream $out.
+     *
+     * @param Swift_OutputByteStream $os
+     * @param Swift_InputByteStream  $is
+     * @param int                    $firstLineOffset
+     * @param int                    $maxLineLength,  optional, 0 indicates the default of 76 bytes
+     */
+    public function encodeByteStream(Swift_OutputByteStream $os, Swift_InputByteStream $is, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        if (0 >= $maxLineLength || 76 < $maxLineLength) {
+            $maxLineLength = 76;
+        }
+
+        $remainder = 0;
+        $base64ReadBufferRemainderBytes = null;
+
+        // To reduce memory usage, the output buffer is streamed to the input buffer like so:
+        //   Output Stream => base64encode => wrap line length => Input Stream
+        // HOWEVER it's important to note that base64_encode() should only be passed whole triplets of data (except for the final chunk of data)
+        // otherwise it will assume the input data has *ended* and it will incorrectly pad/terminate the base64 data mid-stream.
+        // We use $base64ReadBufferRemainderBytes to carry over 1-2 "remainder" bytes from the each chunk from OutputStream and pre-pend those onto the
+        // chunk of bytes read in the next iteration.
+        // When the OutputStream is empty, we must flush any remainder bytes.
+        while (true) {
+            $readBytes = $os->read(8192);
+            $atEOF = ($readBytes === false);
+
+            if ($atEOF) {
+                $streamTheseBytes = $base64ReadBufferRemainderBytes;
+            } else {
+                $streamTheseBytes = $base64ReadBufferRemainderBytes.$readBytes;
+            }
+            $base64ReadBufferRemainderBytes = null;
+            $bytesLength = strlen($streamTheseBytes);
+
+            if ($bytesLength === 0) { // no data left to encode
+                break;
+            }
+
+            // if we're not on the last block of the ouput stream, make sure $streamTheseBytes ends with a complete triplet of data
+            // and carry over remainder 1-2 bytes to the next loop iteration
+            if (!$atEOF) {
+                $excessBytes = $bytesLength % 3;
+                if ($excessBytes !== 0) {
+                    $base64ReadBufferRemainderBytes = substr($streamTheseBytes, -$excessBytes);
+                    $streamTheseBytes = substr($streamTheseBytes, 0, $bytesLength - $excessBytes);
+                }
+            }
+
+            $encoded = base64_encode($streamTheseBytes);
+            $encodedTransformed = '';
+            $thisMaxLineLength = $maxLineLength - $remainder - $firstLineOffset;
+
+            while ($thisMaxLineLength < strlen($encoded)) {
+                $encodedTransformed .= substr($encoded, 0, $thisMaxLineLength)."\r\n";
+                $firstLineOffset = 0;
+                $encoded = substr($encoded, $thisMaxLineLength);
+                $thisMaxLineLength = $maxLineLength;
+                $remainder = 0;
+            }
+
+            if (0 < $remainingLength = strlen($encoded)) {
+                $remainder += $remainingLength;
+                $encodedTransformed .= $encoded;
+                $encoded = null;
+            }
+
+            $is->write($encodedTransformed);
+
+            if ($atEOF) {
+                break;
+            }
+        }
+    }
+
+    /**
+     * Get the name of this encoding scheme.
+     * Returns the string 'base64'.
+     *
+     * @return string
+     */
+    public function getName()
+    {
+        return 'base64';
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Loggers/EchoLogger.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Loggers/EchoLogger.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Loggers/EchoLogger.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Loggers/EchoLogger.php	(date 1495187412000)
@@ -0,0 +1,58 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Prints all log messages in real time.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_Loggers_EchoLogger implements Swift_Plugins_Logger
+{
+    /** Whether or not HTML should be output */
+    private $isHtml;
+
+    /**
+     * Create a new EchoLogger.
+     *
+     * @param bool $isHtml
+     */
+    public function __construct($isHtml = true)
+    {
+        $this->isHtml = $isHtml;
+    }
+
+    /**
+     * Add a log entry.
+     *
+     * @param string $entry
+     */
+    public function add($entry)
+    {
+        if ($this->isHtml) {
+            printf('%s%s%s', htmlspecialchars($entry, ENT_QUOTES), '<br />', PHP_EOL);
+        } else {
+            printf('%s%s', $entry, PHP_EOL);
+        }
+    }
+
+    /**
+     * Not implemented.
+     */
+    public function clear()
+    {
+    }
+
+    /**
+     * Not implemented.
+     */
+    public function dump()
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Decorator/Replacements.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Decorator/Replacements.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Decorator/Replacements.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Decorator/Replacements.php	(date 1495187412000)
@@ -0,0 +1,31 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Allows customization of Messages on-the-fly.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Plugins_Decorator_Replacements
+{
+    /**
+     * Return the array of replacements for $address.
+     *
+     * This method is invoked once for every single recipient of a message.
+     *
+     * If no replacements can be found, an empty value (NULL) should be returned
+     * and no replacements will then be made on the message.
+     *
+     * @param string $address
+     *
+     * @return array
+     */
+    public function getReplacementsFor($address);
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporters/HitReporter.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporters/HitReporter.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporters/HitReporter.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporters/HitReporter.php	(date 1495187412000)
@@ -0,0 +1,59 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A reporter which "collects" failures for the Reporter plugin.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_Reporters_HitReporter implements Swift_Plugins_Reporter
+{
+    /**
+     * The list of failures.
+     *
+     * @var array
+     */
+    private $failures = array();
+
+    private $failures_cache = array();
+
+    /**
+     * Notifies this ReportNotifier that $address failed or succeeded.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string                   $address
+     * @param int                      $result  from {@link RESULT_PASS, RESULT_FAIL}
+     */
+    public function notify(Swift_Mime_SimpleMessage $message, $address, $result)
+    {
+        if (self::RESULT_FAIL == $result && !isset($this->failures_cache[$address])) {
+            $this->failures[] = $address;
+            $this->failures_cache[$address] = true;
+        }
+    }
+
+    /**
+     * Get an array of addresses for which delivery failed.
+     *
+     * @return array
+     */
+    public function getFailedRecipients()
+    {
+        return $this->failures;
+    }
+
+    /**
+     * Clear the buffer (empty the list).
+     */
+    public function clear()
+    {
+        $this->failures = $this->failures_cache = array();
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporters/HtmlReporter.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporters/HtmlReporter.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporters/HtmlReporter.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Reporters/HtmlReporter.php	(date 1495187412000)
@@ -0,0 +1,39 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * A HTML output reporter for the Reporter plugin.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_Reporters_HtmlReporter implements Swift_Plugins_Reporter
+{
+    /**
+     * Notifies this ReportNotifier that $address failed or succeeded.
+     *
+     * @param Swift_Mime_SimpleMessage $message
+     * @param string                   $address
+     * @param int                      $result  from {@see RESULT_PASS, RESULT_FAIL}
+     */
+    public function notify(Swift_Mime_SimpleMessage $message, $address, $result)
+    {
+        if (self::RESULT_PASS == $result) {
+            echo '<div style="color: #fff; background: #006600; padding: 2px; margin: 2px;">'.PHP_EOL;
+            echo 'PASS '.$address.PHP_EOL;
+            echo '</div>'.PHP_EOL;
+            flush();
+        } else {
+            echo '<div style="color: #fff; background: #880000; padding: 2px; margin: 2px;">'.PHP_EOL;
+            echo 'FAIL '.$address.PHP_EOL;
+            echo '</div>'.PHP_EOL;
+            flush();
+        }
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/RawContentEncoder.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/RawContentEncoder.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/RawContentEncoder.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/RawContentEncoder.php	(date 1495187412000)
@@ -0,0 +1,64 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Handles raw Transfer Encoding in Swift Mailer.
+ *
+ *
+ * @author Sebastiaan Stok <s.stok@rollerscapes.net>
+ */
+class Swift_Mime_ContentEncoder_RawContentEncoder implements Swift_Mime_ContentEncoder
+{
+    /**
+     * Encode a given string to produce an encoded string.
+     *
+     * @param string $string
+     * @param int    $firstLineOffset ignored
+     * @param int    $maxLineLength   ignored
+     *
+     * @return string
+     */
+    public function encodeString($string, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        return $string;
+    }
+
+    /**
+     * Encode stream $in to stream $out.
+     *
+     * @param Swift_OutputByteStream $in
+     * @param Swift_InputByteStream  $out
+     * @param int                    $firstLineOffset ignored
+     * @param int                    $maxLineLength   ignored
+     */
+    public function encodeByteStream(Swift_OutputByteStream $os, Swift_InputByteStream $is, $firstLineOffset = 0, $maxLineLength = 0)
+    {
+        while (false !== ($bytes = $os->read(8192))) {
+            $is->write($bytes);
+        }
+    }
+
+    /**
+     * Get the name of this encoding scheme.
+     *
+     * @return string
+     */
+    public function getName()
+    {
+        return 'raw';
+    }
+
+    /**
+     * Not used.
+     */
+    public function charsetChanged($charset)
+    {
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Pop/Pop3Connection.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Pop/Pop3Connection.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Pop/Pop3Connection.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Pop/Pop3Connection.php	(date 1495187412000)
@@ -0,0 +1,31 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Pop3Connection interface for connecting and disconnecting to a POP3 host.
+ *
+ * @author Chris Corbyn
+ */
+interface Swift_Plugins_Pop_Pop3Connection
+{
+    /**
+     * Connect to the POP3 host and throw an Exception if it fails.
+     *
+     * @throws Swift_Plugins_Pop_Pop3Exception
+     */
+    public function connect();
+
+    /**
+     * Disconnect from the POP3 host and throw an Exception if it fails.
+     *
+     * @throws Swift_Plugins_Pop_Pop3Exception
+     */
+    public function disconnect();
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Pop/Pop3Exception.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Pop/Pop3Exception.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Pop/Pop3Exception.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Pop/Pop3Exception.php	(date 1495187412000)
@@ -0,0 +1,27 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Pop3Exception thrown when an error occurs connecting to a POP3 host.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_Pop_Pop3Exception extends Swift_IoException
+{
+    /**
+     * Create a new Pop3Exception with $message.
+     *
+     * @param string $message
+     */
+    public function __construct($message)
+    {
+        parent::__construct($message);
+    }
+}
Index: vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Loggers/ArrayLogger.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Loggers/ArrayLogger.php b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Loggers/ArrayLogger.php
new file mode 100644
--- /dev/null	(date 1495187412000)
+++ b/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/Loggers/ArrayLogger.php	(date 1495187412000)
@@ -0,0 +1,72 @@
+<?php
+
+/*
+ * This file is part of SwiftMailer.
+ * (c) 2004-2009 Chris Corbyn
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+/**
+ * Logs to an Array backend.
+ *
+ * @author Chris Corbyn
+ */
+class Swift_Plugins_Loggers_ArrayLogger implements Swift_Plugins_Logger
+{
+    /**
+     * The log contents.
+     *
+     * @var array
+     */
+    private $log = array();
+
+    /**
+     * Max size of the log.
+     *
+     * @var int
+     */
+    private $size = 0;
+
+    /**
+     * Create a new ArrayLogger with a maximum of $size entries.
+     *
+     * @var int
+     */
+    public function __construct($size = 50)
+    {
+        $this->size = $size;
+    }
+
+    /**
+     * Add a log entry.
+     *
+     * @param string $entry
+     */
+    public function add($entry)
+    {
+        $this->log[] = $entry;
+        while (count($this->log) > $this->size) {
+            array_shift($this->log);
+        }
+    }
+
+    /**
+     * Clear the log contents.
+     */
+    public function clear()
+    {
+        $this->log = array();
+    }
+
+    /**
+     * Get this log as a string.
+     *
+     * @return string
+     */
+    public function dump()
+    {
+        return implode(PHP_EOL, $this->log);
+    }
+}
